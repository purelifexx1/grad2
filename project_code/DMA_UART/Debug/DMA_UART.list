
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ae3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  0801afd0  0801afd0  0002afd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b758  0801b758  00030b7c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b758  0801b758  0002b758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b760  0801b760  00030b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b760  0801b760  0002b760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b764  0801b764  0002b764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b7c  20000000  0801b768  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ff0  20000b80  0801c2e4  00030b80  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006b70  0801c2e4  00036b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f86c  00000000  00000000  00030bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006339  00000000  00000000  00060418  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001db0  00000000  00000000  00066758  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd0  00000000  00000000  00068508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c23  00000000  00000000  0006a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f601  00000000  00000000  00093cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dda9c  00000000  00000000  000b32fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00190d98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bc0  00000000  00000000  00190e14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b80 	.word	0x20000b80
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801afb4 	.word	0x0801afb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b84 	.word	0x20000b84
 80001cc:	0801afb4 	.word	0x0801afb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};

Position_DataType position_type;
Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    Robot_CommandTypedef command_id = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    duty_cmd->id_command = command_id;
 8000fa6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch(protocol_id) 
 8000fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 832e 	beq.w	8001618 <commandRead+0x690>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f040 8329 	bne.w	8001614 <commandRead+0x68c>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
            switch(command_id)
 8000fc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fc6:	2b19      	cmp	r3, #25
 8000fc8:	f200 8322 	bhi.w	8001610 <commandRead+0x688>
 8000fcc:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <commandRead+0x4c>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	0800103d 	.word	0x0800103d
 8000fd8:	08001053 	.word	0x08001053
 8000fdc:	08001069 	.word	0x08001069
 8000fe0:	0800112d 	.word	0x0800112d
 8000fe4:	08001303 	.word	0x08001303
 8000fe8:	08001307 	.word	0x08001307
 8000fec:	0800130b 	.word	0x0800130b
 8000ff0:	0800130f 	.word	0x0800130f
 8000ff4:	08001611 	.word	0x08001611
 8000ff8:	08001349 	.word	0x08001349
 8000ffc:	08001367 	.word	0x08001367
 8001000:	080013d3 	.word	0x080013d3
 8001004:	0800148d 	.word	0x0800148d
 8001008:	08001611 	.word	0x08001611
 800100c:	08001611 	.word	0x08001611
 8001010:	08001611 	.word	0x08001611
 8001014:	08001611 	.word	0x08001611
 8001018:	08001611 	.word	0x08001611
 800101c:	08001611 	.word	0x08001611
 8001020:	08001611 	.word	0x08001611
 8001024:	08001431 	.word	0x08001431
 8001028:	0800145b 	.word	0x0800145b
 800102c:	08001611 	.word	0x08001611
 8001030:	08001611 	.word	0x08001611
 8001034:	080014c7 	.word	0x080014c7
 8001038:	080015dd 	.word	0x080015dd
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2201      	movs	r2, #1
 8001046:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 800104e:	2300      	movs	r3, #0
 8001050:	e2e3      	b.n	800161a <commandRead+0x692>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2201      	movs	r2, #1
 8001056:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2201      	movs	r2, #1
 800105c:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001064:	2301      	movs	r3, #1
 8001066:	e2d8      	b.n	800161a <commandRead+0x692>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 10){ // 2 int32_t number + 2 define byte
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b0a      	cmp	r3, #10
 800106c:	d15c      	bne.n	8001128 <commandRead+0x1a0>
                        // memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
						// memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
						temp_pointer = -2;
 800106e:	f06f 0301 	mvn.w	r3, #1
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->v_factor = (*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	3304      	adds	r3, #4
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108a:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001338 <commandRead+0x3b0>
 800108e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001092:	ee17 0a90 	vmov	r0, s15
 8001096:	f7ff fa57 	bl	8000548 <__aeabi_f2d>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						duty_cmd->a_factor = (*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 80010a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001338 <commandRead+0x3b0>
 80010b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010bc:	ee17 0a90 	vmov	r0, s15
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
 80010c4:	4603      	mov	r3, r0
 80010c6:	460c      	mov	r4, r1
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	4c99      	ldr	r4, [pc, #612]	; (800133c <commandRead+0x3b4>)
 80010d6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	4c97      	ldr	r4, [pc, #604]	; (8001340 <commandRead+0x3b8>)
 80010e2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	4c95      	ldr	r4, [pc, #596]	; (8001344 <commandRead+0x3bc>)
 80010ee:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	f04f 0400 	mov.w	r4, #0
 80010fc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2202      	movs	r2, #2
 8001116:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2201      	movs	r2, #1
 800111c:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 8001124:	2302      	movs	r3, #2
 8001126:	e278      	b.n	800161a <commandRead+0x692>
                        return CMD_ERROR;
 8001128:	2316      	movs	r3, #22
 800112a:	e276      	b.n	800161a <commandRead+0x692>
                break;

                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 29){ // 6 int32_t number + 3 byte number + 2 define byte
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	2b1d      	cmp	r3, #29
 8001130:	f040 80e5 	bne.w	80012fe <commandRead+0x376>
						//scaraSetScanFlag();
						uint8_t mode_init;
						temp_pointer = -2;
 8001134:	f06f 0301 	mvn.w	r3, #1
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c

						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113c:	3304      	adds	r3, #4
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9eb 	bl	8000524 <__aeabi_i2d>
 800114e:	a378      	add	r3, pc, #480	; (adr r3, 8001330 <commandRead+0x3a8>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa50 	bl	80005f8 <__aeabi_dmul>
 8001158:	4603      	mov	r3, r0
 800115a:	460c      	mov	r4, r1
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001164:	3304      	adds	r3, #4
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9d7 	bl	8000524 <__aeabi_i2d>
 8001176:	a36e      	add	r3, pc, #440	; (adr r3, 8001330 <commandRead+0x3a8>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa3c 	bl	80005f8 <__aeabi_dmul>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	3304      	adds	r3, #4
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4413      	add	r3, r2
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9c3 	bl	8000524 <__aeabi_i2d>
 800119e:	a364      	add	r3, pc, #400	; (adr r3, 8001330 <commandRead+0x3a8>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff fa28 	bl	80005f8 <__aeabi_dmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	460c      	mov	r4, r1
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80011b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b4:	3304      	adds	r3, #4
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9af 	bl	8000524 <__aeabi_i2d>
 80011c6:	a35a      	add	r3, pc, #360	; (adr r3, 8001330 <commandRead+0x3a8>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fa14 	bl	80005f8 <__aeabi_dmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->v_factor = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	3304      	adds	r3, #4
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f99b 	bl	8000524 <__aeabi_i2d>
 80011ee:	a350      	add	r3, pc, #320	; (adr r3, 8001330 <commandRead+0x3a8>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff fa00 	bl	80005f8 <__aeabi_dmul>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
						mode_init = message[temp_pointer+=4];
 8001202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001204:	3304      	adds	r3, #4
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 8001212:	7cfb      	ldrb	r3, [r7, #19]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d117      	bne.n	8001248 <commandRead+0x2c0>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	745a      	strb	r2, [r3, #17]
							duty_cmd->a_factor = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 800121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001220:	3301      	adds	r3, #1
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4413      	add	r3, r2
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f979 	bl	8000524 <__aeabi_i2d>
 8001232:	a33f      	add	r3, pc, #252	; (adr r3, 8001330 <commandRead+0x3a8>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9de 	bl	80005f8 <__aeabi_dmul>
 800123c:	4603      	mov	r3, r0
 800123e:	460c      	mov	r4, r1
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
 8001246:	e037      	b.n	80012b8 <commandRead+0x330>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001248:	7cfb      	ldrb	r3, [r7, #19]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d117      	bne.n	800127e <commandRead+0x2f6>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	3301      	adds	r3, #1
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f95e 	bl	8000524 <__aeabi_i2d>
 8001268:	a331      	add	r3, pc, #196	; (adr r3, 8001330 <commandRead+0x3a8>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f9c3 	bl	80005f8 <__aeabi_dmul>
 8001272:	4603      	mov	r3, r0
 8001274:	460c      	mov	r4, r1
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800127c:	e01c      	b.n	80012b8 <commandRead+0x330>
						}else if(mode_init == DUTY_MODE_INIT_QT){
 800127e:	7cfb      	ldrb	r3, [r7, #19]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d117      	bne.n	80012b4 <commandRead+0x32c>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QT;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	2203      	movs	r2, #3
 8001288:	745a      	strb	r2, [r3, #17]
							duty_cmd->time_total = (double)(*(int32_t*)(&message[temp_pointer+=1]))*COR_INVERSE_SCALE;
 800128a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128c:	3301      	adds	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4413      	add	r3, r2
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f943 	bl	8000524 <__aeabi_i2d>
 800129e:	a324      	add	r3, pc, #144	; (adr r3, 8001330 <commandRead+0x3a8>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9a8 	bl	80005f8 <__aeabi_dmul>
 80012a8:	4603      	mov	r3, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80012b2:	e001      	b.n	80012b8 <commandRead+0x330>
						}else{
							return CMD_ERROR;
 80012b4:	2316      	movs	r3, #22
 80012b6:	e1b0      	b.n	800161a <commandRead+0x692>
						}
						duty_cmd->coordinate_type = message[temp_pointer+=4];
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	3304      	adds	r3, #4
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = message[temp_pointer+=1];
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	3301      	adds	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	781a      	ldrb	r2, [r3, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	741a      	strb	r2, [r3, #16]
						duty_cmd->path_type = DUTY_PATH_LINE;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	735a      	strb	r2, [r3, #13]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2202      	movs	r2, #2
 80012ec:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2201      	movs	r2, #1
 80012f2:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_LINE;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e18d      	b.n	800161a <commandRead+0x692>
						return CMD_ERROR;
 80012fe:	2316      	movs	r3, #22
 8001300:	e18b      	b.n	800161a <commandRead+0x692>
				break;

				// Move circle
				case CMD_MOVE_CIRCLE:
				{
					return CMD_MOVE_CIRCLE;
 8001302:	2304      	movs	r3, #4
 8001304:	e189      	b.n	800161a <commandRead+0x692>
				break;

				// Move joint
				case CMD_MOVE_JOINT:
				{
					return CMD_MOVE_JOINT;
 8001306:	2305      	movs	r3, #5
 8001308:	e187      	b.n	800161a <commandRead+0x692>
				break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 800130a:	2306      	movs	r3, #6
 800130c:	e185      	b.n	800161a <commandRead+0x692>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d10a      	bne.n	800132a <commandRead+0x3a2>
						temp_pointer = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->sub_para_int = message[temp_pointer];
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 8001326:	2307      	movs	r3, #7
 8001328:	e177      	b.n	800161a <commandRead+0x692>
					}else{
						return CMD_ERROR;
 800132a:	2316      	movs	r3, #22
 800132c:	e175      	b.n	800161a <commandRead+0x692>
 800132e:	bf00      	nop
 8001330:	a0000000 	.word	0xa0000000
 8001334:	3eb0c6f7 	.word	0x3eb0c6f7
 8001338:	358637bd 	.word	0x358637bd
 800133c:	406f4000 	.word	0x406f4000
 8001340:	c0690000 	.word	0xc0690000
 8001344:	405e0000 	.word	0x405e0000
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					if(length == 3){ // 1 byte categorize read type + 2 byte define
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d109      	bne.n	8001362 <commandRead+0x3da>
						temp_pointer = 2;
 800134e:	2302      	movs	r3, #2
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
						position_type = message[temp_pointer];
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	781a      	ldrb	r2, [r3, #0]
 800135a:	4b9f      	ldr	r3, [pc, #636]	; (80015d8 <commandRead+0x650>)
 800135c:	701a      	strb	r2, [r3, #0]
						return CMD_READ_POSITION;
 800135e:	2309      	movs	r3, #9
 8001360:	e15b      	b.n	800161a <commandRead+0x692>
					}else{
						return CMD_ERROR;
 8001362:	2316      	movs	r3, #22
 8001364:	e159      	b.n	800161a <commandRead+0x692>
				break;			

				// Setting
				case CMD_SETTING:
				{
					if (length == 4){ // 2 byte configure + 2 byte define
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d130      	bne.n	80013ce <commandRead+0x446>
						uint8_t mode_traject;
						uint8_t mode_coordinate;
						temp_pointer = 2;
 800136c:	2302      	movs	r3, #2
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
						mode_coordinate = message[temp_pointer++];
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	757b      	strb	r3, [r7, #21]
						mode_traject = message[temp_pointer];
 8001380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	753b      	strb	r3, [r7, #20]

						if (mode_coordinate == DUTY_COORDINATES_ABS) {
 800138a:	7d7b      	ldrb	r3, [r7, #21]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d103      	bne.n	8001398 <commandRead+0x410>
							duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2200      	movs	r2, #0
 8001394:	731a      	strb	r2, [r3, #12]
 8001396:	e008      	b.n	80013aa <commandRead+0x422>
						} else if (mode_coordinate == DUTY_COORDINATES_REL) {
 8001398:	7d7b      	ldrb	r3, [r7, #21]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d103      	bne.n	80013a6 <commandRead+0x41e>
							duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	731a      	strb	r2, [r3, #12]
 80013a4:	e001      	b.n	80013aa <commandRead+0x422>
						} else {
							return CMD_ERROR;
 80013a6:	2316      	movs	r3, #22
 80013a8:	e137      	b.n	800161a <commandRead+0x692>
						}

						if (mode_traject == DUTY_TRAJECTORY_LSPB) {
 80013aa:	7d3b      	ldrb	r3, [r7, #20]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d103      	bne.n	80013b8 <commandRead+0x430>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	741a      	strb	r2, [r3, #16]
 80013b6:	e008      	b.n	80013ca <commandRead+0x442>
						} else if (mode_traject == DUTY_TRAJECTORY_SCURVE) {
 80013b8:	7d3b      	ldrb	r3, [r7, #20]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d103      	bne.n	80013c6 <commandRead+0x43e>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2201      	movs	r2, #1
 80013c2:	741a      	strb	r2, [r3, #16]
 80013c4:	e001      	b.n	80013ca <commandRead+0x442>
						} else {
							return CMD_ERROR;
 80013c6:	2316      	movs	r3, #22
 80013c8:	e127      	b.n	800161a <commandRead+0x692>
						}
						return CMD_SETTING;
 80013ca:	230a      	movs	r3, #10
 80013cc:	e125      	b.n	800161a <commandRead+0x692>
					}else{
						return CMD_ERROR;
 80013ce:	2316      	movs	r3, #22
 80013d0:	e123      	b.n	800161a <commandRead+0x692>
				break;

				// Change method
				case CMD_METHOD_CHANGE:
				{
					if(length == 3){ // 1 byte configure + 2 byte define
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d129      	bne.n	800142c <commandRead+0x4a4>
						uint8_t method;
						temp_pointer = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
						method = message[temp_pointer];
 80013dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	75bb      	strb	r3, [r7, #22]
						if (SCARA_METHOD_MANUAL == method) {
 80013e6:	7dbb      	ldrb	r3, [r7, #22]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d103      	bne.n	80013f4 <commandRead+0x46c>
							duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	705a      	strb	r2, [r3, #1]
 80013f2:	e016      	b.n	8001422 <commandRead+0x49a>
						} else if (SCARA_METHOD_SEMI_AUTO == method) {
 80013f4:	7dbb      	ldrb	r3, [r7, #22]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d103      	bne.n	8001402 <commandRead+0x47a>
							duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	705a      	strb	r2, [r3, #1]
 8001400:	e00f      	b.n	8001422 <commandRead+0x49a>
						} else if (SCARA_METHOD_AUTO == method) {
 8001402:	7dbb      	ldrb	r3, [r7, #22]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d103      	bne.n	8001410 <commandRead+0x488>
							duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2202      	movs	r2, #2
 800140c:	705a      	strb	r2, [r3, #1]
 800140e:	e008      	b.n	8001422 <commandRead+0x49a>
						}else if(SCARA_METHOD_TEST == method){
 8001410:	7dbb      	ldrb	r3, [r7, #22]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d103      	bne.n	800141e <commandRead+0x496>
							duty_cmd->robot_method = SCARA_METHOD_TEST;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2203      	movs	r2, #3
 800141a:	705a      	strb	r2, [r3, #1]
 800141c:	e001      	b.n	8001422 <commandRead+0x49a>
						}
						 else {
							return CMD_ERROR;
 800141e:	2316      	movs	r3, #22
 8001420:	e0fb      	b.n	800161a <commandRead+0x692>
						}
						duty_cmd->change_method = TRUE;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
						return CMD_METHOD_CHANGE;
 8001428:	230b      	movs	r3, #11
 800142a:	e0f6      	b.n	800161a <commandRead+0x692>
					}else{
						return CMD_ERROR;
 800142c:	2316      	movs	r3, #22
 800142e:	e0f4      	b.n	800161a <commandRead+0x692>
				break;

				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b03      	cmp	r3, #3
 8001434:	d10f      	bne.n	8001456 <commandRead+0x4ce>
						int temp_pointer = 2;
 8001436:	2302      	movs	r3, #2
 8001438:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 8001452:	2314      	movs	r3, #20
 8001454:	e0e1      	b.n	800161a <commandRead+0x692>
					}else{
						return CMD_ERROR;
 8001456:	2316      	movs	r3, #22
 8001458:	e0df      	b.n	800161a <commandRead+0x692>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d113      	bne.n	8001488 <commandRead+0x500>
						int temp_pointer = 2;
 8001460:	2302      	movs	r3, #2
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	4413      	add	r3, r2
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPEED_MAX)) {
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	2b00      	cmp	r3, #0
 8001472:	dd02      	ble.n	800147a <commandRead+0x4f2>
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	2b07      	cmp	r3, #7
 8001478:	dd01      	ble.n	800147e <commandRead+0x4f6>
							return CMD_ERROR;
 800147a:	2316      	movs	r3, #22
 800147c:	e0cd      	b.n	800161a <commandRead+0x692>
						}
						duty_cmd->key_speed = speed;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	6a3a      	ldr	r2, [r7, #32]
 8001482:	605a      	str	r2, [r3, #4]
						return CMD_KEY_SPEED;
 8001484:	2315      	movs	r3, #21
 8001486:	e0c8      	b.n	800161a <commandRead+0x692>
					}else{
						return CMD_ERROR;
 8001488:	2316      	movs	r3, #22
 800148a:	e0c6      	b.n	800161a <commandRead+0x692>
				break;

				// Set test mode
				case CMD_MOTOR_TEST:
				{
					if(length == 3){ // 1byte key mode + 2 byte define
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d117      	bne.n	80014c2 <commandRead+0x53a>
						int temp_pointer = 2;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
						uint8_t test_key = message[temp_pointer];
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	75fb      	strb	r3, [r7, #23]
						if(test_key < 0 || test_key > 8){
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d901      	bls.n	80014aa <commandRead+0x522>
							return CMD_ERROR;
 80014a6:	2316      	movs	r3, #22
 80014a8:	e0b7      	b.n	800161a <commandRead+0x692>
						}
						duty_cmd->test_key = test_key;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	7dfa      	ldrb	r2, [r7, #23]
 80014ae:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
						duty_cmd->robot_method = SCARA_METHOD_TEST;	
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2203      	movs	r2, #3
 80014b6:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
						return CMD_MOTOR_TEST;
 80014be:	230c      	movs	r3, #12
 80014c0:	e0ab      	b.n	800161a <commandRead+0x692>
					}else{
						return CMD_ERROR;
 80014c2:	2316      	movs	r3, #22
 80014c4:	e0a9      	b.n	800161a <commandRead+0x692>
				}
				break;

				case CMD_OBJECT_DETECTED:
				{
					if (length == 19){ // 4 int32_t number + 1 byte object type + 2 define byte
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b13      	cmp	r3, #19
 80014ca:	d17e      	bne.n	80015ca <commandRead+0x642>
						temp_pointer = -2;
 80014cc:	f06f 0301 	mvn.w	r3, #1
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
						duty_cmd->target_point.x = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d4:	3304      	adds	r3, #4
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4413      	add	r3, r2
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f81f 	bl	8000524 <__aeabi_i2d>
 80014e6:	a33a      	add	r3, pc, #232	; (adr r3, 80015d0 <commandRead+0x648>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7ff f884 	bl	80005f8 <__aeabi_dmul>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
						duty_cmd->target_point.y = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	3304      	adds	r3, #4
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4413      	add	r3, r2
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f80b 	bl	8000524 <__aeabi_i2d>
 800150e:	a330      	add	r3, pc, #192	; (adr r3, 80015d0 <commandRead+0x648>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f870 	bl	80005f8 <__aeabi_dmul>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
						duty_cmd->target_point.z = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	3304      	adds	r3, #4
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4413      	add	r3, r2
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe fff7 	bl	8000524 <__aeabi_i2d>
 8001536:	a326      	add	r3, pc, #152	; (adr r3, 80015d0 <commandRead+0x648>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f85c 	bl	80005f8 <__aeabi_dmul>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
						duty_cmd->target_point.roll = (double)(*(int32_t*)(&message[temp_pointer+=4]))*COR_INVERSE_SCALE;
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	3304      	adds	r3, #4
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4413      	add	r3, r2
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ffe3 	bl	8000524 <__aeabi_i2d>
 800155e:	a31c      	add	r3, pc, #112	; (adr r3, 80015d0 <commandRead+0x648>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff f848 	bl	80005f8 <__aeabi_dmul>
 8001568:	4603      	mov	r3, r0
 800156a:	460c      	mov	r4, r1
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
						duty_cmd->target_point.object_type = message[temp_pointer+=4];
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001574:	3304      	adds	r3, #4
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4413      	add	r3, r2
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
						duty_cmd->target_point.t = (double)(TIM2->CNT);
 8001586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffb9 	bl	8000504 <__aeabi_ui2d>
 8001592:	4603      	mov	r3, r0
 8001594:	460c      	mov	r4, r1
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
						duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2201      	movs	r2, #1
 80015a0:	745a      	strb	r2, [r3, #17]
						duty_cmd->path_type = DUTY_PATH_LINE;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	735a      	strb	r2, [r3, #13]
						duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	731a      	strb	r2, [r3, #12]
						duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	741a      	strb	r2, [r3, #16]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_method = SCARA_METHOD_PICK_AND_PLACE;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2204      	movs	r2, #4
 80015be:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
					return CMD_OBJECT_DETECTED;
 80015c6:	2318      	movs	r3, #24
 80015c8:	e027      	b.n	800161a <commandRead+0x692>
						return CMD_ERROR;
 80015ca:	2316      	movs	r3, #22
 80015cc:	e025      	b.n	800161a <commandRead+0x692>
 80015ce:	bf00      	nop
 80015d0:	a0000000 	.word	0xa0000000
 80015d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80015d8:	20004d60 	.word	0x20004d60
				}
				break;

				case CMD_SETUP_CONVEYOR_SPEED:
				{
					if (length == 6) { // 1 int32_t number + 2 define byte
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d114      	bne.n	800160c <commandRead+0x684>
						temp_pointer = 2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
						conveyor_speed = (double)(*(int32_t*)(&message[temp_pointer]))*COR_INVERSE_SCALE;
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff98 	bl	8000524 <__aeabi_i2d>
 80015f4:	a30d      	add	r3, pc, #52	; (adr r3, 800162c <commandRead+0x6a4>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fffd 	bl	80005f8 <__aeabi_dmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <commandRead+0x6a0>)
 8001604:	e9c2 3400 	strd	r3, r4, [r2]
						return CMD_SETUP_CONVEYOR_SPEED;
 8001608:	2319      	movs	r3, #25
 800160a:	e006      	b.n	800161a <commandRead+0x692>
					}else{
						return CMD_ERROR;
 800160c:	2316      	movs	r3, #22
 800160e:	e004      	b.n	800161a <commandRead+0x692>
				break;

				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001610:	2316      	movs	r3, #22
 8001612:	e002      	b.n	800161a <commandRead+0x692>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 8001614:	2317      	movs	r3, #23
 8001616:	e000      	b.n	800161a <commandRead+0x692>
        break;
 8001618:	bf00      	nop
        }
    }
}
 800161a:	4618      	mov	r0, r3
 800161c:	3734      	adds	r7, #52	; 0x34
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}
 8001622:	bf00      	nop
 8001624:	f3af 8000 	nop.w
 8001628:	20000ba0 	.word	0x20000ba0
 800162c:	a0000000 	.word	0xa0000000
 8001630:	3eb0c6f7 	.word	0x3eb0c6f7

08001634 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 8001634:	b082      	sub	sp, #8
 8001636:	b580      	push	{r7, lr}
 8001638:	b0e2      	sub	sp, #392	; 0x188
 800163a:	af2e      	add	r7, sp, #184	; 0xb8
 800163c:	4601      	mov	r1, r0
 800163e:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001642:	e880 000c 	stmia.w	r0, {r2, r3}
 8001646:	460b      	mov	r3, r1
 8001648:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b19      	cmp	r3, #25
 800164e:	f200 8188 	bhi.w	8001962 <commandReply+0x32e>
 8001652:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <commandReply+0x24>)
 8001654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001658:	080016c1 	.word	0x080016c1
 800165c:	080016c1 	.word	0x080016c1
 8001660:	080016c1 	.word	0x080016c1
 8001664:	080016c1 	.word	0x080016c1
 8001668:	080016c1 	.word	0x080016c1
 800166c:	080016c1 	.word	0x080016c1
 8001670:	080016c1 	.word	0x080016c1
 8001674:	080016c9 	.word	0x080016c9
 8001678:	08001743 	.word	0x08001743
 800167c:	08001777 	.word	0x08001777
 8001680:	0800180d 	.word	0x0800180d
 8001684:	080018e9 	.word	0x080018e9
 8001688:	080016c1 	.word	0x080016c1
 800168c:	08001985 	.word	0x08001985
 8001690:	08001985 	.word	0x08001985
 8001694:	08001985 	.word	0x08001985
 8001698:	08001985 	.word	0x08001985
 800169c:	08001985 	.word	0x08001985
 80016a0:	08001985 	.word	0x08001985
 80016a4:	080018f1 	.word	0x080018f1
 80016a8:	080018f9 	.word	0x080018f9
 80016ac:	08001901 	.word	0x08001901
 80016b0:	08001941 	.word	0x08001941
 80016b4:	08001963 	.word	0x08001963
 80016b8:	080016c1 	.word	0x080016c1
 80016bc:	080018e1 	.word	0x080018e1
	case CMD_MOTOR_TEST:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_OBJECT_DETECTED:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80016c0:	2309      	movs	r3, #9
 80016c2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80016c6:	e15e      	b.n	8001986 <commandReply+0x352>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80016c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d110      	bne.n	80016f2 <commandReply+0xbe>
				scaraSetOutput(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f008 fe8d 	bl	800a3f0 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 80016d6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	1c59      	adds	r1, r3, #1
 80016de:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80016e2:	6011      	str	r1, [r2, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80016ea:	4413      	add	r3, r2
 80016ec:	220d      	movs	r2, #13
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e023      	b.n	800173a <commandReply+0x106>
			} else if (0 == duty_cmd.sub_para_int) {
 80016f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d110      	bne.n	800171c <commandReply+0xe8>
				scaraSetOutput(0);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f008 fe78 	bl	800a3f0 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 8001700:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	1c59      	adds	r1, r3, #1
 8001708:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800170c:	6011      	str	r1, [r2, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001714:	4413      	add	r3, r2
 8001716:	220e      	movs	r2, #14
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e00e      	b.n	800173a <commandReply+0x106>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 800171c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	1c59      	adds	r1, r3, #1
 8001724:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001728:	6011      	str	r1, [r2, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001730:	4413      	add	r3, r2
 8001732:	220f      	movs	r2, #15
 8001734:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 8001736:	2307      	movs	r3, #7
 8001738:	e127      	b.n	800198a <commandReply+0x356>
			}
			ret = RPD_OK;
 800173a:	2308      	movs	r3, #8
 800173c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 8001740:	e121      	b.n	8001986 <commandReply+0x352>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001742:	f008 feb7 	bl	800a4b4 <scaraGetMode>
 8001746:	4603      	mov	r3, r0
 8001748:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			current_state	 = scaraGetDutyState();
 800174c:	f008 feca 	bl	800a4e4 <scaraGetDutyState>
 8001750:	4603      	mov	r3, r0
 8001752:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001756:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800175a:	2b02      	cmp	r3, #2
 800175c:	d107      	bne.n	800176e <commandReply+0x13a>
 800175e:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <commandReply+0x13a>
				ret = RPD_IDLE;
 8001766:	2300      	movs	r3, #0
 8001768:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 800176c:	e10b      	b.n	8001986 <commandReply+0x352>
				ret = RPD_BUSY;
 800176e:	2301      	movs	r3, #1
 8001770:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001774:	e107      	b.n	8001986 <commandReply+0x352>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			if(position_type == REAL_POSITION_DATA || position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 8001776:	4b88      	ldr	r3, [pc, #544]	; (8001998 <commandReply+0x364>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <commandReply+0x152>
 800177e:	4b86      	ldr	r3, [pc, #536]	; (8001998 <commandReply+0x364>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d113      	bne.n	80017ae <commandReply+0x17a>
				lowlayer_readTruePosition(&position);
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	4618      	mov	r0, r3
 800178c:	f002 feac 	bl	80044e8 <lowlayer_readTruePosition>
				kinematicForward(&position);
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	4618      	mov	r0, r3
 8001796:	f001 ffb3 	bl	8003700 <kinematicForward>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 800179a:	4b7f      	ldr	r3, [pc, #508]	; (8001998 <commandReply+0x364>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d11e      	bne.n	80017e0 <commandReply+0x1ac>
					scaraUpdatePosition(&position);
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	4618      	mov	r0, r3
 80017a8:	f008 fe74 	bl	800a494 <scaraUpdatePosition>
				if(position_type == REAL_POSITION_DATA_PLUS_UPDATE){
 80017ac:	e018      	b.n	80017e0 <commandReply+0x1ac>
				}
			}else if(position_type == ESTIMATE_POSITION_DATA){
 80017ae:	4b7a      	ldr	r3, [pc, #488]	; (8001998 <commandReply+0x364>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d105      	bne.n	80017c2 <commandReply+0x18e>
				scaraGetPosition(&position);
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	4618      	mov	r0, r3
 80017bc:	f008 fe5a 	bl	800a474 <scaraGetPosition>
 80017c0:	e00e      	b.n	80017e0 <commandReply+0x1ac>
			}else{
				detail[(*detail_length)++] = WRONG_READ_POSITION_TYPE;
 80017c2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	1c59      	adds	r1, r3, #1
 80017ca:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80017ce:	6011      	str	r1, [r2, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80017d6:	4413      	add	r3, r2
 80017d8:	2210      	movs	r2, #16
 80017da:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80017dc:	2307      	movs	r3, #7
 80017de:	e0d4      	b.n	800198a <commandReply+0x356>
			}
			*detail_length = scaraPosition_packaging(detail, position);
 80017e0:	4668      	mov	r0, sp
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	22b8      	movs	r2, #184	; 0xb8
 80017e8:	4619      	mov	r1, r3
 80017ea:	f014 f97f 	bl	8015aec <memcpy>
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	cb0c      	ldmia	r3, {r2, r3}
 80017f4:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 80017f8:	f008 feaa 	bl	800a550 <scaraPosition_packaging>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001802:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 8001804:	2302      	movs	r3, #2
 8001806:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		break;
 800180a:	e0bc      	b.n	8001986 <commandReply+0x352>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 800180c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10d      	bne.n	8001830 <commandReply+0x1fc>
			// strcpy( (char *)detail, "ABSOLUTE.");
			// detail_length += 9;
			detail[(*detail_length)++] = ABSOLUTE;
 8001814:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1c59      	adds	r1, r3, #1
 800181c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001820:	6011      	str	r1, [r2, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001828:	4413      	add	r3, r2
 800182a:	2211      	movs	r2, #17
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	e020      	b.n	8001872 <commandReply+0x23e>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 8001830:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001834:	2b01      	cmp	r3, #1
 8001836:	d10d      	bne.n	8001854 <commandReply+0x220>
			detail[(*detail_length)++] = RELATIVE;
 8001838:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1c59      	adds	r1, r3, #1
 8001840:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001844:	6011      	str	r1, [r2, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800184c:	4413      	add	r3, r2
 800184e:	2212      	movs	r2, #18
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e00e      	b.n	8001872 <commandReply+0x23e>
		} else {
			detail[(*detail_length)++] = WRONG_COORDINATE;
 8001854:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	1c59      	adds	r1, r3, #1
 800185c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001860:	6011      	str	r1, [r2, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001868:	4413      	add	r3, r2
 800186a:	220c      	movs	r2, #12
 800186c:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 800186e:	2307      	movs	r3, #7
 8001870:	e08b      	b.n	800198a <commandReply+0x356>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001872:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10d      	bne.n	8001896 <commandReply+0x262>
			detail[(*detail_length)++] = LSPB;
 800187a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	1c59      	adds	r1, r3, #1
 8001882:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001886:	6011      	str	r1, [r2, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800188e:	4413      	add	r3, r2
 8001890:	2213      	movs	r2, #19
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e020      	b.n	80018d8 <commandReply+0x2a4>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001896:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 800189a:	2b01      	cmp	r3, #1
 800189c:	d10d      	bne.n	80018ba <commandReply+0x286>
			detail[(*detail_length)++] = S_CURVE;
 800189e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	1c59      	adds	r1, r3, #1
 80018a6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80018aa:	6011      	str	r1, [r2, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80018b2:	4413      	add	r3, r2
 80018b4:	2214      	movs	r2, #20
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	e00e      	b.n	80018d8 <commandReply+0x2a4>
		} else {
			detail[(*detail_length)++] = WRONG_TRAJECTORY_TYPE;
 80018ba:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	1c59      	adds	r1, r3, #1
 80018c2:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80018c6:	6011      	str	r1, [r2, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80018ce:	4413      	add	r3, r2
 80018d0:	2205      	movs	r2, #5
 80018d2:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 80018d4:	2307      	movs	r3, #7
 80018d6:	e058      	b.n	800198a <commandReply+0x356>
		}		
		ret = RPD_OK;
 80018d8:	2308      	movs	r3, #8
 80018da:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018de:	e052      	b.n	8001986 <commandReply+0x352>
	case CMD_SETUP_CONVEYOR_SPEED:
		ret = RPD_OK;
 80018e0:	2308      	movs	r3, #8
 80018e2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018e6:	e04e      	b.n	8001986 <commandReply+0x352>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 80018e8:	2309      	movs	r3, #9
 80018ea:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018ee:	e04a      	b.n	8001986 <commandReply+0x352>
	case CMD_JOB_PUSH_OUTPUT:
		break;
	case CMD_JOB_TEST:
		break;
	case CMD_JOB_RUN:
		ret = RPD_DUTY;
 80018f0:	2309      	movs	r3, #9
 80018f2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018f6:	e046      	b.n	8001986 <commandReply+0x352>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 80018f8:	2309      	movs	r3, #9
 80018fa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 80018fe:	e042      	b.n	8001986 <commandReply+0x352>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 8001900:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	1c59      	adds	r1, r3, #1
 8001908:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800190c:	6011      	str	r1, [r2, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001914:	4413      	add	r3, r2
 8001916:	2216      	movs	r2, #22
 8001918:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 800191a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800191e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	1c59      	adds	r1, r3, #1
 8001926:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800192a:	6011      	str	r1, [r2, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001932:	4413      	add	r3, r2
 8001934:	b2c2      	uxtb	r2, r0
 8001936:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8001938:	2308      	movs	r3, #8
 800193a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 800193e:	e022      	b.n	8001986 <commandReply+0x352>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 8001940:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	1c59      	adds	r1, r3, #1
 8001948:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800194c:	6011      	str	r1, [r2, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001954:	4413      	add	r3, r2
 8001956:	2215      	movs	r2, #21
 8001958:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800195a:	2307      	movs	r3, #7
 800195c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		break;
 8001960:	e011      	b.n	8001986 <commandReply+0x352>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 8001962:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	1c59      	adds	r1, r3, #1
 800196a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800196e:	6011      	str	r1, [r2, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001976:	4413      	add	r3, r2
 8001978:	2217      	movs	r2, #23
 800197a:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 800197c:	2307      	movs	r3, #7
 800197e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8001982:	e000      	b.n	8001986 <commandReply+0x352>
		break;
 8001984:	bf00      	nop
	}
	return ret;
 8001986:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 800198a:	4618      	mov	r0, r3
 800198c:	37d0      	adds	r7, #208	; 0xd0
 800198e:	46bd      	mov	sp, r7
 8001990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001994:	b002      	add	sp, #8
 8001996:	4770      	bx	lr
 8001998:	20004d60 	.word	0x20004d60

0800199c <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	4603      	mov	r3, r0
 80019aa:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	617a      	str	r2, [r7, #20]
 80019b6:	461a      	mov	r2, r3
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	4413      	add	r3, r2
 80019bc:	2228      	movs	r2, #40	; 0x28
 80019be:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	617a      	str	r2, [r7, #20]
 80019c6:	461a      	mov	r2, r3
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	4413      	add	r3, r2
 80019cc:	2202      	movs	r2, #2
 80019ce:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	617a      	str	r2, [r7, #20]
 80019d6:	461a      	mov	r2, r3
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	4413      	add	r3, r2
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	617a      	str	r2, [r7, #20]
 80019e6:	461a      	mov	r2, r3
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	4413      	add	r3, r2
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00c      	beq.n	8001a12 <commandRespond1+0x76>
		memcpy(&respond[out_length], detail, detail_length);
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	6a3a      	ldr	r2, [r7, #32]
 80019fc:	4413      	add	r3, r2
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f014 f872 	bl	8015aec <memcpy>
		out_length += detail_length;
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e007      	b.n	8001a22 <commandRespond1+0x86>
	}else{
		respond[out_length++] = NONE;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	617a      	str	r2, [r7, #20]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	2222      	movs	r2, #34	; 0x22
 8001a20:	701a      	strb	r2, [r3, #0]
	}
	respond[out_length++] = 0x29;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	617a      	str	r2, [r7, #20]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	2229      	movs	r2, #41	; 0x29
 8001a30:	701a      	strb	r2, [r3, #0]

	return out_length;
 8001a32:	697b      	ldr	r3, [r7, #20]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b096      	sub	sp, #88	; 0x58
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8001a48:	887a      	ldrh	r2, [r7, #2]
 8001a4a:	f107 0008 	add.w	r0, r7, #8
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	4613      	mov	r3, r2
 8001a54:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <LOG_REPORT+0x78>)
 8001a56:	213f      	movs	r1, #63	; 0x3f
 8001a58:	f014 ff7e 	bl	8016958 <sniprintf>
 8001a5c:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d101      	bne.n	8001a6a <LOG_REPORT+0x2e>
		return FALSE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e01f      	b.n	8001aaa <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a70:	4619      	mov	r1, r3
 8001a72:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <LOG_REPORT+0x7c>)
 8001a74:	f002 fa89 	bl	8003f8a <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8001a78:	4810      	ldr	r0, [pc, #64]	; (8001abc <LOG_REPORT+0x80>)
 8001a7a:	f00a f835 	bl	800bae8 <HAL_DMA_GetState>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d101      	bne.n	8001a88 <LOG_REPORT+0x4c>
		return TRUE;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e010      	b.n	8001aaa <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8001a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <LOG_REPORT+0x84>)
 8001a8e:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <LOG_REPORT+0x7c>)
 8001a90:	f002 faa3 	bl	8003fda <ringBuff_PopArray>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8001a9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <LOG_REPORT+0x84>)
 8001aa2:	4808      	ldr	r0, [pc, #32]	; (8001ac4 <LOG_REPORT+0x88>)
 8001aa4:	f00c fd7c 	bl	800e5a0 <HAL_UART_Transmit_DMA>
	return TRUE;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3750      	adds	r7, #80	; 0x50
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	0801afd0 	.word	0x0801afd0
 8001ab8:	2000040c 	.word	0x2000040c
 8001abc:	20005e28 	.word	0x20005e28
 8001ac0:	20004d64 	.word	0x20004d64
 8001ac4:	20005de8 	.word	0x20005de8

08001ac8 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	466b      	mov	r3, sp
 8001ad4:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	dc02      	bgt.n	8001ae2 <unPackPayload+0x1a>
		return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae0:	e063      	b.n	8001baa <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b28      	cmp	r3, #40	; 0x28
 8001ae8:	d106      	bne.n	8001af8 <unPackPayload+0x30>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b29      	cmp	r3, #41	; 0x29
 8001af6:	d002      	beq.n	8001afe <unPackPayload+0x36>
		return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
 8001afc:	e055      	b.n	8001baa <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	3b02      	subs	r3, #2
 8001b02:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001b04:	6938      	ldr	r0, [r7, #16]
 8001b06:	1e43      	subs	r3, r0, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	f04f 0400 	mov.w	r4, #0
 8001b1a:	00d4      	lsls	r4, r2, #3
 8001b1c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b20:	00cb      	lsls	r3, r1, #3
 8001b22:	4603      	mov	r3, r0
 8001b24:	4619      	mov	r1, r3
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	f04f 0400 	mov.w	r4, #0
 8001b32:	00d4      	lsls	r4, r2, #3
 8001b34:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b38:	00cb      	lsls	r3, r1, #3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	3307      	adds	r3, #7
 8001b3e:	08db      	lsrs	r3, r3, #3
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	ebad 0d03 	sub.w	sp, sp, r3
 8001b46:	466b      	mov	r3, sp
 8001b48:	3300      	adds	r3, #0
 8001b4a:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e017      	b.n	8001b86 <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b28      	cmp	r3, #40	; 0x28
 8001b60:	d00e      	beq.n	8001b80 <unPackPayload+0xb8>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b29      	cmp	r3, #41	; 0x29
 8001b6c:	d008      	beq.n	8001b80 <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	441a      	add	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1c59      	adds	r1, r3, #1
 8001b78:	6139      	str	r1, [r7, #16]
 8001b7a:	7811      	ldrb	r1, [r2, #0]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3301      	adds	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbe2      	blt.n	8001b56 <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	2100      	movs	r1, #0
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f013 ffcc 	bl	8015b34 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f013 ffad 	bl	8015b02 <memmove>

	return out_lenght;
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	46ad      	mov	sp, r5
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bdb0      	pop	{r4, r5, r7, pc}

08001bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_DMA_Init+0x3c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <MX_DMA_Init+0x3c>)
 8001bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_DMA_Init+0x3c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2105      	movs	r1, #5
 8001bda:	200f      	movs	r0, #15
 8001bdc:	f009 fca8 	bl	800b530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001be0:	200f      	movs	r0, #15
 8001be2:	f009 fcc1 	bl	800b568 <HAL_NVIC_EnableIRQ>

}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <vApplicationGetIdleTaskMemory+0x2c>)
 8001c04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <vApplicationGetIdleTaskMemory+0x30>)
 8001c0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c12:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	20000ba8 	.word	0x20000ba8
 8001c24:	20000bfc 	.word	0x20000bfc

08001c28 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b094      	sub	sp, #80	; 0x50
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c32:	2300      	movs	r3, #0
 8001c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001c36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f010 fc8c 	bl	8012558 <osMutexCreate>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <MX_FREERTOS_Init+0x90>)
 8001c44:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001c46:	2301      	movs	r3, #1
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c4a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c54:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001c56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f010 fd93 	bl	8012788 <osMailCreate>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_FREERTOS_Init+0x94>)
 8001c66:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_FREERTOS_Init+0x98>)
 8001c6a:	f107 041c 	add.w	r4, r7, #28
 8001c6e:	461d      	mov	r5, r3
 8001c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f010 fb7c 	bl	8012380 <osThreadCreate>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_FREERTOS_Init+0x9c>)
 8001c8c:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_FREERTOS_Init+0xa0>)
 8001c90:	463c      	mov	r4, r7
 8001c92:	461d      	mov	r5, r3
 8001c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f010 fb6b 	bl	8012380 <osThreadCreate>
 8001caa:	4602      	mov	r2, r0
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <MX_FREERTOS_Init+0xa4>)
 8001cae:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001cb0:	bf00      	nop
 8001cb2:	3750      	adds	r7, #80	; 0x50
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb8:	20004e68 	.word	0x20004e68
 8001cbc:	20004e6c 	.word	0x20004e6c
 8001cc0:	0801afec 	.word	0x0801afec
 8001cc4:	20004e64 	.word	0x20004e64
 8001cc8:	0801b018 	.word	0x0801b018
 8001ccc:	20004e70 	.word	0x20004e70

08001cd0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd2:	f6ad 0d74 	subw	sp, sp, #2164	; 0x874
 8001cd6:	af6c      	add	r7, sp, #432	; 0x1b0
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001cde:	f013 f975 	bl	8014fcc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2110      	movs	r1, #16
 8001ce6:	48da      	ldr	r0, [pc, #872]	; (8002050 <StartDefaultTask+0x380>)
 8001ce8:	f00a f984 	bl	800bff4 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 36bf 	strb.w	r3, [r7, #1727]	; 0x6bf
  int32_t					current_key_speed;
  double						run_time;

  SCARA_Pick_And_Place_Package *Object;
  SCARA_Pick_And_Place_State  operation_state;
  uint8_t object_tail_pointer = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 369a 	strb.w	r3, [r7, #1690]	; 0x69a
  uint8_t object_head_pointer = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3699 	strb.w	r3, [r7, #1689]	; 0x699
  double state_time = 0;
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	f04f 0400 	mov.w	r4, #0
 8001d06:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8001d0a:	e9c2 3400 	strd	r3, r4, [r2]
  const SCARA_Slot_TypeDef SLot_Cordinate[NUM_OF_OBJECT] = {
 8001d0e:	f107 0318 	add.w	r3, r7, #24
 8001d12:	4ad0      	ldr	r2, [pc, #832]	; (8002054 <StartDefaultTask+0x384>)
 8001d14:	4618      	mov	r0, r3
 8001d16:	4611      	mov	r1, r2
 8001d18:	2360      	movs	r3, #96	; 0x60
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f013 fee6 	bl	8015aec <memcpy>
  		{200.0f, 200.0f, 0.0f} ,
  		{200.0f, 200.0f, 0.0f} ,
  		{200.0f, 200.0f, 0.0f}
  };

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8001d20:	21df      	movs	r1, #223	; 0xdf
 8001d22:	48cd      	ldr	r0, [pc, #820]	; (8002058 <StartDefaultTask+0x388>)
 8001d24:	f7ff fe8a 	bl	8001a3c <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 8001d28:	f008 fbd0 	bl	800a4cc <scaraGetMethod>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
  current_mode	 = scaraGetMode();
 8001d32:	f008 fbbf 	bl	800a4b4 <scaraGetMode>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
  current_duty_state	 = scaraGetDutyState();
 8001d3c:	f008 fbd2 	bl	800a4e4 <scaraGetDutyState>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5

  // Start up robot
  scaraStartup();
 8001d46:	f003 f8e7 	bl	8004f18 <scaraStartup>
  osDelay(10);
 8001d4a:	200a      	movs	r0, #10
 8001d4c:	f010 fb64 	bl	8012418 <osDelay>
//   positionNext.Theta2 = PI/3;
//   positionNext.D3 = 10;
//   positionNext.Theta4 = 0;
//   positionNext.t = 0;

  positionNext.Theta1 = -1.48267f;
 8001d50:	4ac2      	ldr	r2, [pc, #776]	; (800205c <StartDefaultTask+0x38c>)
 8001d52:	a4b7      	add	r4, pc, #732	; (adr r4, 8002030 <StartDefaultTask+0x360>)
 8001d54:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d58:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = 2.35575f;
 8001d5c:	4abf      	ldr	r2, [pc, #764]	; (800205c <StartDefaultTask+0x38c>)
 8001d5e:	a4b6      	add	r4, pc, #728	; (adr r4, 8002038 <StartDefaultTask+0x368>)
 8001d60:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d64:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 0.034999;
 8001d68:	4abc      	ldr	r2, [pc, #752]	; (800205c <StartDefaultTask+0x38c>)
 8001d6a:	a4b5      	add	r4, pc, #724	; (adr r4, 8002040 <StartDefaultTask+0x370>)
 8001d6c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d70:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 2.96586;
 8001d74:	4ab9      	ldr	r2, [pc, #740]	; (800205c <StartDefaultTask+0x38c>)
 8001d76:	a4b4      	add	r4, pc, #720	; (adr r4, 8002048 <StartDefaultTask+0x378>)
 8001d78:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d7c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8001d80:	4ab6      	ldr	r2, [pc, #728]	; (800205c <StartDefaultTask+0x38c>)
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	f04f 0400 	mov.w	r4, #0
 8001d8a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

  kinematicForward(&positionNext);
 8001d8e:	48b3      	ldr	r0, [pc, #716]	; (800205c <StartDefaultTask+0x38c>)
 8001d90:	f001 fcb6 	bl	8003700 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8001d94:	48b2      	ldr	r0, [pc, #712]	; (8002060 <StartDefaultTask+0x390>)
 8001d96:	f00b ffe0 	bl	800dd5a <HAL_TIM_Base_Start_IT>

  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	2101      	movs	r1, #1
 8001da2:	4618      	mov	r0, r3
 8001da4:	f010 fb8c 	bl	80124c0 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
	  respond_packed_lenght = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 3688 	str.w	r3, [r7, #1672]	; 0x688
	  infor_lenght			= 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
	  infor_packed_lenght	= 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
	  task_usb_lenght		= 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
	  usb_lenght			= 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
	  total_respond_length  = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
	  detail_ptr 			= 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8001dd8:	4aa2      	ldr	r2, [pc, #648]	; (8002064 <StartDefaultTask+0x394>)
 8001dda:	4ba3      	ldr	r3, [pc, #652]	; (8002068 <StartDefaultTask+0x398>)
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	23c0      	movs	r3, #192	; 0xc0
 8001de2:	461a      	mov	r2, r3
 8001de4:	f013 fe82 	bl	8015aec <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8001de8:	4a9f      	ldr	r2, [pc, #636]	; (8002068 <StartDefaultTask+0x398>)
 8001dea:	4b9c      	ldr	r3, [pc, #624]	; (800205c <StartDefaultTask+0x38c>)
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	23c0      	movs	r3, #192	; 0xc0
 8001df2:	461a      	mov	r2, r3
 8001df4:	f013 fe7a 	bl	8015aec <memcpy>
//		  positionTrue.q = positionCurrent.q;
//	  }
//#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8001df8:	4b9c      	ldr	r3, [pc, #624]	; (800206c <StartDefaultTask+0x39c>)
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001e00:	2200      	movs	r2, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f010 fd6c 	bl	80128e0 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8001e08:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d116      	bne.n	8001e3e <StartDefaultTask+0x16e>
		   dataMail = ret_mail.value.p;
 8001e10:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8001e14:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8001e18:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001e1c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001e20:	f8d7 1670 	ldr.w	r1, [r7, #1648]	; 0x670
 8001e24:	4618      	mov	r0, r3
 8001e26:	f013 fe61 	bl	8015aec <memcpy>
		   isNewDuty = TRUE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 36bf 	strb.w	r3, [r7, #1727]	; 0x6bf
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8001e30:	4b8e      	ldr	r3, [pc, #568]	; (800206c <StartDefaultTask+0x39c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8d7 1670 	ldr.w	r1, [r7, #1648]	; 0x670
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f010 fdc5 	bl	80129c8 <osMailFree>
	  }
	  if(isNewDuty) {
 8001e3e:	f897 36bf 	ldrb.w	r3, [r7, #1727]	; 0x6bf
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8302 	beq.w	800244c <StartDefaultTask+0x77c>
		  //memset(respond, 0, 40);
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 8001e48:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	f040 80d1 	bne.w	8001ff6 <StartDefaultTask+0x326>
			  free(Object);
 8001e54:	f8d7 069c 	ldr.w	r0, [r7, #1692]	; 0x69c
 8001e58:	f013 fe40 	bl	8015adc <free>
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8001e5c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001e60:	785b      	ldrb	r3, [r3, #1]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d11f      	bne.n	8001ea6 <StartDefaultTask+0x1d6>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed MANUAL Method",
				// 								(char *)respond);
				detail_array[0] = MANUAL_METHOD;
 8001e6c:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8001e70:	2218      	movs	r2, #24
 8001e72:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001e74:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8001e7e:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8001e82:	4413      	add	r3, r2
 8001e84:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	2008      	movs	r0, #8
 8001e8e:	f7ff fd85 	bl	800199c <commandRespond1>
 8001e92:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
				total_respond_length += respond_lenght;
 8001e96:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8001e9a:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
 8001ea4:	e2cf      	b.n	8002446 <StartDefaultTask+0x776>
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8001ea6:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001eaa:	785b      	ldrb	r3, [r3, #1]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d11f      	bne.n	8001ef0 <StartDefaultTask+0x220>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed SEMI AUTO Method",
				// 								(char *)respond);
				detail_array[0] = SEMI_AUTO_METHOD;
 8001eb6:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8001eba:	2219      	movs	r2, #25
 8001ebc:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001ebe:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001ec2:	6899      	ldr	r1, [r3, #8]
 8001ec4:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8001ec8:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8001ecc:	4413      	add	r3, r2
 8001ece:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	2008      	movs	r0, #8
 8001ed8:	f7ff fd60 	bl	800199c <commandRespond1>
 8001edc:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
				total_respond_length += respond_lenght;
 8001ee0:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8001ee4:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8001ee8:	4413      	add	r3, r2
 8001eea:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
 8001eee:	e2aa      	b.n	8002446 <StartDefaultTask+0x776>
			  } else if (SCARA_METHOD_AUTO == duty_cmd.robot_method) {
 8001ef0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001ef4:	785b      	ldrb	r3, [r3, #1]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d11f      	bne.n	8001f3a <StartDefaultTask+0x26a>
				  current_method = SCARA_METHOD_AUTO;
 8001efa:	2302      	movs	r3, #2
 8001efc:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
				//   respond_lenght = commandRespond(RPD_OK,
				// 								duty_cmd.id_command,
				// 								"Changed AUTO Method",
				// 								(char *)respond);
				detail_array[0] = AUTO_METHOD;
 8001f00:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8001f04:	221a      	movs	r2, #26
 8001f06:	701a      	strb	r2, [r3, #0]
				respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001f08:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001f0c:	6899      	ldr	r1, [r3, #8]
 8001f0e:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8001f12:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8001f16:	4413      	add	r3, r2
 8001f18:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	2008      	movs	r0, #8
 8001f22:	f7ff fd3b 	bl	800199c <commandRespond1>
 8001f26:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
				total_respond_length += respond_lenght;
 8001f2a:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8001f2e:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8001f32:	4413      	add	r3, r2
 8001f34:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
 8001f38:	e285      	b.n	8002446 <StartDefaultTask+0x776>
			  }else if(SCARA_METHOD_TEST == duty_cmd.robot_method){
 8001f3a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001f3e:	785b      	ldrb	r3, [r3, #1]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d12f      	bne.n	8001fa4 <StartDefaultTask+0x2d4>
				  test_value[0] = 0;
 8001f44:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
				  test_value[1] = 0;
 8001f4c:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8001f50:	2200      	movs	r2, #0
 8001f52:	705a      	strb	r2, [r3, #1]
				  test_value[2] = 0;
 8001f54:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8001f58:	2200      	movs	r2, #0
 8001f5a:	709a      	strb	r2, [r3, #2]
				  test_value[3] = 0;
 8001f5c:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8001f60:	2200      	movs	r2, #0
 8001f62:	70da      	strb	r2, [r3, #3]
				  current_method = SCARA_METHOD_TEST;
 8001f64:	2303      	movs	r3, #3
 8001f66:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
				  detail_array[0] = TEST_METHOD;
 8001f6a:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8001f6e:	221b      	movs	r2, #27
 8001f70:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001f72:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001f76:	6899      	ldr	r1, [r3, #8]
 8001f78:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8001f7c:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8001f80:	4413      	add	r3, r2
 8001f82:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2301      	movs	r3, #1
 8001f8a:	2008      	movs	r0, #8
 8001f8c:	f7ff fd06 	bl	800199c <commandRespond1>
 8001f90:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
				  total_respond_length += respond_lenght;
 8001f94:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8001f98:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
 8001fa2:	e250      	b.n	8002446 <StartDefaultTask+0x776>
			  }else if(SCARA_METHOD_PICK_AND_PLACE == duty_cmd.robot_method){
 8001fa4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	f040 824b 	bne.w	8002446 <StartDefaultTask+0x776>
				  current_method = SCARA_METHOD_PICK_AND_PLACE;
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
				  current_duty_state = SCARA_DUTY_STATE_INIT;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
				  detail_array[0] = PICK_AND_PLACE_METHOD;
 8001fbc:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8001fc0:	221c      	movs	r2, #28
 8001fc2:	701a      	strb	r2, [r3, #0]
				  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8001fc4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001fc8:	6899      	ldr	r1, [r3, #8]
 8001fca:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8001fce:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2301      	movs	r3, #1
 8001fdc:	2008      	movs	r0, #8
 8001fde:	f7ff fcdd 	bl	800199c <commandRespond1>
 8001fe2:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
				  total_respond_length += respond_lenght;
 8001fe6:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8001fea:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8001fee:	4413      	add	r3, r2
 8001ff0:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
 8001ff4:	e227      	b.n	8002446 <StartDefaultTask+0x776>
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8001ff6:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8002000:	429a      	cmp	r2, r3
 8002002:	f040 8200 	bne.w	8002406 <StartDefaultTask+0x736>
				  	  switch( duty_cmd.robot_method) {
 8002006:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	2b04      	cmp	r3, #4
 800200e:	f200 81f4 	bhi.w	80023fa <StartDefaultTask+0x72a>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <StartDefaultTask+0x348>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	08002071 	.word	0x08002071
 800201c:	080020c7 	.word	0x080020c7
 8002020:	08002441 	.word	0x08002441
 8002024:	08002283 	.word	0x08002283
 8002028:	08002399 	.word	0x08002399
 800202c:	f3af 8000 	nop.w
 8002030:	20000000 	.word	0x20000000
 8002034:	bff7b904 	.word	0xbff7b904
 8002038:	80000000 	.word	0x80000000
 800203c:	4002d893 	.word	0x4002d893
 8002040:	90c91080 	.word	0x90c91080
 8002044:	3fa1eb63 	.word	0x3fa1eb63
 8002048:	cec41dd2 	.word	0xcec41dd2
 800204c:	4007ba14 	.word	0x4007ba14
 8002050:	40020400 	.word	0x40020400
 8002054:	0801b118 	.word	0x0801b118
 8002058:	0801b034 	.word	0x0801b034
 800205c:	20005c68 	.word	0x20005c68
 8002060:	20005da8 	.word	0x20005da8
 8002064:	20005968 	.word	0x20005968
 8002068:	20005ae8 	.word	0x20005ae8
 800206c:	20004e6c 	.word	0x20004e6c
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002070:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10d      	bne.n	8002094 <StartDefaultTask+0x3c4>
				  			  current_key = duty_cmd.keyboard;
 8002078:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800207c:	78db      	ldrb	r3, [r3, #3]
 800207e:	f887 36b2 	strb.w	r3, [r7, #1714]	; 0x6b2
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002082:	2301      	movs	r3, #1
 8002084:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
				  			  current_key_speed = duty_cmd.key_speed;
 8002088:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002092:	e1d7      	b.n	8002444 <StartDefaultTask+0x774>
				  		  } else if (current_key == duty_cmd.keyboard
 8002094:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002098:	78db      	ldrb	r3, [r3, #3]
 800209a:	f897 26b2 	ldrb.w	r2, [r7, #1714]	; 0x6b2
 800209e:	429a      	cmp	r2, r3
 80020a0:	f040 81d0 	bne.w	8002444 <StartDefaultTask+0x774>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 80020a4:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	f040 81cb 	bne.w	8002444 <StartDefaultTask+0x774>
									  && current_key_speed == duty_cmd.key_speed) {
 80020ae:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f8d7 26ac 	ldr.w	r2, [r7, #1708]	; 0x6ac
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 81c3 	bne.w	8002444 <StartDefaultTask+0x774>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 80020be:	2301      	movs	r3, #1
 80020c0:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
				  	  break;
 80020c4:	e1be      	b.n	8002444 <StartDefaultTask+0x774>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 80020c6:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80020ca:	789b      	ldrb	r3, [r3, #2]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d029      	beq.n	8002124 <StartDefaultTask+0x454>
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d074      	beq.n	80021be <StartDefaultTask+0x4ee>
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 80cd 	bne.w	8002274 <StartDefaultTask+0x5a4>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 80020da:	2300      	movs	r3, #0
 80020dc:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
								//   respond_lenght = commandRespond(RPD_OK,
								// 								  duty_cmd.id_command,
								// 								  "Stop Now",
								// 								  (char *)respond);
								detail_array[0] = STOP_NOW;
 80020e0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80020e4:	221d      	movs	r2, #29
 80020e6:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80020e8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	f207 4264 	addw	r2, r7, #1124	; 0x464
 80020f2:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 80020f6:	4413      	add	r3, r2
 80020f8:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2301      	movs	r3, #1
 8002100:	2008      	movs	r0, #8
 8002102:	f7ff fc4b 	bl	800199c <commandRespond1>
 8002106:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
								total_respond_length += respond_lenght;
 800210a:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 800210e:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002112:	4413      	add	r3, r2
 8002114:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002118:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800211c:	48d4      	ldr	r0, [pc, #848]	; (8002470 <StartDefaultTask+0x7a0>)
 800211e:	f7ff fc8d 	bl	8001a3c <LOG_REPORT>
							  }
							  break;
 8002122:	e0ad      	b.n	8002280 <StartDefaultTask+0x5b0>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 8002124:	f897 36b6 	ldrb.w	r3, [r7, #1718]	; 0x6b6
 8002128:	2b02      	cmp	r3, #2
 800212a:	d126      	bne.n	800217a <StartDefaultTask+0x4aa>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 800212c:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 8002130:	2b00      	cmp	r3, #0
 8002132:	d122      	bne.n	800217a <StartDefaultTask+0x4aa>
									  current_mode = SCARA_MODE_SCAN;
 8002134:	2301      	movs	r3, #1
 8002136:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
									//   respond_lenght = commandRespond(RPD_OK,
									// 								  duty_cmd.id_command,
									// 								  "Start Scan",
									// 								  (char *)respond);
									detail_array[0] = START_SCAN;
 8002140:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002144:	221e      	movs	r2, #30
 8002146:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002148:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800214c:	6899      	ldr	r1, [r3, #8]
 800214e:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002152:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002156:	4413      	add	r3, r2
 8002158:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2301      	movs	r3, #1
 8002160:	2008      	movs	r0, #8
 8002162:	f7ff fc1b 	bl	800199c <commandRespond1>
 8002166:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
									total_respond_length += respond_lenght;
 800216a:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 800216e:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002172:	4413      	add	r3, r2
 8002174:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
									total_respond_length += respond_lenght;
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002178:	e082      	b.n	8002280 <StartDefaultTask+0x5b0>
									detail_array[0] = BUSY;
 800217a:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800217e:	221f      	movs	r2, #31
 8002180:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002182:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002186:	6899      	ldr	r1, [r3, #8]
 8002188:	f207 4264 	addw	r2, r7, #1124	; 0x464
 800218c:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002190:	4413      	add	r3, r2
 8002192:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	2007      	movs	r0, #7
 800219c:	f7ff fbfe 	bl	800199c <commandRespond1>
 80021a0:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
									total_respond_length += respond_lenght;
 80021a4:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 80021a8:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 80021ac:	4413      	add	r3, r2
 80021ae:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 80021b2:	f240 1185 	movw	r1, #389	; 0x185
 80021b6:	48af      	ldr	r0, [pc, #700]	; (8002474 <StartDefaultTask+0x7a4>)
 80021b8:	f7ff fc40 	bl	8001a3c <LOG_REPORT>
							  break;
 80021bc:	e060      	b.n	8002280 <StartDefaultTask+0x5b0>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 80021be:	f897 36b6 	ldrb.w	r3, [r7, #1718]	; 0x6b6
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d133      	bne.n	800222e <StartDefaultTask+0x55e>
 80021c6:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d12f      	bne.n	800222e <StartDefaultTask+0x55e>
									  scaraSetScanFlag();
 80021ce:	f008 f903 	bl	800a3d8 <scaraSetScanFlag>
//									  if(duty_cmd.modeInit_type == DUTY_MODE_INIT_LINEAR){
//										  current_method = SCARA_METHOD_AUTO;
//									  }
									  if (scaraIsScanLimit()) {
 80021d2:	f008 f993 	bl	800a4fc <scaraIsScanLimit>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <StartDefaultTask+0x51a>
										  current_mode	 = SCARA_MODE_DUTY;
 80021dc:	2302      	movs	r3, #2
 80021de:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
									  if (scaraIsScanLimit()) {
 80021e8:	e043      	b.n	8002272 <StartDefaultTask+0x5a2>
									  } else {
										//   respond_lenght = commandRespond(RPD_ERROR,
										// 								  duty_cmd.id_command,
										// 								  "Has Not Scan Yet.",
										// 								  (char *)respond);
										detail_array[0] = NOT_SCAN;
 80021ea:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80021ee:	2220      	movs	r2, #32
 80021f0:	701a      	strb	r2, [r3, #0]
										respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80021f2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80021f6:	6899      	ldr	r1, [r3, #8]
 80021f8:	f207 4264 	addw	r2, r7, #1124	; 0x464
 80021fc:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002200:	4413      	add	r3, r2
 8002202:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2301      	movs	r3, #1
 800220a:	2007      	movs	r0, #7
 800220c:	f7ff fbc6 	bl	800199c <commandRespond1>
 8002210:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
										total_respond_length += respond_lenght;
 8002214:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8002218:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 800221c:	4413      	add	r3, r2
 800221e:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002222:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8002226:	4894      	ldr	r0, [pc, #592]	; (8002478 <StartDefaultTask+0x7a8>)
 8002228:	f7ff fc08 	bl	8001a3c <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 800222c:	e021      	b.n	8002272 <StartDefaultTask+0x5a2>
								  } else {
									//   respond_lenght	= commandRespond(RPD_ERROR,
									// 									  duty_cmd.id_command,
									// 									  "Busy.",
									// 									  (char *)respond);
									detail_array[0] = BUSY;
 800222e:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002232:	221f      	movs	r2, #31
 8002234:	701a      	strb	r2, [r3, #0]
									respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002236:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800223a:	6899      	ldr	r1, [r3, #8]
 800223c:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002240:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002244:	4413      	add	r3, r2
 8002246:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2301      	movs	r3, #1
 800224e:	2007      	movs	r0, #7
 8002250:	f7ff fba4 	bl	800199c <commandRespond1>
 8002254:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
									total_respond_length += respond_lenght;
 8002258:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 800225c:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002260:	4413      	add	r3, r2
 8002262:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002266:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800226a:	4884      	ldr	r0, [pc, #528]	; (800247c <StartDefaultTask+0x7ac>)
 800226c:	f7ff fbe6 	bl	8001a3c <LOG_REPORT>
								  }
							  }
							  break;
 8002270:	e006      	b.n	8002280 <StartDefaultTask+0x5b0>
 8002272:	e005      	b.n	8002280 <StartDefaultTask+0x5b0>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002274:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002278:	4881      	ldr	r0, [pc, #516]	; (8002480 <StartDefaultTask+0x7b0>)
 800227a:	f7ff fbdf 	bl	8001a3c <LOG_REPORT>
							  }
						  }
					  }
					  break;
 800227e:	e0e2      	b.n	8002446 <StartDefaultTask+0x776>
 8002280:	e0e1      	b.n	8002446 <StartDefaultTask+0x776>
					  case SCARA_METHOD_TEST:
					  {
						  test_value[0] = 0;
 8002282:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
						  test_value[1] = 0;
 800228a:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 800228e:	2200      	movs	r2, #0
 8002290:	705a      	strb	r2, [r3, #1]
						  test_value[2] = 0;
 8002292:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002296:	2200      	movs	r2, #0
 8002298:	709a      	strb	r2, [r3, #2]
						  test_value[3] = 0;
 800229a:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 800229e:	2200      	movs	r2, #0
 80022a0:	70da      	strb	r2, [r3, #3]
						  switch (duty_cmd.test_key)
 80022a2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80022a6:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80022aa:	2b07      	cmp	r3, #7
 80022ac:	d872      	bhi.n	8002394 <StartDefaultTask+0x6c4>
 80022ae:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <StartDefaultTask+0x5e4>)
 80022b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b4:	080022d5 	.word	0x080022d5
 80022b8:	080022ed 	.word	0x080022ed
 80022bc:	08002305 	.word	0x08002305
 80022c0:	0800231d 	.word	0x0800231d
 80022c4:	08002335 	.word	0x08002335
 80022c8:	0800234d 	.word	0x0800234d
 80022cc:	08002365 	.word	0x08002365
 80022d0:	0800237d 	.word	0x0800237d
						  {
						  case SCARA_TEST_MOTOR1_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 80022d4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80022d8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 80022e6:	2105      	movs	r1, #5
 80022e8:	5499      	strb	r1, [r3, r2]
						  break;
 80022ea:	e054      	b.n	8002396 <StartDefaultTask+0x6c6>
						  case SCARA_TEST_MOTOR1_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 80022ec:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80022f0:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 80022fe:	21fb      	movs	r1, #251	; 0xfb
 8002300:	5499      	strb	r1, [r3, r2]
						  break;
 8002302:	e048      	b.n	8002396 <StartDefaultTask+0x6c6>
						  case SCARA_TEST_MOTOR2_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002304:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002308:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800230c:	085b      	lsrs	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002316:	2105      	movs	r1, #5
 8002318:	5499      	strb	r1, [r3, r2]
						  break;
 800231a:	e03c      	b.n	8002396 <StartDefaultTask+0x6c6>
						  case SCARA_TEST_MOTOR2_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 800231c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002320:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 800232e:	21fb      	movs	r1, #251	; 0xfb
 8002330:	5499      	strb	r1, [r3, r2]
						  break;
 8002332:	e030      	b.n	8002396 <StartDefaultTask+0x6c6>
						  case SCARA_TEST_MOTOR3_POS:
							 test_value[duty_cmd.test_key/2] = 5;
 8002334:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002338:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002346:	2105      	movs	r1, #5
 8002348:	5499      	strb	r1, [r3, r2]
						  break;
 800234a:	e024      	b.n	8002396 <StartDefaultTask+0x6c6>
						  case SCARA_TEST_MOTOR3_NEG:
							 test_value[duty_cmd.test_key/2] = -5;
 800234c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002350:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 800235e:	21fb      	movs	r1, #251	; 0xfb
 8002360:	5499      	strb	r1, [r3, r2]
						  break;
 8002362:	e018      	b.n	8002396 <StartDefaultTask+0x6c6>
						  case SCARA_TEST_MOTOR4_POS:
							 test_value[duty_cmd.test_key/2] = 10;
 8002364:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002368:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002376:	210a      	movs	r1, #10
 8002378:	5499      	strb	r1, [r3, r2]
						  break;
 800237a:	e00c      	b.n	8002396 <StartDefaultTask+0x6c6>
						  case SCARA_TEST_MOTOR4_NEG:
							 test_value[duty_cmd.test_key/2] = -10;
 800237c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002380:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 800238e:	21f6      	movs	r1, #246	; 0xf6
 8002390:	5499      	strb	r1, [r3, r2]
						  break;						  
 8002392:	e000      	b.n	8002396 <StartDefaultTask+0x6c6>
						  default:
							  break;
 8002394:	bf00      	nop
						  }
					  }
					  break;
 8002396:	e056      	b.n	8002446 <StartDefaultTask+0x776>
				  	  {

				  	  }
				  	  break;
				  	  case SCARA_METHOD_PICK_AND_PLACE:{
				  		  memcpy(&Object[object_head_pointer].object_position, &duty_cmd.target_point, sizeof(SCARA_PositionTypeDef));
 8002398:	f897 3699 	ldrb.w	r3, [r7, #1689]	; 0x699
 800239c:	22c8      	movs	r2, #200	; 0xc8
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 80023a6:	4413      	add	r3, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80023ae:	3328      	adds	r3, #40	; 0x28
 80023b0:	22c0      	movs	r2, #192	; 0xc0
 80023b2:	4619      	mov	r1, r3
 80023b4:	f013 fb9a 	bl	8015aec <memcpy>
				  		  Object[object_head_pointer].timer_value = (uint16_t)duty_cmd.target_point.t;
 80023b8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80023bc:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80023c0:	f897 2699 	ldrb.w	r2, [r7, #1689]	; 0x699
 80023c4:	21c8      	movs	r1, #200	; 0xc8
 80023c6:	fb01 f202 	mul.w	r2, r1, r2
 80023ca:	f8d7 169c 	ldr.w	r1, [r7, #1692]	; 0x69c
 80023ce:	188d      	adds	r5, r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	4621      	mov	r1, r4
 80023d4:	f7fe fbe8 	bl	8000ba8 <__aeabi_d2uiz>
 80023d8:	4603      	mov	r3, r0
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
				  		  object_head_pointer = (object_head_pointer+1)%8;
 80023e0:	f897 3699 	ldrb.w	r3, [r7, #1689]	; 0x699
 80023e4:	3301      	adds	r3, #1
 80023e6:	425a      	negs	r2, r3
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	f002 0207 	and.w	r2, r2, #7
 80023f0:	bf58      	it	pl
 80023f2:	4253      	negpl	r3, r2
 80023f4:	f887 3699 	strb.w	r3, [r7, #1689]	; 0x699
				  	  }
				  	  break;
 80023f8:	e025      	b.n	8002446 <StartDefaultTask+0x776>
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 80023fa:	f240 11e3 	movw	r1, #483	; 0x1e3
 80023fe:	4821      	ldr	r0, [pc, #132]	; (8002484 <StartDefaultTask+0x7b4>)
 8002400:	f7ff fb1c 	bl	8001a3c <LOG_REPORT>
 8002404:	e01f      	b.n	8002446 <StartDefaultTask+0x776>
			  	  } else {
					//   respond_lenght = commandRespond(RPD_ERROR,
					// 								duty_cmd.id_command,
					// 								"METHOD isn't correct",
					// 								(char *)respond);
					detail_array[0] = INCORRECT_METHOD;
 8002406:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800240a:	2221      	movs	r2, #33	; 0x21
 800240c:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 800240e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002412:	6899      	ldr	r1, [r3, #8]
 8002414:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002418:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 800241c:	4413      	add	r3, r2
 800241e:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2301      	movs	r3, #1
 8002426:	2007      	movs	r0, #7
 8002428:	f7ff fab8 	bl	800199c <commandRespond1>
 800242c:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
					total_respond_length += respond_lenght;
 8002430:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8002434:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002438:	4413      	add	r3, r2
 800243a:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
 800243e:	e002      	b.n	8002446 <StartDefaultTask+0x776>
				  	  break;
 8002440:	bf00      	nop
 8002442:	e000      	b.n	8002446 <StartDefaultTask+0x776>
				  	  break;
 8002444:	bf00      	nop
			  	  }

			  }
		  isNewDuty = FALSE;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 36bf 	strb.w	r3, [r7, #1727]	; 0x6bf
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 800244c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8002450:	2b04      	cmp	r3, #4
 8002452:	f200 86a8 	bhi.w	80031a6 <StartDefaultTask+0x14d6>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <StartDefaultTask+0x78c>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	08002489 	.word	0x08002489
 8002460:	08002635 	.word	0x08002635
 8002464:	08002a27 	.word	0x08002a27
 8002468:	08002cdb 	.word	0x08002cdb
 800246c:	08002d01 	.word	0x08002d01
 8002470:	0801b054 	.word	0x0801b054
 8002474:	0801b064 	.word	0x0801b064
 8002478:	0801b074 	.word	0x0801b074
 800247c:	0801b088 	.word	0x0801b088
 8002480:	0801b098 	.word	0x0801b098
 8002484:	0801b0ac 	.word	0x0801b0ac
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 8002488:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800248c:	2b03      	cmp	r3, #3
 800248e:	f200 8687 	bhi.w	80031a0 <StartDefaultTask+0x14d0>
 8002492:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <StartDefaultTask+0x7c8>)
 8002494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002498:	0800262f 	.word	0x0800262f
 800249c:	080024a9 	.word	0x080024a9
 80024a0:	08002515 	.word	0x08002515
 80024a4:	080025f1 	.word	0x080025f1
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit1(current_key, current_key_speed) == SCARA_STATUS_OK) {
 80024a8:	f897 36b2 	ldrb.w	r3, [r7, #1714]	; 0x6b2
 80024ac:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	; 0x6ac
 80024b0:	4618      	mov	r0, r3
 80024b2:	f008 f93d 	bl	800a730 <scaraKeyInit1>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d127      	bne.n	800250c <StartDefaultTask+0x83c>
				  run_time = 0;
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	f04f 0400 	mov.w	r4, #0
 80024c4:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80024c8:	e9c2 3400 	strd	r3, r4, [r2]
				  current_key_state = SCARA_KEY_STATE_FLOW;
 80024cc:	2302      	movs	r3, #2
 80024ce:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
// #endif
// 				  infor_lenght 		= commandRespond(RPD_START,
// 													  0,
// 													  (char *)position,
// 													  (char *)infor);
					detail_array[0] = NONE;
 80024d2:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80024d6:	2222      	movs	r2, #34	; 0x22
 80024d8:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80024da:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80024de:	6899      	ldr	r1, [r3, #8]
 80024e0:	f207 4264 	addw	r2, r7, #1124	; 0x464
 80024e4:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 80024e8:	4413      	add	r3, r2
 80024ea:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2301      	movs	r3, #1
 80024f2:	2003      	movs	r0, #3
 80024f4:	f7ff fa52 	bl	800199c <commandRespond1>
 80024f8:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
					total_respond_length += respond_lenght;
 80024fc:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8002500:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002504:	4413      	add	r3, r2
 8002506:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 800250a:	e091      	b.n	8002630 <StartDefaultTask+0x960>
				  current_key_state = SCARA_KEY_STATE_READY;
 800250c:	2300      	movs	r3, #0
 800250e:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
		  break;
 8002512:	e08d      	b.n	8002630 <StartDefaultTask+0x960>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002514:	a3e0      	add	r3, pc, #896	; (adr r3, 8002898 <StartDefaultTask+0xbc8>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 800251e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002522:	f7fd feb3 	bl	800028c <__adddf3>
 8002526:	4603      	mov	r3, r0
 8002528:	460c      	mov	r4, r1
 800252a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800252e:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002532:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8002536:	ed93 0b00 	vldr	d0, [r3]
 800253a:	f007 ffeb 	bl	800a514 <scaraIsFinish>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <StartDefaultTask+0x87c>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8002544:	2303      	movs	r3, #3
 8002546:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
					total_respond_length += respond_lenght;
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 800254a:	e071      	b.n	8002630 <StartDefaultTask+0x960>
				  status = scaraFlowDuty(run_time, &positionNext, positionCurrent);
 800254c:	4cd4      	ldr	r4, [pc, #848]	; (80028a0 <StartDefaultTask+0xbd0>)
 800254e:	4668      	mov	r0, sp
 8002550:	f104 0308 	add.w	r3, r4, #8
 8002554:	22b8      	movs	r2, #184	; 0xb8
 8002556:	4619      	mov	r1, r3
 8002558:	f013 fac8 	bl	8015aec <memcpy>
 800255c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002560:	48d0      	ldr	r0, [pc, #832]	; (80028a4 <StartDefaultTask+0xbd4>)
 8002562:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8002566:	ed91 0b00 	vldr	d0, [r1]
 800256a:	f005 fe53 	bl	8008214 <scaraFlowDuty>
 800256e:	4603      	mov	r3, r0
 8002570:	f887 365f 	strb.w	r3, [r7, #1631]	; 0x65f
				  if ( SCARA_STATUS_OK == status) {
 8002574:	f897 365f 	ldrb.w	r3, [r7, #1631]	; 0x65f
 8002578:	2b00      	cmp	r3, #0
 800257a:	d113      	bne.n	80025a4 <StartDefaultTask+0x8d4>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800257c:	4cc8      	ldr	r4, [pc, #800]	; (80028a0 <StartDefaultTask+0xbd0>)
 800257e:	4ac9      	ldr	r2, [pc, #804]	; (80028a4 <StartDefaultTask+0xbd4>)
 8002580:	ab2c      	add	r3, sp, #176	; 0xb0
 8002582:	4611      	mov	r1, r2
 8002584:	22c0      	movs	r2, #192	; 0xc0
 8002586:	4618      	mov	r0, r3
 8002588:	f013 fab0 	bl	8015aec <memcpy>
 800258c:	4668      	mov	r0, sp
 800258e:	f104 0310 	add.w	r3, r4, #16
 8002592:	22b0      	movs	r2, #176	; 0xb0
 8002594:	4619      	mov	r1, r3
 8002596:	f013 faa9 	bl	8015aec <memcpy>
 800259a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800259e:	f002 f933 	bl	8004808 <lowlayer_computeAndWritePulse>
		  break;
 80025a2:	e045      	b.n	8002630 <StartDefaultTask+0x960>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 80025a4:	2303      	movs	r3, #3
 80025a6:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
					detail_array[0] = status;
 80025aa:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80025ae:	f897 265f 	ldrb.w	r2, [r7, #1631]	; 0x65f
 80025b2:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80025b4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	f207 4264 	addw	r2, r7, #1124	; 0x464
 80025be:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 80025c2:	4413      	add	r3, r2
 80025c4:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2301      	movs	r3, #1
 80025cc:	2006      	movs	r0, #6
 80025ce:	f7ff f9e5 	bl	800199c <commandRespond1>
 80025d2:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
					total_respond_length += respond_lenght;
 80025d6:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 80025da:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 80025de:	4413      	add	r3, r2
 80025e0:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
					  LOG_REPORT("STOP KEY", __LINE__);
 80025e4:	f44f 710e 	mov.w	r1, #568	; 0x238
 80025e8:	48af      	ldr	r0, [pc, #700]	; (80028a8 <StartDefaultTask+0xbd8>)
 80025ea:	f7ff fa27 	bl	8001a3c <LOG_REPORT>
		  break;
 80025ee:	e01f      	b.n	8002630 <StartDefaultTask+0x960>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  lowlayer_readTruePosition(&positionNext);
 80025f0:	48ac      	ldr	r0, [pc, #688]	; (80028a4 <StartDefaultTask+0xbd4>)
 80025f2:	f001 ff79 	bl	80044e8 <lowlayer_readTruePosition>
			  kinematicForward(&positionNext);
 80025f6:	48ab      	ldr	r0, [pc, #684]	; (80028a4 <StartDefaultTask+0xbd4>)
 80025f8:	f001 f882 	bl	8003700 <kinematicForward>
			  current_key_state = SCARA_KEY_STATE_READY;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
			  positionNext.t = 0;
 8002602:	4aa8      	ldr	r2, [pc, #672]	; (80028a4 <StartDefaultTask+0xbd4>)
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	f04f 0400 	mov.w	r4, #0
 800260c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 8002610:	4aa4      	ldr	r2, [pc, #656]	; (80028a4 <StartDefaultTask+0xbd4>)
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	f04f 0400 	mov.w	r4, #0
 800261a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 800261e:	4aa1      	ldr	r2, [pc, #644]	; (80028a4 <StartDefaultTask+0xbd4>)
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	f04f 0400 	mov.w	r4, #0
 8002628:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 800262c:	e000      	b.n	8002630 <StartDefaultTask+0x960>
		  break;
 800262e:	bf00      	nop
		  }
	  }
	  break;
 8002630:	f000 bdb6 	b.w	80031a0 <StartDefaultTask+0x14d0>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8002634:	f897 36b6 	ldrb.w	r3, [r7, #1718]	; 0x6b6
 8002638:	2b01      	cmp	r3, #1
 800263a:	d00b      	beq.n	8002654 <StartDefaultTask+0x984>
 800263c:	2b02      	cmp	r3, #2
 800263e:	d067      	beq.n	8002710 <StartDefaultTask+0xa40>
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 81e9 	bne.w	8002a18 <StartDefaultTask+0xd48>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8002646:	2302      	movs	r3, #2
 8002648:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800264c:	2300      	movs	r3, #0
 800264e:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
			  }
			  break;
 8002652:	e1e7      	b.n	8002a24 <StartDefaultTask+0xd54>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 8002654:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8002658:	2b03      	cmp	r3, #3
 800265a:	d84f      	bhi.n	80026fc <StartDefaultTask+0xa2c>
 800265c:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <StartDefaultTask+0x994>)
 800265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002662:	bf00      	nop
 8002664:	08002675 	.word	0x08002675
 8002668:	08002681 	.word	0x08002681
 800266c:	08002693 	.word	0x08002693
 8002670:	080026a7 	.word	0x080026a7
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8002674:	f001 fd2e 	bl	80040d4 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8002678:	2301      	movs	r3, #1
 800267a:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
					  }
					  break;
 800267e:	e046      	b.n	800270e <StartDefaultTask+0xa3e>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8002680:	f001 fd5a 	bl	8004138 <lowlayer_scanFlow>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d03e      	beq.n	8002708 <StartDefaultTask+0xa38>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 800268a:	2302      	movs	r3, #2
 800268c:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
						  }
					  }
					  break;
 8002690:	e03a      	b.n	8002708 <StartDefaultTask+0xa38>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 8002692:	4884      	ldr	r0, [pc, #528]	; (80028a4 <StartDefaultTask+0xbd4>)
 8002694:	f001 feac 	bl	80043f0 <lowlayer_goToSoftLimit>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d036      	beq.n	800270c <StartDefaultTask+0xa3c>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 800269e:	2303      	movs	r3, #3
 80026a0:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
							}
					  }
					  break;
 80026a4:	e032      	b.n	800270c <StartDefaultTask+0xa3c>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  lowlayer_readSetPosition(&positionNext);
 80026a6:	487f      	ldr	r0, [pc, #508]	; (80028a4 <StartDefaultTask+0xbd4>)
 80026a8:	f001 fffa 	bl	80046a0 <lowlayer_readSetPosition>
						  current_mode 	= SCARA_MODE_DUTY;
 80026ac:	2302      	movs	r3, #2
 80026ae:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
						  kinematicForward(&positionNext);
 80026b8:	487a      	ldr	r0, [pc, #488]	; (80028a4 <StartDefaultTask+0xbd4>)
 80026ba:	f001 f821 	bl	8003700 <kinematicForward>
						  scaraSetScanFlag();
 80026be:	f007 fe8b 	bl	800a3d8 <scaraSetScanFlag>
						//   scaraPosition2String((char *)position, positionNext);
						//   infor_lenght 		= commandRespond(RPD_DONE,
						// 									 0,
						// 									(char *)position,
						// 									(char *)infor);
						detail_array[0] = NONE;
 80026c2:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80026c6:	2222      	movs	r2, #34	; 0x22
 80026c8:	701a      	strb	r2, [r3, #0]
						respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80026ca:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	f207 4264 	addw	r2, r7, #1124	; 0x464
 80026d4:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 80026d8:	4413      	add	r3, r2
 80026da:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2301      	movs	r3, #1
 80026e2:	2005      	movs	r0, #5
 80026e4:	f7ff f95a 	bl	800199c <commandRespond1>
 80026e8:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
						total_respond_length += respond_lenght;
 80026ec:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 80026f0:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 80026f4:	4413      	add	r3, r2
 80026f6:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
					  }
					  break;
 80026fa:	e008      	b.n	800270e <StartDefaultTask+0xa3e>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 80026fc:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002700:	486a      	ldr	r0, [pc, #424]	; (80028ac <StartDefaultTask+0xbdc>)
 8002702:	f7ff f99b 	bl	8001a3c <LOG_REPORT>
						  while(1);
 8002706:	e7fe      	b.n	8002706 <StartDefaultTask+0xa36>
					  break;
 8002708:	bf00      	nop
 800270a:	e18b      	b.n	8002a24 <StartDefaultTask+0xd54>
					  break;
 800270c:	bf00      	nop
					  }
				  }

			  }
			  break;
 800270e:	e189      	b.n	8002a24 <StartDefaultTask+0xd54>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8002710:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 8002714:	2b03      	cmp	r3, #3
 8002716:	f200 8178 	bhi.w	8002a0a <StartDefaultTask+0xd3a>
 800271a:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <StartDefaultTask+0xa50>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	08002731 	.word	0x08002731
 8002724:	08002735 	.word	0x08002735
 8002728:	080028b9 	.word	0x080028b9
 800272c:	08002995 	.word	0x08002995
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 8002730:	bf00      	nop

					  }
				  break;
 8002732:	e170      	b.n	8002a16 <StartDefaultTask+0xd46>

				  case SCARA_DUTY_STATE_INIT:
					  {

						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8002734:	f507 6492 	add.w	r4, r7, #1168	; 0x490
 8002738:	4668      	mov	r0, sp
 800273a:	f104 0310 	add.w	r3, r4, #16
 800273e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002742:	4619      	mov	r1, r3
 8002744:	f013 f9d2 	bl	8015aec <memcpy>
 8002748:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800274c:	f002 fd24 	bl	8005198 <scaraInitDuty>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 3661 	strb.w	r3, [r7, #1633]	; 0x661
						  if ( SCARA_STATUS_OK == status1) {
 8002756:	f897 3661 	ldrb.w	r3, [r7, #1633]	; 0x661
 800275a:	2b00      	cmp	r3, #0
 800275c:	d173      	bne.n	8002846 <StartDefaultTask+0xb76>
							  status2 = scaraTestDuty();
 800275e:	f007 fdbf 	bl	800a2e0 <scaraTestDuty>
 8002762:	4603      	mov	r3, r0
 8002764:	f887 3660 	strb.w	r3, [r7, #1632]	; 0x660
							  if (SCARA_STATUS_OK == status2) {
 8002768:	f897 3660 	ldrb.w	r3, [r7, #1632]	; 0x660
 800276c:	2b00      	cmp	r3, #0
 800276e:	d144      	bne.n	80027fa <StartDefaultTask+0xb2a>
							  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002770:	2302      	movs	r3, #2
 8002772:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
							  //current_duty_state = SCARA_DUTY_STATE_FINISH;
							  run_time			= 0;
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	f04f 0400 	mov.w	r4, #0
 800277e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8002782:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  detail_array[0] = status1;
 8002786:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800278a:	f897 2661 	ldrb.w	r2, [r7, #1633]	; 0x661
 800278e:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002790:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002794:	6899      	ldr	r1, [r3, #8]
 8002796:	f207 4264 	addw	r2, r7, #1124	; 0x464
 800279a:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 800279e:	4413      	add	r3, r2
 80027a0:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2301      	movs	r3, #1
 80027a8:	2008      	movs	r0, #8
 80027aa:	f7ff f8f7 	bl	800199c <commandRespond1>
 80027ae:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
							  total_respond_length += respond_lenght;
 80027b2:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 80027b6:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 80027ba:	4413      	add	r3, r2
 80027bc:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
							  detail_array[0] = NONE;
 80027c0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80027c4:	2222      	movs	r2, #34	; 0x22
 80027c6:	701a      	strb	r2, [r3, #0]
							  respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80027c8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	f207 4264 	addw	r2, r7, #1124	; 0x464
 80027d2:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 80027d6:	4413      	add	r3, r2
 80027d8:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2301      	movs	r3, #1
 80027e0:	2003      	movs	r0, #3
 80027e2:	f7ff f8db 	bl	800199c <commandRespond1>
 80027e6:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
							  total_respond_length += respond_lenght;
 80027ea:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 80027ee:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 80027f2:	4413      	add	r3, r2
 80027f4:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
							total_respond_length += respond_lenght;
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 80027f8:	e10d      	b.n	8002a16 <StartDefaultTask+0xd46>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
								  LOG_REPORT("TEST FAIL", __LINE__);
 8002800:	f240 21b9 	movw	r1, #697	; 0x2b9
 8002804:	482a      	ldr	r0, [pc, #168]	; (80028b0 <StartDefaultTask+0xbe0>)
 8002806:	f7ff f919 	bl	8001a3c <LOG_REPORT>
								detail_array[0] = status2;
 800280a:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800280e:	f897 2660 	ldrb.w	r2, [r7, #1632]	; 0x660
 8002812:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002814:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002818:	6899      	ldr	r1, [r3, #8]
 800281a:	f207 4264 	addw	r2, r7, #1124	; 0x464
 800281e:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002822:	4413      	add	r3, r2
 8002824:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2301      	movs	r3, #1
 800282c:	2007      	movs	r0, #7
 800282e:	f7ff f8b5 	bl	800199c <commandRespond1>
 8002832:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
								total_respond_length += respond_lenght;
 8002836:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 800283a:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 800283e:	4413      	add	r3, r2
 8002840:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
				  break;
 8002844:	e0e7      	b.n	8002a16 <StartDefaultTask+0xd46>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
							detail_array[0] = status1;
 800284c:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002850:	f897 2661 	ldrb.w	r2, [r7, #1633]	; 0x661
 8002854:	701a      	strb	r2, [r3, #0]
							respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002856:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800285a:	6899      	ldr	r1, [r3, #8]
 800285c:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002860:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002864:	4413      	add	r3, r2
 8002866:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2301      	movs	r3, #1
 800286e:	2007      	movs	r0, #7
 8002870:	f7ff f894 	bl	800199c <commandRespond1>
 8002874:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
							total_respond_length += respond_lenght;
 8002878:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 800287c:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002880:	4413      	add	r3, r2
 8002882:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
							  LOG_REPORT("INIT FAIL", __LINE__);
 8002886:	f240 21c7 	movw	r1, #711	; 0x2c7
 800288a:	480a      	ldr	r0, [pc, #40]	; (80028b4 <StartDefaultTask+0xbe4>)
 800288c:	f7ff f8d6 	bl	8001a3c <LOG_REPORT>
				  break;
 8002890:	e0c1      	b.n	8002a16 <StartDefaultTask+0xd46>
 8002892:	bf00      	nop
 8002894:	f3af 8000 	nop.w
 8002898:	40000000 	.word	0x40000000
 800289c:	3f847ae1 	.word	0x3f847ae1
 80028a0:	20005ae8 	.word	0x20005ae8
 80028a4:	20005c68 	.word	0x20005c68
 80028a8:	0801b0c4 	.word	0x0801b0c4
 80028ac:	0801b0d0 	.word	0x0801b0d0
 80028b0:	0801b0e0 	.word	0x0801b0e0
 80028b4:	0801b0ec 	.word	0x0801b0ec

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 80028b8:	a3e3      	add	r3, pc, #908	; (adr r3, 8002c48 <StartDefaultTask+0xf78>)
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80028c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028c6:	f7fd fce1 	bl	800028c <__adddf3>
 80028ca:	4603      	mov	r3, r0
 80028cc:	460c      	mov	r4, r1
 80028ce:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80028d2:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80028d6:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80028da:	ed93 0b00 	vldr	d0, [r3]
 80028de:	f007 fe19 	bl	800a514 <scaraIsFinish>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <StartDefaultTask+0xc20>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80028e8:	2303      	movs	r3, #3
 80028ea:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
								total_respond_length += respond_lenght;
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80028ee:	e092      	b.n	8002a16 <StartDefaultTask+0xd46>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80028f0:	4cd7      	ldr	r4, [pc, #860]	; (8002c50 <StartDefaultTask+0xf80>)
 80028f2:	4668      	mov	r0, sp
 80028f4:	f104 0308 	add.w	r3, r4, #8
 80028f8:	22b8      	movs	r2, #184	; 0xb8
 80028fa:	4619      	mov	r1, r3
 80028fc:	f013 f8f6 	bl	8015aec <memcpy>
 8002900:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002904:	48d3      	ldr	r0, [pc, #844]	; (8002c54 <StartDefaultTask+0xf84>)
 8002906:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 800290a:	ed91 0b00 	vldr	d0, [r1]
 800290e:	f005 fc81 	bl	8008214 <scaraFlowDuty>
 8002912:	4603      	mov	r3, r0
 8002914:	f887 3662 	strb.w	r3, [r7, #1634]	; 0x662
							  if ( SCARA_STATUS_OK == status) {
 8002918:	f897 3662 	ldrb.w	r3, [r7, #1634]	; 0x662
 800291c:	2b00      	cmp	r3, #0
 800291e:	d113      	bne.n	8002948 <StartDefaultTask+0xc78>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002920:	4ccb      	ldr	r4, [pc, #812]	; (8002c50 <StartDefaultTask+0xf80>)
 8002922:	4acc      	ldr	r2, [pc, #816]	; (8002c54 <StartDefaultTask+0xf84>)
 8002924:	ab2c      	add	r3, sp, #176	; 0xb0
 8002926:	4611      	mov	r1, r2
 8002928:	22c0      	movs	r2, #192	; 0xc0
 800292a:	4618      	mov	r0, r3
 800292c:	f013 f8de 	bl	8015aec <memcpy>
 8002930:	4668      	mov	r0, sp
 8002932:	f104 0310 	add.w	r3, r4, #16
 8002936:	22b0      	movs	r2, #176	; 0xb0
 8002938:	4619      	mov	r1, r3
 800293a:	f013 f8d7 	bl	8015aec <memcpy>
 800293e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002942:	f001 ff61 	bl	8004808 <lowlayer_computeAndWritePulse>
				  break;
 8002946:	e066      	b.n	8002a16 <StartDefaultTask+0xd46>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002948:	2303      	movs	r3, #3
 800294a:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
								detail_array[0] = status;
 800294e:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002952:	f897 2662 	ldrb.w	r2, [r7, #1634]	; 0x662
 8002956:	701a      	strb	r2, [r3, #0]
								respond_lenght = commandRespond1(RPD_STOP, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002958:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800295c:	6899      	ldr	r1, [r3, #8]
 800295e:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002962:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002966:	4413      	add	r3, r2
 8002968:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2301      	movs	r3, #1
 8002970:	2006      	movs	r0, #6
 8002972:	f7ff f813 	bl	800199c <commandRespond1>
 8002976:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
								total_respond_length += respond_lenght;
 800297a:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 800297e:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002982:	4413      	add	r3, r2
 8002984:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
								  LOG_REPORT("STOP DUTY", __LINE__);
 8002988:	f240 21ed 	movw	r1, #749	; 0x2ed
 800298c:	48b2      	ldr	r0, [pc, #712]	; (8002c58 <StartDefaultTask+0xf88>)
 800298e:	f7ff f855 	bl	8001a3c <LOG_REPORT>
				  break;
 8002992:	e040      	b.n	8002a16 <StartDefaultTask+0xd46>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  lowlayer_readTruePosition(&positionNext);
 8002994:	48af      	ldr	r0, [pc, #700]	; (8002c54 <StartDefaultTask+0xf84>)
 8002996:	f001 fda7 	bl	80044e8 <lowlayer_readTruePosition>
						  kinematicForward(&positionNext);
 800299a:	48ae      	ldr	r0, [pc, #696]	; (8002c54 <StartDefaultTask+0xf84>)
 800299c:	f000 feb0 	bl	8003700 <kinematicForward>
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
						  positionNext.t = 0;
 80029a6:	4aab      	ldr	r2, [pc, #684]	; (8002c54 <StartDefaultTask+0xf84>)
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	f04f 0400 	mov.w	r4, #0
 80029b0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 80029b4:	4aa7      	ldr	r2, [pc, #668]	; (8002c54 <StartDefaultTask+0xf84>)
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	f04f 0400 	mov.w	r4, #0
 80029be:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 80029c2:	4aa4      	ldr	r2, [pc, #656]	; (8002c54 <StartDefaultTask+0xf84>)
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f04f 0400 	mov.w	r4, #0
 80029cc:	e9c2 3400 	strd	r3, r4, [r2]
// #endif
// 						  infor_lenght 		= commandRespond(RPD_DONE,
// 															 0,
// 															 (char *)position,
// 															 (char *)infor);
					detail_array[0] = NONE;
 80029d0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80029d4:	2222      	movs	r2, #34	; 0x22
 80029d6:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 80029d8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80029dc:	6899      	ldr	r1, [r3, #8]
 80029de:	f207 4264 	addw	r2, r7, #1124	; 0x464
 80029e2:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 80029e6:	4413      	add	r3, r2
 80029e8:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	2301      	movs	r3, #1
 80029f0:	2005      	movs	r0, #5
 80029f2:	f7fe ffd3 	bl	800199c <commandRespond1>
 80029f6:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
					total_respond_length += respond_lenght;
 80029fa:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 80029fe:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002a02:	4413      	add	r3, r2
 8002a04:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
					  }
				  break;
 8002a08:	e005      	b.n	8002a16 <StartDefaultTask+0xd46>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002a0a:	f240 310d 	movw	r1, #781	; 0x30d
 8002a0e:	4893      	ldr	r0, [pc, #588]	; (8002c5c <StartDefaultTask+0xf8c>)
 8002a10:	f7ff f814 	bl	8001a3c <LOG_REPORT>
						  while(1);
 8002a14:	e7fe      	b.n	8002a14 <StartDefaultTask+0xd44>
					  }
				  }

			  }
			  break;
 8002a16:	e005      	b.n	8002a24 <StartDefaultTask+0xd54>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002a18:	f240 3117 	movw	r1, #791	; 0x317
 8002a1c:	4890      	ldr	r0, [pc, #576]	; (8002c60 <StartDefaultTask+0xf90>)
 8002a1e:	f7ff f80d 	bl	8001a3c <LOG_REPORT>
				  while(1);
 8002a22:	e7fe      	b.n	8002a22 <StartDefaultTask+0xd52>
			  }
		  }
	  }
	  break;
 8002a24:	e3bf      	b.n	80031a6 <StartDefaultTask+0x14d6>

	  case SCARA_METHOD_AUTO:
	  {
		  switch (current_duty_state)
 8002a26:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	f200 8153 	bhi.w	8002cd6 <StartDefaultTask+0x1006>
 8002a30:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <StartDefaultTask+0xd68>)
 8002a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a36:	bf00      	nop
 8002a38:	08002cd7 	.word	0x08002cd7
 8002a3c:	08002a49 	.word	0x08002a49
 8002a40:	08002bad 	.word	0x08002bad
 8002a44:	08002c6d 	.word	0x08002c6d
		  case SCARA_DUTY_STATE_READY:
			  
		  break;
		  case SCARA_DUTY_STATE_INIT:{
			  SCARA_StatusTypeDef status1, status2;
			  status1 = scara_test_InitDuty(duty_cmd);
 8002a48:	f507 6492 	add.w	r4, r7, #1168	; 0x490
 8002a4c:	4668      	mov	r0, sp
 8002a4e:	f104 0310 	add.w	r3, r4, #16
 8002a52:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002a56:	4619      	mov	r1, r3
 8002a58:	f013 f848 	bl	8015aec <memcpy>
 8002a5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a60:	f002 fa66 	bl	8004f30 <scara_test_InitDuty>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f887 3664 	strb.w	r3, [r7, #1636]	; 0x664
			  if ( SCARA_STATUS_OK == status1) {
 8002a6a:	f897 3664 	ldrb.w	r3, [r7, #1636]	; 0x664
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d176      	bne.n	8002b60 <StartDefaultTask+0xe90>
				  current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002a72:	2302      	movs	r3, #2
 8002a74:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
			  	status2 = scaraTestLinearDuty();
 8002a78:	f007 fbb6 	bl	800a1e8 <scaraTestLinearDuty>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f887 3663 	strb.w	r3, [r7, #1635]	; 0x663
			  	if (SCARA_STATUS_OK == status2) {
 8002a82:	f897 3663 	ldrb.w	r3, [r7, #1635]	; 0x663
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d144      	bne.n	8002b14 <StartDefaultTask+0xe44>
			  		current_duty_state = SCARA_DUTY_STATE_FLOW;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
			  		run_time			= 0;
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	f04f 0400 	mov.w	r4, #0
 8002a98:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8002a9c:	e9c2 3400 	strd	r3, r4, [r2]
			  		// Respond
			  		detail_array[0] = status1;
 8002aa0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002aa4:	f897 2664 	ldrb.w	r2, [r7, #1636]	; 0x664
 8002aa8:	701a      	strb	r2, [r3, #0]
			  		respond_lenght = commandRespond1(RPD_OK, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002aaa:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002aae:	6899      	ldr	r1, [r3, #8]
 8002ab0:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002ab4:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002ab8:	4413      	add	r3, r2
 8002aba:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	2008      	movs	r0, #8
 8002ac4:	f7fe ff6a 	bl	800199c <commandRespond1>
 8002ac8:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
			  		total_respond_length += respond_lenght;
 8002acc:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8002ad0:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
			  		detail_array[0] = NONE;
 8002ada:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002ade:	2222      	movs	r2, #34	; 0x22
 8002ae0:	701a      	strb	r2, [r3, #0]
			  		respond_lenght = commandRespond1(RPD_START, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ae2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002aec:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002af0:	4413      	add	r3, r2
 8002af2:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2301      	movs	r3, #1
 8002afa:	2003      	movs	r0, #3
 8002afc:	f7fe ff4e 	bl	800199c <commandRespond1>
 8002b00:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
			  		total_respond_length += respond_lenght;
 8002b04:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8002b08:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
			    respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
			    total_respond_length += respond_lenght;
			  	LOG_REPORT("INIT FAIL", __LINE__);
			  }
			}
		  break;
 8002b12:	e0e1      	b.n	8002cd8 <StartDefaultTask+0x1008>
					current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
					LOG_REPORT("TEST FAIL", __LINE__);
 8002b1a:	f240 3137 	movw	r1, #823	; 0x337
 8002b1e:	4851      	ldr	r0, [pc, #324]	; (8002c64 <StartDefaultTask+0xf94>)
 8002b20:	f7fe ff8c 	bl	8001a3c <LOG_REPORT>
					detail_array[0] = status2;
 8002b24:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002b28:	f897 2663 	ldrb.w	r2, [r7, #1635]	; 0x663
 8002b2c:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b2e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002b32:	6899      	ldr	r1, [r3, #8]
 8002b34:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002b38:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2301      	movs	r3, #1
 8002b46:	2007      	movs	r0, #7
 8002b48:	f7fe ff28 	bl	800199c <commandRespond1>
 8002b4c:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
					total_respond_length += respond_lenght;
 8002b50:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8002b54:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002b58:	4413      	add	r3, r2
 8002b5a:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
		  break;
 8002b5e:	e0bb      	b.n	8002cd8 <StartDefaultTask+0x1008>
			  	current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
			    detail_array[0] = status1;
 8002b66:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002b6a:	f897 2664 	ldrb.w	r2, [r7, #1636]	; 0x664
 8002b6e:	701a      	strb	r2, [r3, #0]
			    respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002b70:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002b74:	6899      	ldr	r1, [r3, #8]
 8002b76:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002b7a:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002b7e:	4413      	add	r3, r2
 8002b80:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2301      	movs	r3, #1
 8002b88:	2007      	movs	r0, #7
 8002b8a:	f7fe ff07 	bl	800199c <commandRespond1>
 8002b8e:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
			    total_respond_length += respond_lenght;
 8002b92:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8002b96:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
			  	LOG_REPORT("INIT FAIL", __LINE__);
 8002ba0:	f240 3141 	movw	r1, #833	; 0x341
 8002ba4:	4830      	ldr	r0, [pc, #192]	; (8002c68 <StartDefaultTask+0xf98>)
 8002ba6:	f7fe ff49 	bl	8001a3c <LOG_REPORT>
		  break;
 8002baa:	e095      	b.n	8002cd8 <StartDefaultTask+0x1008>

		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002bac:	a326      	add	r3, pc, #152	; (adr r3, 8002c48 <StartDefaultTask+0xf78>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8002bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bba:	f7fd fb67 	bl	800028c <__adddf3>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8002bc6:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002bca:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8002bce:	ed93 0b00 	vldr	d0, [r3]
 8002bd2:	f007 fc9f 	bl	800a514 <scaraIsFinish>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <StartDefaultTask+0xf14>
			  	current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002bdc:	2303      	movs	r3, #3
 8002bde:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
				  }else{
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
				  }
			  }
		  }
		  break;
 8002be2:	e079      	b.n	8002cd8 <StartDefaultTask+0x1008>
			  	status = scaraTestFlowDuty(run_time , &positionNext, positionCurrent);
 8002be4:	4c1a      	ldr	r4, [pc, #104]	; (8002c50 <StartDefaultTask+0xf80>)
 8002be6:	4668      	mov	r0, sp
 8002be8:	f104 0308 	add.w	r3, r4, #8
 8002bec:	22b8      	movs	r2, #184	; 0xb8
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f012 ff7c 	bl	8015aec <memcpy>
 8002bf4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002bf8:	4816      	ldr	r0, [pc, #88]	; (8002c54 <StartDefaultTask+0xf84>)
 8002bfa:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8002bfe:	ed91 0b00 	vldr	d0, [r1]
 8002c02:	f005 fa9b 	bl	800813c <scaraTestFlowDuty>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 3665 	strb.w	r3, [r7, #1637]	; 0x665
			  	if ( SCARA_STATUS_OK == status) {
 8002c0c:	f897 3665 	ldrb.w	r3, [r7, #1637]	; 0x665
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d113      	bne.n	8002c3c <StartDefaultTask+0xf6c>
			  		lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002c14:	4c0e      	ldr	r4, [pc, #56]	; (8002c50 <StartDefaultTask+0xf80>)
 8002c16:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <StartDefaultTask+0xf84>)
 8002c18:	ab2c      	add	r3, sp, #176	; 0xb0
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	22c0      	movs	r2, #192	; 0xc0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f012 ff64 	bl	8015aec <memcpy>
 8002c24:	4668      	mov	r0, sp
 8002c26:	f104 0310 	add.w	r3, r4, #16
 8002c2a:	22b0      	movs	r2, #176	; 0xb0
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f012 ff5d 	bl	8015aec <memcpy>
 8002c32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c36:	f001 fde7 	bl	8004808 <lowlayer_computeAndWritePulse>
		  break;
 8002c3a:	e04d      	b.n	8002cd8 <StartDefaultTask+0x1008>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
		  break;
 8002c42:	e049      	b.n	8002cd8 <StartDefaultTask+0x1008>
 8002c44:	f3af 8000 	nop.w
 8002c48:	40000000 	.word	0x40000000
 8002c4c:	3f847ae1 	.word	0x3f847ae1
 8002c50:	20005ae8 	.word	0x20005ae8
 8002c54:	20005c68 	.word	0x20005c68
 8002c58:	0801b0f8 	.word	0x0801b0f8
 8002c5c:	0801b0d0 	.word	0x0801b0d0
 8002c60:	0801b104 	.word	0x0801b104
 8002c64:	0801b0e0 	.word	0x0801b0e0
 8002c68:	0801b0ec 	.word	0x0801b0ec

		  case SCARA_DUTY_STATE_FINISH:{
		  	current_duty_state = SCARA_DUTY_STATE_READY;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
			positionNext.t = 0;
 8002c72:	4acb      	ldr	r2, [pc, #812]	; (8002fa0 <StartDefaultTask+0x12d0>)
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	f04f 0400 	mov.w	r4, #0
 8002c7c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			positionNext.total_time = 0;
 8002c80:	4ac7      	ldr	r2, [pc, #796]	; (8002fa0 <StartDefaultTask+0x12d0>)
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	f04f 0400 	mov.w	r4, #0
 8002c8a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			positionNext.q = 0;
 8002c8e:	4ac4      	ldr	r2, [pc, #784]	; (8002fa0 <StartDefaultTask+0x12d0>)
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	f04f 0400 	mov.w	r4, #0
 8002c98:	e9c2 3400 	strd	r3, r4, [r2]

			detail_array[0] = NONE;
 8002c9c:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8002ca0:	2222      	movs	r2, #34	; 0x22
 8002ca2:	701a      	strb	r2, [r3, #0]
			respond_lenght = commandRespond1(RPD_DONE, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8002ca4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002ca8:	6899      	ldr	r1, [r3, #8]
 8002caa:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002cae:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	2005      	movs	r0, #5
 8002cbe:	f7fe fe6d 	bl	800199c <commandRespond1>
 8002cc2:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
			total_respond_length += respond_lenght;
 8002cc6:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8002cca:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8002cce:	4413      	add	r3, r2
 8002cd0:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
		  }
		  break;
 8002cd4:	e000      	b.n	8002cd8 <StartDefaultTask+0x1008>
		  
		  default:
			  break;
 8002cd6:	bf00      	nop
		  }
	  }

	  break;
 8002cd8:	e265      	b.n	80031a6 <StartDefaultTask+0x14d6>
	  case SCARA_METHOD_TEST:
	  {
		  lowlayer_writePulse(test_value[0], test_value[1], test_value[2], test_value[3]);
 8002cda:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002cde:	f993 0000 	ldrsb.w	r0, [r3]
 8002ce2:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002ce6:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8002cea:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002cee:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8002cf2:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8002cf6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002cfa:	f001 ff29 	bl	8004b50 <lowlayer_writePulse>
	  }
	  break;
 8002cfe:	e252      	b.n	80031a6 <StartDefaultTask+0x14d6>


	  case SCARA_METHOD_PICK_AND_PLACE:
	  {
		  switch(current_duty_state) {
 8002d00:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 8002d04:	3b01      	subs	r3, #1
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	f200 824c 	bhi.w	80031a4 <StartDefaultTask+0x14d4>
 8002d0c:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <StartDefaultTask+0x1044>)
 8002d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d12:	bf00      	nop
 8002d14:	08002d25 	.word	0x08002d25
 8002d18:	080030bd 	.word	0x080030bd
 8002d1c:	08003193 	.word	0x08003193
 8002d20:	08002d65 	.word	0x08002d65
		  case SCARA_DUTY_STATE_INIT:{
			  Object = calloc(8, sizeof(SCARA_Pick_And_Place_Package));
 8002d24:	21c8      	movs	r1, #200	; 0xc8
 8002d26:	2008      	movs	r0, #8
 8002d28:	f012 fe9e 	bl	8015a68 <calloc>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
			  object_tail_pointer = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 369a 	strb.w	r3, [r7, #1690]	; 0x69a
			  object_head_pointer = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 3699 	strb.w	r3, [r7, #1689]	; 0x699
			  operation_state = SCARA_MOVE_TO_TARGET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 369b 	strb.w	r3, [r7, #1691]	; 0x69b
			  current_duty_state = SCARA_DUTY_STATE_OPERATION;
 8002d44:	2304      	movs	r3, #4
 8002d46:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
			  duty_cmd.robot_method = SCARA_METHOD_PICK_AND_PLACE;
 8002d4a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002d4e:	2204      	movs	r2, #4
 8002d50:	705a      	strb	r2, [r3, #1]
			  duty_cmd.path_type = DUTY_PATH_LINE;
 8002d52:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002d56:	2200      	movs	r2, #0
 8002d58:	739a      	strb	r2, [r3, #14]
			  duty_cmd.space_type = DUTY_SPACE_TASK;
 8002d5a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002d5e:	2200      	movs	r2, #0
 8002d60:	735a      	strb	r2, [r3, #13]
		  }
		  break;
 8002d62:	e21c      	b.n	800319e <StartDefaultTask+0x14ce>

		  case SCARA_DUTY_STATE_OPERATION:{
			  if(object_tail_pointer != object_head_pointer){
 8002d64:	f897 269a 	ldrb.w	r2, [r7, #1690]	; 0x69a
 8002d68:	f897 3699 	ldrb.w	r3, [r7, #1689]	; 0x699
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f000 8215 	beq.w	800319c <StartDefaultTask+0x14cc>
				  switch(operation_state){
 8002d72:	f897 369b 	ldrb.w	r3, [r7, #1691]	; 0x69b
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	f200 8135 	bhi.w	8002fe6 <StartDefaultTask+0x1316>
 8002d7c:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <StartDefaultTask+0x10b4>)
 8002d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d82:	bf00      	nop
 8002d84:	08002da1 	.word	0x08002da1
 8002d88:	08002e71 	.word	0x08002e71
 8002d8c:	08002e9b 	.word	0x08002e9b
 8002d90:	08002eb1 	.word	0x08002eb1
 8002d94:	08002f55 	.word	0x08002f55
 8002d98:	08002f7f 	.word	0x08002f7f
 8002d9c:	08002fbd 	.word	0x08002fbd
					  case SCARA_MOVE_TO_TARGET:{
						  double wait_time = TIMER_SCALE*((uint16_t)(TIM2->CNT - Object[object_tail_pointer].timer_value)) + MOVE_TIME + PUT_DOWN_TIME;
 8002da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002dac:	21c8      	movs	r1, #200	; 0xc8
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	f8d7 169c 	ldr.w	r1, [r7, #1692]	; 0x69c
 8002db6:	440b      	add	r3, r1
 8002db8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002fa4 <StartDefaultTask+0x12d4>
 8002dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd0:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002fa8 <StartDefaultTask+0x12d8>
 8002dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ddc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002de0:	ee17 0a90 	vmov	r0, s15
 8002de4:	f7fd fbb0 	bl	8000548 <__aeabi_f2d>
 8002de8:	4603      	mov	r3, r0
 8002dea:	460c      	mov	r4, r1
 8002dec:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8002df0:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.y += wait_time*conveyor_speed;
 8002df4:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002df8:	22c8      	movs	r2, #200	; 0xc8
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002e02:	4413      	add	r3, r2
 8002e04:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002e08:	4b68      	ldr	r3, [pc, #416]	; (8002fac <StartDefaultTask+0x12dc>)
 8002e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e0e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	f7fd fbef 	bl	80005f8 <__aeabi_dmul>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002e26:	22c8      	movs	r2, #200	; 0xc8
 8002e28:	fb02 f303 	mul.w	r3, r2, r3
 8002e2c:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002e30:	18d6      	adds	r6, r2, r3
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4620      	mov	r0, r4
 8002e38:	4629      	mov	r1, r5
 8002e3a:	f7fd fa27 	bl	800028c <__adddf3>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	460c      	mov	r4, r1
 8002e42:	e9c6 3414 	strd	r3, r4, [r6, #80]	; 0x50
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8002e46:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002e4a:	22c8      	movs	r2, #200	; 0xc8
 8002e4c:	fb02 f303 	mul.w	r3, r2, r3
 8002e50:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002e54:	441a      	add	r2, r3
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	4c55      	ldr	r4, [pc, #340]	; (8002fb0 <StartDefaultTask+0x12e0>)
 8002e5c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
						  state_time = MOVE_TIME;
 8002e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e64:	4c53      	ldr	r4, [pc, #332]	; (8002fb4 <StartDefaultTask+0x12e4>)
 8002e66:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8002e6a:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8002e6e:	e0ba      	b.n	8002fe6 <StartDefaultTask+0x1316>

					  case SCARA_MOVE_DOWN_ON_OBJECT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_OBJECT;
 8002e70:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002e74:	22c8      	movs	r2, #200	; 0xc8
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002e7e:	441a      	add	r2, r3
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	4c4c      	ldr	r4, [pc, #304]	; (8002fb8 <StartDefaultTask+0x12e8>)
 8002e86:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
						  state_time = DOWN_HEIGHT_ON_OBJECT;
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	4c4a      	ldr	r4, [pc, #296]	; (8002fb8 <StartDefaultTask+0x12e8>)
 8002e90:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8002e94:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8002e98:	e0a5      	b.n	8002fe6 <StartDefaultTask+0x1316>
					  case SCARA_ATTACH:{
						  state_time = ATTACH_TIME;
 8002e9a:	a43f      	add	r4, pc, #252	; (adr r4, 8002f98 <StartDefaultTask+0x12c8>)
 8002e9c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002ea0:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8002ea4:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(1);
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f007 faa1 	bl	800a3f0 <scaraSetOutput>
					  }
					  break;
 8002eae:	e09a      	b.n	8002fe6 <StartDefaultTask+0x1316>
					  case SCARA_MOVE_TO_SLOT :{
						  // handle later when define the slot cordinate
						  Object[object_tail_pointer].object_position.x = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posx;
 8002eb0:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002eb4:	22c8      	movs	r2, #200	; 0xc8
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002eca:	22c8      	movs	r2, #200	; 0xc8
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002ed4:	441a      	add	r2, r3
 8002ed6:	f107 0118 	add.w	r1, r7, #24
 8002eda:	4603      	mov	r3, r0
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4403      	add	r3, r0
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	440b      	add	r3, r1
 8002ee4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ee8:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
						  Object[object_tail_pointer].object_position.y = SLot_Cordinate[Object[object_tail_pointer].object_position.object_type].posy;;
 8002eec:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002ef0:	22c8      	movs	r2, #200	; 0xc8
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002efa:	4413      	add	r3, r2
 8002efc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002f00:	4618      	mov	r0, r3
 8002f02:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002f06:	22c8      	movs	r2, #200	; 0xc8
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002f10:	441a      	add	r2, r3
 8002f12:	f107 0118 	add.w	r1, r7, #24
 8002f16:	4603      	mov	r3, r0
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4403      	add	r3, r0
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	3308      	adds	r3, #8
 8002f22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f26:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8002f2a:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002f2e:	22c8      	movs	r2, #200	; 0xc8
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002f38:	441a      	add	r2, r3
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	4c1c      	ldr	r4, [pc, #112]	; (8002fb0 <StartDefaultTask+0x12e0>)
 8002f40:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
						  state_time = MOVE_TIME;
 8002f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f48:	4c1a      	ldr	r4, [pc, #104]	; (8002fb4 <StartDefaultTask+0x12e4>)
 8002f4a:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8002f4e:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8002f52:	e048      	b.n	8002fe6 <StartDefaultTask+0x1316>
					  case SCARA_MOVE_DOWN_ON_SLOT:{
						  Object[object_tail_pointer].object_position.z = DOWN_HEIGHT_ON_SLOT;
 8002f54:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002f58:	22c8      	movs	r2, #200	; 0xc8
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002f62:	441a      	add	r2, r3
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	4c13      	ldr	r4, [pc, #76]	; (8002fb8 <StartDefaultTask+0x12e8>)
 8002f6a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
						  state_time = DOWN_HEIGHT_ON_OBJECT;
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	4c11      	ldr	r4, [pc, #68]	; (8002fb8 <StartDefaultTask+0x12e8>)
 8002f74:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8002f78:	e9c2 3400 	strd	r3, r4, [r2]
					  }
					  break;
 8002f7c:	e033      	b.n	8002fe6 <StartDefaultTask+0x1316>
					  case SCARA_RELEASE:{
						  state_time = DETACH_TIME;
 8002f7e:	a406      	add	r4, pc, #24	; (adr r4, 8002f98 <StartDefaultTask+0x12c8>)
 8002f80:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002f84:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8002f88:	e9c2 3400 	strd	r3, r4, [r2]
						  scaraSetOutput(0);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f007 fa2f 	bl	800a3f0 <scaraSetOutput>
					  }
					  break;
 8002f92:	e028      	b.n	8002fe6 <StartDefaultTask+0x1316>
 8002f94:	f3af 8000 	nop.w
 8002f98:	a0000000 	.word	0xa0000000
 8002f9c:	3fb99999 	.word	0x3fb99999
 8002fa0:	20005c68 	.word	0x20005c68
 8002fa4:	399c09bf 	.word	0x399c09bf
 8002fa8:	3f99999a 	.word	0x3f99999a
 8002fac:	20000ba0 	.word	0x20000ba0
 8002fb0:	40590000 	.word	0x40590000
 8002fb4:	3ff33333 	.word	0x3ff33333
 8002fb8:	40440000 	.word	0x40440000
					  case SCARA_MOVE_UP:{
						  state_time = PICK_UP_TIME;
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	4c8b      	ldr	r4, [pc, #556]	; (80031f0 <StartDefaultTask+0x1520>)
 8002fc2:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8002fc6:	e9c2 3400 	strd	r3, r4, [r2]
						  Object[object_tail_pointer].object_position.z = UP_HEIGHT;
 8002fca:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002fce:	22c8      	movs	r2, #200	; 0xc8
 8002fd0:	fb02 f303 	mul.w	r3, r2, r3
 8002fd4:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002fd8:	441a      	add	r2, r3
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	4c85      	ldr	r4, [pc, #532]	; (80031f4 <StartDefaultTask+0x1524>)
 8002fe0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
					  }
					  break;
 8002fe4:	bf00      	nop
				  }
				  memcpy(&duty_cmd.target_point, &Object[object_tail_pointer].object_position, sizeof(SCARA_PositionTypeDef));
 8002fe6:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8002fea:	22c8      	movs	r2, #200	; 0xc8
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8002ff4:	4413      	add	r3, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002ffc:	3328      	adds	r3, #40	; 0x28
 8002ffe:	22c0      	movs	r2, #192	; 0xc0
 8003000:	4618      	mov	r0, r3
 8003002:	f012 fd73 	bl	8015aec <memcpy>
				  duty_cmd.time_total = state_time;
 8003006:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800300a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800300e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003012:	e9c2 3408 	strd	r3, r4, [r2, #32]
				  SCARA_StatusTypeDef status1;
				  status1 = scaraInitDuty(duty_cmd);
 8003016:	f507 6492 	add.w	r4, r7, #1168	; 0x490
 800301a:	4668      	mov	r0, sp
 800301c:	f104 0310 	add.w	r3, r4, #16
 8003020:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003024:	4619      	mov	r1, r3
 8003026:	f012 fd61 	bl	8015aec <memcpy>
 800302a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800302e:	f002 f8b3 	bl	8005198 <scaraInitDuty>
 8003032:	4603      	mov	r3, r0
 8003034:	f887 3667 	strb.w	r3, [r7, #1639]	; 0x667
				  if ( SCARA_STATUS_OK == status1) {
 8003038:	f897 3667 	ldrb.w	r3, [r7, #1639]	; 0x667
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <StartDefaultTask+0x1388>
				  	current_duty_state = SCARA_DUTY_STATE_FLOW;
 8003040:	2302      	movs	r3, #2
 8003042:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
				  	run_time = 0;
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	f04f 0400 	mov.w	r4, #0
 800304e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003052:	e9c2 3400 	strd	r3, r4, [r2]
 8003056:	e031      	b.n	80030bc <StartDefaultTask+0x13ec>
				  } else {
					object_tail_pointer = (object_tail_pointer+1)%8;
 8003058:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 800305c:	3301      	adds	r3, #1
 800305e:	425a      	negs	r2, r3
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	f002 0207 	and.w	r2, r2, #7
 8003068:	bf58      	it	pl
 800306a:	4253      	negpl	r3, r2
 800306c:	f887 369a 	strb.w	r3, [r7, #1690]	; 0x69a
					operation_state = SCARA_MOVE_TO_TARGET;
 8003070:	2300      	movs	r3, #0
 8003072:	f887 369b 	strb.w	r3, [r7, #1691]	; 0x69b
					detail_array[0] = status1;
 8003076:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800307a:	f897 2667 	ldrb.w	r2, [r7, #1639]	; 0x667
 800307e:	701a      	strb	r2, [r3, #0]
					respond_lenght = commandRespond1(RPD_ERROR, duty_cmd.id_command, detail_array, 1, &respond[total_respond_length]);
 8003080:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003084:	6899      	ldr	r1, [r3, #8]
 8003086:	f207 4264 	addw	r2, r7, #1124	; 0x464
 800308a:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 800308e:	4413      	add	r3, r2
 8003090:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2301      	movs	r3, #1
 8003098:	2007      	movs	r0, #7
 800309a:	f7fe fc7f 	bl	800199c <commandRespond1>
 800309e:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
					total_respond_length += respond_lenght;
 80030a2:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 80030a6:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 80030aa:	4413      	add	r3, r2
 80030ac:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
					LOG_REPORT("INIT FAIL", __LINE__);
 80030b0:	f240 31ba 	movw	r1, #954	; 0x3ba
 80030b4:	4850      	ldr	r0, [pc, #320]	; (80031f8 <StartDefaultTask+0x1528>)
 80030b6:	f7fe fcc1 	bl	8001a3c <LOG_REPORT>
					break;
 80030ba:	e070      	b.n	800319e <StartDefaultTask+0x14ce>


		  case SCARA_DUTY_STATE_FLOW:{
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80030bc:	a34a      	add	r3, pc, #296	; (adr r3, 80031e8 <StartDefaultTask+0x1518>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80030c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030ca:	f7fd f8df 	bl	800028c <__adddf3>
 80030ce:	4603      	mov	r3, r0
 80030d0:	460c      	mov	r4, r1
 80030d2:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80030d6:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80030da:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80030de:	ed93 0b00 	vldr	d0, [r3]
 80030e2:	f007 fa17 	bl	800a514 <scaraIsFinish>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d022      	beq.n	8003132 <StartDefaultTask+0x1462>
				current_duty_state = SCARA_DUTY_STATE_OPERATION;
 80030ec:	2304      	movs	r3, #4
 80030ee:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
				if(operation_state == SCARA_MOVE_UP){
 80030f2:	f897 369b 	ldrb.w	r3, [r7, #1691]	; 0x69b
 80030f6:	2b06      	cmp	r3, #6
 80030f8:	d10f      	bne.n	800311a <StartDefaultTask+0x144a>
					operation_state = SCARA_MOVE_TO_TARGET;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 369b 	strb.w	r3, [r7, #1691]	; 0x69b
					object_tail_pointer = (object_tail_pointer+1)%8;
 8003100:	f897 369a 	ldrb.w	r3, [r7, #1690]	; 0x69a
 8003104:	3301      	adds	r3, #1
 8003106:	425a      	negs	r2, r3
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	f002 0207 	and.w	r2, r2, #7
 8003110:	bf58      	it	pl
 8003112:	4253      	negpl	r3, r2
 8003114:	f887 369a 	strb.w	r3, [r7, #1690]	; 0x69a
 8003118:	e004      	b.n	8003124 <StartDefaultTask+0x1454>
				}else{
					operation_state += 1; //next state
 800311a:	f897 369b 	ldrb.w	r3, [r7, #1691]	; 0x69b
 800311e:	3301      	adds	r3, #1
 8003120:	f887 369b 	strb.w	r3, [r7, #1691]	; 0x69b
				}
				lowlayer_readTruePosition(&positionNext);
 8003124:	4835      	ldr	r0, [pc, #212]	; (80031fc <StartDefaultTask+0x152c>)
 8003126:	f001 f9df 	bl	80044e8 <lowlayer_readTruePosition>
				kinematicForward(&positionNext);
 800312a:	4834      	ldr	r0, [pc, #208]	; (80031fc <StartDefaultTask+0x152c>)
 800312c:	f000 fae8 	bl	8003700 <kinematicForward>
				  }else{
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
				  }
			  }
		  }
		  break;
 8003130:	e035      	b.n	800319e <StartDefaultTask+0x14ce>
				status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8003132:	4c33      	ldr	r4, [pc, #204]	; (8003200 <StartDefaultTask+0x1530>)
 8003134:	4668      	mov	r0, sp
 8003136:	f104 0308 	add.w	r3, r4, #8
 800313a:	22b8      	movs	r2, #184	; 0xb8
 800313c:	4619      	mov	r1, r3
 800313e:	f012 fcd5 	bl	8015aec <memcpy>
 8003142:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003146:	482d      	ldr	r0, [pc, #180]	; (80031fc <StartDefaultTask+0x152c>)
 8003148:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 800314c:	ed91 0b00 	vldr	d0, [r1]
 8003150:	f005 f860 	bl	8008214 <scaraFlowDuty>
 8003154:	4603      	mov	r3, r0
 8003156:	f887 3666 	strb.w	r3, [r7, #1638]	; 0x666
				if ( SCARA_STATUS_OK == status) {
 800315a:	f897 3666 	ldrb.w	r3, [r7, #1638]	; 0x666
 800315e:	2b00      	cmp	r3, #0
 8003160:	d113      	bne.n	800318a <StartDefaultTask+0x14ba>
					lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8003162:	4c27      	ldr	r4, [pc, #156]	; (8003200 <StartDefaultTask+0x1530>)
 8003164:	4a25      	ldr	r2, [pc, #148]	; (80031fc <StartDefaultTask+0x152c>)
 8003166:	ab2c      	add	r3, sp, #176	; 0xb0
 8003168:	4611      	mov	r1, r2
 800316a:	22c0      	movs	r2, #192	; 0xc0
 800316c:	4618      	mov	r0, r3
 800316e:	f012 fcbd 	bl	8015aec <memcpy>
 8003172:	4668      	mov	r0, sp
 8003174:	f104 0310 	add.w	r3, r4, #16
 8003178:	22b0      	movs	r2, #176	; 0xb0
 800317a:	4619      	mov	r1, r3
 800317c:	f012 fcb6 	bl	8015aec <memcpy>
 8003180:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003184:	f001 fb40 	bl	8004808 <lowlayer_computeAndWritePulse>
		  break;
 8003188:	e009      	b.n	800319e <StartDefaultTask+0x14ce>
					  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800318a:	2303      	movs	r3, #3
 800318c:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
		  break;
 8003190:	e005      	b.n	800319e <StartDefaultTask+0x14ce>

		  case SCARA_DUTY_STATE_FINISH:
			  //error
			  free(Object);
 8003192:	f8d7 069c 	ldr.w	r0, [r7, #1692]	; 0x69c
 8003196:	f012 fca1 	bl	8015adc <free>
		  break;
 800319a:	e000      	b.n	800319e <StartDefaultTask+0x14ce>
				  break;
 800319c:	bf00      	nop
		  }
	  }
	  break;
 800319e:	e001      	b.n	80031a4 <StartDefaultTask+0x14d4>
	  break;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <StartDefaultTask+0x14d6>
	  break;
 80031a4:	bf00      	nop
	//   // Send through USB
	//   if (usb_lenght > 0) {
	// 	  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
	//   }

	if(total_respond_length > 0){
 80031a6:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	dd08      	ble.n	80031c0 <StartDefaultTask+0x14f0>
		CDC_Transmit_FS(respond, total_respond_length);
 80031ae:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f012 f812 	bl	80151e4 <CDC_Transmit_FS>
	}

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 80031c0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 80031c4:	4618      	mov	r0, r3
 80031c6:	f007 f945 	bl	800a454 <scaraSetMethod>
	  scaraSetMode(current_mode);
 80031ca:	f897 36b6 	ldrb.w	r3, [r7, #1718]	; 0x6b6
 80031ce:	4618      	mov	r0, r3
 80031d0:	f007 f930 	bl	800a434 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 80031d4:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 80031d8:	4618      	mov	r0, r3
 80031da:	f007 f91b 	bl	800a414 <scaraSetDutyState>

    osDelay(1);
 80031de:	2001      	movs	r0, #1
 80031e0:	f00f f91a 	bl	8012418 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 80031e4:	f7fe bdd9 	b.w	8001d9a <StartDefaultTask+0xca>
 80031e8:	40000000 	.word	0x40000000
 80031ec:	3f847ae1 	.word	0x3f847ae1
 80031f0:	3ff00000 	.word	0x3ff00000
 80031f4:	40590000 	.word	0x40590000
 80031f8:	0801b0ec 	.word	0x0801b0ec
 80031fc:	20005c68 	.word	0x20005c68
 8003200:	20005ae8 	.word	0x20005ae8

08003204 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 800320a:	af70      	add	r7, sp, #448	; 0x1c0
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8003210:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003214:	2201      	movs	r2, #1
 8003216:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8003218:	2129      	movs	r1, #41	; 0x29
 800321a:	4868      	ldr	r0, [pc, #416]	; (80033bc <Start_USB_RX_Task+0x1b8>)
 800321c:	f000 fefe 	bl	800401c <ringBuff_DistanceOf>
 8003220:	f8c7 03a0 	str.w	r0, [r7, #928]	; 0x3a0
		  if ( -1 != distance ) {
 8003224:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d0f4      	beq.n	8003218 <Start_USB_RX_Task+0x14>
 800322e:	466b      	mov	r3, sp
 8003230:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8003232:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003236:	1c58      	adds	r0, r3, #1
 8003238:	1e43      	subs	r3, r0, #1
 800323a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800323e:	4603      	mov	r3, r0
 8003240:	4619      	mov	r1, r3
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	f04f 0400 	mov.w	r4, #0
 800324e:	00d4      	lsls	r4, r2, #3
 8003250:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003254:	00cb      	lsls	r3, r1, #3
 8003256:	4603      	mov	r3, r0
 8003258:	4619      	mov	r1, r3
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	f04f 0400 	mov.w	r4, #0
 8003266:	00d4      	lsls	r4, r2, #3
 8003268:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800326c:	00cb      	lsls	r3, r1, #3
 800326e:	4603      	mov	r3, r0
 8003270:	3307      	adds	r3, #7
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	ebad 0d03 	sub.w	sp, sp, r3
 800327a:	ab70      	add	r3, sp, #448	; 0x1c0
 800327c:	3300      	adds	r3, #0
 800327e:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8003282:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8003286:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800328a:	3301      	adds	r3, #1
 800328c:	461a      	mov	r2, r3
 800328e:	484b      	ldr	r0, [pc, #300]	; (80033bc <Start_USB_RX_Task+0x1b8>)
 8003290:	f000 fea3 	bl	8003fda <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8003294:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8003298:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800329c:	3301      	adds	r3, #1
 800329e:	4619      	mov	r1, r3
 80032a0:	4610      	mov	r0, r2
 80032a2:	f7fe fc11 	bl	8001ac8 <unPackPayload>
 80032a6:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
			  if( -1 == ret) {
 80032aa:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d105      	bne.n	80032c0 <Start_USB_RX_Task+0xbc>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 80032b4:	f240 4134 	movw	r1, #1076	; 0x434
 80032b8:	4841      	ldr	r0, [pc, #260]	; (80033c0 <Start_USB_RX_Task+0x1bc>)
 80032ba:	f7fe fbbf 	bl	8001a3c <LOG_REPORT>
 80032be:	e07a      	b.n	80033b6 <Start_USB_RX_Task+0x1b2>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 80032c0:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80032c4:	f240 4136 	movw	r1, #1078	; 0x436
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fbb7 	bl	8001a3c <LOG_REPORT>
				  cmd_type = commandRead(temp, ret, &id_command, &duty_cmd);
 80032ce:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 80032d2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80032d6:	f507 7261 	add.w	r2, r7, #900	; 0x384
 80032da:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 80032de:	f7fd fe53 	bl	8000f88 <commandRead>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
				  memset(detail, 0, sizeof(detail));
 80032e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80032ec:	2287      	movs	r2, #135	; 0x87
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f012 fc1f 	bl	8015b34 <memset>
				  detail_length = 0;
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 80032fe:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8003302:	f897 5393 	ldrb.w	r5, [r7, #915]	; 0x393
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	936f      	str	r3, [sp, #444]	; 0x1bc
 800330c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003310:	936e      	str	r3, [sp, #440]	; 0x1b8
 8003312:	4668      	mov	r0, sp
 8003314:	f104 0308 	add.w	r3, r4, #8
 8003318:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800331c:	4619      	mov	r1, r3
 800331e:	f012 fbe5 	bl	8015aec <memcpy>
 8003322:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003326:	4628      	mov	r0, r5
 8003328:	f7fe f984 	bl	8001634 <commandReply>
 800332c:	4603      	mov	r3, r0
 800332e:	f887 3392 	strb.w	r3, [r7, #914]	; 0x392

				  if ( RPD_DUTY == rpd_type) {
 8003332:	f897 3392 	ldrb.w	r3, [r7, #914]	; 0x392
 8003336:	2b09      	cmp	r3, #9
 8003338:	d123      	bne.n	8003382 <Start_USB_RX_Task+0x17e>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
					  // Wait allocate
					  while (dataMail == NULL) {
 8003340:	e008      	b.n	8003354 <Start_USB_RX_Task+0x150>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <Start_USB_RX_Task+0x1c0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f04f 31ff 	mov.w	r1, #4294967295
 800334a:	4618      	mov	r0, r3
 800334c:	f00f fa74 	bl	8012838 <osMailAlloc>
 8003350:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
					  while (dataMail == NULL) {
 8003354:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f2      	beq.n	8003342 <Start_USB_RX_Task+0x13e>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 800335c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003360:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003364:	4619      	mov	r1, r3
 8003366:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 800336a:	f012 fbbf 	bl	8015aec <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <Start_USB_RX_Task+0x1c0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 8003376:	4618      	mov	r0, r3
 8003378:	f00f fa74 	bl	8012864 <osMailPut>
 800337c:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
 8003380:	e019      	b.n	80033b6 <Start_USB_RX_Task+0x1b2>
				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, cmd_type,
 8003382:	f897 1393 	ldrb.w	r1, [r7, #915]	; 0x393
 8003386:	f107 0308 	add.w	r3, r7, #8
 800338a:	681c      	ldr	r4, [r3, #0]
 800338c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003390:	f897 0392 	ldrb.w	r0, [r7, #914]	; 0x392
 8003394:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	4623      	mov	r3, r4
 800339c:	f7fe fafe 	bl	800199c <commandRespond1>
 80033a0:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 80033a4:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f011 ff17 	bl	80151e4 <CDC_Transmit_FS>
 80033b6:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 80033b8:	e72e      	b.n	8003218 <Start_USB_RX_Task+0x14>
 80033ba:	bf00      	nop
 80033bc:	20000000 	.word	0x20000000
 80033c0:	0801b178 	.word	0x0801b178
 80033c4:	20004e6c 	.word	0x20004e6c

080033c8 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	b292      	uxth	r2, r2
 80033d8:	801a      	strh	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	611a      	str	r2, [r3, #16]
 8003414:	615a      	str	r2, [r3, #20]
 8003416:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <MX_FSMC_Init+0xb8>)
 800341a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800341e:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <MX_FSMC_Init+0xb8>)
 8003422:	4a26      	ldr	r2, [pc, #152]	; (80034bc <MX_FSMC_Init+0xbc>)
 8003424:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <MX_FSMC_Init+0xb8>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <MX_FSMC_Init+0xb8>)
 800342e:	2202      	movs	r2, #2
 8003430:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8003432:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <MX_FSMC_Init+0xb8>)
 8003434:	2208      	movs	r2, #8
 8003436:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003438:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <MX_FSMC_Init+0xb8>)
 800343a:	2210      	movs	r2, #16
 800343c:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <MX_FSMC_Init+0xb8>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003444:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <MX_FSMC_Init+0xb8>)
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800344a:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <MX_FSMC_Init+0xb8>)
 800344c:	2200      	movs	r2, #0
 800344e:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <MX_FSMC_Init+0xb8>)
 8003452:	2200      	movs	r2, #0
 8003454:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003456:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <MX_FSMC_Init+0xb8>)
 8003458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <MX_FSMC_Init+0xb8>)
 8003460:	2200      	movs	r2, #0
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003464:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <MX_FSMC_Init+0xb8>)
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <MX_FSMC_Init+0xb8>)
 800346c:	2200      	movs	r2, #0
 800346e:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <MX_FSMC_Init+0xb8>)
 8003472:	2200      	movs	r2, #0
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <MX_FSMC_Init+0xb8>)
 8003478:	2200      	movs	r2, #0
 800347a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800347c:	230f      	movs	r3, #15
 800347e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003480:	230f      	movs	r3, #15
 8003482:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003484:	23ff      	movs	r3, #255	; 0xff
 8003486:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003488:	230f      	movs	r3, #15
 800348a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800348c:	2310      	movs	r3, #16
 800348e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003490:	2311      	movs	r3, #17
 8003492:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	2200      	movs	r2, #0
 800349c:	4619      	mov	r1, r3
 800349e:	4806      	ldr	r0, [pc, #24]	; (80034b8 <MX_FSMC_Init+0xb8>)
 80034a0:	f008 fdc2 	bl	800c028 <HAL_NOR_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80034aa:	f000 fcf7 	bl	8003e9c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80034ae:	bf00      	nop
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20004e74 	.word	0x20004e74
 80034bc:	a0000104 	.word	0xa0000104

080034c0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80034d4:	4b24      	ldr	r3, [pc, #144]	; (8003568 <HAL_FSMC_MspInit+0xa8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d140      	bne.n	800355e <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <HAL_FSMC_MspInit+0xa8>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <HAL_FSMC_MspInit+0xac>)
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	4a20      	ldr	r2, [pc, #128]	; (800356c <HAL_FSMC_MspInit+0xac>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6393      	str	r3, [r2, #56]	; 0x38
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_FSMC_MspInit+0xac>)
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80034fe:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003502:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350c:	2303      	movs	r3, #3
 800350e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003510:	230c      	movs	r3, #12
 8003512:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	4619      	mov	r1, r3
 8003518:	4815      	ldr	r0, [pc, #84]	; (8003570 <HAL_FSMC_MspInit+0xb0>)
 800351a:	f008 fbd1 	bl	800bcc0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800351e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003522:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003530:	230c      	movs	r3, #12
 8003532:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	4619      	mov	r1, r3
 8003538:	480e      	ldr	r0, [pc, #56]	; (8003574 <HAL_FSMC_MspInit+0xb4>)
 800353a:	f008 fbc1 	bl	800bcc0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003542:	2302      	movs	r3, #2
 8003544:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800354e:	230c      	movs	r3, #12
 8003550:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4808      	ldr	r0, [pc, #32]	; (8003578 <HAL_FSMC_MspInit+0xb8>)
 8003558:	f008 fbb2 	bl	800bcc0 <HAL_GPIO_Init>
 800355c:	e000      	b.n	8003560 <HAL_FSMC_MspInit+0xa0>
    return;
 800355e:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000ffc 	.word	0x20000ffc
 800356c:	40023800 	.word	0x40023800
 8003570:	40021000 	.word	0x40021000
 8003574:	40020c00 	.word	0x40020c00
 8003578:	40020400 	.word	0x40020400

0800357c <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8003584:	f7ff ff9c 	bl	80034c0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003596:	f107 0314 	add.w	r3, r7, #20
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	60da      	str	r2, [r3, #12]
 80035a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	4b51      	ldr	r3, [pc, #324]	; (80036f0 <MX_GPIO_Init+0x160>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a50      	ldr	r2, [pc, #320]	; (80036f0 <MX_GPIO_Init+0x160>)
 80035b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b4e      	ldr	r3, [pc, #312]	; (80036f0 <MX_GPIO_Init+0x160>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b4a      	ldr	r3, [pc, #296]	; (80036f0 <MX_GPIO_Init+0x160>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a49      	ldr	r2, [pc, #292]	; (80036f0 <MX_GPIO_Init+0x160>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b47      	ldr	r3, [pc, #284]	; (80036f0 <MX_GPIO_Init+0x160>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b43      	ldr	r3, [pc, #268]	; (80036f0 <MX_GPIO_Init+0x160>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a42      	ldr	r2, [pc, #264]	; (80036f0 <MX_GPIO_Init+0x160>)
 80035e8:	f043 0310 	orr.w	r3, r3, #16
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b40      	ldr	r3, [pc, #256]	; (80036f0 <MX_GPIO_Init+0x160>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <MX_GPIO_Init+0x160>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a3b      	ldr	r2, [pc, #236]	; (80036f0 <MX_GPIO_Init+0x160>)
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b39      	ldr	r3, [pc, #228]	; (80036f0 <MX_GPIO_Init+0x160>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <MX_GPIO_Init+0x160>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4a34      	ldr	r2, [pc, #208]	; (80036f0 <MX_GPIO_Init+0x160>)
 8003620:	f043 0308 	orr.w	r3, r3, #8
 8003624:	6313      	str	r3, [r2, #48]	; 0x30
 8003626:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <MX_GPIO_Init+0x160>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8003632:	2200      	movs	r2, #0
 8003634:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8003638:	482e      	ldr	r0, [pc, #184]	; (80036f4 <MX_GPIO_Init+0x164>)
 800363a:	f008 fcdb 	bl	800bff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 800363e:	2200      	movs	r2, #0
 8003640:	f641 0148 	movw	r1, #6216	; 0x1848
 8003644:	482c      	ldr	r0, [pc, #176]	; (80036f8 <MX_GPIO_Init+0x168>)
 8003646:	f008 fcd5 	bl	800bff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800364a:	2200      	movs	r2, #0
 800364c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003650:	482a      	ldr	r0, [pc, #168]	; (80036fc <MX_GPIO_Init+0x16c>)
 8003652:	f008 fccf 	bl	800bff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8003656:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 800365a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800365c:	2301      	movs	r3, #1
 800365e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003664:	2300      	movs	r3, #0
 8003666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	4619      	mov	r1, r3
 800366e:	4821      	ldr	r0, [pc, #132]	; (80036f4 <MX_GPIO_Init+0x164>)
 8003670:	f008 fb26 	bl	800bcc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8003674:	f640 0348 	movw	r3, #2120	; 0x848
 8003678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
 800367c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003686:	f107 0314 	add.w	r3, r7, #20
 800368a:	4619      	mov	r1, r3
 800368c:	481a      	ldr	r0, [pc, #104]	; (80036f8 <MX_GPIO_Init+0x168>)
 800368e:	f008 fb17 	bl	800bcc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8003692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003698:	2301      	movs	r3, #1
 800369a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	2300      	movs	r3, #0
 800369e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a0:	2303      	movs	r3, #3
 80036a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	4619      	mov	r1, r3
 80036aa:	4813      	ldr	r0, [pc, #76]	; (80036f8 <MX_GPIO_Init+0x168>)
 80036ac:	f008 fb08 	bl	800bcc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 80036b0:	f242 0304 	movw	r3, #8196	; 0x2004
 80036b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036be:	f107 0314 	add.w	r3, r7, #20
 80036c2:	4619      	mov	r1, r3
 80036c4:	480c      	ldr	r0, [pc, #48]	; (80036f8 <MX_GPIO_Init+0x168>)
 80036c6:	f008 fafb 	bl	800bcc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 80036ca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80036ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d0:	2301      	movs	r3, #1
 80036d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d8:	2300      	movs	r3, #0
 80036da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036dc:	f107 0314 	add.w	r3, r7, #20
 80036e0:	4619      	mov	r1, r3
 80036e2:	4806      	ldr	r0, [pc, #24]	; (80036fc <MX_GPIO_Init+0x16c>)
 80036e4:	f008 faec 	bl	800bcc0 <HAL_GPIO_Init>

}
 80036e8:	bf00      	nop
 80036ea:	3728      	adds	r7, #40	; 0x28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40020400 	.word	0x40020400
 80036f8:	40020c00 	.word	0x40020c00
 80036fc:	40020000 	.word	0x40020000

08003700 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8003700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003702:	b08b      	sub	sp, #44	; 0x2c
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800370e:	eeb0 0a47 	vmov.f32	s0, s14
 8003712:	eef0 0a67 	vmov.f32	s1, s15
 8003716:	f015 ffd7 	bl	80196c8 <cos>
 800371a:	ec51 0b10 	vmov	r0, r1, d0
 800371e:	a38e      	add	r3, pc, #568	; (adr r3, 8003958 <kinematicForward+0x258>)
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	f7fc ff68 	bl	80005f8 <__aeabi_dmul>
 8003728:	4603      	mov	r3, r0
 800372a:	460c      	mov	r4, r1
 800372c:	461d      	mov	r5, r3
 800372e:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800373c:	461a      	mov	r2, r3
 800373e:	4623      	mov	r3, r4
 8003740:	f7fc fda4 	bl	800028c <__adddf3>
 8003744:	4603      	mov	r3, r0
 8003746:	460c      	mov	r4, r1
 8003748:	ec44 3b17 	vmov	d7, r3, r4
 800374c:	eeb0 0a47 	vmov.f32	s0, s14
 8003750:	eef0 0a67 	vmov.f32	s1, s15
 8003754:	f015 ffb8 	bl	80196c8 <cos>
 8003758:	ec51 0b10 	vmov	r0, r1, d0
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	4b83      	ldr	r3, [pc, #524]	; (8003970 <kinematicForward+0x270>)
 8003762:	f7fc ff49 	bl	80005f8 <__aeabi_dmul>
 8003766:	4603      	mov	r3, r0
 8003768:	460c      	mov	r4, r1
 800376a:	461a      	mov	r2, r3
 800376c:	4623      	mov	r3, r4
 800376e:	4628      	mov	r0, r5
 8003770:	4631      	mov	r1, r6
 8003772:	f7fc fd8b 	bl	800028c <__adddf3>
 8003776:	4603      	mov	r3, r0
 8003778:	460c      	mov	r4, r1
 800377a:	461d      	mov	r5, r3
 800377c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800378a:	461a      	mov	r2, r3
 800378c:	4623      	mov	r3, r4
 800378e:	f7fc fd7d 	bl	800028c <__adddf3>
 8003792:	4603      	mov	r3, r0
 8003794:	460c      	mov	r4, r1
 8003796:	4618      	mov	r0, r3
 8003798:	4621      	mov	r1, r4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80037a0:	461a      	mov	r2, r3
 80037a2:	4623      	mov	r3, r4
 80037a4:	f7fc fd70 	bl	8000288 <__aeabi_dsub>
 80037a8:	4603      	mov	r3, r0
 80037aa:	460c      	mov	r4, r1
 80037ac:	ec44 3b17 	vmov	d7, r3, r4
 80037b0:	eeb0 0a47 	vmov.f32	s0, s14
 80037b4:	eef0 0a67 	vmov.f32	s1, s15
 80037b8:	f015 ff86 	bl	80196c8 <cos>
 80037bc:	ec51 0b10 	vmov	r0, r1, d0
 80037c0:	a363      	add	r3, pc, #396	; (adr r3, 8003950 <kinematicForward+0x250>)
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f7fc ff17 	bl	80005f8 <__aeabi_dmul>
 80037ca:	4603      	mov	r3, r0
 80037cc:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 80037ce:	461a      	mov	r2, r3
 80037d0:	4623      	mov	r3, r4
 80037d2:	4628      	mov	r0, r5
 80037d4:	4631      	mov	r1, r6
 80037d6:	f7fc fd59 	bl	800028c <__adddf3>
 80037da:	4603      	mov	r3, r0
 80037dc:	460c      	mov	r4, r1
 80037de:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80037e8:	eeb0 0a47 	vmov.f32	s0, s14
 80037ec:	eef0 0a67 	vmov.f32	s1, s15
 80037f0:	f015 fffa 	bl	80197e8 <sin>
 80037f4:	ec51 0b10 	vmov	r0, r1, d0
 80037f8:	a357      	add	r3, pc, #348	; (adr r3, 8003958 <kinematicForward+0x258>)
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f7fc fefb 	bl	80005f8 <__aeabi_dmul>
 8003802:	4603      	mov	r3, r0
 8003804:	460c      	mov	r4, r1
 8003806:	461d      	mov	r5, r3
 8003808:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003816:	461a      	mov	r2, r3
 8003818:	4623      	mov	r3, r4
 800381a:	f7fc fd37 	bl	800028c <__adddf3>
 800381e:	4603      	mov	r3, r0
 8003820:	460c      	mov	r4, r1
 8003822:	ec44 3b17 	vmov	d7, r3, r4
 8003826:	eeb0 0a47 	vmov.f32	s0, s14
 800382a:	eef0 0a67 	vmov.f32	s1, s15
 800382e:	f015 ffdb 	bl	80197e8 <sin>
 8003832:	ec51 0b10 	vmov	r0, r1, d0
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	4b4d      	ldr	r3, [pc, #308]	; (8003970 <kinematicForward+0x270>)
 800383c:	f7fc fedc 	bl	80005f8 <__aeabi_dmul>
 8003840:	4603      	mov	r3, r0
 8003842:	460c      	mov	r4, r1
 8003844:	461a      	mov	r2, r3
 8003846:	4623      	mov	r3, r4
 8003848:	4628      	mov	r0, r5
 800384a:	4631      	mov	r1, r6
 800384c:	f7fc fd1e 	bl	800028c <__adddf3>
 8003850:	4603      	mov	r3, r0
 8003852:	460c      	mov	r4, r1
 8003854:	461d      	mov	r5, r3
 8003856:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003864:	461a      	mov	r2, r3
 8003866:	4623      	mov	r3, r4
 8003868:	f7fc fd10 	bl	800028c <__adddf3>
 800386c:	4603      	mov	r3, r0
 800386e:	460c      	mov	r4, r1
 8003870:	4618      	mov	r0, r3
 8003872:	4621      	mov	r1, r4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800387a:	461a      	mov	r2, r3
 800387c:	4623      	mov	r3, r4
 800387e:	f7fc fd03 	bl	8000288 <__aeabi_dsub>
 8003882:	4603      	mov	r3, r0
 8003884:	460c      	mov	r4, r1
 8003886:	ec44 3b17 	vmov	d7, r3, r4
 800388a:	eeb0 0a47 	vmov.f32	s0, s14
 800388e:	eef0 0a67 	vmov.f32	s1, s15
 8003892:	f015 ffa9 	bl	80197e8 <sin>
 8003896:	ec51 0b10 	vmov	r0, r1, d0
 800389a:	a32d      	add	r3, pc, #180	; (adr r3, 8003950 <kinematicForward+0x250>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f7fc feaa 	bl	80005f8 <__aeabi_dmul>
 80038a4:	4603      	mov	r3, r0
 80038a6:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 80038a8:	461a      	mov	r2, r3
 80038aa:	4623      	mov	r3, r4
 80038ac:	4628      	mov	r0, r5
 80038ae:	4631      	mov	r1, r6
 80038b0:	f7fc fcec 	bl	800028c <__adddf3>
 80038b4:	4603      	mov	r3, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80038c2:	461a      	mov	r2, r3
 80038c4:	4623      	mov	r3, r4
 80038c6:	a126      	add	r1, pc, #152	; (adr r1, 8003960 <kinematicForward+0x260>)
 80038c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038cc:	f7fc fcdc 	bl	8000288 <__aeabi_dsub>
 80038d0:	4603      	mov	r3, r0
 80038d2:	460c      	mov	r4, r1
 80038d4:	4618      	mov	r0, r3
 80038d6:	4621      	mov	r1, r4
 80038d8:	a323      	add	r3, pc, #140	; (adr r3, 8003968 <kinematicForward+0x268>)
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f7fc fcd3 	bl	8000288 <__aeabi_dsub>
 80038e2:	4603      	mov	r3, r0
 80038e4:	460c      	mov	r4, r1
 80038e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80038f6:	461a      	mov	r2, r3
 80038f8:	4623      	mov	r3, r4
 80038fa:	f7fc fcc7 	bl	800028c <__adddf3>
 80038fe:	4603      	mov	r3, r0
 8003900:	460c      	mov	r4, r1
 8003902:	4618      	mov	r0, r3
 8003904:	4621      	mov	r1, r4
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800390c:	461a      	mov	r2, r3
 800390e:	4623      	mov	r3, r4
 8003910:	f7fc fcba 	bl	8000288 <__aeabi_dsub>
 8003914:	4603      	mov	r3, r0
 8003916:	460c      	mov	r4, r1
 8003918:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003922:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800392c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003936:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003940:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 8003944:	2301      	movs	r3, #1
}
 8003946:	4618      	mov	r0, r3
 8003948:	372c      	adds	r7, #44	; 0x2c
 800394a:	46bd      	mov	sp, r7
 800394c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800394e:	bf00      	nop
 8003950:	80000000 	.word	0x80000000
 8003954:	40402e14 	.word	0x40402e14
 8003958:	00000000 	.word	0x00000000
 800395c:	4068a000 	.word	0x4068a000
 8003960:	00000000 	.word	0x00000000
 8003964:	406a6000 	.word	0x406a6000
 8003968:	e0000000 	.word	0xe0000000
 800396c:	40536b22 	.word	0x40536b22
 8003970:	40640000 	.word	0x40640000
 8003974:	00000000 	.word	0x00000000

08003978 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003978:	b082      	sub	sp, #8
 800397a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397e:	b0a0      	sub	sp, #128	; 0x80
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003988:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003992:	a1f2      	add	r1, pc, #968	; (adr r1, 8003d5c <kinematicInverse+0x3e4>)
 8003994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003998:	f7fc fc76 	bl	8000288 <__aeabi_dsub>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80039b0:	eeb0 0a47 	vmov.f32	s0, s14
 80039b4:	eef0 0a67 	vmov.f32	s1, s15
 80039b8:	f015 fe86 	bl	80196c8 <cos>
 80039bc:	ec51 0b10 	vmov	r0, r1, d0
 80039c0:	a3e8      	add	r3, pc, #928	; (adr r3, 8003d64 <kinematicInverse+0x3ec>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f7fc fe17 	bl	80005f8 <__aeabi_dmul>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4650      	mov	r0, sl
 80039d0:	4659      	mov	r1, fp
 80039d2:	f7fc fc59 	bl	8000288 <__aeabi_dsub>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80039ea:	eeb0 0a47 	vmov.f32	s0, s14
 80039ee:	eef0 0a67 	vmov.f32	s1, s15
 80039f2:	f015 fef9 	bl	80197e8 <sin>
 80039f6:	ec51 0b10 	vmov	r0, r1, d0
 80039fa:	a3da      	add	r3, pc, #872	; (adr r3, 8003d64 <kinematicInverse+0x3ec>)
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f7fc fdfa 	bl	80005f8 <__aeabi_dmul>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4650      	mov	r0, sl
 8003a0a:	4659      	mov	r1, fp
 8003a0c:	f7fc fc3c 	bl	8000288 <__aeabi_dsub>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8003a18:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003a1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a20:	f7fc fdea 	bl	80005f8 <__aeabi_dmul>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4692      	mov	sl, r2
 8003a2a:	469b      	mov	fp, r3
 8003a2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a30:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a34:	f7fc fde0 	bl	80005f8 <__aeabi_dmul>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4650      	mov	r0, sl
 8003a3e:	4659      	mov	r1, fp
 8003a40:	f7fc fc24 	bl	800028c <__adddf3>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	a3c7      	add	r3, pc, #796	; (adr r3, 8003d6c <kinematicInverse+0x3f4>)
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f7fc fc19 	bl	8000288 <__aeabi_dsub>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	4bbb      	ldr	r3, [pc, #748]	; (8003d50 <kinematicInverse+0x3d8>)
 8003a64:	f7fc fc10 	bl	8000288 <__aeabi_dsub>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	a3b3      	add	r3, pc, #716	; (adr r3, 8003d40 <kinematicInverse+0x3c8>)
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	f7fc fee9 	bl	800084c <__aeabi_ddiv>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8003a82:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a8a:	f7fc fdb5 	bl	80005f8 <__aeabi_dmul>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	49af      	ldr	r1, [pc, #700]	; (8003d54 <kinematicInverse+0x3dc>)
 8003a98:	f7fc fbf6 	bl	8000288 <__aeabi_dsub>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ab0:	f7fd f814 	bl	8000adc <__aeabi_dcmplt>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <kinematicInverse+0x146>
		return FALSE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e136      	b.n	8003d2c <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8003abe:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003ac2:	f015 ff1b 	bl	80198fc <sqrt>
 8003ac6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8003aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ad4:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8003ad6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003ada:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003ade:	f015 ff0b 	bl	80198f8 <atan2>
 8003ae2:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8003ae6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003aea:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003aee:	f015 ff03 	bl	80198f8 <atan2>
 8003af2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8003af6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003afa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003afe:	f7fc fbc3 	bl	8000288 <__aeabi_dsub>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4614      	mov	r4, r2
 8003b08:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003b0c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003b10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b14:	f7fc fbb8 	bl	8000288 <__aeabi_dsub>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4690      	mov	r8, r2
 8003b1e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003b22:	4642      	mov	r2, r8
 8003b24:	464b      	mov	r3, r9
 8003b26:	4620      	mov	r0, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	f7fc ffe1 	bl	8000af0 <__aeabi_dcmple>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8003b34:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003b38:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8003b3c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003b40:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8003b44:	e007      	b.n	8003b56 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8003b46:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003b4a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8003b4e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003b52:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	4b7f      	ldr	r3, [pc, #508]	; (8003d58 <kinematicInverse+0x3e0>)
 8003b5c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b60:	f7fc fd4a 	bl	80005f8 <__aeabi_dmul>
 8003b64:	4603      	mov	r3, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	a376      	add	r3, pc, #472	; (adr r3, 8003d48 <kinematicInverse+0x3d0>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f7fc fb8b 	bl	800028c <__adddf3>
 8003b76:	4603      	mov	r3, r0
 8003b78:	460c      	mov	r4, r1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b82:	f7fc fd39 	bl	80005f8 <__aeabi_dmul>
 8003b86:	4603      	mov	r3, r0
 8003b88:	460c      	mov	r4, r1
 8003b8a:	4625      	mov	r5, r4
 8003b8c:	461c      	mov	r4, r3
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	4b71      	ldr	r3, [pc, #452]	; (8003d58 <kinematicInverse+0x3e0>)
 8003b94:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003b98:	f7fc fd2e 	bl	80005f8 <__aeabi_dmul>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003ba8:	f7fc fd26 	bl	80005f8 <__aeabi_dmul>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	f7fc fb68 	bl	8000288 <__aeabi_dsub>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	4625      	mov	r5, r4
 8003bbe:	461c      	mov	r4, r3
 8003bc0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003bc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003bc8:	f7fc fd16 	bl	80005f8 <__aeabi_dmul>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4690      	mov	r8, r2
 8003bd2:	4699      	mov	r9, r3
 8003bd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bd8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003bdc:	f7fc fd0c 	bl	80005f8 <__aeabi_dmul>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4640      	mov	r0, r8
 8003be6:	4649      	mov	r1, r9
 8003be8:	f7fc fb50 	bl	800028c <__adddf3>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	f7fc fe2a 	bl	800084c <__aeabi_ddiv>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	4b54      	ldr	r3, [pc, #336]	; (8003d58 <kinematicInverse+0x3e0>)
 8003c06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c0a:	f7fc fcf5 	bl	80005f8 <__aeabi_dmul>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	460c      	mov	r4, r1
 8003c12:	4618      	mov	r0, r3
 8003c14:	4621      	mov	r1, r4
 8003c16:	a34c      	add	r3, pc, #304	; (adr r3, 8003d48 <kinematicInverse+0x3d0>)
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f7fc fb36 	bl	800028c <__adddf3>
 8003c20:	4603      	mov	r3, r0
 8003c22:	460c      	mov	r4, r1
 8003c24:	4618      	mov	r0, r3
 8003c26:	4621      	mov	r1, r4
 8003c28:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003c2c:	f7fc fce4 	bl	80005f8 <__aeabi_dmul>
 8003c30:	4603      	mov	r3, r0
 8003c32:	460c      	mov	r4, r1
 8003c34:	4625      	mov	r5, r4
 8003c36:	461c      	mov	r4, r3
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	4b46      	ldr	r3, [pc, #280]	; (8003d58 <kinematicInverse+0x3e0>)
 8003c3e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003c42:	f7fc fcd9 	bl	80005f8 <__aeabi_dmul>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c52:	f7fc fcd1 	bl	80005f8 <__aeabi_dmul>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	f7fc fb15 	bl	800028c <__adddf3>
 8003c62:	4603      	mov	r3, r0
 8003c64:	460c      	mov	r4, r1
 8003c66:	4625      	mov	r5, r4
 8003c68:	461c      	mov	r4, r3
 8003c6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003c6e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c72:	f7fc fcc1 	bl	80005f8 <__aeabi_dmul>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c86:	f7fc fcb7 	bl	80005f8 <__aeabi_dmul>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4640      	mov	r0, r8
 8003c90:	4649      	mov	r1, r9
 8003c92:	f7fc fafb 	bl	800028c <__adddf3>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	f7fc fdd5 	bl	800084c <__aeabi_ddiv>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8003caa:	ed97 1b06 	vldr	d1, [r7, #24]
 8003cae:	ed97 0b08 	vldr	d0, [r7, #32]
 8003cb2:	f015 fe21 	bl	80198f8 <atan2>
 8003cb6:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8003cba:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003cbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cc2:	f7fc fae3 	bl	800028c <__adddf3>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	4621      	mov	r1, r4
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4623      	mov	r3, r4
 8003cd8:	f7fc fad6 	bl	8000288 <__aeabi_dsub>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	460c      	mov	r4, r1
 8003ce0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8003ce4:	ed97 3b02 	vldr	d3, [r7, #8]
 8003ce8:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8003cec:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8003cf0:	ed97 0b04 	vldr	d0, [r7, #16]
 8003cf4:	f006 f958 	bl	8009fa8 <scaraCheckWorkSpace4>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e014      	b.n	8003d2c <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003d08:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003d12:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003d1c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003d26:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 8003d2a:	2301      	movs	r3, #1
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3780      	adds	r7, #128	; 0x80
 8003d30:	46bd      	mov	sp, r7
 8003d32:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d36:	b002      	add	sp, #8
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	f3af 8000 	nop.w
 8003d40:	00000000 	.word	0x00000000
 8003d44:	40eec800 	.word	0x40eec800
 8003d48:	00000000 	.word	0x00000000
 8003d4c:	4068a000 	.word	0x4068a000
 8003d50:	40d90000 	.word	0x40d90000
 8003d54:	3ff00000 	.word	0x3ff00000
 8003d58:	40640000 	.word	0x40640000
 8003d5c:	80000000 	.word	0x80000000
 8003d60:	4060aa6e 	.word	0x4060aa6e
 8003d64:	80000000 	.word	0x80000000
 8003d68:	40402e14 	.word	0x40402e14
 8003d6c:	00000000 	.word	0x00000000
 8003d70:	40e2f320 	.word	0x40e2f320

08003d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d78:	f007 fabe 	bl	800b2f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d7c:	f000 f812 	bl	8003da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d80:	f7ff fc06 	bl	8003590 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d84:	f7fd ff16 	bl	8001bb4 <MX_DMA_Init>
  MX_UART4_Init();
 8003d88:	f007 f9b8 	bl	800b0fc <MX_UART4_Init>
  MX_FSMC_Init();
 8003d8c:	f7ff fb38 	bl	8003400 <MX_FSMC_Init>
  MX_TIM7_Init();
 8003d90:	f007 f942 	bl	800b018 <MX_TIM7_Init>
  MX_TIM2_Init();
 8003d94:	f007 f8f2 	bl	800af7c <MX_TIM2_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003d98:	f7fd ff46 	bl	8001c28 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003d9c:	f00e fae9 	bl	8012372 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8003da0:	e7fe      	b.n	8003da0 <main+0x2c>
	...

08003da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b094      	sub	sp, #80	; 0x50
 8003da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003daa:	f107 0320 	add.w	r3, r7, #32
 8003dae:	2230      	movs	r2, #48	; 0x30
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f011 febe 	bl	8015b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003db8:	f107 030c 	add.w	r3, r7, #12
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <SystemClock_Config+0xcc>)
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	4a27      	ldr	r2, [pc, #156]	; (8003e70 <SystemClock_Config+0xcc>)
 8003dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <SystemClock_Config+0xcc>)
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de4:	2300      	movs	r3, #0
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <SystemClock_Config+0xd0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <SystemClock_Config+0xd0>)
 8003dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <SystemClock_Config+0xd0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfc:	607b      	str	r3, [r7, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e00:	2301      	movs	r3, #1
 8003e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003e14:	2308      	movs	r3, #8
 8003e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003e18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003e1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003e22:	2307      	movs	r3, #7
 8003e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e26:	f107 0320 	add.w	r3, r7, #32
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f009 fad6 	bl	800d3dc <HAL_RCC_OscConfig>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003e36:	f000 f831 	bl	8003e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e3a:	230f      	movs	r3, #15
 8003e3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e52:	f107 030c 	add.w	r3, r7, #12
 8003e56:	2105      	movs	r1, #5
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f009 fd2f 	bl	800d8bc <HAL_RCC_ClockConfig>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003e64:	f000 f81a 	bl	8003e9c <Error_Handler>
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3750      	adds	r7, #80	; 0x50
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40007000 	.word	0x40007000

08003e78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003e8a:	f007 fa57 	bl	800b33c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40001000 	.word	0x40001000

08003e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <ringBuff_PushChar+0x1a>
		return FALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e024      	b.n	8003f0e <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	78f9      	ldrb	r1, [r7, #3]
 8003ece:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	425a      	negs	r2, r3
 8003eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ede:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003ee2:	bf58      	it	pl
 8003ee4:	4253      	negpl	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d103      	bne.n	8003f04 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 8003f0c:	2301      	movs	r3, #1
	}
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <ringBuff_PopChar+0x18>
		return FALSE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e025      	b.n	8003f7e <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	5cd2      	ldrb	r2, [r2, r3]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003f46:	3301      	adds	r3, #1
 8003f48:	425a      	negs	r2, r3
 8003f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f4e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003f52:	bf58      	it	pl
 8003f54:	4253      	negpl	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d103      	bne.n	8003f74 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8003f7c:	2301      	movs	r3, #1
	}
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8003f96:	2300      	movs	r3, #0
 8003f98:	82fb      	strh	r3, [r7, #22]
 8003f9a:	e011      	b.n	8003fc0 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8003f9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff ff7e 	bl	8003eaa <ringBuff_PushChar>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8003fb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	82fb      	strh	r3, [r7, #22]
 8003fc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	dce8      	bgt.n	8003f9c <ringBuff_PushArray+0x12>
 8003fca:	e000      	b.n	8003fce <ringBuff_PushArray+0x44>
			break;
 8003fcc:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8003fce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	e00c      	b.n	8004006 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff ff90 	bl	8003f1a <ringBuff_PopChar>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	3301      	adds	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	dbee      	blt.n	8003fec <ringBuff_PopArray+0x12>
 800400e:	e000      	b.n	8004012 <ringBuff_PopArray+0x38>
			break;
 8004010:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8004012:	697b      	ldr	r3, [r7, #20]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004032:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 800403a:	2b00      	cmp	r3, #0
 800403c:	d036      	beq.n	80040ac <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	e018      	b.n	8004076 <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	4413      	add	r3, r2
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	429a      	cmp	r2, r3
 8004050:	d101      	bne.n	8004056 <ringBuff_DistanceOf+0x3a>
					return distance;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	e037      	b.n	80040c6 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3301      	adds	r3, #1
 800405a:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3301      	adds	r3, #1
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	3301      	adds	r3, #1
 8004066:	425a      	negs	r2, r3
 8004068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004070:	bf58      	it	pl
 8004072:	4253      	negpl	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407c:	dbe2      	blt.n	8004044 <ringBuff_DistanceOf+0x28>
 800407e:	e020      	b.n	80040c2 <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	4413      	add	r3, r2
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	429a      	cmp	r2, r3
 800408c:	d101      	bne.n	8004092 <ringBuff_DistanceOf+0x76>
					return distance;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	e019      	b.n	80040c6 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3301      	adds	r3, #1
 8004096:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3301      	adds	r3, #1
 800409c:	425a      	negs	r2, r3
 800409e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80040a6:	bf58      	it	pl
 80040a8:	4253      	negpl	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d1e3      	bne.n	8004080 <ringBuff_DistanceOf+0x64>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0de      	beq.n	8004080 <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
	lowlayer_resetEncoder();
 80040d8:	f000 fdfe 	bl	8004cd8 <lowlayer_resetEncoder>
	pulse_accumulate[0] = 0;
 80040dc:	4b10      	ldr	r3, [pc, #64]	; (8004120 <lowlayer_scanReset+0x4c>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <lowlayer_scanReset+0x4c>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <lowlayer_scanReset+0x4c>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <lowlayer_scanReset+0x4c>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <lowlayer_scanReset+0x50>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <lowlayer_scanReset+0x50>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8004100:	4b08      	ldr	r3, [pc, #32]	; (8004124 <lowlayer_scanReset+0x50>)
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <lowlayer_scanReset+0x54>)
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <lowlayer_scanReset+0x58>)
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8004112:	2200      	movs	r2, #0
 8004114:	2108      	movs	r1, #8
 8004116:	4806      	ldr	r0, [pc, #24]	; (8004130 <lowlayer_scanReset+0x5c>)
 8004118:	f007 ff6c 	bl	800bff4 <HAL_GPIO_WritePin>
}
 800411c:	bf00      	nop
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20004ec0 	.word	0x20004ec0
 8004124:	20004ed4 	.word	0x20004ed4
 8004128:	20004ed0 	.word	0x20004ed0
 800412c:	20004ef0 	.word	0x20004ef0
 8004130:	40020c00 	.word	0x40020c00
 8004134:	00000000 	.word	0x00000000

08004138 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8004142:	f000 fe87 	bl	8004e54 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8004146:	4b98      	ldr	r3, [pc, #608]	; (80043a8 <lowlayer_scanFlow+0x270>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d837      	bhi.n	80041be <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 800414e:	4b96      	ldr	r3, [pc, #600]	; (80043a8 <lowlayer_scanFlow+0x270>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	f1c3 0303 	rsb	r3, r3, #3
 8004156:	4a95      	ldr	r2, [pc, #596]	; (80043ac <lowlayer_scanFlow+0x274>)
 8004158:	5cd3      	ldrb	r3, [r2, r3]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d121      	bne.n	80041a2 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 800415e:	4b92      	ldr	r3, [pc, #584]	; (80043a8 <lowlayer_scanFlow+0x270>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	f1c3 0203 	rsb	r2, r3, #3
 8004166:	4b90      	ldr	r3, [pc, #576]	; (80043a8 <lowlayer_scanFlow+0x270>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	f1c3 0303 	rsb	r3, r3, #3
 800416e:	4990      	ldr	r1, [pc, #576]	; (80043b0 <lowlayer_scanFlow+0x278>)
 8004170:	568a      	ldrsb	r2, [r1, r2]
 8004172:	f107 0108 	add.w	r1, r7, #8
 8004176:	440b      	add	r3, r1
 8004178:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 800417c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	425b      	negs	r3, r3
 8004184:	b2db      	uxtb	r3, r3
 8004186:	b258      	sxtb	r0, r3
 8004188:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800418c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	425b      	negs	r3, r3
 8004194:	b2db      	uxtb	r3, r3
 8004196:	b25a      	sxtb	r2, r3
 8004198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419c:	f000 fcd8 	bl	8004b50 <lowlayer_writePulse>
 80041a0:	e00b      	b.n	80041ba <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 80041a2:	4b81      	ldr	r3, [pc, #516]	; (80043a8 <lowlayer_scanFlow+0x270>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	3301      	adds	r3, #1
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4b7f      	ldr	r3, [pc, #508]	; (80043a8 <lowlayer_scanFlow+0x270>)
 80041ac:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 80041ae:	2300      	movs	r3, #0
 80041b0:	2200      	movs	r2, #0
 80041b2:	2100      	movs	r1, #0
 80041b4:	2000      	movs	r0, #0
 80041b6:	f000 fccb 	bl	8004b50 <lowlayer_writePulse>
		}

		return FALSE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e0d8      	b.n	8004370 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 80041be:	2201      	movs	r2, #1
 80041c0:	2108      	movs	r1, #8
 80041c2:	487c      	ldr	r0, [pc, #496]	; (80043b4 <lowlayer_scanFlow+0x27c>)
 80041c4:	f007 ff16 	bl	800bff4 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 80041c8:	f000 fe28 	bl	8004e1c <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 80041cc:	2300      	movs	r3, #0
 80041ce:	2200      	movs	r2, #0
 80041d0:	2100      	movs	r1, #0
 80041d2:	2000      	movs	r0, #0
 80041d4:	f000 fcbc 	bl	8004b50 <lowlayer_writePulse>
		scan_flag = 1;
 80041d8:	4b77      	ldr	r3, [pc, #476]	; (80043b8 <lowlayer_scanFlow+0x280>)
 80041da:	2201      	movs	r2, #1
 80041dc:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 80041de:	4b77      	ldr	r3, [pc, #476]	; (80043bc <lowlayer_scanFlow+0x284>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a77      	ldr	r2, [pc, #476]	; (80043c0 <lowlayer_scanFlow+0x288>)
 80041e4:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 80041e6:	4b75      	ldr	r3, [pc, #468]	; (80043bc <lowlayer_scanFlow+0x284>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4a75      	ldr	r2, [pc, #468]	; (80043c0 <lowlayer_scanFlow+0x288>)
 80041ec:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 80041ee:	4b73      	ldr	r3, [pc, #460]	; (80043bc <lowlayer_scanFlow+0x284>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	4a73      	ldr	r2, [pc, #460]	; (80043c0 <lowlayer_scanFlow+0x288>)
 80041f4:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 80041f6:	4b73      	ldr	r3, [pc, #460]	; (80043c4 <lowlayer_scanFlow+0x28c>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	4a73      	ldr	r2, [pc, #460]	; (80043c8 <lowlayer_scanFlow+0x290>)
 80041fc:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 80041fe:	4b70      	ldr	r3, [pc, #448]	; (80043c0 <lowlayer_scanFlow+0x288>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	4619      	mov	r1, r3
 8004206:	4871      	ldr	r0, [pc, #452]	; (80043cc <lowlayer_scanFlow+0x294>)
 8004208:	f7fd fc18 	bl	8001a3c <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 800420c:	4b6c      	ldr	r3, [pc, #432]	; (80043c0 <lowlayer_scanFlow+0x288>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	b29b      	uxth	r3, r3
 8004212:	4619      	mov	r1, r3
 8004214:	486e      	ldr	r0, [pc, #440]	; (80043d0 <lowlayer_scanFlow+0x298>)
 8004216:	f7fd fc11 	bl	8001a3c <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 800421a:	4b69      	ldr	r3, [pc, #420]	; (80043c0 <lowlayer_scanFlow+0x288>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	b29b      	uxth	r3, r3
 8004220:	4619      	mov	r1, r3
 8004222:	486c      	ldr	r0, [pc, #432]	; (80043d4 <lowlayer_scanFlow+0x29c>)
 8004224:	f7fd fc0a 	bl	8001a3c <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8004228:	4b67      	ldr	r3, [pc, #412]	; (80043c8 <lowlayer_scanFlow+0x290>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	4619      	mov	r1, r3
 8004230:	4869      	ldr	r0, [pc, #420]	; (80043d8 <lowlayer_scanFlow+0x2a0>)
 8004232:	f7fd fc03 	bl	8001a3c <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8004236:	4b62      	ldr	r3, [pc, #392]	; (80043c0 <lowlayer_scanFlow+0x288>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004242:	ee17 0a90 	vmov	r0, s15
 8004246:	f7fc f97f 	bl	8000548 <__aeabi_f2d>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	f7fc f81d 	bl	800028c <__adddf3>
 8004252:	4603      	mov	r3, r0
 8004254:	460c      	mov	r4, r1
 8004256:	4618      	mov	r0, r3
 8004258:	4621      	mov	r1, r4
 800425a:	a347      	add	r3, pc, #284	; (adr r3, 8004378 <lowlayer_scanFlow+0x240>)
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f7fc f9ca 	bl	80005f8 <__aeabi_dmul>
 8004264:	4603      	mov	r3, r0
 8004266:	460c      	mov	r4, r1
 8004268:	4618      	mov	r0, r3
 800426a:	4621      	mov	r1, r4
 800426c:	a344      	add	r3, pc, #272	; (adr r3, 8004380 <lowlayer_scanFlow+0x248>)
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	f7fc faeb 	bl	800084c <__aeabi_ddiv>
 8004276:	4603      	mov	r3, r0
 8004278:	460c      	mov	r4, r1
 800427a:	461a      	mov	r2, r3
 800427c:	4623      	mov	r3, r4
 800427e:	a142      	add	r1, pc, #264	; (adr r1, 8004388 <lowlayer_scanFlow+0x250>)
 8004280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004284:	f7fc f800 	bl	8000288 <__aeabi_dsub>
 8004288:	4603      	mov	r3, r0
 800428a:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 800428c:	4a53      	ldr	r2, [pc, #332]	; (80043dc <lowlayer_scanFlow+0x2a4>)
 800428e:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8004292:	4b4b      	ldr	r3, [pc, #300]	; (80043c0 <lowlayer_scanFlow+0x288>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800429e:	ee17 0a90 	vmov	r0, s15
 80042a2:	f7fc f951 	bl	8000548 <__aeabi_f2d>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	f7fb ffef 	bl	800028c <__adddf3>
 80042ae:	4603      	mov	r3, r0
 80042b0:	460c      	mov	r4, r1
 80042b2:	4618      	mov	r0, r3
 80042b4:	4621      	mov	r1, r4
 80042b6:	a330      	add	r3, pc, #192	; (adr r3, 8004378 <lowlayer_scanFlow+0x240>)
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f7fc f99c 	bl	80005f8 <__aeabi_dmul>
 80042c0:	4603      	mov	r3, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	4618      	mov	r0, r3
 80042c6:	4621      	mov	r1, r4
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	4b44      	ldr	r3, [pc, #272]	; (80043e0 <lowlayer_scanFlow+0x2a8>)
 80042ce:	f7fc fabd 	bl	800084c <__aeabi_ddiv>
 80042d2:	4603      	mov	r3, r0
 80042d4:	460c      	mov	r4, r1
 80042d6:	461a      	mov	r2, r3
 80042d8:	4623      	mov	r3, r4
 80042da:	a12d      	add	r1, pc, #180	; (adr r1, 8004390 <lowlayer_scanFlow+0x258>)
 80042dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042e0:	f7fb ffd2 	bl	8000288 <__aeabi_dsub>
 80042e4:	4603      	mov	r3, r0
 80042e6:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 80042e8:	4a3c      	ldr	r2, [pc, #240]	; (80043dc <lowlayer_scanFlow+0x2a4>)
 80042ea:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 80042ee:	4b34      	ldr	r3, [pc, #208]	; (80043c0 <lowlayer_scanFlow+0x288>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042fa:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80043e4 <lowlayer_scanFlow+0x2ac>
 80042fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004302:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80043e8 <lowlayer_scanFlow+0x2b0>
 8004306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800430a:	ee17 0a90 	vmov	r0, s15
 800430e:	f7fc f91b 	bl	8000548 <__aeabi_f2d>
 8004312:	4603      	mov	r3, r0
 8004314:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8004316:	4a31      	ldr	r2, [pc, #196]	; (80043dc <lowlayer_scanFlow+0x2a4>)
 8004318:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 800431c:	4b2a      	ldr	r3, [pc, #168]	; (80043c8 <lowlayer_scanFlow+0x290>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7fc f8ff 	bl	8000524 <__aeabi_i2d>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	f7fb ffaf 	bl	800028c <__adddf3>
 800432e:	4603      	mov	r3, r0
 8004330:	460c      	mov	r4, r1
 8004332:	4618      	mov	r0, r3
 8004334:	4621      	mov	r1, r4
 8004336:	a310      	add	r3, pc, #64	; (adr r3, 8004378 <lowlayer_scanFlow+0x240>)
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f7fc f95c 	bl	80005f8 <__aeabi_dmul>
 8004340:	4603      	mov	r3, r0
 8004342:	460c      	mov	r4, r1
 8004344:	4618      	mov	r0, r3
 8004346:	4621      	mov	r1, r4
 8004348:	a313      	add	r3, pc, #76	; (adr r3, 8004398 <lowlayer_scanFlow+0x260>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f7fc fa7d 	bl	800084c <__aeabi_ddiv>
 8004352:	4603      	mov	r3, r0
 8004354:	460c      	mov	r4, r1
 8004356:	461a      	mov	r2, r3
 8004358:	4623      	mov	r3, r4
 800435a:	a111      	add	r1, pc, #68	; (adr r1, 80043a0 <lowlayer_scanFlow+0x268>)
 800435c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004360:	f7fb ff92 	bl	8000288 <__aeabi_dsub>
 8004364:	4603      	mov	r3, r0
 8004366:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8004368:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <lowlayer_scanFlow+0x2a4>)
 800436a:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 800436e:	2301      	movs	r3, #1
	}
}
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bd90      	pop	{r4, r7, pc}
 8004378:	60000000 	.word	0x60000000
 800437c:	400921fb 	.word	0x400921fb
 8004380:	00000000 	.word	0x00000000
 8004384:	40f38800 	.word	0x40f38800
 8004388:	40000000 	.word	0x40000000
 800438c:	bff9f17a 	.word	0xbff9f17a
 8004390:	80000000 	.word	0x80000000
 8004394:	40039716 	.word	0x40039716
 8004398:	a0000000 	.word	0xa0000000
 800439c:	40d3bca1 	.word	0x40d3bca1
 80043a0:	a0000000 	.word	0xa0000000
 80043a4:	4008330d 	.word	0x4008330d
 80043a8:	20004ef0 	.word	0x20004ef0
 80043ac:	20004ee0 	.word	0x20004ee0
 80043b0:	0801b25c 	.word	0x0801b25c
 80043b4:	40020c00 	.word	0x40020c00
 80043b8:	20004ed0 	.word	0x20004ed0
 80043bc:	20004ee4 	.word	0x20004ee4
 80043c0:	20004f18 	.word	0x20004f18
 80043c4:	20004ec0 	.word	0x20004ec0
 80043c8:	20004ef4 	.word	0x20004ef4
 80043cc:	0801b184 	.word	0x0801b184
 80043d0:	0801b198 	.word	0x0801b198
 80043d4:	0801b1ac 	.word	0x0801b1ac
 80043d8:	0801b1c0 	.word	0x0801b1c0
 80043dc:	20004ef8 	.word	0x20004ef8
 80043e0:	40ff4000 	.word	0x40ff4000
 80043e4:	4426aaab 	.word	0x4426aaab
 80043e8:	400f1aa0 	.word	0x400f1aa0
 80043ec:	00000000 	.word	0x00000000

080043f0 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 80043f8:	2300      	movs	r3, #0
 80043fa:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f94d 	bl	80046a0 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800440c:	a330      	add	r3, pc, #192	; (adr r3, 80044d0 <lowlayer_goToSoftLimit+0xe0>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f7fc fb63 	bl	8000adc <__aeabi_dcmplt>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 800441c:	2303      	movs	r3, #3
 800441e:	723b      	strb	r3, [r7, #8]
		check++;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	3301      	adds	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800442c:	a32a      	add	r3, pc, #168	; (adr r3, 80044d8 <lowlayer_goToSoftLimit+0xe8>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f7fc fb71 	bl	8000b18 <__aeabi_dcmpgt>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 800443c:	2305      	movs	r3, #5
 800443e:	727b      	strb	r3, [r7, #9]
		check++;
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	3301      	adds	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	f7fc fb42 	bl	8000adc <__aeabi_dcmplt>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 800445e:	2305      	movs	r3, #5
 8004460:	72bb      	strb	r3, [r7, #10]
		check++;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	3301      	adds	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800446e:	a31c      	add	r3, pc, #112	; (adr r3, 80044e0 <lowlayer_goToSoftLimit+0xf0>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f7fc fb50 	bl	8000b18 <__aeabi_dcmpgt>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d004      	beq.n	8004488 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 800447e:	230a      	movs	r3, #10
 8004480:	72fb      	strb	r3, [r7, #11]
		check++;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	3301      	adds	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d013      	beq.n	80044b6 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 800448e:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8004492:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	425b      	negs	r3, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	b259      	sxtb	r1, r3
 800449e:	f997 200a 	ldrsb.w	r2, [r7, #10]
 80044a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	425b      	negs	r3, r3
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	b25b      	sxtb	r3, r3
 80044ae:	f000 fb4f 	bl	8004b50 <lowlayer_writePulse>
		return FALSE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e006      	b.n	80044c4 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 80044b6:	2300      	movs	r3, #0
 80044b8:	2200      	movs	r2, #0
 80044ba:	2100      	movs	r1, #0
 80044bc:	2000      	movs	r0, #0
 80044be:	f000 fb47 	bl	8004b50 <lowlayer_writePulse>
		return TRUE;
 80044c2:	2301      	movs	r3, #1
	}
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	f3af 8000 	nop.w
 80044d0:	daaaaaab 	.word	0xdaaaaaab
 80044d4:	bff7bc89 	.word	0xbff7bc89
 80044d8:	88000000 	.word	0x88000000
 80044dc:	4002d97c 	.word	0x4002d97c
 80044e0:	daaaaaab 	.word	0xdaaaaaab
 80044e4:	4007bc89 	.word	0x4007bc89

080044e8 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 80044f0:	f000 fc78 	bl	8004de4 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 80044f4:	4b62      	ldr	r3, [pc, #392]	; (8004680 <lowlayer_readTruePosition+0x198>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b62      	ldr	r3, [pc, #392]	; (8004684 <lowlayer_readTruePosition+0x19c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004506:	ee17 0a90 	vmov	r0, s15
 800450a:	f7fc f81d 	bl	8000548 <__aeabi_f2d>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	f7fb febb 	bl	800028c <__adddf3>
 8004516:	4603      	mov	r3, r0
 8004518:	460c      	mov	r4, r1
 800451a:	4618      	mov	r0, r3
 800451c:	4621      	mov	r1, r4
 800451e:	a34c      	add	r3, pc, #304	; (adr r3, 8004650 <lowlayer_readTruePosition+0x168>)
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	f7fc f868 	bl	80005f8 <__aeabi_dmul>
 8004528:	4603      	mov	r3, r0
 800452a:	460c      	mov	r4, r1
 800452c:	4618      	mov	r0, r3
 800452e:	4621      	mov	r1, r4
 8004530:	a349      	add	r3, pc, #292	; (adr r3, 8004658 <lowlayer_readTruePosition+0x170>)
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f7fc f989 	bl	800084c <__aeabi_ddiv>
 800453a:	4603      	mov	r3, r0
 800453c:	460c      	mov	r4, r1
 800453e:	4618      	mov	r0, r3
 8004540:	4621      	mov	r1, r4
 8004542:	a347      	add	r3, pc, #284	; (adr r3, 8004660 <lowlayer_readTruePosition+0x178>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f7fb fe9e 	bl	8000288 <__aeabi_dsub>
 800454c:	4603      	mov	r3, r0
 800454e:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8004556:	4b4a      	ldr	r3, [pc, #296]	; (8004680 <lowlayer_readTruePosition+0x198>)
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <lowlayer_readTruePosition+0x19c>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	ee07 3a90 	vmov	s15, r3
 8004564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004568:	ee17 0a90 	vmov	r0, s15
 800456c:	f7fb ffec 	bl	8000548 <__aeabi_f2d>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	f7fb fe8a 	bl	800028c <__adddf3>
 8004578:	4603      	mov	r3, r0
 800457a:	460c      	mov	r4, r1
 800457c:	4618      	mov	r0, r3
 800457e:	4621      	mov	r1, r4
 8004580:	a333      	add	r3, pc, #204	; (adr r3, 8004650 <lowlayer_readTruePosition+0x168>)
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f7fc f837 	bl	80005f8 <__aeabi_dmul>
 800458a:	4603      	mov	r3, r0
 800458c:	460c      	mov	r4, r1
 800458e:	4618      	mov	r0, r3
 8004590:	4621      	mov	r1, r4
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	4b3c      	ldr	r3, [pc, #240]	; (8004688 <lowlayer_readTruePosition+0x1a0>)
 8004598:	f7fc f958 	bl	800084c <__aeabi_ddiv>
 800459c:	4603      	mov	r3, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	4618      	mov	r0, r3
 80045a2:	4621      	mov	r1, r4
 80045a4:	a330      	add	r3, pc, #192	; (adr r3, 8004668 <lowlayer_readTruePosition+0x180>)
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f7fb fe6f 	bl	800028c <__adddf3>
 80045ae:	4603      	mov	r3, r0
 80045b0:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 80045b8:	4b31      	ldr	r3, [pc, #196]	; (8004680 <lowlayer_readTruePosition+0x198>)
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	4b31      	ldr	r3, [pc, #196]	; (8004684 <lowlayer_readTruePosition+0x19c>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ca:	eeb1 7a67 	vneg.f32	s14, s15
 80045ce:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800468c <lowlayer_readTruePosition+0x1a4>
 80045d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045d6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004690 <lowlayer_readTruePosition+0x1a8>
 80045da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045de:	ee17 0a90 	vmov	r0, s15
 80045e2:	f7fb ffb1 	bl	8000548 <__aeabi_f2d>
 80045e6:	4603      	mov	r3, r0
 80045e8:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 80045f0:	4b28      	ldr	r3, [pc, #160]	; (8004694 <lowlayer_readTruePosition+0x1ac>)
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	4b28      	ldr	r3, [pc, #160]	; (8004698 <lowlayer_readTruePosition+0x1b0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fb ff92 	bl	8000524 <__aeabi_i2d>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	f7fb fe42 	bl	800028c <__adddf3>
 8004608:	4603      	mov	r3, r0
 800460a:	460c      	mov	r4, r1
 800460c:	4618      	mov	r0, r3
 800460e:	4621      	mov	r1, r4
 8004610:	a30f      	add	r3, pc, #60	; (adr r3, 8004650 <lowlayer_readTruePosition+0x168>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fb ffef 	bl	80005f8 <__aeabi_dmul>
 800461a:	4603      	mov	r3, r0
 800461c:	460c      	mov	r4, r1
 800461e:	4618      	mov	r0, r3
 8004620:	4621      	mov	r1, r4
 8004622:	a313      	add	r3, pc, #76	; (adr r3, 8004670 <lowlayer_readTruePosition+0x188>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f7fc f910 	bl	800084c <__aeabi_ddiv>
 800462c:	4603      	mov	r3, r0
 800462e:	460c      	mov	r4, r1
 8004630:	4618      	mov	r0, r3
 8004632:	4621      	mov	r1, r4
 8004634:	a310      	add	r3, pc, #64	; (adr r3, 8004678 <lowlayer_readTruePosition+0x190>)
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f7fb fe27 	bl	800028c <__adddf3>
 800463e:	4603      	mov	r3, r0
 8004640:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bd90      	pop	{r4, r7, pc}
 8004650:	60000000 	.word	0x60000000
 8004654:	400921fb 	.word	0x400921fb
 8004658:	00000000 	.word	0x00000000
 800465c:	40f38800 	.word	0x40f38800
 8004660:	40000000 	.word	0x40000000
 8004664:	3ff9f17a 	.word	0x3ff9f17a
 8004668:	80000000 	.word	0x80000000
 800466c:	40039716 	.word	0x40039716
 8004670:	a0000000 	.word	0xa0000000
 8004674:	40d3bca1 	.word	0x40d3bca1
 8004678:	a0000000 	.word	0xa0000000
 800467c:	4008330d 	.word	0x4008330d
 8004680:	20004ed4 	.word	0x20004ed4
 8004684:	20004f18 	.word	0x20004f18
 8004688:	40ff4000 	.word	0x40ff4000
 800468c:	4426aaab 	.word	0x4426aaab
 8004690:	400f1aa0 	.word	0x400f1aa0
 8004694:	20004ec0 	.word	0x20004ec0
 8004698:	20004ef4 	.word	0x20004ef4
 800469c:	00000000 	.word	0x00000000

080046a0 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 80046a0:	b5b0      	push	{r4, r5, r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 80046a8:	4b53      	ldr	r3, [pc, #332]	; (80047f8 <lowlayer_readSetPosition+0x158>)
 80046aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80046ae:	4b53      	ldr	r3, [pc, #332]	; (80047fc <lowlayer_readSetPosition+0x15c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fb ff36 	bl	8000524 <__aeabi_i2d>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	f7fb fde6 	bl	800028c <__adddf3>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4610      	mov	r0, r2
 80046c6:	4619      	mov	r1, r3
 80046c8:	a345      	add	r3, pc, #276	; (adr r3, 80047e0 <lowlayer_readSetPosition+0x140>)
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f7fb ff93 	bl	80005f8 <__aeabi_dmul>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	a343      	add	r3, pc, #268	; (adr r3, 80047e8 <lowlayer_readSetPosition+0x148>)
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f7fc f8b4 	bl	800084c <__aeabi_ddiv>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4620      	mov	r0, r4
 80046ea:	4629      	mov	r1, r5
 80046ec:	f7fb fdce 	bl	800028c <__adddf3>
 80046f0:	4603      	mov	r3, r0
 80046f2:	460c      	mov	r4, r1
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <lowlayer_readSetPosition+0x158>)
 80046fc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004700:	4b3e      	ldr	r3, [pc, #248]	; (80047fc <lowlayer_readSetPosition+0x15c>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4618      	mov	r0, r3
 8004706:	f7fb ff0d 	bl	8000524 <__aeabi_i2d>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	f7fb fdbd 	bl	800028c <__adddf3>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4610      	mov	r0, r2
 8004718:	4619      	mov	r1, r3
 800471a:	a331      	add	r3, pc, #196	; (adr r3, 80047e0 <lowlayer_readSetPosition+0x140>)
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f7fb ff6a 	bl	80005f8 <__aeabi_dmul>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4610      	mov	r0, r2
 800472a:	4619      	mov	r1, r3
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	4b33      	ldr	r3, [pc, #204]	; (8004800 <lowlayer_readSetPosition+0x160>)
 8004732:	f7fc f88b 	bl	800084c <__aeabi_ddiv>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4620      	mov	r0, r4
 800473c:	4629      	mov	r1, r5
 800473e:	f7fb fda5 	bl	800028c <__adddf3>
 8004742:	4603      	mov	r3, r0
 8004744:	460c      	mov	r4, r1
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 800474c:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <lowlayer_readSetPosition+0x158>)
 800474e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004752:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <lowlayer_readSetPosition+0x15c>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800475e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004804 <lowlayer_readSetPosition+0x164>
 8004762:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004766:	ee16 0a90 	vmov	r0, s13
 800476a:	f7fb feed 	bl	8000548 <__aeabi_f2d>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4620      	mov	r0, r4
 8004774:	4629      	mov	r1, r5
 8004776:	f7fb fd89 	bl	800028c <__adddf3>
 800477a:	4603      	mov	r3, r0
 800477c:	460c      	mov	r4, r1
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8004784:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <lowlayer_readSetPosition+0x158>)
 8004786:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800478a:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <lowlayer_readSetPosition+0x15c>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	4618      	mov	r0, r3
 8004790:	f7fb fec8 	bl	8000524 <__aeabi_i2d>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	f7fb fd78 	bl	800028c <__adddf3>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4610      	mov	r0, r2
 80047a2:	4619      	mov	r1, r3
 80047a4:	a30e      	add	r3, pc, #56	; (adr r3, 80047e0 <lowlayer_readSetPosition+0x140>)
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	f7fb ff25 	bl	80005f8 <__aeabi_dmul>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	a30e      	add	r3, pc, #56	; (adr r3, 80047f0 <lowlayer_readSetPosition+0x150>)
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f7fc f846 	bl	800084c <__aeabi_ddiv>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4620      	mov	r0, r4
 80047c6:	4629      	mov	r1, r5
 80047c8:	f7fb fd60 	bl	800028c <__adddf3>
 80047cc:	4603      	mov	r3, r0
 80047ce:	460c      	mov	r4, r1
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bdb0      	pop	{r4, r5, r7, pc}
 80047de:	bf00      	nop
 80047e0:	60000000 	.word	0x60000000
 80047e4:	400921fb 	.word	0x400921fb
 80047e8:	00000000 	.word	0x00000000
 80047ec:	40d38800 	.word	0x40d38800
 80047f0:	a0000000 	.word	0xa0000000
 80047f4:	40d3bca1 	.word	0x40d3bca1
 80047f8:	20004ef8 	.word	0x20004ef8
 80047fc:	20004ec0 	.word	0x20004ec0
 8004800:	40df4000 	.word	0x40df4000
 8004804:	42c80000 	.word	0x42c80000

08004808 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8004808:	b084      	sub	sp, #16
 800480a:	b590      	push	{r4, r7, lr}
 800480c:	b093      	sub	sp, #76	; 0x4c
 800480e:	af00      	add	r7, sp, #0
 8004810:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8004814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004818:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800481c:	a3c4      	add	r3, pc, #784	; (adr r3, 8004b30 <lowlayer_computeAndWritePulse+0x328>)
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	f7fb fd33 	bl	800028c <__adddf3>
 8004826:	4603      	mov	r3, r0
 8004828:	460c      	mov	r4, r1
 800482a:	4618      	mov	r0, r3
 800482c:	4621      	mov	r1, r4
 800482e:	a3c2      	add	r3, pc, #776	; (adr r3, 8004b38 <lowlayer_computeAndWritePulse+0x330>)
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	f7fb fee0 	bl	80005f8 <__aeabi_dmul>
 8004838:	4603      	mov	r3, r0
 800483a:	460c      	mov	r4, r1
 800483c:	4618      	mov	r0, r3
 800483e:	4621      	mov	r1, r4
 8004840:	a3b5      	add	r3, pc, #724	; (adr r3, 8004b18 <lowlayer_computeAndWritePulse+0x310>)
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f7fc f801 	bl	800084c <__aeabi_ddiv>
 800484a:	4603      	mov	r3, r0
 800484c:	460c      	mov	r4, r1
 800484e:	ec44 3b17 	vmov	d7, r3, r4
 8004852:	eeb0 0a47 	vmov.f32	s0, s14
 8004856:	eef0 0a67 	vmov.f32	s1, s15
 800485a:	f014 ff79 	bl	8019750 <round>
 800485e:	ec54 3b10 	vmov	r3, r4, d0
 8004862:	4618      	mov	r0, r3
 8004864:	4621      	mov	r1, r4
 8004866:	f7fc f99f 	bl	8000ba8 <__aeabi_d2uiz>
 800486a:	4603      	mov	r3, r0
 800486c:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800486e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004872:	a3b3      	add	r3, pc, #716	; (adr r3, 8004b40 <lowlayer_computeAndWritePulse+0x338>)
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f7fb fd08 	bl	800028c <__adddf3>
 800487c:	4603      	mov	r3, r0
 800487e:	460c      	mov	r4, r1
 8004880:	4618      	mov	r0, r3
 8004882:	4621      	mov	r1, r4
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	4baf      	ldr	r3, [pc, #700]	; (8004b48 <lowlayer_computeAndWritePulse+0x340>)
 800488a:	f7fb feb5 	bl	80005f8 <__aeabi_dmul>
 800488e:	4603      	mov	r3, r0
 8004890:	460c      	mov	r4, r1
 8004892:	4618      	mov	r0, r3
 8004894:	4621      	mov	r1, r4
 8004896:	a3a0      	add	r3, pc, #640	; (adr r3, 8004b18 <lowlayer_computeAndWritePulse+0x310>)
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	f7fb ffd6 	bl	800084c <__aeabi_ddiv>
 80048a0:	4603      	mov	r3, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	ec44 3b17 	vmov	d7, r3, r4
 80048a8:	eeb0 0a47 	vmov.f32	s0, s14
 80048ac:	eef0 0a67 	vmov.f32	s1, s15
 80048b0:	f014 ff4e 	bl	8019750 <round>
 80048b4:	ec54 3b10 	vmov	r3, r4, d0
 80048b8:	4618      	mov	r0, r3
 80048ba:	4621      	mov	r1, r4
 80048bc:	f7fc f974 	bl	8000ba8 <__aeabi_d2uiz>
 80048c0:	4603      	mov	r3, r0
 80048c2:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 80048c4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	4b9f      	ldr	r3, [pc, #636]	; (8004b4c <lowlayer_computeAndWritePulse+0x344>)
 80048ce:	f7fb fe93 	bl	80005f8 <__aeabi_dmul>
 80048d2:	4603      	mov	r3, r0
 80048d4:	460c      	mov	r4, r1
 80048d6:	ec44 3b17 	vmov	d7, r3, r4
 80048da:	eeb0 0a47 	vmov.f32	s0, s14
 80048de:	eef0 0a67 	vmov.f32	s1, s15
 80048e2:	f014 ff35 	bl	8019750 <round>
 80048e6:	ec54 3b10 	vmov	r3, r4, d0
 80048ea:	4618      	mov	r0, r3
 80048ec:	4621      	mov	r1, r4
 80048ee:	f7fc f95b 	bl	8000ba8 <__aeabi_d2uiz>
 80048f2:	4603      	mov	r3, r0
 80048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80048f6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80048fa:	a389      	add	r3, pc, #548	; (adr r3, 8004b20 <lowlayer_computeAndWritePulse+0x318>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f7fb fcc4 	bl	800028c <__adddf3>
 8004904:	4603      	mov	r3, r0
 8004906:	460c      	mov	r4, r1
 8004908:	4618      	mov	r0, r3
 800490a:	4621      	mov	r1, r4
 800490c:	a386      	add	r3, pc, #536	; (adr r3, 8004b28 <lowlayer_computeAndWritePulse+0x320>)
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f7fb fe71 	bl	80005f8 <__aeabi_dmul>
 8004916:	4603      	mov	r3, r0
 8004918:	460c      	mov	r4, r1
 800491a:	4618      	mov	r0, r3
 800491c:	4621      	mov	r1, r4
 800491e:	a37e      	add	r3, pc, #504	; (adr r3, 8004b18 <lowlayer_computeAndWritePulse+0x310>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f7fb ff92 	bl	800084c <__aeabi_ddiv>
 8004928:	4603      	mov	r3, r0
 800492a:	460c      	mov	r4, r1
 800492c:	ec44 3b17 	vmov	d7, r3, r4
 8004930:	eeb0 0a47 	vmov.f32	s0, s14
 8004934:	eef0 0a67 	vmov.f32	s1, s15
 8004938:	f014 ff0a 	bl	8019750 <round>
 800493c:	ec54 3b10 	vmov	r3, r4, d0
 8004940:	4618      	mov	r0, r3
 8004942:	4621      	mov	r1, r4
 8004944:	f7fc f930 	bl	8000ba8 <__aeabi_d2uiz>
 8004948:	4603      	mov	r3, r0
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 800494c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8004950:	a377      	add	r3, pc, #476	; (adr r3, 8004b30 <lowlayer_computeAndWritePulse+0x328>)
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f7fb fc99 	bl	800028c <__adddf3>
 800495a:	4603      	mov	r3, r0
 800495c:	460c      	mov	r4, r1
 800495e:	4618      	mov	r0, r3
 8004960:	4621      	mov	r1, r4
 8004962:	a375      	add	r3, pc, #468	; (adr r3, 8004b38 <lowlayer_computeAndWritePulse+0x330>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f7fb fe46 	bl	80005f8 <__aeabi_dmul>
 800496c:	4603      	mov	r3, r0
 800496e:	460c      	mov	r4, r1
 8004970:	4618      	mov	r0, r3
 8004972:	4621      	mov	r1, r4
 8004974:	a368      	add	r3, pc, #416	; (adr r3, 8004b18 <lowlayer_computeAndWritePulse+0x310>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f7fb ff67 	bl	800084c <__aeabi_ddiv>
 800497e:	4603      	mov	r3, r0
 8004980:	460c      	mov	r4, r1
 8004982:	ec44 3b17 	vmov	d7, r3, r4
 8004986:	eeb0 0a47 	vmov.f32	s0, s14
 800498a:	eef0 0a67 	vmov.f32	s1, s15
 800498e:	f014 fedf 	bl	8019750 <round>
 8004992:	ec54 3b10 	vmov	r3, r4, d0
 8004996:	4618      	mov	r0, r3
 8004998:	4621      	mov	r1, r4
 800499a:	f7fc f905 	bl	8000ba8 <__aeabi_d2uiz>
 800499e:	4603      	mov	r3, r0
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80049a2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80049a6:	a366      	add	r3, pc, #408	; (adr r3, 8004b40 <lowlayer_computeAndWritePulse+0x338>)
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f7fb fc6e 	bl	800028c <__adddf3>
 80049b0:	4603      	mov	r3, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	4618      	mov	r0, r3
 80049b6:	4621      	mov	r1, r4
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	4b62      	ldr	r3, [pc, #392]	; (8004b48 <lowlayer_computeAndWritePulse+0x340>)
 80049be:	f7fb fe1b 	bl	80005f8 <__aeabi_dmul>
 80049c2:	4603      	mov	r3, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	4618      	mov	r0, r3
 80049c8:	4621      	mov	r1, r4
 80049ca:	a353      	add	r3, pc, #332	; (adr r3, 8004b18 <lowlayer_computeAndWritePulse+0x310>)
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	f7fb ff3c 	bl	800084c <__aeabi_ddiv>
 80049d4:	4603      	mov	r3, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	ec44 3b17 	vmov	d7, r3, r4
 80049dc:	eeb0 0a47 	vmov.f32	s0, s14
 80049e0:	eef0 0a67 	vmov.f32	s1, s15
 80049e4:	f014 feb4 	bl	8019750 <round>
 80049e8:	ec54 3b10 	vmov	r3, r4, d0
 80049ec:	4618      	mov	r0, r3
 80049ee:	4621      	mov	r1, r4
 80049f0:	f7fc f8da 	bl	8000ba8 <__aeabi_d2uiz>
 80049f4:	4603      	mov	r3, r0
 80049f6:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80049f8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	4b52      	ldr	r3, [pc, #328]	; (8004b4c <lowlayer_computeAndWritePulse+0x344>)
 8004a02:	f7fb fdf9 	bl	80005f8 <__aeabi_dmul>
 8004a06:	4603      	mov	r3, r0
 8004a08:	460c      	mov	r4, r1
 8004a0a:	ec44 3b17 	vmov	d7, r3, r4
 8004a0e:	eeb0 0a47 	vmov.f32	s0, s14
 8004a12:	eef0 0a67 	vmov.f32	s1, s15
 8004a16:	f014 fe9b 	bl	8019750 <round>
 8004a1a:	ec54 3b10 	vmov	r3, r4, d0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	4621      	mov	r1, r4
 8004a22:	f7fc f8c1 	bl	8000ba8 <__aeabi_d2uiz>
 8004a26:	4603      	mov	r3, r0
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004a2a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004a2e:	a33c      	add	r3, pc, #240	; (adr r3, 8004b20 <lowlayer_computeAndWritePulse+0x318>)
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f7fb fc2a 	bl	800028c <__adddf3>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	4621      	mov	r1, r4
 8004a40:	a339      	add	r3, pc, #228	; (adr r3, 8004b28 <lowlayer_computeAndWritePulse+0x320>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f7fb fdd7 	bl	80005f8 <__aeabi_dmul>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	4618      	mov	r0, r3
 8004a50:	4621      	mov	r1, r4
 8004a52:	a331      	add	r3, pc, #196	; (adr r3, 8004b18 <lowlayer_computeAndWritePulse+0x310>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f7fb fef8 	bl	800084c <__aeabi_ddiv>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	ec44 3b17 	vmov	d7, r3, r4
 8004a64:	eeb0 0a47 	vmov.f32	s0, s14
 8004a68:	eef0 0a67 	vmov.f32	s1, s15
 8004a6c:	f014 fe70 	bl	8019750 <round>
 8004a70:	ec54 3b10 	vmov	r3, r4, d0
 8004a74:	4618      	mov	r0, r3
 8004a76:	4621      	mov	r1, r4
 8004a78:	f7fc f896 	bl	8000ba8 <__aeabi_d2uiz>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8004a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f04f 0400 	mov.w	r4, #0
 8004a8a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8004a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f04f 0400 	mov.w	r4, #0
 8004a98:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8004a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f04f 0400 	mov.w	r4, #0
 8004aa6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8004aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f04f 0400 	mov.w	r4, #0
 8004ab4:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bfb8      	it	lt
 8004abe:	425b      	neglt	r3, r3
 8004ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ac2:	dc11      	bgt.n	8004ae8 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bfb8      	it	lt
 8004aca:	425b      	neglt	r3, r3
 8004acc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ace:	dc0b      	bgt.n	8004ae8 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bfb8      	it	lt
 8004ad6:	425b      	neglt	r3, r3
 8004ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8004ada:	dc05      	bgt.n	8004ae8 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfb8      	it	lt
 8004ae2:	425b      	neglt	r3, r3
 8004ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae6:	dd01      	ble.n	8004aec <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e00c      	b.n	8004b06 <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 8004aec:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8004af0:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8004af4:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004af8:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004afc:	f000 f828 	bl	8004b50 <lowlayer_writePulse>
 8004b00:	4603      	mov	r3, r0
 8004b02:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8004b04:	79fb      	ldrb	r3, [r7, #7]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	374c      	adds	r7, #76	; 0x4c
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004b10:	b004      	add	sp, #16
 8004b12:	4770      	bx	lr
 8004b14:	f3af 8000 	nop.w
 8004b18:	60000000 	.word	0x60000000
 8004b1c:	401921fb 	.word	0x401921fb
 8004b20:	daaaaaab 	.word	0xdaaaaaab
 8004b24:	4007bc89 	.word	0x4007bc89
 8004b28:	a0000000 	.word	0xa0000000
 8004b2c:	40d3bca1 	.word	0x40d3bca1
 8004b30:	daaaaaab 	.word	0xdaaaaaab
 8004b34:	3ff7bc89 	.word	0x3ff7bc89
 8004b38:	00000000 	.word	0x00000000
 8004b3c:	40d38800 	.word	0x40d38800
 8004b40:	88000000 	.word	0x88000000
 8004b44:	4002d97c 	.word	0x4002d97c
 8004b48:	40df4000 	.word	0x40df4000
 8004b4c:	40590000 	.word	0x40590000

08004b50 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4604      	mov	r4, r0
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	71fb      	strb	r3, [r7, #7]
 8004b62:	4603      	mov	r3, r0
 8004b64:	71bb      	strb	r3, [r7, #6]
 8004b66:	460b      	mov	r3, r1
 8004b68:	717b      	strb	r3, [r7, #5]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8004b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	da06      	bge.n	8004b84 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	425b      	negs	r3, r3
 8004b7a:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	425b      	negs	r3, r3
 8004b80:	75fb      	strb	r3, [r7, #23]
 8004b82:	e006      	b.n	8004b92 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8004b88:	79fb      	ldrb	r3, [r7, #7]
 8004b8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b8e:	b25b      	sxtb	r3, r3
 8004b90:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8004b92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da06      	bge.n	8004ba8 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8004b9a:	79bb      	ldrb	r3, [r7, #6]
 8004b9c:	425b      	negs	r3, r3
 8004b9e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8004ba0:	79bb      	ldrb	r3, [r7, #6]
 8004ba2:	425b      	negs	r3, r3
 8004ba4:	75bb      	strb	r3, [r7, #22]
 8004ba6:	e006      	b.n	8004bb6 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8004ba8:	79bb      	ldrb	r3, [r7, #6]
 8004baa:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8004bac:	79bb      	ldrb	r3, [r7, #6]
 8004bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bb2:	b25b      	sxtb	r3, r3
 8004bb4:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8004bb6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	da0b      	bge.n	8004bd6 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8004bbe:	797b      	ldrb	r3, [r7, #5]
 8004bc0:	425b      	negs	r3, r3
 8004bc2:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8004bc4:	797b      	ldrb	r3, [r7, #5]
 8004bc6:	425b      	negs	r3, r3
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	b25b      	sxtb	r3, r3
 8004bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bd0:	b25b      	sxtb	r3, r3
 8004bd2:	757b      	strb	r3, [r7, #21]
 8004bd4:	e003      	b.n	8004bde <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8004bd6:	797b      	ldrb	r3, [r7, #5]
 8004bd8:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8004bda:	797b      	ldrb	r3, [r7, #5]
 8004bdc:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8004bde:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da06      	bge.n	8004bf4 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8004be6:	793b      	ldrb	r3, [r7, #4]
 8004be8:	425b      	negs	r3, r3
 8004bea:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8004bec:	793b      	ldrb	r3, [r7, #4]
 8004bee:	425b      	negs	r3, r3
 8004bf0:	753b      	strb	r3, [r7, #20]
 8004bf2:	e006      	b.n	8004c02 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8004bf4:	793b      	ldrb	r3, [r7, #4]
 8004bf6:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8004bf8:	793b      	ldrb	r3, [r7, #4]
 8004bfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bfe:	b25b      	sxtb	r3, r3
 8004c00:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8004c02:	7cfb      	ldrb	r3, [r7, #19]
 8004c04:	2b4b      	cmp	r3, #75	; 0x4b
 8004c06:	d808      	bhi.n	8004c1a <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8004c08:	7cbb      	ldrb	r3, [r7, #18]
 8004c0a:	2b78      	cmp	r3, #120	; 0x78
 8004c0c:	d805      	bhi.n	8004c1a <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8004c0e:	7c7b      	ldrb	r3, [r7, #17]
 8004c10:	2b7d      	cmp	r3, #125	; 0x7d
 8004c12:	d802      	bhi.n	8004c1a <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8004c14:	7c3b      	ldrb	r3, [r7, #16]
 8004c16:	2b65      	cmp	r3, #101	; 0x65
 8004c18:	d901      	bls.n	8004c1e <lowlayer_writePulse+0xce>
		return FALSE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e04b      	b.n	8004cb6 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c24:	4826      	ldr	r0, [pc, #152]	; (8004cc0 <lowlayer_writePulse+0x170>)
 8004c26:	f007 f9e5 	bl	800bff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c30:	4824      	ldr	r0, [pc, #144]	; (8004cc4 <lowlayer_writePulse+0x174>)
 8004c32:	f007 f9df 	bl	800bff4 <HAL_GPIO_WritePin>
	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8004c3e:	f7fe fbc3 	bl	80033c8 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8004c42:	7dbb      	ldrb	r3, [r7, #22]
 8004c44:	4619      	mov	r1, r3
 8004c46:	4820      	ldr	r0, [pc, #128]	; (8004cc8 <lowlayer_writePulse+0x178>)
 8004c48:	f7fe fbbe 	bl	80033c8 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8004c4c:	7d7b      	ldrb	r3, [r7, #21]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	481e      	ldr	r0, [pc, #120]	; (8004ccc <lowlayer_writePulse+0x17c>)
 8004c52:	f7fe fbb9 	bl	80033c8 <FSMC_Write>
	 FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8004c56:	7d3b      	ldrb	r3, [r7, #20]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	481d      	ldr	r0, [pc, #116]	; (8004cd0 <lowlayer_writePulse+0x180>)
 8004c5c:	f7fe fbb4 	bl	80033c8 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8004c60:	2364      	movs	r3, #100	; 0x64
 8004c62:	73fb      	strb	r3, [r7, #15]
	
	 while (delay--);
 8004c64:	bf00      	nop
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	1e5a      	subs	r2, r3, #1
 8004c6a:	73fa      	strb	r2, [r7, #15]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1fa      	bne.n	8004c66 <lowlayer_writePulse+0x116>

//	int16_t wow = HAL_GPIO_ReadPin(CPLD_BUSY_GPIO_Port, CPLD_BUSY_Pin);
//	LOG_REPORT(" Busy: ", wow);
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8004c70:	2201      	movs	r2, #1
 8004c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c76:	4813      	ldr	r0, [pc, #76]	; (8004cc4 <lowlayer_writePulse+0x174>)
 8004c78:	f007 f9bc 	bl	800bff4 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8004c7c:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <lowlayer_writePulse+0x184>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c84:	4413      	add	r3, r2
 8004c86:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <lowlayer_writePulse+0x184>)
 8004c88:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <lowlayer_writePulse+0x184>)
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004c92:	4413      	add	r3, r2
 8004c94:	4a0f      	ldr	r2, [pc, #60]	; (8004cd4 <lowlayer_writePulse+0x184>)
 8004c96:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8004c98:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <lowlayer_writePulse+0x184>)
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <lowlayer_writePulse+0x184>)
 8004ca4:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <lowlayer_writePulse+0x184>)
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004cae:	4413      	add	r3, r2
 8004cb0:	4a08      	ldr	r2, [pc, #32]	; (8004cd4 <lowlayer_writePulse+0x184>)
 8004cb2:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8004cb4:	2301      	movs	r3, #1
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40020000 	.word	0x40020000
 8004cc4:	40020c00 	.word	0x40020c00
 8004cc8:	60000002 	.word	0x60000002
 8004ccc:	60000004 	.word	0x60000004
 8004cd0:	60000006 	.word	0x60000006
 8004cd4:	20004ec0 	.word	0x20004ec0

08004cd8 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8004cde:	2364      	movs	r3, #100	; 0x64
 8004ce0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ce8:	4809      	ldr	r0, [pc, #36]	; (8004d10 <lowlayer_resetEncoder+0x38>)
 8004cea:	f007 f983 	bl	800bff4 <HAL_GPIO_WritePin>
	while (delay--);
 8004cee:	bf00      	nop
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	1e5a      	subs	r2, r3, #1
 8004cf4:	71fa      	strb	r2, [r7, #7]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1fa      	bne.n	8004cf0 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d00:	4803      	ldr	r0, [pc, #12]	; (8004d10 <lowlayer_resetEncoder+0x38>)
 8004d02:	f007 f977 	bl	800bff4 <HAL_GPIO_WritePin>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40020c00 	.word	0x40020c00

08004d14 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8004d1a:	4805      	ldr	r0, [pc, #20]	; (8004d30 <lowlayer_readLimitSwitch+0x1c>)
 8004d1c:	f7fe fb63 	bl	80033e6 <FSMC_Read>
 8004d20:	4603      	mov	r3, r0
 8004d22:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	b2db      	uxtb	r3, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	60000020 	.word	0x60000020

08004d34 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d81c      	bhi.n	8004d7e <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004d4a:	3310      	adds	r3, #16
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fb49 	bl	80033e6 <FSMC_Read>
 8004d54:	4603      	mov	r3, r0
 8004d56:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004d5e:	3310      	adds	r3, #16
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	3302      	adds	r3, #2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe fb3e 	bl	80033e6 <FSMC_Read>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004d6e:	893b      	ldrh	r3, [r7, #8]
 8004d70:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	041a      	lsls	r2, r3, #16
 8004d76:	897b      	ldrh	r3, [r7, #10]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e001      	b.n	8004d82 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004d82:	68fb      	ldr	r3, [r7, #12]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d81c      	bhi.n	8004dd6 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004da2:	3318      	adds	r3, #24
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fb1d 	bl	80033e6 <FSMC_Read>
 8004dac:	4603      	mov	r3, r0
 8004dae:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8004db0:	79fb      	ldrb	r3, [r7, #7]
 8004db2:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004db6:	3318      	adds	r3, #24
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	3302      	adds	r3, #2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe fb12 	bl	80033e6 <FSMC_Read>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004dc6:	893b      	ldrh	r3, [r7, #8]
 8004dc8:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	041a      	lsls	r2, r3, #16
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e001      	b.n	8004dda <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004dda:	68fb      	ldr	r3, [r7, #12]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8004de4:	b590      	push	{r4, r7, lr}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004dea:	2300      	movs	r3, #0
 8004dec:	71fb      	strb	r3, [r7, #7]
 8004dee:	e00b      	b.n	8004e08 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8004df0:	79fc      	ldrb	r4, [r7, #7]
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff ff9d 	bl	8004d34 <lowlayer_readEncoder>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <lowlayer_updateEncoder+0x34>)
 8004dfe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	3301      	adds	r3, #1
 8004e06:	71fb      	strb	r3, [r7, #7]
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d9f0      	bls.n	8004df0 <lowlayer_updateEncoder+0xc>
	}
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd90      	pop	{r4, r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20004ed4 	.word	0x20004ed4

08004e1c <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004e22:	2300      	movs	r3, #0
 8004e24:	71fb      	strb	r3, [r7, #7]
 8004e26:	e00b      	b.n	8004e40 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8004e28:	79fc      	ldrb	r4, [r7, #7]
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff ffad 	bl	8004d8c <lowlayer_readCapture>
 8004e32:	4602      	mov	r2, r0
 8004e34:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <lowlayer_updateCapture+0x34>)
 8004e36:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	71fb      	strb	r3, [r7, #7]
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d9f0      	bls.n	8004e28 <lowlayer_updateCapture+0xc>
	}
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd90      	pop	{r4, r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20004ee4 	.word	0x20004ee4

08004e54 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8004e5a:	f7ff ff5b 	bl	8004d14 <lowlayer_readLimitSwitch>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8004e62:	2300      	movs	r3, #0
 8004e64:	71fb      	strb	r3, [r7, #7]
 8004e66:	e00d      	b.n	8004e84 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8004e68:	79ba      	ldrb	r2, [r7, #6]
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	fa42 f303 	asr.w	r3, r2, r3
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	f002 0201 	and.w	r2, r2, #1
 8004e78:	b2d1      	uxtb	r1, r2
 8004e7a:	4a06      	ldr	r2, [pc, #24]	; (8004e94 <lowlayer_updateLimit+0x40>)
 8004e7c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	3301      	adds	r3, #1
 8004e82:	71fb      	strb	r3, [r7, #7]
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d9ee      	bls.n	8004e68 <lowlayer_updateLimit+0x14>
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20004ee0 	.word	0x20004ee0

08004e98 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d006      	beq.n	8004eb6 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004eae:	4807      	ldr	r0, [pc, #28]	; (8004ecc <lowlayer_setOutput+0x34>)
 8004eb0:	f007 f8a0 	bl	800bff4 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8004eb4:	e005      	b.n	8004ec2 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ebc:	4803      	ldr	r0, [pc, #12]	; (8004ecc <lowlayer_setOutput+0x34>)
 8004ebe:	f007 f899 	bl	800bff4 <HAL_GPIO_WritePin>
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40020400 	.word	0x40020400

08004ed0 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	2140      	movs	r1, #64	; 0x40
 8004ed8:	4802      	ldr	r0, [pc, #8]	; (8004ee4 <lowlayer_CPLD_Init+0x14>)
 8004eda:	f007 f88b 	bl	800bff4 <HAL_GPIO_WritePin>
}
 8004ede:	bf00      	nop
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40020c00 	.word	0x40020c00

08004ee8 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8004eec:	2201      	movs	r2, #1
 8004eee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ef2:	4808      	ldr	r0, [pc, #32]	; (8004f14 <lowlayer_stepMotorInit+0x2c>)
 8004ef4:	f007 f87e 	bl	800bff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004efe:	4805      	ldr	r0, [pc, #20]	; (8004f14 <lowlayer_stepMotorInit+0x2c>)
 8004f00:	f007 f878 	bl	800bff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8004f04:	2201      	movs	r2, #1
 8004f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f0a:	4802      	ldr	r0, [pc, #8]	; (8004f14 <lowlayer_stepMotorInit+0x2c>)
 8004f0c:	f007 f872 	bl	800bff4 <HAL_GPIO_WritePin>
}
 8004f10:	bf00      	nop
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40020000 	.word	0x40020000

08004f18 <scaraStartup>:
//											 "Over Velocity",
//											 "Over Accelerate",
//											 "Wrong Joint Num",
//											 "Wrong Coordinate"
//											};
void				scaraStartup(void) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8004f1c:	f7ff ffd8 	bl	8004ed0 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8004f20:	f7ff ffe2 	bl	8004ee8 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8004f24:	f7ff fed8 	bl	8004cd8 <lowlayer_resetEncoder>
	//lowlayer_writePulse(0, 0, 0, 0);
}
 8004f28:	bf00      	nop
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	0000      	movs	r0, r0
	...

08004f30 <scara_test_InitDuty>:

SCARA_StatusTypeDef scara_test_InitDuty(DUTY_Command_TypeDef command)
{
 8004f30:	b084      	sub	sp, #16
 8004f32:	b5b0      	push	{r4, r5, r7, lr}
 8004f34:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8004f38:	af5e      	add	r7, sp, #376	; 0x178
 8004f3a:	f107 0ce8 	add.w	ip, r7, #232	; 0xe8
 8004f3e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;
	double total_s, angle_s;
	int8_t dir_angle;
	SCARA_PositionTypeDef target_point;
	command.target_point.roll = command.target_point.roll*PI/180.0;
 8004f42:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004f46:	a38c      	add	r3, pc, #560	; (adr r3, 8005178 <scara_test_InitDuty+0x248>)
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f7fb fb54 	bl	80005f8 <__aeabi_dmul>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	4b88      	ldr	r3, [pc, #544]	; (8005180 <scara_test_InitDuty+0x250>)
 8004f5e:	f7fb fc75 	bl	800084c <__aeabi_ddiv>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
	if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004f6a:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d12c      	bne.n	8004fcc <scara_test_InitDuty+0x9c>
		target_point.x 		= positionCurrent.x + command.target_point.x;
 8004f72:	4b84      	ldr	r3, [pc, #528]	; (8005184 <scara_test_InitDuty+0x254>)
 8004f74:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004f78:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8004f7c:	f7fb f986 	bl	800028c <__adddf3>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		target_point.y 		= positionCurrent.y + command.target_point.y;
 8004f88:	4b7e      	ldr	r3, [pc, #504]	; (8005184 <scara_test_InitDuty+0x254>)
 8004f8a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004f8e:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8004f92:	f7fb f97b 	bl	800028c <__adddf3>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		target_point.z 		= positionCurrent.z + command.target_point.z;
 8004f9e:	4b79      	ldr	r3, [pc, #484]	; (8005184 <scara_test_InitDuty+0x254>)
 8004fa0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004fa4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8004fa8:	f7fb f970 	bl	800028c <__adddf3>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8004fb4:	4b73      	ldr	r3, [pc, #460]	; (8005184 <scara_test_InitDuty+0x254>)
 8004fb6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004fba:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8004fbe:	f7fb f965 	bl	800028c <__adddf3>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8004fca:	e016      	b.n	8004ffa <scara_test_InitDuty+0xca>
	} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004fcc:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d110      	bne.n	8004ff6 <scara_test_InitDuty+0xc6>
		target_point.x 		= command.target_point.x;
 8004fd4:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8004fd8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		target_point.y 		= command.target_point.y;
 8004fdc:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8004fe0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		target_point.z 		= command.target_point.z;
 8004fe4:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8004fe8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		target_point.roll	= command.target_point.roll;
 8004fec:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8004ff0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8004ff4:	e001      	b.n	8004ffa <scara_test_InitDuty+0xca>
	} else {
		return SCARA_STATUS_ERROR_COORDINATE;
 8004ff6:	230c      	movs	r3, #12
 8004ff8:	e0b7      	b.n	800516a <scara_test_InitDuty+0x23a>
	}
	angle_s = target_point.roll - positionCurrent.roll;
 8004ffa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ffe:	4b61      	ldr	r3, [pc, #388]	; (8005184 <scara_test_InitDuty+0x254>)
 8005000:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005004:	f7fb f940 	bl	8000288 <__aeabi_dsub>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	dir_angle = 1;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	if ( angle_s < 0) {
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005022:	f7fb fd5b 	bl	8000adc <__aeabi_dcmplt>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <scara_test_InitDuty+0x102>
		dir_angle = -1;
 800502c:	23ff      	movs	r3, #255	; 0xff
 800502e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}
	if ( fabs(angle_s) > PI) {
 8005032:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8005036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800503a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800503e:	a34e      	add	r3, pc, #312	; (adr r3, 8005178 <scara_test_InitDuty+0x248>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb fd66 	bl	8000b18 <__aeabi_dcmpgt>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d021      	beq.n	8005096 <scara_test_InitDuty+0x166>
		dir_angle = -dir_angle;
 8005052:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005056:	425b      	negs	r3, r3
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 800505e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005062:	f7fb fdc1 	bl	8000be8 <__aeabi_d2f>
 8005066:	ee07 0a90 	vmov	s15, r0
 800506a:	eef0 7ae7 	vabs.f32	s15, s15
 800506e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005188 <scara_test_InitDuty+0x258>
 8005072:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005076:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	ee17 0a90 	vmov	r0, s15
 800508a:	f7fb fa5d 	bl	8000548 <__aeabi_f2d>
 800508e:	4603      	mov	r3, r0
 8005090:	460c      	mov	r4, r1
 8005092:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	}
	myDUTY.time_total = command.time_total;
 8005096:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800509a:	4a3c      	ldr	r2, [pc, #240]	; (800518c <scara_test_InitDuty+0x25c>)
 800509c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80050a0:	e9c2 3400 	strd	r3, r4, [r2]
	myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 80050a4:	4b39      	ldr	r3, [pc, #228]	; (800518c <scara_test_InitDuty+0x25c>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
	myDUTY.task.roll_start = positionCurrent.roll;
 80050aa:	4b36      	ldr	r3, [pc, #216]	; (8005184 <scara_test_InitDuty+0x254>)
 80050ac:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80050b0:	4a36      	ldr	r2, [pc, #216]	; (800518c <scara_test_InitDuty+0x25c>)
 80050b2:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80050b6:	e9c2 3400 	strd	r3, r4, [r2]
	myDUTY.task.path.path_type = DUTY_PATH_LINE;
 80050ba:	4b34      	ldr	r3, [pc, #208]	; (800518c <scara_test_InitDuty+0x25c>)
 80050bc:	2200      	movs	r2, #0
 80050be:	721a      	strb	r2, [r3, #8]
	myDUTY.task.trajectory_roll.lspb.total_s = angle_s;
 80050c0:	4a32      	ldr	r2, [pc, #200]	; (800518c <scara_test_InitDuty+0x25c>)
 80050c2:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80050c6:	e9c2 34be 	strd	r3, r4, [r2, #760]	; 0x2f8
	myDUTY.task.trajectory_roll.lspb.dir = dir_angle;
 80050ca:	4a30      	ldr	r2, [pc, #192]	; (800518c <scara_test_InitDuty+0x25c>)
 80050cc:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80050d0:	f882 3298 	strb.w	r3, [r2, #664]	; 0x298
	myDUTY.task.trajectory_roll.lspb.v_design = angle_s/command.time_total;
 80050d4:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80050d8:	461a      	mov	r2, r3
 80050da:	4623      	mov	r3, r4
 80050dc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80050e0:	f7fb fbb4 	bl	800084c <__aeabi_ddiv>
 80050e4:	4603      	mov	r3, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	4a28      	ldr	r2, [pc, #160]	; (800518c <scara_test_InitDuty+0x25c>)
 80050ea:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
	myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 80050ee:	4b27      	ldr	r3, [pc, #156]	; (800518c <scara_test_InitDuty+0x25c>)
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 80050f6:	4c23      	ldr	r4, [pc, #140]	; (8005184 <scara_test_InitDuty+0x254>)
 80050f8:	a82e      	add	r0, sp, #184	; 0xb8
 80050fa:	463b      	mov	r3, r7
 80050fc:	22c0      	movs	r2, #192	; 0xc0
 80050fe:	4619      	mov	r1, r3
 8005100:	f010 fcf4 	bl	8015aec <memcpy>
 8005104:	4668      	mov	r0, sp
 8005106:	f104 0308 	add.w	r3, r4, #8
 800510a:	22b8      	movs	r2, #184	; 0xb8
 800510c:	4619      	mov	r1, r3
 800510e:	f010 fced 	bl	8015aec <memcpy>
 8005112:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005116:	481e      	ldr	r0, [pc, #120]	; (8005190 <scara_test_InitDuty+0x260>)
 8005118:	f001 fbc6 	bl	80068a8 <scaraInitLine>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	total_s = myDUTY.task.path.line.total_s;
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <scara_test_InitDuty+0x25c>)
 8005124:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005128:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
	if(status != SCARA_STATUS_OK){
 800512c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <scara_test_InitDuty+0x20a>
		return status;
 8005134:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005138:	e017      	b.n	800516a <scara_test_InitDuty+0x23a>
	}
	status = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 800513a:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 800513e:	eeb0 1a47 	vmov.f32	s2, s14
 8005142:	eef0 1a67 	vmov.f32	s3, s15
 8005146:	2203      	movs	r2, #3
 8005148:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 800514c:	2104      	movs	r1, #4
 800514e:	4811      	ldr	r0, [pc, #68]	; (8005194 <scara_test_InitDuty+0x264>)
 8005150:	f001 fde6 	bl	8006d20 <scaraInitLinear>
 8005154:	4603      	mov	r3, r0
 8005156:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	if(status != SCARA_STATUS_OK){
 800515a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <scara_test_InitDuty+0x238>
		return status;
 8005162:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005166:	e000      	b.n	800516a <scara_test_InitDuty+0x23a>
	}

	return SCARA_STATUS_OK;
 8005168:	2300      	movs	r3, #0
	
}
 800516a:	4618      	mov	r0, r3
 800516c:	37d8      	adds	r7, #216	; 0xd8
 800516e:	46bd      	mov	sp, r7
 8005170:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005174:	b004      	add	sp, #16
 8005176:	4770      	bx	lr
 8005178:	60000000 	.word	0x60000000
 800517c:	400921fb 	.word	0x400921fb
 8005180:	40668000 	.word	0x40668000
 8005184:	20005ae8 	.word	0x20005ae8
 8005188:	40c90fdb 	.word	0x40c90fdb
 800518c:	20004f28 	.word	0x20004f28
 8005190:	20004f38 	.word	0x20004f38
 8005194:	20005190 	.word	0x20005190

08005198 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8005198:	b084      	sub	sp, #16
 800519a:	b5b0      	push	{r4, r5, r7, lr}
 800519c:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80051a0:	af90      	add	r7, sp, #576	; 0x240
 80051a2:	f507 7ce8 	add.w	ip, r7, #464	; 0x1d0
 80051a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if(DUTY_SPACE_TASK == command.space_type) {
 80051aa:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f040 83b7 	bne.w	8005922 <scaraInitDuty+0x78a>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 80051b4:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80051b8:	a3b3      	add	r3, pc, #716	; (adr r3, 8005488 <scaraInitDuty+0x2f0>)
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f7fb fa1b 	bl	80005f8 <__aeabi_dmul>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	4bb0      	ldr	r3, [pc, #704]	; (8005490 <scaraInitDuty+0x2f8>)
 80051d0:	f7fb fb3c 	bl	800084c <__aeabi_ddiv>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80051dc:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d130      	bne.n	8005246 <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80051e4:	4bab      	ldr	r3, [pc, #684]	; (8005494 <scaraInitDuty+0x2fc>)
 80051e6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80051ea:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80051ee:	f7fb f84d 	bl	800028c <__adddf3>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4639      	mov	r1, r7
 80051f8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80051fc:	4ba5      	ldr	r3, [pc, #660]	; (8005494 <scaraInitDuty+0x2fc>)
 80051fe:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005202:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8005206:	f7fb f841 	bl	800028c <__adddf3>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4639      	mov	r1, r7
 8005210:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8005214:	4b9f      	ldr	r3, [pc, #636]	; (8005494 <scaraInitDuty+0x2fc>)
 8005216:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800521a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800521e:	f7fb f835 	bl	800028c <__adddf3>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4639      	mov	r1, r7
 8005228:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800522c:	4b99      	ldr	r3, [pc, #612]	; (8005494 <scaraInitDuty+0x2fc>)
 800522e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005232:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8005236:	f7fb f829 	bl	800028c <__adddf3>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4639      	mov	r1, r7
 8005240:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8005244:	e01b      	b.n	800527e <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005246:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800524a:	2b00      	cmp	r3, #0
 800524c:	d114      	bne.n	8005278 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 800524e:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8005252:	4639      	mov	r1, r7
 8005254:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8005258:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800525c:	4639      	mov	r1, r7
 800525e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8005262:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8005266:	4639      	mov	r1, r7
 8005268:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 800526c:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8005270:	4639      	mov	r1, r7
 8005272:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8005276:	e002      	b.n	800527e <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8005278:	230c      	movs	r3, #12
 800527a:	f001 bb02 	b.w	8006882 <scaraInitDuty+0x16ea>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 800527e:	463b      	mov	r3, r7
 8005280:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005284:	4b83      	ldr	r3, [pc, #524]	; (8005494 <scaraInitDuty+0x2fc>)
 8005286:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800528a:	f7fa fffd 	bl	8000288 <__aeabi_dsub>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
		dir_angle = 1;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		if ( angle_s < 0) {
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 80052a8:	f7fb fc18 	bl	8000adc <__aeabi_dcmplt>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <scaraInitDuty+0x120>
			dir_angle = -1;
 80052b2:	23ff      	movs	r3, #255	; 0xff
 80052b4:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
		}
		if ( fabs(angle_s) > PI) {
 80052b8:	f8d7 41a8 	ldr.w	r4, [r7, #424]	; 0x1a8
 80052bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80052c0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80052c4:	a370      	add	r3, pc, #448	; (adr r3, 8005488 <scaraInitDuty+0x2f0>)
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	4620      	mov	r0, r4
 80052cc:	4629      	mov	r1, r5
 80052ce:	f7fb fc23 	bl	8000b18 <__aeabi_dcmpgt>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d021      	beq.n	800531c <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 80052d8:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80052dc:	425b      	negs	r3, r3
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 80052e4:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 80052e8:	f7fb fc7e 	bl	8000be8 <__aeabi_d2f>
 80052ec:	ee07 0a90 	vmov	s15, r0
 80052f0:	eef0 7ae7 	vabs.f32	s15, s15
 80052f4:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005498 <scaraInitDuty+0x300>
 80052f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052fc:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 8005300:	ee07 3a90 	vmov	s15, r3
 8005304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530c:	ee17 0a90 	vmov	r0, s15
 8005310:	f7fb f91a 	bl	8000548 <__aeabi_f2d>
 8005314:	4603      	mov	r3, r0
 8005316:	460c      	mov	r4, r1
 8005318:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 800531c:	4b5f      	ldr	r3, [pc, #380]	; (800549c <scaraInitDuty+0x304>)
 800531e:	2200      	movs	r2, #0
 8005320:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8005322:	4b5c      	ldr	r3, [pc, #368]	; (8005494 <scaraInitDuty+0x2fc>)
 8005324:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005328:	4a5c      	ldr	r2, [pc, #368]	; (800549c <scaraInitDuty+0x304>)
 800532a:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800532e:	e9c2 3400 	strd	r3, r4, [r2]
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8005332:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8005336:	2b00      	cmp	r3, #0
 8005338:	d11f      	bne.n	800537a <scaraInitDuty+0x1e2>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 800533a:	4b58      	ldr	r3, [pc, #352]	; (800549c <scaraInitDuty+0x304>)
 800533c:	2200      	movs	r2, #0
 800533e:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8005340:	4c54      	ldr	r4, [pc, #336]	; (8005494 <scaraInitDuty+0x2fc>)
 8005342:	463b      	mov	r3, r7
 8005344:	a82e      	add	r0, sp, #184	; 0xb8
 8005346:	4619      	mov	r1, r3
 8005348:	23c0      	movs	r3, #192	; 0xc0
 800534a:	461a      	mov	r2, r3
 800534c:	f010 fbce 	bl	8015aec <memcpy>
 8005350:	4668      	mov	r0, sp
 8005352:	f104 0308 	add.w	r3, r4, #8
 8005356:	22b8      	movs	r2, #184	; 0xb8
 8005358:	4619      	mov	r1, r3
 800535a:	f010 fbc7 	bl	8015aec <memcpy>
 800535e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005362:	484f      	ldr	r0, [pc, #316]	; (80054a0 <scaraInitDuty+0x308>)
 8005364:	f001 faa0 	bl	80068a8 <scaraInitLine>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
			total_s = myDUTY.task.path.line.total_s;
 800536e:	4b4b      	ldr	r3, [pc, #300]	; (800549c <scaraInitDuty+0x304>)
 8005370:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8005374:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 8005378:	e07d      	b.n	8005476 <scaraInitDuty+0x2de>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 800537a:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 800537e:	2b01      	cmp	r3, #1
 8005380:	d176      	bne.n	8005470 <scaraInitDuty+0x2d8>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005382:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005386:	2b01      	cmp	r3, #1
 8005388:	d12d      	bne.n	80053e6 <scaraInitDuty+0x24e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 800538a:	4b42      	ldr	r3, [pc, #264]	; (8005494 <scaraInitDuty+0x2fc>)
 800538c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005390:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8005394:	461a      	mov	r2, r3
 8005396:	4623      	mov	r3, r4
 8005398:	f7fa ff78 	bl	800028c <__adddf3>
 800539c:	4603      	mov	r3, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80053a4:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 80053a8:	4b3a      	ldr	r3, [pc, #232]	; (8005494 <scaraInitDuty+0x2fc>)
 80053aa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80053ae:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 80053b2:	461a      	mov	r2, r3
 80053b4:	4623      	mov	r3, r4
 80053b6:	f7fa ff69 	bl	800028c <__adddf3>
 80053ba:	4603      	mov	r3, r0
 80053bc:	460c      	mov	r4, r1
 80053be:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80053c2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 80053c6:	4b33      	ldr	r3, [pc, #204]	; (8005494 <scaraInitDuty+0x2fc>)
 80053c8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80053cc:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 80053d0:	461a      	mov	r2, r3
 80053d2:	4623      	mov	r3, r4
 80053d4:	f7fa ff5a 	bl	800028c <__adddf3>
 80053d8:	4603      	mov	r3, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80053e0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 80053e4:	e019      	b.n	800541a <scaraInitDuty+0x282>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80053e6:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d112      	bne.n	8005414 <scaraInitDuty+0x27c>
				center_point.x 		= command.target_point.x;
 80053ee:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80053f2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80053f6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				center_point.y 		= command.target_point.y;
 80053fa:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80053fe:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005402:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				center_point.z 		= command.target_point.z;
 8005406:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800540a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800540e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 8005412:	e002      	b.n	800541a <scaraInitDuty+0x282>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8005414:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 8005416:	f001 ba34 	b.w	8006882 <scaraInitDuty+0x16ea>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 800541a:	4b20      	ldr	r3, [pc, #128]	; (800549c <scaraInitDuty+0x304>)
 800541c:	2201      	movs	r2, #1
 800541e:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8005420:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005424:	4c1b      	ldr	r4, [pc, #108]	; (8005494 <scaraInitDuty+0x2fc>)
 8005426:	938e      	str	r3, [sp, #568]	; 0x238
 8005428:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800542c:	a85e      	add	r0, sp, #376	; 0x178
 800542e:	4619      	mov	r1, r3
 8005430:	23c0      	movs	r3, #192	; 0xc0
 8005432:	461a      	mov	r2, r3
 8005434:	f010 fb5a 	bl	8015aec <memcpy>
 8005438:	463b      	mov	r3, r7
 800543a:	a82e      	add	r0, sp, #184	; 0xb8
 800543c:	4619      	mov	r1, r3
 800543e:	23c0      	movs	r3, #192	; 0xc0
 8005440:	461a      	mov	r2, r3
 8005442:	f010 fb53 	bl	8015aec <memcpy>
 8005446:	4668      	mov	r0, sp
 8005448:	f104 0308 	add.w	r3, r4, #8
 800544c:	22b8      	movs	r2, #184	; 0xb8
 800544e:	4619      	mov	r1, r3
 8005450:	f010 fb4c 	bl	8015aec <memcpy>
 8005454:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005458:	4812      	ldr	r0, [pc, #72]	; (80054a4 <scaraInitDuty+0x30c>)
 800545a:	f001 fae9 	bl	8006a30 <scaraInitCircle>
 800545e:	4603      	mov	r3, r0
 8005460:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <scaraInitDuty+0x304>)
 8005466:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 800546a:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
 800546e:	e002      	b.n	8005476 <scaraInitDuty+0x2de>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8005470:	2303      	movs	r3, #3
 8005472:	f001 ba06 	b.w	8006882 <scaraInitDuty+0x16ea>
		}

		if ( SCARA_STATUS_OK != status) {
 8005476:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 800547a:	2b00      	cmp	r3, #0
 800547c:	d014      	beq.n	80054a8 <scaraInitDuty+0x310>
			return status;
 800547e:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8005482:	f001 b9fe 	b.w	8006882 <scaraInitDuty+0x16ea>
 8005486:	bf00      	nop
 8005488:	60000000 	.word	0x60000000
 800548c:	400921fb 	.word	0x400921fb
 8005490:	40668000 	.word	0x40668000
 8005494:	20005ae8 	.word	0x20005ae8
 8005498:	40c90fdb 	.word	0x40c90fdb
 800549c:	20004f28 	.word	0x20004f28
 80054a0:	20004f38 	.word	0x20004f38
 80054a4:	20004fa8 	.word	0x20004fa8
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 80054a8:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 80ed 	bne.w	800568c <scaraInitDuty+0x4f4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80054b2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d155      	bne.n	8005566 <scaraInitDuty+0x3ce>
//				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
//				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
//						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
//				myDUTY.time_total = command.time_total;

				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 80054ba:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80054be:	4a9b      	ldr	r2, [pc, #620]	; (800572c <scaraInitDuty+0x594>)
 80054c0:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80054c4:	4b99      	ldr	r3, [pc, #612]	; (800572c <scaraInitDuty+0x594>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB1(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80054cc:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80054d0:	ed97 6b7c 	vldr	d6, [r7, #496]	; 0x1f0
 80054d4:	eeb0 2a46 	vmov.f32	s4, s12
 80054d8:	eef0 2a66 	vmov.f32	s5, s13
 80054dc:	eeb0 1a47 	vmov.f32	s2, s14
 80054e0:	eef0 1a67 	vmov.f32	s3, s15
 80054e4:	2201      	movs	r2, #1
 80054e6:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80054ea:	2104      	movs	r1, #4
 80054ec:	4890      	ldr	r0, [pc, #576]	; (8005730 <scaraInitDuty+0x598>)
 80054ee:	f001 fc63 	bl	8006db8 <scaraInitLSPB1>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
										 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.time_total);

				myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 80054f8:	4a8c      	ldr	r2, [pc, #560]	; (800572c <scaraInitDuty+0x594>)
 80054fa:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80054fe:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
				myDUTY.task.trajectory_roll.linear.Tf = command.time_total;
 8005502:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005506:	4a89      	ldr	r2, [pc, #548]	; (800572c <scaraInitDuty+0x594>)
 8005508:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800550c:	e9c2 3400 	strd	r3, r4, [r2]
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005510:	4b86      	ldr	r3, [pc, #536]	; (800572c <scaraInitDuty+0x594>)
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 8005518:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 800551c:	4618      	mov	r0, r3
 800551e:	f7fb f801 	bl	8000524 <__aeabi_i2d>
 8005522:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8005526:	f7fb f867 	bl	80005f8 <__aeabi_dmul>
 800552a:	4603      	mov	r3, r0
 800552c:	460c      	mov	r4, r1
 800552e:	ec44 3b16 	vmov	d6, r3, r4
 8005532:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 8005536:	eeb0 1a47 	vmov.f32	s2, s14
 800553a:	eef0 1a67 	vmov.f32	s3, s15
 800553e:	2203      	movs	r2, #3
 8005540:	eeb0 0a46 	vmov.f32	s0, s12
 8005544:	eef0 0a66 	vmov.f32	s1, s13
 8005548:	2105      	movs	r1, #5
 800554a:	487a      	ldr	r0, [pc, #488]	; (8005734 <scaraInitDuty+0x59c>)
 800554c:	f001 fbe8 	bl	8006d20 <scaraInitLinear>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
				myDUTY.time_total = command.time_total;
 8005556:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800555a:	4a74      	ldr	r2, [pc, #464]	; (800572c <scaraInitDuty+0x594>)
 800555c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005560:	e9c2 3400 	strd	r3, r4, [r2]
 8005564:	e1cc      	b.n	8005900 <scaraInitDuty+0x768>
			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005566:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800556a:	2b00      	cmp	r3, #0
 800556c:	f040 808b 	bne.w	8005686 <scaraInitDuty+0x4ee>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005570:	4b6e      	ldr	r3, [pc, #440]	; (800572c <scaraInitDuty+0x594>)
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005578:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800557c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005580:	eeb0 2a46 	vmov.f32	s4, s12
 8005584:	eef0 2a66 	vmov.f32	s5, s13
 8005588:	eeb0 1a47 	vmov.f32	s2, s14
 800558c:	eef0 1a67 	vmov.f32	s3, s15
 8005590:	2200      	movs	r2, #0
 8005592:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005596:	2104      	movs	r1, #4
 8005598:	4865      	ldr	r0, [pc, #404]	; (8005730 <scaraInitDuty+0x598>)
 800559a:	f001 fe69 	bl	8007270 <scaraInitLSPB>
 800559e:	4603      	mov	r3, r0
 80055a0:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80055a4:	4b61      	ldr	r3, [pc, #388]	; (800572c <scaraInitDuty+0x594>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80055ac:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80055b0:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80055b4:	eeb0 2a46 	vmov.f32	s4, s12
 80055b8:	eef0 2a66 	vmov.f32	s5, s13
 80055bc:	eeb0 1a47 	vmov.f32	s2, s14
 80055c0:	eef0 1a67 	vmov.f32	s3, s15
 80055c4:	2200      	movs	r2, #0
 80055c6:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 80055ca:	2105      	movs	r1, #5
 80055cc:	485a      	ldr	r0, [pc, #360]	; (8005738 <scaraInitDuty+0x5a0>)
 80055ce:	f001 fe4f 	bl	8007270 <scaraInitLSPB>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 80055d8:	4b54      	ldr	r3, [pc, #336]	; (800572c <scaraInitDuty+0x594>)
 80055da:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 80055de:	4b53      	ldr	r3, [pc, #332]	; (800572c <scaraInitDuty+0x594>)
 80055e0:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 80055e4:	461a      	mov	r2, r3
 80055e6:	4623      	mov	r3, r4
 80055e8:	f7fb fa96 	bl	8000b18 <__aeabi_dcmpgt>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d024      	beq.n	800563c <scaraInitDuty+0x4a4>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 80055f2:	4b4e      	ldr	r3, [pc, #312]	; (800572c <scaraInitDuty+0x594>)
 80055f4:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 80055f8:	4a4c      	ldr	r2, [pc, #304]	; (800572c <scaraInitDuty+0x594>)
 80055fa:	e9c2 34ba 	strd	r3, r4, [r2, #744]	; 0x2e8
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80055fe:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005602:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005606:	eeb0 2a46 	vmov.f32	s4, s12
 800560a:	eef0 2a66 	vmov.f32	s5, s13
 800560e:	eeb0 1a47 	vmov.f32	s2, s14
 8005612:	eef0 1a67 	vmov.f32	s3, s15
 8005616:	2201      	movs	r2, #1
 8005618:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 800561c:	2105      	movs	r1, #5
 800561e:	4846      	ldr	r0, [pc, #280]	; (8005738 <scaraInitDuty+0x5a0>)
 8005620:	f001 fe26 	bl	8007270 <scaraInitLSPB>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 800562a:	4b40      	ldr	r3, [pc, #256]	; (800572c <scaraInitDuty+0x594>)
 800562c:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005630:	4a3e      	ldr	r2, [pc, #248]	; (800572c <scaraInitDuty+0x594>)
 8005632:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005636:	e9c2 3400 	strd	r3, r4, [r2]
 800563a:	e161      	b.n	8005900 <scaraInitDuty+0x768>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 800563c:	4b3b      	ldr	r3, [pc, #236]	; (800572c <scaraInitDuty+0x594>)
 800563e:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005642:	4a3a      	ldr	r2, [pc, #232]	; (800572c <scaraInitDuty+0x594>)
 8005644:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005648:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800564c:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005650:	eeb0 2a46 	vmov.f32	s4, s12
 8005654:	eef0 2a66 	vmov.f32	s5, s13
 8005658:	eeb0 1a47 	vmov.f32	s2, s14
 800565c:	eef0 1a67 	vmov.f32	s3, s15
 8005660:	2201      	movs	r2, #1
 8005662:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005666:	2104      	movs	r1, #4
 8005668:	4831      	ldr	r0, [pc, #196]	; (8005730 <scaraInitDuty+0x598>)
 800566a:	f001 fe01 	bl	8007270 <scaraInitLSPB>
 800566e:	4603      	mov	r3, r0
 8005670:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8005674:	4b2d      	ldr	r3, [pc, #180]	; (800572c <scaraInitDuty+0x594>)
 8005676:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 800567a:	4a2c      	ldr	r2, [pc, #176]	; (800572c <scaraInitDuty+0x594>)
 800567c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005680:	e9c2 3400 	strd	r3, r4, [r2]
 8005684:	e13c      	b.n	8005900 <scaraInitDuty+0x768>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8005686:	2308      	movs	r3, #8
 8005688:	f001 b8fb 	b.w	8006882 <scaraInitDuty+0x16ea>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 800568c:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005690:	2b01      	cmp	r3, #1
 8005692:	f040 80ea 	bne.w	800586a <scaraInitDuty+0x6d2>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005696:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800569a:	2b01      	cmp	r3, #1
 800569c:	d152      	bne.n	8005744 <scaraInitDuty+0x5ac>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 800569e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80056a2:	4a22      	ldr	r2, [pc, #136]	; (800572c <scaraInitDuty+0x594>)
 80056a4:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80056a8:	4b20      	ldr	r3, [pc, #128]	; (800572c <scaraInitDuty+0x594>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80056b0:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80056b4:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80056b8:	eeb0 2a46 	vmov.f32	s4, s12
 80056bc:	eef0 2a66 	vmov.f32	s5, s13
 80056c0:	eeb0 1a47 	vmov.f32	s2, s14
 80056c4:	eef0 1a67 	vmov.f32	s3, s15
 80056c8:	2201      	movs	r2, #1
 80056ca:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80056ce:	2104      	movs	r1, #4
 80056d0:	481a      	ldr	r0, [pc, #104]	; (800573c <scaraInitDuty+0x5a4>)
 80056d2:	f002 f9ad 	bl	8007a30 <scaraInitScurve>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 80056dc:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80056e0:	4a12      	ldr	r2, [pc, #72]	; (800572c <scaraInitDuty+0x594>)
 80056e2:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80056e6:	4b11      	ldr	r3, [pc, #68]	; (800572c <scaraInitDuty+0x594>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80056ee:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80056f2:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80056f6:	eeb0 2a46 	vmov.f32	s4, s12
 80056fa:	eef0 2a66 	vmov.f32	s5, s13
 80056fe:	eeb0 1a47 	vmov.f32	s2, s14
 8005702:	eef0 1a67 	vmov.f32	s3, s15
 8005706:	2201      	movs	r2, #1
 8005708:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 800570c:	2105      	movs	r1, #5
 800570e:	480c      	ldr	r0, [pc, #48]	; (8005740 <scaraInitDuty+0x5a8>)
 8005710:	f002 f98e 	bl	8007a30 <scaraInitScurve>
 8005714:	4603      	mov	r3, r0
 8005716:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 800571a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800571e:	4a03      	ldr	r2, [pc, #12]	; (800572c <scaraInitDuty+0x594>)
 8005720:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005724:	e9c2 3400 	strd	r3, r4, [r2]
 8005728:	e0ea      	b.n	8005900 <scaraInitDuty+0x768>
 800572a:	bf00      	nop
 800572c:	20004f28 	.word	0x20004f28
 8005730:	20005040 	.word	0x20005040
 8005734:	20005310 	.word	0x20005310
 8005738:	200051c0 	.word	0x200051c0
 800573c:	200050c0 	.word	0x200050c0
 8005740:	20005240 	.word	0x20005240

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005744:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005748:	2b00      	cmp	r3, #0
 800574a:	f040 808b 	bne.w	8005864 <scaraInitDuty+0x6cc>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800574e:	4bc0      	ldr	r3, [pc, #768]	; (8005a50 <scaraInitDuty+0x8b8>)
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005756:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800575a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800575e:	eeb0 2a46 	vmov.f32	s4, s12
 8005762:	eef0 2a66 	vmov.f32	s5, s13
 8005766:	eeb0 1a47 	vmov.f32	s2, s14
 800576a:	eef0 1a67 	vmov.f32	s3, s15
 800576e:	2200      	movs	r2, #0
 8005770:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005774:	2104      	movs	r1, #4
 8005776:	48b7      	ldr	r0, [pc, #732]	; (8005a54 <scaraInitDuty+0x8bc>)
 8005778:	f002 f95a 	bl	8007a30 <scaraInitScurve>
 800577c:	4603      	mov	r3, r0
 800577e:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005782:	4bb3      	ldr	r3, [pc, #716]	; (8005a50 <scaraInitDuty+0x8b8>)
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 800578a:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800578e:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005792:	eeb0 2a46 	vmov.f32	s4, s12
 8005796:	eef0 2a66 	vmov.f32	s5, s13
 800579a:	eeb0 1a47 	vmov.f32	s2, s14
 800579e:	eef0 1a67 	vmov.f32	s3, s15
 80057a2:	2200      	movs	r2, #0
 80057a4:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 80057a8:	2105      	movs	r1, #5
 80057aa:	48ab      	ldr	r0, [pc, #684]	; (8005a58 <scaraInitDuty+0x8c0>)
 80057ac:	f002 f940 	bl	8007a30 <scaraInitScurve>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 80057b6:	4ba6      	ldr	r3, [pc, #664]	; (8005a50 <scaraInitDuty+0x8b8>)
 80057b8:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 80057bc:	4ba4      	ldr	r3, [pc, #656]	; (8005a50 <scaraInitDuty+0x8b8>)
 80057be:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 80057c2:	461a      	mov	r2, r3
 80057c4:	4623      	mov	r3, r4
 80057c6:	f7fb f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d024      	beq.n	800581a <scaraInitDuty+0x682>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 80057d0:	4b9f      	ldr	r3, [pc, #636]	; (8005a50 <scaraInitDuty+0x8b8>)
 80057d2:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 80057d6:	4a9e      	ldr	r2, [pc, #632]	; (8005a50 <scaraInitDuty+0x8b8>)
 80057d8:	e9c2 34de 	strd	r3, r4, [r2, #888]	; 0x378
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80057dc:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80057e0:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80057e4:	eeb0 2a46 	vmov.f32	s4, s12
 80057e8:	eef0 2a66 	vmov.f32	s5, s13
 80057ec:	eeb0 1a47 	vmov.f32	s2, s14
 80057f0:	eef0 1a67 	vmov.f32	s3, s15
 80057f4:	2201      	movs	r2, #1
 80057f6:	ed97 0b6a 	vldr	d0, [r7, #424]	; 0x1a8
 80057fa:	2105      	movs	r1, #5
 80057fc:	4896      	ldr	r0, [pc, #600]	; (8005a58 <scaraInitDuty+0x8c0>)
 80057fe:	f002 f917 	bl	8007a30 <scaraInitScurve>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8005808:	4b91      	ldr	r3, [pc, #580]	; (8005a50 <scaraInitDuty+0x8b8>)
 800580a:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 800580e:	4a90      	ldr	r2, [pc, #576]	; (8005a50 <scaraInitDuty+0x8b8>)
 8005810:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005814:	e9c2 3400 	strd	r3, r4, [r2]
 8005818:	e072      	b.n	8005900 <scaraInitDuty+0x768>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 800581a:	4b8d      	ldr	r3, [pc, #564]	; (8005a50 <scaraInitDuty+0x8b8>)
 800581c:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005820:	4a8b      	ldr	r2, [pc, #556]	; (8005a50 <scaraInitDuty+0x8b8>)
 8005822:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005826:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 800582a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 800582e:	eeb0 2a46 	vmov.f32	s4, s12
 8005832:	eef0 2a66 	vmov.f32	s5, s13
 8005836:	eeb0 1a47 	vmov.f32	s2, s14
 800583a:	eef0 1a67 	vmov.f32	s3, s15
 800583e:	2201      	movs	r2, #1
 8005840:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 8005844:	2104      	movs	r1, #4
 8005846:	4883      	ldr	r0, [pc, #524]	; (8005a54 <scaraInitDuty+0x8bc>)
 8005848:	f002 f8f2 	bl	8007a30 <scaraInitScurve>
 800584c:	4603      	mov	r3, r0
 800584e:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8005852:	4b7f      	ldr	r3, [pc, #508]	; (8005a50 <scaraInitDuty+0x8b8>)
 8005854:	e9d3 34de 	ldrd	r3, r4, [r3, #888]	; 0x378
 8005858:	4a7d      	ldr	r2, [pc, #500]	; (8005a50 <scaraInitDuty+0x8b8>)
 800585a:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800585e:	e9c2 3400 	strd	r3, r4, [r2]
 8005862:	e04d      	b.n	8005900 <scaraInitDuty+0x768>
				}
			}else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8005864:	2308      	movs	r3, #8
 8005866:	f001 b80c 	b.w	8006882 <scaraInitDuty+0x16ea>
			}
		}else if(DUTY_TRAJECTORY_LINEAR == command.trajec_type){
 800586a:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 800586e:	2b02      	cmp	r3, #2
 8005870:	d143      	bne.n	80058fa <scaraInitDuty+0x762>
			myDUTY.time_total = command.time_total;
 8005872:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005876:	4a76      	ldr	r2, [pc, #472]	; (8005a50 <scaraInitDuty+0x8b8>)
 8005878:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800587c:	e9c2 3400 	strd	r3, r4, [r2]
			myDUTY.task.trajectory_roll.linear.dir = dir_angle;
 8005880:	4a73      	ldr	r2, [pc, #460]	; (8005a50 <scaraInitDuty+0x8b8>)
 8005882:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8005886:	f882 33e8 	strb.w	r3, [r2, #1000]	; 0x3e8
			myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 800588a:	4b71      	ldr	r3, [pc, #452]	; (8005a50 <scaraInitDuty+0x8b8>)
 800588c:	2202      	movs	r2, #2
 800588e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
			myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LINEAR;
 8005892:	4b6f      	ldr	r3, [pc, #444]	; (8005a50 <scaraInitDuty+0x8b8>)
 8005894:	2202      	movs	r2, #2
 8005896:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			status1 = scaraInitLinear(&(myDUTY.task.trajectory_3d.linear), TRAJECTORY_3D, total_s, DUTY_MODE_INIT_QT, command.time_total);
 800589a:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 800589e:	eeb0 1a47 	vmov.f32	s2, s14
 80058a2:	eef0 1a67 	vmov.f32	s3, s15
 80058a6:	2203      	movs	r2, #3
 80058a8:	ed97 0b6c 	vldr	d0, [r7, #432]	; 0x1b0
 80058ac:	2104      	movs	r1, #4
 80058ae:	486b      	ldr	r0, [pc, #428]	; (8005a5c <scaraInitDuty+0x8c4>)
 80058b0:	f001 fa36 	bl	8006d20 <scaraInitLinear>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
			status2 = scaraInitLinear(&(myDUTY.task.trajectory_roll.linear), TRAJECTORY_ROLL, angle_s*dir_angle, DUTY_MODE_INIT_QT, command.time_total);
 80058ba:	f997 31a7 	ldrsb.w	r3, [r7, #423]	; 0x1a7
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fa fe30 	bl	8000524 <__aeabi_i2d>
 80058c4:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80058c8:	f7fa fe96 	bl	80005f8 <__aeabi_dmul>
 80058cc:	4603      	mov	r3, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	ec44 3b16 	vmov	d6, r3, r4
 80058d4:	ed97 7b7c 	vldr	d7, [r7, #496]	; 0x1f0
 80058d8:	eeb0 1a47 	vmov.f32	s2, s14
 80058dc:	eef0 1a67 	vmov.f32	s3, s15
 80058e0:	2203      	movs	r2, #3
 80058e2:	eeb0 0a46 	vmov.f32	s0, s12
 80058e6:	eef0 0a66 	vmov.f32	s1, s13
 80058ea:	2105      	movs	r1, #5
 80058ec:	485c      	ldr	r0, [pc, #368]	; (8005a60 <scaraInitDuty+0x8c8>)
 80058ee:	f001 fa17 	bl	8006d20 <scaraInitLinear>
 80058f2:	4603      	mov	r3, r0
 80058f4:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 80058f8:	e002      	b.n	8005900 <scaraInitDuty+0x768>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80058fa:	2305      	movs	r3, #5
 80058fc:	f000 bfc1 	b.w	8006882 <scaraInitDuty+0x16ea>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8005900:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <scaraInitDuty+0x778>
			return status1;
 8005908:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800590c:	f000 bfb9 	b.w	8006882 <scaraInitDuty+0x16ea>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005910:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8786 	beq.w	8006826 <scaraInitDuty+0x168e>
			return status2;
 800591a:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 800591e:	f000 bfb0 	b.w	8006882 <scaraInitDuty+0x16ea>
		}


	
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8005922:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8005926:	2b01      	cmp	r3, #1
 8005928:	f040 877b 	bne.w	8006822 <scaraInitDuty+0x168a>
		/*----------- Space Joint ------------*/
		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 800592c:	4b48      	ldr	r3, [pc, #288]	; (8005a50 <scaraInitDuty+0x8b8>)
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8005932:	4b4c      	ldr	r3, [pc, #304]	; (8005a64 <scaraInitDuty+0x8cc>)
 8005934:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005938:	4a45      	ldr	r2, [pc, #276]	; (8005a50 <scaraInitDuty+0x8b8>)
 800593a:	f602 2218 	addw	r2, r2, #2584	; 0xa18
 800593e:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8005942:	4b48      	ldr	r3, [pc, #288]	; (8005a64 <scaraInitDuty+0x8cc>)
 8005944:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005948:	4a41      	ldr	r2, [pc, #260]	; (8005a50 <scaraInitDuty+0x8b8>)
 800594a:	f502 6222 	add.w	r2, r2, #2592	; 0xa20
 800594e:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8005952:	4b44      	ldr	r3, [pc, #272]	; (8005a64 <scaraInitDuty+0x8cc>)
 8005954:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005958:	4a3d      	ldr	r2, [pc, #244]	; (8005a50 <scaraInitDuty+0x8b8>)
 800595a:	f602 2228 	addw	r2, r2, #2600	; 0xa28
 800595e:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8005962:	4b40      	ldr	r3, [pc, #256]	; (8005a64 <scaraInitDuty+0x8cc>)
 8005964:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8005968:	4a39      	ldr	r2, [pc, #228]	; (8005a50 <scaraInitDuty+0x8b8>)
 800596a:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 800596e:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8005972:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 83e5 	bne.w	8006146 <scaraInitDuty+0xfae>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 800597c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005980:	2b03      	cmp	r3, #3
 8005982:	f200 8156 	bhi.w	8005c32 <scaraInitDuty+0xa9a>
 8005986:	a201      	add	r2, pc, #4	; (adr r2, 800598c <scaraInitDuty+0x7f4>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	0800599d 	.word	0x0800599d
 8005990:	08005a6d 	.word	0x08005a6d
 8005994:	08005b13 	.word	0x08005b13
 8005998:	08005b8f 	.word	0x08005b8f
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 800599c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80059a0:	a329      	add	r3, pc, #164	; (adr r3, 8005a48 <scaraInitDuty+0x8b0>)
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f7fa fe27 	bl	80005f8 <__aeabi_dmul>
 80059aa:	4603      	mov	r3, r0
 80059ac:	460c      	mov	r4, r1
 80059ae:	4618      	mov	r0, r3
 80059b0:	4621      	mov	r1, r4
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	4b2c      	ldr	r3, [pc, #176]	; (8005a68 <scaraInitDuty+0x8d0>)
 80059b8:	f7fa ff48 	bl	800084c <__aeabi_ddiv>
 80059bc:	4603      	mov	r3, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80059c4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d113      	bne.n	80059f4 <scaraInitDuty+0x85c>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 80059cc:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <scaraInitDuty+0x8b8>)
 80059ce:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 80059d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059d6:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80059da:	461a      	mov	r2, r3
 80059dc:	4623      	mov	r3, r4
 80059de:	f7fa fc55 	bl	800028c <__adddf3>
 80059e2:	4603      	mov	r3, r0
 80059e4:	460c      	mov	r4, r1
 80059e6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 80059ea:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80059ee:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 80059f2:	e01a      	b.n	8005a2a <scaraInitDuty+0x892>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80059f4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d113      	bne.n	8005a24 <scaraInitDuty+0x88c>
					abs_position = command.sub_para_double;
 80059fc:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005a00:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8005a04:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <scaraInitDuty+0x8b8>)
 8005a0a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8005a0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a12:	461a      	mov	r2, r3
 8005a14:	4623      	mov	r3, r4
 8005a16:	f7fa fc37 	bl	8000288 <__aeabi_dsub>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005a22:	e002      	b.n	8005a2a <scaraInitDuty+0x892>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005a24:	230c      	movs	r3, #12
 8005a26:	f000 bf2c 	b.w	8006882 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8005a2a:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005a2e:	2000      	movs	r0, #0
 8005a30:	f004 fb42 	bl	800a0b8 <scaraCheckWorkSpace1>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 80fe 	beq.w	8005c38 <scaraInitDuty+0xaa0>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005a3c:	2307      	movs	r3, #7
 8005a3e:	f000 bf20 	b.w	8006882 <scaraInitDuty+0x16ea>
 8005a42:	bf00      	nop
 8005a44:	f3af 8000 	nop.w
 8005a48:	60000000 	.word	0x60000000
 8005a4c:	400921fb 	.word	0x400921fb
 8005a50:	20004f28 	.word	0x20004f28
 8005a54:	200050c0 	.word	0x200050c0
 8005a58:	20005240 	.word	0x20005240
 8005a5c:	20005190 	.word	0x20005190
 8005a60:	20005310 	.word	0x20005310
 8005a64:	20005ae8 	.word	0x20005ae8
 8005a68:	40668000 	.word	0x40668000
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005a6c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005a70:	a39f      	add	r3, pc, #636	; (adr r3, 8005cf0 <scaraInitDuty+0xb58>)
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f7fa fdbf 	bl	80005f8 <__aeabi_dmul>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	4618      	mov	r0, r3
 8005a80:	4621      	mov	r1, r4
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	4b9c      	ldr	r3, [pc, #624]	; (8005cf8 <scaraInitDuty+0xb60>)
 8005a88:	f7fa fee0 	bl	800084c <__aeabi_ddiv>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005a94:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d113      	bne.n	8005ac4 <scaraInitDuty+0x92c>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8005a9c:	4b97      	ldr	r3, [pc, #604]	; (8005cfc <scaraInitDuty+0xb64>)
 8005a9e:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005aa6:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4623      	mov	r3, r4
 8005aae:	f7fa fbed 	bl	800028c <__adddf3>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005aba:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005abe:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005ac2:	e01a      	b.n	8005afa <scaraInitDuty+0x962>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005ac4:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d113      	bne.n	8005af4 <scaraInitDuty+0x95c>
					abs_position = command.sub_para_double;
 8005acc:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005ad0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8005ad4:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005ad8:	4b88      	ldr	r3, [pc, #544]	; (8005cfc <scaraInitDuty+0xb64>)
 8005ada:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8005ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4623      	mov	r3, r4
 8005ae6:	f7fa fbcf 	bl	8000288 <__aeabi_dsub>
 8005aea:	4603      	mov	r3, r0
 8005aec:	460c      	mov	r4, r1
 8005aee:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005af2:	e002      	b.n	8005afa <scaraInitDuty+0x962>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005af4:	230c      	movs	r3, #12
 8005af6:	f000 bec4 	b.w	8006882 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8005afa:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005afe:	2001      	movs	r0, #1
 8005b00:	f004 fada 	bl	800a0b8 <scaraCheckWorkSpace1>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8098 	beq.w	8005c3c <scaraInitDuty+0xaa4>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005b0c:	2307      	movs	r3, #7
 8005b0e:	f000 beb8 	b.w	8006882 <scaraInitDuty+0x16ea>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005b12:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d113      	bne.n	8005b42 <scaraInitDuty+0x9aa>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8005b1a:	4b78      	ldr	r3, [pc, #480]	; (8005cfc <scaraInitDuty+0xb64>)
 8005b1c:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005b20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b24:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	f7fa fbae 	bl	800028c <__adddf3>
 8005b30:	4603      	mov	r3, r0
 8005b32:	460c      	mov	r4, r1
 8005b34:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005b38:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005b3c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005b40:	e01a      	b.n	8005b78 <scaraInitDuty+0x9e0>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005b42:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d113      	bne.n	8005b72 <scaraInitDuty+0x9da>
					abs_position = command.sub_para_double;
 8005b4a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005b4e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8005b52:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005b56:	4b69      	ldr	r3, [pc, #420]	; (8005cfc <scaraInitDuty+0xb64>)
 8005b58:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8005b5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b60:	461a      	mov	r2, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	f7fa fb90 	bl	8000288 <__aeabi_dsub>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005b70:	e002      	b.n	8005b78 <scaraInitDuty+0x9e0>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005b72:	230c      	movs	r3, #12
 8005b74:	f000 be85 	b.w	8006882 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8005b78:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005b7c:	2002      	movs	r0, #2
 8005b7e:	f004 fa9b 	bl	800a0b8 <scaraCheckWorkSpace1>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d05b      	beq.n	8005c40 <scaraInitDuty+0xaa8>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005b88:	2307      	movs	r3, #7
 8005b8a:	f000 be7a 	b.w	8006882 <scaraInitDuty+0x16ea>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005b8e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005b92:	a357      	add	r3, pc, #348	; (adr r3, 8005cf0 <scaraInitDuty+0xb58>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f7fa fd2e 	bl	80005f8 <__aeabi_dmul>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	4b53      	ldr	r3, [pc, #332]	; (8005cf8 <scaraInitDuty+0xb60>)
 8005baa:	f7fa fe4f 	bl	800084c <__aeabi_ddiv>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	e9c7 347a 	strd	r3, r4, [r7, #488]	; 0x1e8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005bb6:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d113      	bne.n	8005be6 <scaraInitDuty+0xa4e>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8005bbe:	4b4f      	ldr	r3, [pc, #316]	; (8005cfc <scaraInitDuty+0xb64>)
 8005bc0:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8005bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bc8:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4623      	mov	r3, r4
 8005bd0:	f7fa fb5c 	bl	800028c <__adddf3>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double;
 8005bdc:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005be0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005be4:	e01a      	b.n	8005c1c <scaraInitDuty+0xa84>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005be6:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d113      	bne.n	8005c16 <scaraInitDuty+0xa7e>
					abs_position = command.sub_para_double;
 8005bee:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8005bf2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8005bf6:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005bfa:	4b40      	ldr	r3, [pc, #256]	; (8005cfc <scaraInitDuty+0xb64>)
 8005bfc:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8005c00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c04:	461a      	mov	r2, r3
 8005c06:	4623      	mov	r3, r4
 8005c08:	f7fa fb3e 	bl	8000288 <__aeabi_dsub>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
 8005c14:	e002      	b.n	8005c1c <scaraInitDuty+0xa84>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005c16:	230c      	movs	r3, #12
 8005c18:	f000 be33 	b.w	8006882 <scaraInitDuty+0x16ea>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8005c1c:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 8005c20:	2003      	movs	r0, #3
 8005c22:	f004 fa49 	bl	800a0b8 <scaraCheckWorkSpace1>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00b      	beq.n	8005c44 <scaraInitDuty+0xaac>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005c2c:	2307      	movs	r3, #7
 8005c2e:	f000 be28 	b.w	8006882 <scaraInitDuty+0x16ea>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8005c32:	230b      	movs	r3, #11
 8005c34:	f000 be25 	b.w	8006882 <scaraInitDuty+0x16ea>
				break;
 8005c38:	bf00      	nop
 8005c3a:	e004      	b.n	8005c46 <scaraInitDuty+0xaae>
				break;
 8005c3c:	bf00      	nop
 8005c3e:	e002      	b.n	8005c46 <scaraInitDuty+0xaae>
				break;
 8005c40:	bf00      	nop
 8005c42:	e000      	b.n	8005c46 <scaraInitDuty+0xaae>
				break;
 8005c44:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8005c46:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f040 8135 	bne.w	8005eba <scaraInitDuty+0xd22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005c50:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	f040 80a4 	bne.w	8005da2 <scaraInitDuty+0xc0a>
					for ( uint8_t i = 0; i < 4; i++) {
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8005c60:	e099      	b.n	8005d96 <scaraInitDuty+0xbfe>
						if ( i == command.sub_para_int) {
 8005c62:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005c66:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d14a      	bne.n	8005d04 <scaraInitDuty+0xb6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005c6e:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005c72:	4922      	ldr	r1, [pc, #136]	; (8005cfc <scaraInitDuty+0xb64>)
 8005c74:	4613      	mov	r3, r2
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	4413      	add	r3, r2
 8005c7a:	01db      	lsls	r3, r3, #7
 8005c7c:	440b      	add	r3, r1
 8005c7e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005c82:	2200      	movs	r2, #0
 8005c84:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005c86:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8005c8a:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8005c8e:	4c1b      	ldr	r4, [pc, #108]	; (8005cfc <scaraInitDuty+0xb64>)
 8005c90:	4603      	mov	r3, r0
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	4403      	add	r3, r0
 8005c96:	01db      	lsls	r3, r3, #7
 8005c98:	4423      	add	r3, r4
 8005c9a:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005c9e:	e9c3 1200 	strd	r1, r2, [r3]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005ca2:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	4413      	add	r3, r2
 8005cac:	01db      	lsls	r3, r3, #7
 8005cae:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005cb2:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <scaraInitDuty+0xb64>)
 8005cb4:	1898      	adds	r0, r3, r2
 8005cb6:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005cba:	4a11      	ldr	r2, [pc, #68]	; (8005d00 <scaraInitDuty+0xb68>)
 8005cbc:	5cd3      	ldrb	r3, [r2, r3]
 8005cbe:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005cc2:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005cc6:	eeb0 2a46 	vmov.f32	s4, s12
 8005cca:	eef0 2a66 	vmov.f32	s5, s13
 8005cce:	eeb0 1a47 	vmov.f32	s2, s14
 8005cd2:	eef0 1a67 	vmov.f32	s3, s15
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005cdc:	4619      	mov	r1, r3
 8005cde:	f001 fac7 	bl	8007270 <scaraInitLSPB>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8005ce8:	e049      	b.n	8005d7e <scaraInitDuty+0xbe6>
 8005cea:	bf00      	nop
 8005cec:	f3af 8000 	nop.w
 8005cf0:	60000000 	.word	0x60000000
 8005cf4:	400921fb 	.word	0x400921fb
 8005cf8:	40668000 	.word	0x40668000
 8005cfc:	20004f28 	.word	0x20004f28
 8005d00:	20000820 	.word	0x20000820
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005d04:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005d08:	49c3      	ldr	r1, [pc, #780]	; (8006018 <scaraInitDuty+0xe80>)
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	4413      	add	r3, r2
 8005d10:	01db      	lsls	r3, r3, #7
 8005d12:	440b      	add	r3, r1
 8005d14:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005d1c:	f897 018f 	ldrb.w	r0, [r7, #399]	; 0x18f
 8005d20:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8005d24:	4cbc      	ldr	r4, [pc, #752]	; (8006018 <scaraInitDuty+0xe80>)
 8005d26:	4603      	mov	r3, r0
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	4403      	add	r3, r0
 8005d2c:	01db      	lsls	r3, r3, #7
 8005d2e:	4423      	add	r3, r4
 8005d30:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005d34:	e9c3 1200 	strd	r1, r2, [r3]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005d38:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	4413      	add	r3, r2
 8005d42:	01db      	lsls	r3, r3, #7
 8005d44:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005d48:	4ab3      	ldr	r2, [pc, #716]	; (8006018 <scaraInitDuty+0xe80>)
 8005d4a:	1898      	adds	r0, r3, r2
 8005d4c:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005d50:	4ab2      	ldr	r2, [pc, #712]	; (800601c <scaraInitDuty+0xe84>)
 8005d52:	5cd3      	ldrb	r3, [r2, r3]
 8005d54:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005d58:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005d5c:	eeb0 2a46 	vmov.f32	s4, s12
 8005d60:	eef0 2a66 	vmov.f32	s5, s13
 8005d64:	eeb0 1a47 	vmov.f32	s2, s14
 8005d68:	eef0 1a67 	vmov.f32	s3, s15
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	ed9f 0ba8 	vldr	d0, [pc, #672]	; 8006010 <scaraInitDuty+0xe78>
 8005d72:	4619      	mov	r1, r3
 8005d74:	f001 fa7c 	bl	8007270 <scaraInitLSPB>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 8005d7e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005d82:	4aa5      	ldr	r2, [pc, #660]	; (8006018 <scaraInitDuty+0xe80>)
 8005d84:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005d88:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005d8c:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005d90:	3301      	adds	r3, #1
 8005d92:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8005d96:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	f67f af61 	bls.w	8005c62 <scaraInitDuty+0xaca>
 8005da0:	e1c2      	b.n	8006128 <scaraInitDuty+0xf90>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005da2:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f040 8084 	bne.w	8005eb4 <scaraInitDuty+0xd1c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8005db2:	e07a      	b.n	8005eaa <scaraInitDuty+0xd12>
						if ( i == command.sub_para_int) {
 8005db4:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005db8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d140      	bne.n	8005e42 <scaraInitDuty+0xcaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005dc0:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005dc4:	4994      	ldr	r1, [pc, #592]	; (8006018 <scaraInitDuty+0xe80>)
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	4413      	add	r3, r2
 8005dcc:	01db      	lsls	r3, r3, #7
 8005dce:	440b      	add	r3, r1
 8005dd0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005dd8:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005ddc:	4613      	mov	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4413      	add	r3, r2
 8005de2:	01db      	lsls	r3, r3, #7
 8005de4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005de8:	4a8b      	ldr	r2, [pc, #556]	; (8006018 <scaraInitDuty+0xe80>)
 8005dea:	1898      	adds	r0, r3, r2
 8005dec:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005df0:	4a8a      	ldr	r2, [pc, #552]	; (800601c <scaraInitDuty+0xe84>)
 8005df2:	5cd3      	ldrb	r3, [r2, r3]
 8005df4:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005df8:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005dfc:	eeb0 2a46 	vmov.f32	s4, s12
 8005e00:	eef0 2a66 	vmov.f32	s5, s13
 8005e04:	eeb0 1a47 	vmov.f32	s2, s14
 8005e08:	eef0 1a67 	vmov.f32	s3, s15
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005e12:	4619      	mov	r1, r3
 8005e14:	f001 fa2c 	bl	8007270 <scaraInitLSPB>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005e1e:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005e22:	497d      	ldr	r1, [pc, #500]	; (8006018 <scaraInitDuty+0xe80>)
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	01db      	lsls	r3, r3, #7
 8005e2c:	440b      	add	r3, r1
 8005e2e:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8005e32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e36:	4a78      	ldr	r2, [pc, #480]	; (8006018 <scaraInitDuty+0xe80>)
 8005e38:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005e3c:	e9c2 3400 	strd	r3, r4, [r2]
 8005e40:	e02e      	b.n	8005ea0 <scaraInitDuty+0xd08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005e42:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005e46:	4974      	ldr	r1, [pc, #464]	; (8006018 <scaraInitDuty+0xe80>)
 8005e48:	4613      	mov	r3, r2
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	4413      	add	r3, r2
 8005e4e:	01db      	lsls	r3, r3, #7
 8005e50:	440b      	add	r3, r1
 8005e52:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005e56:	2200      	movs	r2, #0
 8005e58:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005e5a:	f897 218e 	ldrb.w	r2, [r7, #398]	; 0x18e
 8005e5e:	4613      	mov	r3, r2
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	4413      	add	r3, r2
 8005e64:	01db      	lsls	r3, r3, #7
 8005e66:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005e6a:	4a6b      	ldr	r2, [pc, #428]	; (8006018 <scaraInitDuty+0xe80>)
 8005e6c:	1898      	adds	r0, r3, r2
 8005e6e:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005e72:	4a6a      	ldr	r2, [pc, #424]	; (800601c <scaraInitDuty+0xe84>)
 8005e74:	5cd3      	ldrb	r3, [r2, r3]
 8005e76:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005e7a:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005e7e:	eeb0 2a46 	vmov.f32	s4, s12
 8005e82:	eef0 2a66 	vmov.f32	s5, s13
 8005e86:	eeb0 1a47 	vmov.f32	s2, s14
 8005e8a:	eef0 1a67 	vmov.f32	s3, s15
 8005e8e:	2200      	movs	r2, #0
 8005e90:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8006010 <scaraInitDuty+0xe78>
 8005e94:	4619      	mov	r1, r3
 8005e96:	f001 f9eb 	bl	8007270 <scaraInitLSPB>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
					for ( uint8_t i = 0; i < 4; i++) {
 8005ea0:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8005eaa:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d980      	bls.n	8005db4 <scaraInitDuty+0xc1c>
 8005eb2:	e139      	b.n	8006128 <scaraInitDuty+0xf90>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	f000 bce4 	b.w	8006882 <scaraInitDuty+0x16ea>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005eba:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	f040 8130 	bne.w	8006124 <scaraInitDuty+0xf8c>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005ec4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	f040 8097 	bne.w	8005ffc <scaraInitDuty+0xe64>
						for ( uint8_t i = 0; i < 4; i++) {
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8005ed4:	e08c      	b.n	8005ff0 <scaraInitDuty+0xe58>
							if ( i == command.sub_para_int) {
 8005ed6:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005eda:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d13d      	bne.n	8005f5e <scaraInitDuty+0xdc6>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005ee2:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005ee6:	494c      	ldr	r1, [pc, #304]	; (8006018 <scaraInitDuty+0xe80>)
 8005ee8:	4613      	mov	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	4413      	add	r3, r2
 8005eee:	01db      	lsls	r3, r3, #7
 8005ef0:	440b      	add	r3, r1
 8005ef2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005efa:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 8005efe:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8005f02:	4c45      	ldr	r4, [pc, #276]	; (8006018 <scaraInitDuty+0xe80>)
 8005f04:	4603      	mov	r3, r0
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4403      	add	r3, r0
 8005f0a:	01db      	lsls	r3, r3, #7
 8005f0c:	4423      	add	r3, r4
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f12:	e9c3 1200 	strd	r1, r2, [r3]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005f16:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	4413      	add	r3, r2
 8005f20:	01db      	lsls	r3, r3, #7
 8005f22:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8005f26:	4a3c      	ldr	r2, [pc, #240]	; (8006018 <scaraInitDuty+0xe80>)
 8005f28:	1898      	adds	r0, r3, r2
 8005f2a:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8005f2e:	4a3b      	ldr	r2, [pc, #236]	; (800601c <scaraInitDuty+0xe84>)
 8005f30:	5cd3      	ldrb	r3, [r2, r3]
 8005f32:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005f36:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005f3a:	eeb0 2a46 	vmov.f32	s4, s12
 8005f3e:	eef0 2a66 	vmov.f32	s5, s13
 8005f42:	eeb0 1a47 	vmov.f32	s2, s14
 8005f46:	eef0 1a67 	vmov.f32	s3, s15
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005f50:	4619      	mov	r1, r3
 8005f52:	f001 fd6d 	bl	8007a30 <scaraInitScurve>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8005f5c:	e03c      	b.n	8005fd8 <scaraInitDuty+0xe40>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005f5e:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005f62:	492d      	ldr	r1, [pc, #180]	; (8006018 <scaraInitDuty+0xe80>)
 8005f64:	4613      	mov	r3, r2
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	4413      	add	r3, r2
 8005f6a:	01db      	lsls	r3, r3, #7
 8005f6c:	440b      	add	r3, r1
 8005f6e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005f72:	2201      	movs	r2, #1
 8005f74:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005f76:	f897 018d 	ldrb.w	r0, [r7, #397]	; 0x18d
 8005f7a:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8005f7e:	4c26      	ldr	r4, [pc, #152]	; (8006018 <scaraInitDuty+0xe80>)
 8005f80:	4603      	mov	r3, r0
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	4403      	add	r3, r0
 8005f86:	01db      	lsls	r3, r3, #7
 8005f88:	4423      	add	r3, r4
 8005f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8e:	e9c3 1200 	strd	r1, r2, [r3]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005f92:	f897 218d 	ldrb.w	r2, [r7, #397]	; 0x18d
 8005f96:	4613      	mov	r3, r2
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	01db      	lsls	r3, r3, #7
 8005f9e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8005fa2:	4a1d      	ldr	r2, [pc, #116]	; (8006018 <scaraInitDuty+0xe80>)
 8005fa4:	1898      	adds	r0, r3, r2
 8005fa6:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8005faa:	4a1c      	ldr	r2, [pc, #112]	; (800601c <scaraInitDuty+0xe84>)
 8005fac:	5cd3      	ldrb	r3, [r2, r3]
 8005fae:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8005fb2:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8005fb6:	eeb0 2a46 	vmov.f32	s4, s12
 8005fba:	eef0 2a66 	vmov.f32	s5, s13
 8005fbe:	eeb0 1a47 	vmov.f32	s2, s14
 8005fc2:	eef0 1a67 	vmov.f32	s3, s15
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8006010 <scaraInitDuty+0xe78>
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f001 fd2f 	bl	8007a30 <scaraInitScurve>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 8005fd8:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8005fdc:	4a0e      	ldr	r2, [pc, #56]	; (8006018 <scaraInitDuty+0xe80>)
 8005fde:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8005fe2:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 8005fe6:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8005fea:	3301      	adds	r3, #1
 8005fec:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 8005ff0:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	f67f af6e 	bls.w	8005ed6 <scaraInitDuty+0xd3e>
 8005ffa:	e095      	b.n	8006128 <scaraInitDuty+0xf90>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005ffc:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006000:	2b00      	cmp	r3, #0
 8006002:	f040 808d 	bne.w	8006120 <scaraInitDuty+0xf88>
						for ( uint8_t i = 0; i < 4; i++) {
 8006006:	2300      	movs	r3, #0
 8006008:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 800600c:	e083      	b.n	8006116 <scaraInitDuty+0xf7e>
 800600e:	bf00      	nop
	...
 8006018:	20004f28 	.word	0x20004f28
 800601c:	20000820 	.word	0x20000820
							if ( i == command.sub_para_int) {
 8006020:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006024:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006028:	429a      	cmp	r2, r3
 800602a:	d140      	bne.n	80060ae <scaraInitDuty+0xf16>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800602c:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006030:	49b7      	ldr	r1, [pc, #732]	; (8006310 <scaraInitDuty+0x1178>)
 8006032:	4613      	mov	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	01db      	lsls	r3, r3, #7
 800603a:	440b      	add	r3, r1
 800603c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006040:	2201      	movs	r2, #1
 8006042:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8006044:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 8006048:	4613      	mov	r3, r2
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	4413      	add	r3, r2
 800604e:	01db      	lsls	r3, r3, #7
 8006050:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006054:	4aae      	ldr	r2, [pc, #696]	; (8006310 <scaraInitDuty+0x1178>)
 8006056:	1898      	adds	r0, r3, r2
 8006058:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 800605c:	4aad      	ldr	r2, [pc, #692]	; (8006314 <scaraInitDuty+0x117c>)
 800605e:	5cd3      	ldrb	r3, [r2, r3]
 8006060:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 8006064:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 8006068:	eeb0 2a46 	vmov.f32	s4, s12
 800606c:	eef0 2a66 	vmov.f32	s5, s13
 8006070:	eeb0 1a47 	vmov.f32	s2, s14
 8006074:	eef0 1a67 	vmov.f32	s3, s15
 8006078:	2200      	movs	r2, #0
 800607a:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 800607e:	4619      	mov	r1, r3
 8006080:	f001 fcd6 	bl	8007a30 <scaraInitScurve>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 800608a:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 800608e:	49a0      	ldr	r1, [pc, #640]	; (8006310 <scaraInitDuty+0x1178>)
 8006090:	4613      	mov	r3, r2
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	4413      	add	r3, r2
 8006096:	01db      	lsls	r3, r3, #7
 8006098:	440b      	add	r3, r1
 800609a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060a2:	4a9b      	ldr	r2, [pc, #620]	; (8006310 <scaraInitDuty+0x1178>)
 80060a4:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80060a8:	e9c2 3400 	strd	r3, r4, [r2]
 80060ac:	e02e      	b.n	800610c <scaraInitDuty+0xf74>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80060ae:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80060b2:	4997      	ldr	r1, [pc, #604]	; (8006310 <scaraInitDuty+0x1178>)
 80060b4:	4613      	mov	r3, r2
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	4413      	add	r3, r2
 80060ba:	01db      	lsls	r3, r3, #7
 80060bc:	440b      	add	r3, r1
 80060be:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80060c2:	2201      	movs	r2, #1
 80060c4:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80060c6:	f897 218c 	ldrb.w	r2, [r7, #396]	; 0x18c
 80060ca:	4613      	mov	r3, r2
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	4413      	add	r3, r2
 80060d0:	01db      	lsls	r3, r3, #7
 80060d2:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80060d6:	4a8e      	ldr	r2, [pc, #568]	; (8006310 <scaraInitDuty+0x1178>)
 80060d8:	1898      	adds	r0, r3, r2
 80060da:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 80060de:	4a8d      	ldr	r2, [pc, #564]	; (8006314 <scaraInitDuty+0x117c>)
 80060e0:	5cd3      	ldrb	r3, [r2, r3]
 80060e2:	ed97 7bde 	vldr	d7, [r7, #888]	; 0x378
 80060e6:	ed97 6be0 	vldr	d6, [r7, #896]	; 0x380
 80060ea:	eeb0 2a46 	vmov.f32	s4, s12
 80060ee:	eef0 2a66 	vmov.f32	s5, s13
 80060f2:	eeb0 1a47 	vmov.f32	s2, s14
 80060f6:	eef0 1a67 	vmov.f32	s3, s15
 80060fa:	2200      	movs	r2, #0
 80060fc:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8006300 <scaraInitDuty+0x1168>
 8006100:	4619      	mov	r1, r3
 8006102:	f001 fc95 	bl	8007a30 <scaraInitScurve>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
						for ( uint8_t i = 0; i < 4; i++) {
 800610c:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8006110:	3301      	adds	r3, #1
 8006112:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8006116:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 800611a:	2b03      	cmp	r3, #3
 800611c:	d980      	bls.n	8006020 <scaraInitDuty+0xe88>
 800611e:	e003      	b.n	8006128 <scaraInitDuty+0xf90>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8006120:	2308      	movs	r3, #8
 8006122:	e3ae      	b.n	8006882 <scaraInitDuty+0x16ea>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8006124:	2305      	movs	r3, #5
 8006126:	e3ac      	b.n	8006882 <scaraInitDuty+0x16ea>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8006128:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <scaraInitDuty+0xf9e>
				return status1;
 8006130:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8006134:	e3a5      	b.n	8006882 <scaraInitDuty+0x16ea>
			}
			if ( SCARA_STATUS_OK != status2) {
 8006136:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 8373 	beq.w	8006826 <scaraInitDuty+0x168e>
				return status2;
 8006140:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8006144:	e39d      	b.n	8006882 <scaraInitDuty+0x16ea>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 8006146:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800614a:	2b01      	cmp	r3, #1
 800614c:	f040 8367 	bne.w	800681e <scaraInitDuty+0x1686>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 8006150:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8006154:	a36c      	add	r3, pc, #432	; (adr r3, 8006308 <scaraInitDuty+0x1170>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f7fa fa4d 	bl	80005f8 <__aeabi_dmul>
 800615e:	4603      	mov	r3, r0
 8006160:	460c      	mov	r4, r1
 8006162:	4618      	mov	r0, r3
 8006164:	4621      	mov	r1, r4
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	4b6b      	ldr	r3, [pc, #428]	; (8006318 <scaraInitDuty+0x1180>)
 800616c:	f7fa fb6e 	bl	800084c <__aeabi_ddiv>
 8006170:	4603      	mov	r3, r0
 8006172:	460c      	mov	r4, r1
 8006174:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8006178:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800617c:	2b01      	cmp	r3, #1
 800617e:	d13c      	bne.n	80061fa <scaraInitDuty+0x1062>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 8006180:	4b66      	ldr	r3, [pc, #408]	; (800631c <scaraInitDuty+0x1184>)
 8006182:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006186:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800618a:	461a      	mov	r2, r3
 800618c:	4623      	mov	r3, r4
 800618e:	f7fa f87d 	bl	800028c <__adddf3>
 8006192:	4603      	mov	r3, r0
 8006194:	460c      	mov	r4, r1
 8006196:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800619a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= positionCurrent.y + command.target_point.y;
 800619e:	4b5f      	ldr	r3, [pc, #380]	; (800631c <scaraInitDuty+0x1184>)
 80061a0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80061a4:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80061a8:	461a      	mov	r2, r3
 80061aa:	4623      	mov	r3, r4
 80061ac:	f7fa f86e 	bl	800028c <__adddf3>
 80061b0:	4603      	mov	r3, r0
 80061b2:	460c      	mov	r4, r1
 80061b4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80061b8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= positionCurrent.z + command.target_point.z;
 80061bc:	4b57      	ldr	r3, [pc, #348]	; (800631c <scaraInitDuty+0x1184>)
 80061be:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80061c2:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80061c6:	461a      	mov	r2, r3
 80061c8:	4623      	mov	r3, r4
 80061ca:	f7fa f85f 	bl	800028c <__adddf3>
 80061ce:	4603      	mov	r3, r0
 80061d0:	460c      	mov	r4, r1
 80061d2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80061d6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80061da:	4b50      	ldr	r3, [pc, #320]	; (800631c <scaraInitDuty+0x1184>)
 80061dc:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80061e0:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 80061e4:	461a      	mov	r2, r3
 80061e6:	4623      	mov	r3, r4
 80061e8:	f7fa f850 	bl	800028c <__adddf3>
 80061ec:	4603      	mov	r3, r0
 80061ee:	460c      	mov	r4, r1
 80061f0:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80061f4:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 80061f8:	e01e      	b.n	8006238 <scaraInitDuty+0x10a0>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80061fa:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d118      	bne.n	8006234 <scaraInitDuty+0x109c>
				target_point.x 		= command.target_point.x;
 8006202:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006206:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800620a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
				target_point.y 		= command.target_point.y;
 800620e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8006212:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006216:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
				target_point.z 		= command.target_point.z;
 800621a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800621e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006222:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
				target_point.roll	= command.target_point.roll;
 8006226:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800622a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800622e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
 8006232:	e001      	b.n	8006238 <scaraInitDuty+0x10a0>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8006234:	230c      	movs	r3, #12
 8006236:	e324      	b.n	8006882 <scaraInitDuty+0x16ea>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8006238:	4c38      	ldr	r4, [pc, #224]	; (800631c <scaraInitDuty+0x1184>)
 800623a:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800623e:	4668      	mov	r0, sp
 8006240:	f104 0308 	add.w	r3, r4, #8
 8006244:	22b8      	movs	r2, #184	; 0xb8
 8006246:	4619      	mov	r1, r3
 8006248:	f00f fc50 	bl	8015aec <memcpy>
 800624c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006250:	4628      	mov	r0, r5
 8006252:	f7fd fb91 	bl	8003978 <kinematicInverse>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <scaraInitDuty+0x10c8>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 800625c:	2307      	movs	r3, #7
 800625e:	e310      	b.n	8006882 <scaraInitDuty+0x16ea>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8006260:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006264:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8006268:	4b2c      	ldr	r3, [pc, #176]	; (800631c <scaraInitDuty+0x1184>)
 800626a:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800626e:	461a      	mov	r2, r3
 8006270:	4623      	mov	r3, r4
 8006272:	f7fa f809 	bl	8000288 <__aeabi_dsub>
 8006276:	4603      	mov	r3, r0
 8006278:	460c      	mov	r4, r1
 800627a:	463a      	mov	r2, r7
 800627c:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8006280:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006284:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8006288:	4b24      	ldr	r3, [pc, #144]	; (800631c <scaraInitDuty+0x1184>)
 800628a:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800628e:	461a      	mov	r2, r3
 8006290:	4623      	mov	r3, r4
 8006292:	f7f9 fff9 	bl	8000288 <__aeabi_dsub>
 8006296:	4603      	mov	r3, r0
 8006298:	460c      	mov	r4, r1
 800629a:	463a      	mov	r2, r7
 800629c:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 80062a0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80062a4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80062a8:	4b1c      	ldr	r3, [pc, #112]	; (800631c <scaraInitDuty+0x1184>)
 80062aa:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80062ae:	461a      	mov	r2, r3
 80062b0:	4623      	mov	r3, r4
 80062b2:	f7f9 ffe9 	bl	8000288 <__aeabi_dsub>
 80062b6:	4603      	mov	r3, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	463a      	mov	r2, r7
 80062bc:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 80062c0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80062c4:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80062c8:	4b14      	ldr	r3, [pc, #80]	; (800631c <scaraInitDuty+0x1184>)
 80062ca:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80062ce:	461a      	mov	r2, r3
 80062d0:	4623      	mov	r3, r4
 80062d2:	f7f9 ffd9 	bl	8000288 <__aeabi_dsub>
 80062d6:	4603      	mov	r3, r0
 80062d8:	460c      	mov	r4, r1
 80062da:	463a      	mov	r2, r7
 80062dc:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80062e0:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 8151 	bne.w	800658c <scaraInitDuty+0x13f4>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80062ea:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d16c      	bne.n	80063cc <scaraInitDuty+0x1234>
					for ( uint8_t i = 0; i < 4; i++) {
 80062f2:	2300      	movs	r3, #0
 80062f4:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 80062f8:	e05c      	b.n	80063b4 <scaraInitDuty+0x121c>
 80062fa:	bf00      	nop
 80062fc:	f3af 8000 	nop.w
	...
 8006308:	60000000 	.word	0x60000000
 800630c:	400921fb 	.word	0x400921fb
 8006310:	20004f28 	.word	0x20004f28
 8006314:	20000820 	.word	0x20000820
 8006318:	40668000 	.word	0x40668000
 800631c:	20005ae8 	.word	0x20005ae8
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8006320:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 8006324:	49cf      	ldr	r1, [pc, #828]	; (8006664 <scaraInitDuty+0x14cc>)
 8006326:	4613      	mov	r3, r2
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	4413      	add	r3, r2
 800632c:	01db      	lsls	r3, r3, #7
 800632e:	440b      	add	r3, r1
 8006330:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006334:	2200      	movs	r2, #0
 8006336:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8006338:	f897 018b 	ldrb.w	r0, [r7, #395]	; 0x18b
 800633c:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 8006340:	4cc8      	ldr	r4, [pc, #800]	; (8006664 <scaraInitDuty+0x14cc>)
 8006342:	4603      	mov	r3, r0
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	4403      	add	r3, r0
 8006348:	01db      	lsls	r3, r3, #7
 800634a:	4423      	add	r3, r4
 800634c:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8006350:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8006354:	f897 218b 	ldrb.w	r2, [r7, #395]	; 0x18b
 8006358:	4613      	mov	r3, r2
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	4413      	add	r3, r2
 800635e:	01db      	lsls	r3, r3, #7
 8006360:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006364:	4abf      	ldr	r2, [pc, #764]	; (8006664 <scaraInitDuty+0x14cc>)
 8006366:	1898      	adds	r0, r3, r2
 8006368:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 800636c:	4abe      	ldr	r2, [pc, #760]	; (8006668 <scaraInitDuty+0x14d0>)
 800636e:	5cd1      	ldrb	r1, [r2, r3]
 8006370:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8006374:	463a      	mov	r2, r7
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	4413      	add	r3, r2
 800637a:	ed93 7b00 	vldr	d7, [r3]
 800637e:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006382:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006386:	eeb0 2a45 	vmov.f32	s4, s10
 800638a:	eef0 2a65 	vmov.f32	s5, s11
 800638e:	eeb0 1a46 	vmov.f32	s2, s12
 8006392:	eef0 1a66 	vmov.f32	s3, s13
 8006396:	2201      	movs	r2, #1
 8006398:	eeb0 0a47 	vmov.f32	s0, s14
 800639c:	eef0 0a67 	vmov.f32	s1, s15
 80063a0:	f000 ff66 	bl	8007270 <scaraInitLSPB>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80063aa:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80063ae:	3301      	adds	r3, #1
 80063b0:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 80063b4:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d9b1      	bls.n	8006320 <scaraInitDuty+0x1188>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 80063bc:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80063c0:	4aa8      	ldr	r2, [pc, #672]	; (8006664 <scaraInitDuty+0x14cc>)
 80063c2:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80063c6:	e9c2 3400 	strd	r3, r4, [r2]
 80063ca:	e22c      	b.n	8006826 <scaraInitDuty+0x168e>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80063cc:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f040 80d9 	bne.w	8006588 <scaraInitDuty+0x13f0>
					for ( uint8_t i = 0; i < 4; i++) {
 80063d6:	2300      	movs	r3, #0
 80063d8:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 80063dc:	e03b      	b.n	8006456 <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80063de:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 80063e2:	49a0      	ldr	r1, [pc, #640]	; (8006664 <scaraInitDuty+0x14cc>)
 80063e4:	4613      	mov	r3, r2
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	4413      	add	r3, r2
 80063ea:	01db      	lsls	r3, r3, #7
 80063ec:	440b      	add	r3, r1
 80063ee:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80063f2:	2200      	movs	r2, #0
 80063f4:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80063f6:	f897 218a 	ldrb.w	r2, [r7, #394]	; 0x18a
 80063fa:	4613      	mov	r3, r2
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	4413      	add	r3, r2
 8006400:	01db      	lsls	r3, r3, #7
 8006402:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006406:	4a97      	ldr	r2, [pc, #604]	; (8006664 <scaraInitDuty+0x14cc>)
 8006408:	1898      	adds	r0, r3, r2
 800640a:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800640e:	4a96      	ldr	r2, [pc, #600]	; (8006668 <scaraInitDuty+0x14d0>)
 8006410:	5cd1      	ldrb	r1, [r2, r3]
 8006412:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8006416:	463a      	mov	r2, r7
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4413      	add	r3, r2
 800641c:	ed93 7b00 	vldr	d7, [r3]
 8006420:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006424:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006428:	eeb0 2a45 	vmov.f32	s4, s10
 800642c:	eef0 2a65 	vmov.f32	s5, s11
 8006430:	eeb0 1a46 	vmov.f32	s2, s12
 8006434:	eef0 1a66 	vmov.f32	s3, s13
 8006438:	2200      	movs	r2, #0
 800643a:	eeb0 0a47 	vmov.f32	s0, s14
 800643e:	eef0 0a67 	vmov.f32	s1, s15
 8006442:	f000 ff15 	bl	8007270 <scaraInitLSPB>
 8006446:	4603      	mov	r3, r0
 8006448:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 800644c:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8006450:	3301      	adds	r3, #1
 8006452:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 8006456:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800645a:	2b03      	cmp	r3, #3
 800645c:	d9bf      	bls.n	80063de <scaraInitDuty+0x1246>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 800645e:	4b81      	ldr	r3, [pc, #516]	; (8006664 <scaraInitDuty+0x14cc>)
 8006460:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	f04f 0400 	mov.w	r4, #0
 800646c:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006470:	2300      	movs	r3, #0
 8006472:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 8006476:	e02d      	b.n	80064d4 <scaraInitDuty+0x133c>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8006478:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 800647c:	4979      	ldr	r1, [pc, #484]	; (8006664 <scaraInitDuty+0x14cc>)
 800647e:	4613      	mov	r3, r2
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	4413      	add	r3, r2
 8006484:	01db      	lsls	r3, r3, #7
 8006486:	440b      	add	r3, r1
 8006488:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800648c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006490:	4b74      	ldr	r3, [pc, #464]	; (8006664 <scaraInitDuty+0x14cc>)
 8006492:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006496:	e9d3 3400 	ldrd	r3, r4, [r3]
 800649a:	461a      	mov	r2, r3
 800649c:	4623      	mov	r3, r4
 800649e:	f7fa fb3b 	bl	8000b18 <__aeabi_dcmpgt>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d010      	beq.n	80064ca <scaraInitDuty+0x1332>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80064a8:	f897 2189 	ldrb.w	r2, [r7, #393]	; 0x189
 80064ac:	496d      	ldr	r1, [pc, #436]	; (8006664 <scaraInitDuty+0x14cc>)
 80064ae:	4613      	mov	r3, r2
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	4413      	add	r3, r2
 80064b4:	01db      	lsls	r3, r3, #7
 80064b6:	440b      	add	r3, r1
 80064b8:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80064bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064c0:	4a68      	ldr	r2, [pc, #416]	; (8006664 <scaraInitDuty+0x14cc>)
 80064c2:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 80064c6:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80064ca:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 80064ce:	3301      	adds	r3, #1
 80064d0:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 80064d4:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d9cd      	bls.n	8006478 <scaraInitDuty+0x12e0>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80064dc:	2300      	movs	r3, #0
 80064de:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 80064e2:	e04c      	b.n	800657e <scaraInitDuty+0x13e6>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80064e4:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 80064e8:	495e      	ldr	r1, [pc, #376]	; (8006664 <scaraInitDuty+0x14cc>)
 80064ea:	4613      	mov	r3, r2
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4413      	add	r3, r2
 80064f0:	01db      	lsls	r3, r3, #7
 80064f2:	440b      	add	r3, r1
 80064f4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80064f8:	2200      	movs	r2, #0
 80064fa:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 80064fc:	f897 0188 	ldrb.w	r0, [r7, #392]	; 0x188
 8006500:	4b58      	ldr	r3, [pc, #352]	; (8006664 <scaraInitDuty+0x14cc>)
 8006502:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006506:	e9d3 1200 	ldrd	r1, r2, [r3]
 800650a:	4c56      	ldr	r4, [pc, #344]	; (8006664 <scaraInitDuty+0x14cc>)
 800650c:	4603      	mov	r3, r0
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	4403      	add	r3, r0
 8006512:	01db      	lsls	r3, r3, #7
 8006514:	4423      	add	r3, r4
 8006516:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800651a:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800651e:	f897 2188 	ldrb.w	r2, [r7, #392]	; 0x188
 8006522:	4613      	mov	r3, r2
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4413      	add	r3, r2
 8006528:	01db      	lsls	r3, r3, #7
 800652a:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800652e:	4a4d      	ldr	r2, [pc, #308]	; (8006664 <scaraInitDuty+0x14cc>)
 8006530:	1898      	adds	r0, r3, r2
 8006532:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8006536:	4a4c      	ldr	r2, [pc, #304]	; (8006668 <scaraInitDuty+0x14d0>)
 8006538:	5cd1      	ldrb	r1, [r2, r3]
 800653a:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 800653e:	463a      	mov	r2, r7
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	4413      	add	r3, r2
 8006544:	ed93 7b00 	vldr	d7, [r3]
 8006548:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 800654c:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 8006550:	eeb0 2a45 	vmov.f32	s4, s10
 8006554:	eef0 2a65 	vmov.f32	s5, s11
 8006558:	eeb0 1a46 	vmov.f32	s2, s12
 800655c:	eef0 1a66 	vmov.f32	s3, s13
 8006560:	2201      	movs	r2, #1
 8006562:	eeb0 0a47 	vmov.f32	s0, s14
 8006566:	eef0 0a67 	vmov.f32	s1, s15
 800656a:	f000 fe81 	bl	8007270 <scaraInitLSPB>
 800656e:	4603      	mov	r3, r0
 8006570:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006574:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8006578:	3301      	adds	r3, #1
 800657a:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 800657e:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8006582:	2b03      	cmp	r3, #3
 8006584:	d9ae      	bls.n	80064e4 <scaraInitDuty+0x134c>
 8006586:	e14e      	b.n	8006826 <scaraInitDuty+0x168e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006588:	2308      	movs	r3, #8
 800658a:	e17a      	b.n	8006882 <scaraInitDuty+0x16ea>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 800658c:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 8006590:	2b01      	cmp	r3, #1
 8006592:	f040 8142 	bne.w	800681a <scaraInitDuty+0x1682>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8006596:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800659a:	2b01      	cmp	r3, #1
 800659c:	d159      	bne.n	8006652 <scaraInitDuty+0x14ba>
					for ( uint8_t i = 0; i < 4; i++) {
 800659e:	2300      	movs	r3, #0
 80065a0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80065a4:	e049      	b.n	800663a <scaraInitDuty+0x14a2>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80065a6:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 80065aa:	492e      	ldr	r1, [pc, #184]	; (8006664 <scaraInitDuty+0x14cc>)
 80065ac:	4613      	mov	r3, r2
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	4413      	add	r3, r2
 80065b2:	01db      	lsls	r3, r3, #7
 80065b4:	440b      	add	r3, r1
 80065b6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80065ba:	2201      	movs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80065be:	f897 0187 	ldrb.w	r0, [r7, #391]	; 0x187
 80065c2:	e9d7 127c 	ldrd	r1, r2, [r7, #496]	; 0x1f0
 80065c6:	4c27      	ldr	r4, [pc, #156]	; (8006664 <scaraInitDuty+0x14cc>)
 80065c8:	4603      	mov	r3, r0
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	4403      	add	r3, r0
 80065ce:	01db      	lsls	r3, r3, #7
 80065d0:	4423      	add	r3, r4
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d6:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80065da:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 80065de:	4613      	mov	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	01db      	lsls	r3, r3, #7
 80065e6:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80065ea:	4a1e      	ldr	r2, [pc, #120]	; (8006664 <scaraInitDuty+0x14cc>)
 80065ec:	1898      	adds	r0, r3, r2
 80065ee:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80065f2:	4a1d      	ldr	r2, [pc, #116]	; (8006668 <scaraInitDuty+0x14d0>)
 80065f4:	5cd1      	ldrb	r1, [r2, r3]
 80065f6:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80065fa:	463a      	mov	r2, r7
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	4413      	add	r3, r2
 8006600:	ed93 7b00 	vldr	d7, [r3]
 8006604:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 8006608:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 800660c:	eeb0 2a45 	vmov.f32	s4, s10
 8006610:	eef0 2a65 	vmov.f32	s5, s11
 8006614:	eeb0 1a46 	vmov.f32	s2, s12
 8006618:	eef0 1a66 	vmov.f32	s3, s13
 800661c:	2201      	movs	r2, #1
 800661e:	eeb0 0a47 	vmov.f32	s0, s14
 8006622:	eef0 0a67 	vmov.f32	s1, s15
 8006626:	f001 fa03 	bl	8007a30 <scaraInitScurve>
 800662a:	4603      	mov	r3, r0
 800662c:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006630:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8006634:	3301      	adds	r3, #1
 8006636:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800663a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800663e:	2b03      	cmp	r3, #3
 8006640:	d9b1      	bls.n	80065a6 <scaraInitDuty+0x140e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8006642:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8006646:	4a07      	ldr	r2, [pc, #28]	; (8006664 <scaraInitDuty+0x14cc>)
 8006648:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800664c:	e9c2 3400 	strd	r3, r4, [r2]
 8006650:	e0e9      	b.n	8006826 <scaraInitDuty+0x168e>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8006652:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 80dd 	bne.w	8006816 <scaraInitDuty+0x167e>
					for ( uint8_t i = 0; i < 4; i++) {
 800665c:	2300      	movs	r3, #0
 800665e:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8006662:	e03f      	b.n	80066e4 <scaraInitDuty+0x154c>
 8006664:	20004f28 	.word	0x20004f28
 8006668:	20000820 	.word	0x20000820
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800666c:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8006670:	4988      	ldr	r1, [pc, #544]	; (8006894 <scaraInitDuty+0x16fc>)
 8006672:	4613      	mov	r3, r2
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	4413      	add	r3, r2
 8006678:	01db      	lsls	r3, r3, #7
 800667a:	440b      	add	r3, r1
 800667c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006680:	2201      	movs	r2, #1
 8006682:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006684:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 8006688:	4613      	mov	r3, r2
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	4413      	add	r3, r2
 800668e:	01db      	lsls	r3, r3, #7
 8006690:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006694:	4a7f      	ldr	r2, [pc, #508]	; (8006894 <scaraInitDuty+0x16fc>)
 8006696:	1898      	adds	r0, r3, r2
 8006698:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800669c:	4a7e      	ldr	r2, [pc, #504]	; (8006898 <scaraInitDuty+0x1700>)
 800669e:	5cd1      	ldrb	r1, [r2, r3]
 80066a0:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 80066a4:	463a      	mov	r2, r7
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	4413      	add	r3, r2
 80066aa:	ed93 7b00 	vldr	d7, [r3]
 80066ae:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80066b2:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80066b6:	eeb0 2a45 	vmov.f32	s4, s10
 80066ba:	eef0 2a65 	vmov.f32	s5, s11
 80066be:	eeb0 1a46 	vmov.f32	s2, s12
 80066c2:	eef0 1a66 	vmov.f32	s3, s13
 80066c6:	2200      	movs	r2, #0
 80066c8:	eeb0 0a47 	vmov.f32	s0, s14
 80066cc:	eef0 0a67 	vmov.f32	s1, s15
 80066d0:	f001 f9ae 	bl	8007a30 <scaraInitScurve>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 80066da:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 80066de:	3301      	adds	r3, #1
 80066e0:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80066e4:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d9bf      	bls.n	800666c <scaraInitDuty+0x14d4>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 80066ec:	4b69      	ldr	r3, [pc, #420]	; (8006894 <scaraInitDuty+0x16fc>)
 80066ee:	f603 2238 	addw	r2, r3, #2616	; 0xa38
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	f04f 0400 	mov.w	r4, #0
 80066fa:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80066fe:	2300      	movs	r3, #0
 8006700:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8006704:	e02d      	b.n	8006762 <scaraInitDuty+0x15ca>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8006706:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 800670a:	4962      	ldr	r1, [pc, #392]	; (8006894 <scaraInitDuty+0x16fc>)
 800670c:	4613      	mov	r3, r2
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	4413      	add	r3, r2
 8006712:	01db      	lsls	r3, r3, #7
 8006714:	440b      	add	r3, r1
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800671e:	4b5d      	ldr	r3, [pc, #372]	; (8006894 <scaraInitDuty+0x16fc>)
 8006720:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006724:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006728:	461a      	mov	r2, r3
 800672a:	4623      	mov	r3, r4
 800672c:	f7fa f9f4 	bl	8000b18 <__aeabi_dcmpgt>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d010      	beq.n	8006758 <scaraInitDuty+0x15c0>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8006736:	f897 2185 	ldrb.w	r2, [r7, #389]	; 0x185
 800673a:	4956      	ldr	r1, [pc, #344]	; (8006894 <scaraInitDuty+0x16fc>)
 800673c:	4613      	mov	r3, r2
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	4413      	add	r3, r2
 8006742:	01db      	lsls	r3, r3, #7
 8006744:	440b      	add	r3, r1
 8006746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800674e:	4a51      	ldr	r2, [pc, #324]	; (8006894 <scaraInitDuty+0x16fc>)
 8006750:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 8006754:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006758:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800675c:	3301      	adds	r3, #1
 800675e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8006762:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8006766:	2b03      	cmp	r3, #3
 8006768:	d9cd      	bls.n	8006706 <scaraInitDuty+0x156e>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 800676a:	2300      	movs	r3, #0
 800676c:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8006770:	e04c      	b.n	800680c <scaraInitDuty+0x1674>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006772:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 8006776:	4947      	ldr	r1, [pc, #284]	; (8006894 <scaraInitDuty+0x16fc>)
 8006778:	4613      	mov	r3, r2
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	4413      	add	r3, r2
 800677e:	01db      	lsls	r3, r3, #7
 8006780:	440b      	add	r3, r1
 8006782:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006786:	2201      	movs	r2, #1
 8006788:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 800678a:	f897 0184 	ldrb.w	r0, [r7, #388]	; 0x184
 800678e:	4b41      	ldr	r3, [pc, #260]	; (8006894 <scaraInitDuty+0x16fc>)
 8006790:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006794:	e9d3 1200 	ldrd	r1, r2, [r3]
 8006798:	4c3e      	ldr	r4, [pc, #248]	; (8006894 <scaraInitDuty+0x16fc>)
 800679a:	4603      	mov	r3, r0
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	4403      	add	r3, r0
 80067a0:	01db      	lsls	r3, r3, #7
 80067a2:	4423      	add	r3, r4
 80067a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a8:	e9c3 1200 	strd	r1, r2, [r3]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80067ac:	f897 2184 	ldrb.w	r2, [r7, #388]	; 0x184
 80067b0:	4613      	mov	r3, r2
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	4413      	add	r3, r2
 80067b6:	01db      	lsls	r3, r3, #7
 80067b8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80067bc:	4a35      	ldr	r2, [pc, #212]	; (8006894 <scaraInitDuty+0x16fc>)
 80067be:	1898      	adds	r0, r3, r2
 80067c0:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80067c4:	4a34      	ldr	r2, [pc, #208]	; (8006898 <scaraInitDuty+0x1700>)
 80067c6:	5cd1      	ldrb	r1, [r2, r3]
 80067c8:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80067cc:	463a      	mov	r2, r7
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	4413      	add	r3, r2
 80067d2:	ed93 7b00 	vldr	d7, [r3]
 80067d6:	ed97 6bde 	vldr	d6, [r7, #888]	; 0x378
 80067da:	ed97 5be0 	vldr	d5, [r7, #896]	; 0x380
 80067de:	eeb0 2a45 	vmov.f32	s4, s10
 80067e2:	eef0 2a65 	vmov.f32	s5, s11
 80067e6:	eeb0 1a46 	vmov.f32	s2, s12
 80067ea:	eef0 1a66 	vmov.f32	s3, s13
 80067ee:	2201      	movs	r2, #1
 80067f0:	eeb0 0a47 	vmov.f32	s0, s14
 80067f4:	eef0 0a67 	vmov.f32	s1, s15
 80067f8:	f001 f91a 	bl	8007a30 <scaraInitScurve>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					for ( uint8_t i = 0; i < 4; i++) {
 8006802:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006806:	3301      	adds	r3, #1
 8006808:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 800680c:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8006810:	2b03      	cmp	r3, #3
 8006812:	d9ae      	bls.n	8006772 <scaraInitDuty+0x15da>
 8006814:	e007      	b.n	8006826 <scaraInitDuty+0x168e>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8006816:	2308      	movs	r3, #8
 8006818:	e033      	b.n	8006882 <scaraInitDuty+0x16ea>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 800681a:	2305      	movs	r3, #5
 800681c:	e031      	b.n	8006882 <scaraInitDuty+0x16ea>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 800681e:	2304      	movs	r3, #4
 8006820:	e02f      	b.n	8006882 <scaraInitDuty+0x16ea>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8006822:	2302      	movs	r3, #2
 8006824:	e02d      	b.n	8006882 <scaraInitDuty+0x16ea>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8006826:	4a1d      	ldr	r2, [pc, #116]	; (800689c <scaraInitDuty+0x1704>)
 8006828:	f04f 0300 	mov.w	r3, #0
 800682c:	f04f 0400 	mov.w	r4, #0
 8006830:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8006834:	4b17      	ldr	r3, [pc, #92]	; (8006894 <scaraInitDuty+0x16fc>)
 8006836:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800683a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800683e:	4a17      	ldr	r2, [pc, #92]	; (800689c <scaraInitDuty+0x1704>)
 8006840:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8006844:	4a16      	ldr	r2, [pc, #88]	; (80068a0 <scaraInitDuty+0x1708>)
 8006846:	f04f 0300 	mov.w	r3, #0
 800684a:	f04f 0400 	mov.w	r4, #0
 800684e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8006852:	4b10      	ldr	r3, [pc, #64]	; (8006894 <scaraInitDuty+0x16fc>)
 8006854:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006858:	e9d3 3400 	ldrd	r3, r4, [r3]
 800685c:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <scaraInitDuty+0x1708>)
 800685e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 8006862:	4a10      	ldr	r2, [pc, #64]	; (80068a4 <scaraInitDuty+0x170c>)
 8006864:	f04f 0300 	mov.w	r3, #0
 8006868:	f04f 0400 	mov.w	r4, #0
 800686c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8006870:	4b08      	ldr	r3, [pc, #32]	; (8006894 <scaraInitDuty+0x16fc>)
 8006872:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8006876:	e9d3 3400 	ldrd	r3, r4, [r3]
 800687a:	4a0a      	ldr	r2, [pc, #40]	; (80068a4 <scaraInitDuty+0x170c>)
 800687c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8006888:	46bd      	mov	sp, r7
 800688a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800688e:	b004      	add	sp, #16
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20004f28 	.word	0x20004f28
 8006898:	20000820 	.word	0x20000820
 800689c:	20005ae8 	.word	0x20005ae8
 80068a0:	20005c68 	.word	0x20005c68
 80068a4:	20005ba8 	.word	0x20005ba8

080068a8 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 80068a8:	b082      	sub	sp, #8
 80068aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ac:	b0b1      	sub	sp, #196	; 0xc4
 80068ae:	af2e      	add	r7, sp, #184	; 0xb8
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	f107 0120 	add.w	r1, r7, #32
 80068b6:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 80068ba:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80068be:	4668      	mov	r0, sp
 80068c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068c4:	22b8      	movs	r2, #184	; 0xb8
 80068c6:	4619      	mov	r1, r3
 80068c8:	f00f f910 	bl	8015aec <memcpy>
 80068cc:	f107 0320 	add.w	r3, r7, #32
 80068d0:	cb0c      	ldmia	r3, {r2, r3}
 80068d2:	4620      	mov	r0, r4
 80068d4:	f7fd f850 	bl	8003978 <kinematicInverse>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80068de:	2307      	movs	r3, #7
 80068e0:	e09e      	b.n	8006a20 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 80068e2:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 80068ec:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 80068f6:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8006900:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 800690a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8006914:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 800691e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006922:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006926:	461a      	mov	r2, r3
 8006928:	4623      	mov	r3, r4
 800692a:	f7f9 fcad 	bl	8000288 <__aeabi_dsub>
 800692e:	4603      	mov	r3, r0
 8006930:	460c      	mov	r4, r1
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8006938:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800693c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006940:	461a      	mov	r2, r3
 8006942:	4623      	mov	r3, r4
 8006944:	f7f9 fca0 	bl	8000288 <__aeabi_dsub>
 8006948:	4603      	mov	r3, r0
 800694a:	460c      	mov	r4, r1
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8006952:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8006956:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800695a:	461a      	mov	r2, r3
 800695c:	4623      	mov	r3, r4
 800695e:	f7f9 fc93 	bl	8000288 <__aeabi_dsub>
 8006962:	4603      	mov	r3, r0
 8006964:	460c      	mov	r4, r1
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006978:	461a      	mov	r2, r3
 800697a:	4623      	mov	r3, r4
 800697c:	f7f9 fe3c 	bl	80005f8 <__aeabi_dmul>
 8006980:	4603      	mov	r3, r0
 8006982:	460c      	mov	r4, r1
 8006984:	461d      	mov	r5, r3
 8006986:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006994:	461a      	mov	r2, r3
 8006996:	4623      	mov	r3, r4
 8006998:	f7f9 fe2e 	bl	80005f8 <__aeabi_dmul>
 800699c:	4603      	mov	r3, r0
 800699e:	460c      	mov	r4, r1
 80069a0:	461a      	mov	r2, r3
 80069a2:	4623      	mov	r3, r4
 80069a4:	4628      	mov	r0, r5
 80069a6:	4631      	mov	r1, r6
 80069a8:	f7f9 fc70 	bl	800028c <__adddf3>
 80069ac:	4603      	mov	r3, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	461d      	mov	r5, r3
 80069b2:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80069c0:	461a      	mov	r2, r3
 80069c2:	4623      	mov	r3, r4
 80069c4:	f7f9 fe18 	bl	80005f8 <__aeabi_dmul>
 80069c8:	4603      	mov	r3, r0
 80069ca:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80069cc:	461a      	mov	r2, r3
 80069ce:	4623      	mov	r3, r4
 80069d0:	4628      	mov	r0, r5
 80069d2:	4631      	mov	r1, r6
 80069d4:	f7f9 fc5a 	bl	800028c <__adddf3>
 80069d8:	4603      	mov	r3, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	ec44 3b17 	vmov	d7, r3, r4
 80069e0:	eeb0 0a47 	vmov.f32	s0, s14
 80069e4:	eef0 0a67 	vmov.f32	s1, s15
 80069e8:	f012 ff88 	bl	80198fc <sqrt>
 80069ec:	eeb0 7a40 	vmov.f32	s14, s0
 80069f0:	eef0 7a60 	vmov.f32	s15, s1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006a2a:	b002      	add	sp, #8
 8006a2c:	4770      	bx	lr
	...

08006a30 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8006a30:	b082      	sub	sp, #8
 8006a32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a36:	b0c3      	sub	sp, #268	; 0x10c
 8006a38:	af2e      	add	r7, sp, #184	; 0xb8
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006a40:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8006a44:	f507 7698 	add.w	r6, r7, #304	; 0x130
 8006a48:	4668      	mov	r0, sp
 8006a4a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006a4e:	22b8      	movs	r2, #184	; 0xb8
 8006a50:	4619      	mov	r1, r3
 8006a52:	f00f f84b 	bl	8015aec <memcpy>
 8006a56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006a5a:	cb0c      	ldmia	r3, {r2, r3}
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f7fc ff8b 	bl	8003978 <kinematicInverse>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006a68:	2307      	movs	r3, #7
 8006a6a:	e146      	b.n	8006cfa <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8006a6c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d006      	beq.n	8006a82 <scaraInitCircle+0x52>
 8006a74:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d001      	beq.n	8006a82 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8006a7e:	2306      	movs	r3, #6
 8006a80:	e13b      	b.n	8006cfa <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8006a82:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006a86:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006a8a:	f7f9 fbfd 	bl	8000288 <__aeabi_dsub>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8006a96:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006a9a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006a9e:	f7f9 fbf3 	bl	8000288 <__aeabi_dsub>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8006aaa:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006aae:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8006ab2:	f7f9 fbe9 	bl	8000288 <__aeabi_dsub>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8006abe:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8006ac2:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8006ac6:	f7f9 fbdf 	bl	8000288 <__aeabi_dsub>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8006ad2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ad6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006ada:	f7f9 fd8d 	bl	80005f8 <__aeabi_dmul>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4690      	mov	r8, r2
 8006ae4:	4699      	mov	r9, r3
 8006ae6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006aea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006aee:	f7f9 fd83 	bl	80005f8 <__aeabi_dmul>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	4640      	mov	r0, r8
 8006af8:	4649      	mov	r1, r9
 8006afa:	f7f9 fbc7 	bl	800028c <__adddf3>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	ec43 2b17 	vmov	d7, r2, r3
 8006b06:	eeb0 0a47 	vmov.f32	s0, s14
 8006b0a:	eef0 0a67 	vmov.f32	s1, s15
 8006b0e:	f012 fef5 	bl	80198fc <sqrt>
 8006b12:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8006b16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006b1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006b1e:	f7f9 fd6b 	bl	80005f8 <__aeabi_dmul>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	4690      	mov	r8, r2
 8006b28:	4699      	mov	r9, r3
 8006b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006b32:	f7f9 fd61 	bl	80005f8 <__aeabi_dmul>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	f7f9 fba5 	bl	800028c <__adddf3>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	ec43 2b17 	vmov	d7, r2, r3
 8006b4a:	eeb0 0a47 	vmov.f32	s0, s14
 8006b4e:	eef0 0a67 	vmov.f32	s1, s15
 8006b52:	f012 fed3 	bl	80198fc <sqrt>
 8006b56:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 8006b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006b62:	f7f9 fb91 	bl	8000288 <__aeabi_dsub>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4614      	mov	r4, r2
 8006b6c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	4b68      	ldr	r3, [pc, #416]	; (8006d18 <scaraInitCircle+0x2e8>)
 8006b76:	4620      	mov	r0, r4
 8006b78:	4629      	mov	r1, r5
 8006b7a:	f7f9 ffcd 	bl	8000b18 <__aeabi_dcmpgt>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8006b84:	2306      	movs	r3, #6
 8006b86:	e0b8      	b.n	8006cfa <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8006b88:	a35f      	add	r3, pc, #380	; (adr r3, 8006d08 <scaraInitCircle+0x2d8>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006b92:	f7f9 ffa3 	bl	8000adc <__aeabi_dcmplt>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d109      	bne.n	8006bb0 <scaraInitCircle+0x180>
 8006b9c:	a35a      	add	r3, pc, #360	; (adr r3, 8006d08 <scaraInitCircle+0x2d8>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ba6:	f7f9 ff99 	bl	8000adc <__aeabi_dcmplt>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8006bb0:	2306      	movs	r3, #6
 8006bb2:	e0a2      	b.n	8006cfa <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8006bb4:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8006bb8:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8006bbc:	f012 fe9c 	bl	80198f8 <atan2>
 8006bc0:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8006bc4:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8006bc8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8006bcc:	f012 fe94 	bl	80198f8 <atan2>
 8006bd0:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8006bd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006bd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bdc:	f7f9 fb54 	bl	8000288 <__aeabi_dsub>
 8006be0:	4603      	mov	r3, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006bf4:	f7f9 ff72 	bl	8000adc <__aeabi_dcmplt>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 8006bfe:	a344      	add	r3, pc, #272	; (adr r3, 8006d10 <scaraInitCircle+0x2e0>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006c08:	f7f9 fb40 	bl	800028c <__adddf3>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8006c14:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	da0a      	bge.n	8006c32 <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 8006c1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c20:	a13b      	add	r1, pc, #236	; (adr r1, 8006d10 <scaraInitCircle+0x2e0>)
 8006c22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c26:	f7f9 fb2f 	bl	8000288 <__aeabi_dsub>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 8006c32:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8006c36:	b25a      	sxtb	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006c42:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006c4c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006c56:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006c60:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8006c64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c68:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006c6c:	f7f9 fcc4 	bl	80005f8 <__aeabi_dmul>
 8006c70:	4603      	mov	r3, r0
 8006c72:	460c      	mov	r4, r1
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8006c7a:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8006c84:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8006c8e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8006c98:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8006ca2:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8006cac:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8006cb6:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8006cc0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8006cca:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3754      	adds	r7, #84	; 0x54
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d04:	b002      	add	sp, #8
 8006d06:	4770      	bx	lr
 8006d08:	9999999a 	.word	0x9999999a
 8006d0c:	3fb99999 	.word	0x3fb99999
 8006d10:	60000000 	.word	0x60000000
 8006d14:	401921fb 	.word	0x401921fb
 8006d18:	3ff00000 	.word	0x3ff00000
 8006d1c:	00000000 	.word	0x00000000

08006d20 <scaraInitLinear>:

SCARA_StatusTypeDef scaraInitLinear(Trajectory_Linear_TypeDef *linear, Trajectory_TargetTypeDef target, double total_s,
									ModeInitTypeDef modeinit, double time)
{
 8006d20:	b590      	push	{r4, r7, lr}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6178      	str	r0, [r7, #20]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	ed87 0b02 	vstr	d0, [r7, #8]
 8006d2e:	ed87 1b00 	vstr	d1, [r7]
 8006d32:	74fb      	strb	r3, [r7, #19]
 8006d34:	4613      	mov	r3, r2
 8006d36:	74bb      	strb	r3, [r7, #18]

	if(target == TRAJECTORY_3D){
 8006d38:	7cfb      	ldrb	r3, [r7, #19]
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d004      	beq.n	8006d48 <scaraInitLinear+0x28>

	}else if(target == TRAJECTORY_ROLL){
 8006d3e:	7cfb      	ldrb	r3, [r7, #19]
 8006d40:	2b05      	cmp	r3, #5
 8006d42:	d001      	beq.n	8006d48 <scaraInitLinear+0x28>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006d44:	2306      	movs	r3, #6
 8006d46:	e02e      	b.n	8006da6 <scaraInitLinear+0x86>
	}

	if(modeinit == DUTY_MODE_INIT_QT){
 8006d48:	7cbb      	ldrb	r3, [r7, #18]
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d125      	bne.n	8006d9a <scaraInitLinear+0x7a>
		linear->constant_v = total_s / time;
 8006d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d56:	f7f9 fd79 	bl	800084c <__aeabi_ddiv>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	e9c2 3402 	strd	r3, r4, [r2, #8]
		linear->number_of_sample = ceilf(time / T_SAMPLING); // ceiling
 8006d64:	a312      	add	r3, pc, #72	; (adr r3, 8006db0 <scaraInitLinear+0x90>)
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d6e:	f7f9 fd6d 	bl	800084c <__aeabi_ddiv>
 8006d72:	4603      	mov	r3, r0
 8006d74:	460c      	mov	r4, r1
 8006d76:	4618      	mov	r0, r3
 8006d78:	4621      	mov	r1, r4
 8006d7a:	f7f9 ff35 	bl	8000be8 <__aeabi_d2f>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	ee00 3a10 	vmov	s0, r3
 8006d84:	f012 fd78 	bl	8019878 <ceilf>
 8006d88:	eef0 7a40 	vmov.f32	s15, s0
 8006d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d90:	ee17 2a90 	vmov	r2, s15
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	621a      	str	r2, [r3, #32]
 8006d98:	e004      	b.n	8006da4 <scaraInitLinear+0x84>
	}else if(modeinit == DUTY_MODE_INIT_QV){
 8006d9a:	7cbb      	ldrb	r3, [r7, #18]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d001      	beq.n	8006da4 <scaraInitLinear+0x84>

	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006da0:	2306      	movs	r3, #6
 8006da2:	e000      	b.n	8006da6 <scaraInitLinear+0x86>
	}

	return SCARA_STATUS_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd90      	pop	{r4, r7, pc}
 8006dae:	bf00      	nop
 8006db0:	40000000 	.word	0x40000000
 8006db4:	3f847ae1 	.word	0x3f847ae1

08006db8 <scaraInitLSPB1>:
SCARA_StatusTypeDef	scaraInitLSPB1		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double additional_factor){
 8006db8:	b5b0      	push	{r4, r5, r7, lr}
 8006dba:	b096      	sub	sp, #88	; 0x58
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	61f8      	str	r0, [r7, #28]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	ed87 0b04 	vstr	d0, [r7, #16]
 8006dc6:	ed87 1b02 	vstr	d1, [r7, #8]
 8006dca:	ed87 2b00 	vstr	d2, [r7]
 8006dce:	76fb      	strb	r3, [r7, #27]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	76bb      	strb	r3, [r7, #26]
	double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	uint32_t no_sample;
	int8_t dir;
	if(target == TRAJECTORY_3D){
 8006dd4:	7efb      	ldrb	r3, [r7, #27]
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d12c      	bne.n	8006e34 <scaraInitLSPB1+0x7c>
		if(modeinit == DUTY_MODE_INIT_QVT){
 8006dda:	7ebb      	ldrb	r3, [r7, #26]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d10f      	bne.n	8006e00 <scaraInitLSPB1+0x48>
			v_design = V_MOVE_MAX*v_factor;
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	4b72      	ldr	r3, [pc, #456]	; (8006fb0 <scaraInitLSPB1+0x1f8>)
 8006de6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dea:	f7f9 fc05 	bl	80005f8 <__aeabi_dmul>
 8006dee:	4603      	mov	r3, r0
 8006df0:	460c      	mov	r4, r1
 8006df2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			tf = additional_factor;
 8006df6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006dfa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8006dfe:	e01b      	b.n	8006e38 <scaraInitLSPB1+0x80>
		}else if(modeinit == DUTY_MODE_INIT_QVA){
 8006e00:	7ebb      	ldrb	r3, [r7, #26]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d118      	bne.n	8006e38 <scaraInitLSPB1+0x80>
			a_design = A_MOVE_MAX*additional_factor;
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	4b6a      	ldr	r3, [pc, #424]	; (8006fb4 <scaraInitLSPB1+0x1fc>)
 8006e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e10:	f7f9 fbf2 	bl	80005f8 <__aeabi_dmul>
 8006e14:	4603      	mov	r3, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			v_design = V_MOVE_MAX*v_factor;
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	4b63      	ldr	r3, [pc, #396]	; (8006fb0 <scaraInitLSPB1+0x1f8>)
 8006e22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e26:	f7f9 fbe7 	bl	80005f8 <__aeabi_dmul>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8006e32:	e001      	b.n	8006e38 <scaraInitLSPB1+0x80>
		}
	}else{
		return SCARA_STATUS_ERROR_PARA;
 8006e34:	2306      	movs	r3, #6
 8006e36:	e209      	b.n	800724c <scaraInitLSPB1+0x494>
	}
	if(modeinit == DUTY_MODE_INIT_QVT){
 8006e38:	7ebb      	ldrb	r3, [r7, #26]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	f040 80c4 	bne.w	8006fc8 <scaraInitLSPB1+0x210>
		//check if time valid or not
		if(tf < 0.1 && v_design > 7.5){
 8006e40:	a357      	add	r3, pc, #348	; (adr r3, 8006fa0 <scaraInitLSPB1+0x1e8>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006e4a:	f7f9 fe47 	bl	8000adc <__aeabi_dcmplt>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d01d      	beq.n	8006e90 <scaraInitLSPB1+0xd8>
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	4b57      	ldr	r3, [pc, #348]	; (8006fb8 <scaraInitLSPB1+0x200>)
 8006e5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e5e:	f7f9 fe5b 	bl	8000b18 <__aeabi_dcmpgt>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d013      	beq.n	8006e90 <scaraInitLSPB1+0xd8>
			tf = 1.5*total_s/v_design;
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	4b53      	ldr	r3, [pc, #332]	; (8006fbc <scaraInitLSPB1+0x204>)
 8006e6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e72:	f7f9 fbc1 	bl	80005f8 <__aeabi_dmul>
 8006e76:	4603      	mov	r3, r0
 8006e78:	460c      	mov	r4, r1
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e82:	f7f9 fce3 	bl	800084c <__aeabi_ddiv>
 8006e86:	4603      	mov	r3, r0
 8006e88:	460c      	mov	r4, r1
 8006e8a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8006e8e:	e060      	b.n	8006f52 <scaraInitLSPB1+0x19a>
		}else if(v_design < 0.0001 && tf > 0.5){ //check if velocity valid or not
 8006e90:	a345      	add	r3, pc, #276	; (adr r3, 8006fa8 <scaraInitLSPB1+0x1f0>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e9a:	f7f9 fe1f 	bl	8000adc <__aeabi_dcmplt>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01d      	beq.n	8006ee0 <scaraInitLSPB1+0x128>
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	4b45      	ldr	r3, [pc, #276]	; (8006fc0 <scaraInitLSPB1+0x208>)
 8006eaa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006eae:	f7f9 fe33 	bl	8000b18 <__aeabi_dcmpgt>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d013      	beq.n	8006ee0 <scaraInitLSPB1+0x128>
			v_design = 1.5*total_s/tf;
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	4b3f      	ldr	r3, [pc, #252]	; (8006fbc <scaraInitLSPB1+0x204>)
 8006ebe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ec2:	f7f9 fb99 	bl	80005f8 <__aeabi_dmul>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	460c      	mov	r4, r1
 8006eca:	4618      	mov	r0, r3
 8006ecc:	4621      	mov	r1, r4
 8006ece:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ed2:	f7f9 fcbb 	bl	800084c <__aeabi_ddiv>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	460c      	mov	r4, r1
 8006eda:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8006ede:	e038      	b.n	8006f52 <scaraInitLSPB1+0x19a>
		}else{
			v_lim = total_s/tf;
 8006ee0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ee4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ee8:	f7f9 fcb0 	bl	800084c <__aeabi_ddiv>
 8006eec:	4603      	mov	r3, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			if(v_design < 1.2*v_lim){
 8006ef4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8006ef8:	4b32      	ldr	r3, [pc, #200]	; (8006fc4 <scaraInitLSPB1+0x20c>)
 8006efa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006efe:	f7f9 fb7b 	bl	80005f8 <__aeabi_dmul>
 8006f02:	4603      	mov	r3, r0
 8006f04:	460c      	mov	r4, r1
 8006f06:	461a      	mov	r2, r3
 8006f08:	4623      	mov	r3, r4
 8006f0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f0e:	f7f9 fde5 	bl	8000adc <__aeabi_dcmplt>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <scaraInitLSPB1+0x164>
				return SCARA_STATUS_ERROR_OVER_VELOC;
 8006f18:	2309      	movs	r3, #9
 8006f1a:	e197      	b.n	800724c <scaraInitLSPB1+0x494>
			}else if(v_design > 2*v_lim){
 8006f1c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	f7f9 f9b2 	bl	800028c <__adddf3>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4623      	mov	r3, r4
 8006f30:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f34:	f7f9 fdf0 	bl	8000b18 <__aeabi_dcmpgt>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <scaraInitLSPB1+0x19a>
				v_design = 2*v_lim;
 8006f3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	f7f9 f9a1 	bl	800028c <__adddf3>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}else{

			}
		}
		ta = tf - total_s/v_design;
 8006f52:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f5a:	f7f9 fc77 	bl	800084c <__aeabi_ddiv>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	460c      	mov	r4, r1
 8006f62:	461a      	mov	r2, r3
 8006f64:	4623      	mov	r3, r4
 8006f66:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006f6a:	f7f9 f98d 	bl	8000288 <__aeabi_dsub>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	460c      	mov	r4, r1
 8006f72:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		a_design = v_design/ta;
 8006f76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f7e:	f7f9 fc65 	bl	800084c <__aeabi_ddiv>
 8006f82:	4603      	mov	r3, r0
 8006f84:	460c      	mov	r4, r1
 8006f86:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		td = tf - ta;
 8006f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006f92:	f7f9 f979 	bl	8000288 <__aeabi_dsub>
 8006f96:	4603      	mov	r3, r0
 8006f98:	460c      	mov	r4, r1
 8006f9a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8006f9e:	e0ed      	b.n	800717c <scaraInitLSPB1+0x3c4>
 8006fa0:	9999999a 	.word	0x9999999a
 8006fa4:	3fb99999 	.word	0x3fb99999
 8006fa8:	eb1c432d 	.word	0xeb1c432d
 8006fac:	3f1a36e2 	.word	0x3f1a36e2
 8006fb0:	40877000 	.word	0x40877000
 8006fb4:	407f4000 	.word	0x407f4000
 8006fb8:	401e0000 	.word	0x401e0000
 8006fbc:	3ff80000 	.word	0x3ff80000
 8006fc0:	3fe00000 	.word	0x3fe00000
 8006fc4:	3ff33333 	.word	0x3ff33333

	}else if(modeinit == DUTY_MODE_INIT_QVA){
 8006fc8:	7ebb      	ldrb	r3, [r7, #26]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f040 80d6 	bne.w	800717c <scaraInitLSPB1+0x3c4>
		//check qva condition
		if(total_s*a_design < v_design*v_design){ //condition for ta smaller than td
 8006fd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fd4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006fd8:	f7f9 fb0e 	bl	80005f8 <__aeabi_dmul>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	4625      	mov	r5, r4
 8006fe2:	461c      	mov	r4, r3
 8006fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fe8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006fec:	f7f9 fb04 	bl	80005f8 <__aeabi_dmul>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	f7f9 fd70 	bl	8000adc <__aeabi_dcmplt>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 8088 	beq.w	8007114 <scaraInitLSPB1+0x35c>
			if(total_s/v_design < 0.8){ //td too small
 8007004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007008:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800700c:	f7f9 fc1e 	bl	800084c <__aeabi_ddiv>
 8007010:	4603      	mov	r3, r0
 8007012:	460c      	mov	r4, r1
 8007014:	4618      	mov	r0, r3
 8007016:	4621      	mov	r1, r4
 8007018:	a393      	add	r3, pc, #588	; (adr r3, 8007268 <scaraInitLSPB1+0x4b0>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 fd5d 	bl	8000adc <__aeabi_dcmplt>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <scaraInitLSPB1+0x286>
				//recalculate v_design
				v_design = 0.8*total_s;
 8007028:	a38f      	add	r3, pc, #572	; (adr r3, 8007268 <scaraInitLSPB1+0x4b0>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007032:	f7f9 fae1 	bl	80005f8 <__aeabi_dmul>
 8007036:	4603      	mov	r3, r0
 8007038:	460c      	mov	r4, r1
 800703a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			}
			if(v_design/a_design < 0.5){ //ta is too small
 800703e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007042:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007046:	f7f9 fc01 	bl	800084c <__aeabi_ddiv>
 800704a:	4603      	mov	r3, r0
 800704c:	460c      	mov	r4, r1
 800704e:	4618      	mov	r0, r3
 8007050:	4621      	mov	r1, r4
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	4b82      	ldr	r3, [pc, #520]	; (8007260 <scaraInitLSPB1+0x4a8>)
 8007058:	f7f9 fd40 	bl	8000adc <__aeabi_dcmplt>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <scaraInitLSPB1+0x2c0>
				//recalculate a_design
				a_design = v_design/0.5;
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	4b7e      	ldr	r3, [pc, #504]	; (8007260 <scaraInitLSPB1+0x4a8>)
 8007068:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800706c:	f7f9 fbee 	bl	800084c <__aeabi_ddiv>
 8007070:	4603      	mov	r3, r0
 8007072:	460c      	mov	r4, r1
 8007074:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}
			ta = v_design/a_design;
 8007078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800707c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007080:	f7f9 fbe4 	bl	800084c <__aeabi_ddiv>
 8007084:	4603      	mov	r3, r0
 8007086:	460c      	mov	r4, r1
 8007088:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = total_s/v_design;
 800708c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007090:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007094:	f7f9 fbda 	bl	800084c <__aeabi_ddiv>
 8007098:	4603      	mov	r3, r0
 800709a:	460c      	mov	r4, r1
 800709c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			tf = ta + td;
 80070a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80070a8:	f7f9 f8f0 	bl	800028c <__adddf3>
 80070ac:	4603      	mov	r3, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			if(v_design/a_design < 1){ //ta is too small
 80070b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070b8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80070bc:	f7f9 fbc6 	bl	800084c <__aeabi_ddiv>
 80070c0:	4603      	mov	r3, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	4618      	mov	r0, r3
 80070c6:	4621      	mov	r1, r4
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	4b65      	ldr	r3, [pc, #404]	; (8007264 <scaraInitLSPB1+0x4ac>)
 80070ce:	f7f9 fd05 	bl	8000adc <__aeabi_dcmplt>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d051      	beq.n	800717c <scaraInitLSPB1+0x3c4>
				//recalculate a_design
				a_design = v_design;
 80070d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80070dc:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
				ta = 1;
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	4c5f      	ldr	r4, [pc, #380]	; (8007264 <scaraInitLSPB1+0x4ac>)
 80070e6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
				td = total_s/v_design;
 80070ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80070f2:	f7f9 fbab 	bl	800084c <__aeabi_ddiv>
 80070f6:	4603      	mov	r3, r0
 80070f8:	460c      	mov	r4, r1
 80070fa:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				tf = ta + td;
 80070fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007102:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007106:	f7f9 f8c1 	bl	800028c <__adddf3>
 800710a:	4603      	mov	r3, r0
 800710c:	460c      	mov	r4, r1
 800710e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8007112:	e033      	b.n	800717c <scaraInitLSPB1+0x3c4>
			}

		}else{
			tf = 2*total_s/v_design;
 8007114:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	f7f9 f8b6 	bl	800028c <__adddf3>
 8007120:	4603      	mov	r3, r0
 8007122:	460c      	mov	r4, r1
 8007124:	4618      	mov	r0, r3
 8007126:	4621      	mov	r1, r4
 8007128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800712c:	f7f9 fb8e 	bl	800084c <__aeabi_ddiv>
 8007130:	4603      	mov	r3, r0
 8007132:	460c      	mov	r4, r1
 8007134:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			ta = tf/2;
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007140:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007144:	f7f9 fb82 	bl	800084c <__aeabi_ddiv>
 8007148:	4603      	mov	r3, r0
 800714a:	460c      	mov	r4, r1
 800714c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			td = tf/2;
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007158:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800715c:	f7f9 fb76 	bl	800084c <__aeabi_ddiv>
 8007160:	4603      	mov	r3, r0
 8007162:	460c      	mov	r4, r1
 8007164:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			a_design = v_design/ta;
 8007168:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800716c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007170:	f7f9 fb6c 	bl	800084c <__aeabi_ddiv>
 8007174:	4603      	mov	r3, r0
 8007176:	460c      	mov	r4, r1
 8007178:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		}
	}
	no_sample = ceilf(tf / T_SAMPLING); // ceiling
 800717c:	a336      	add	r3, pc, #216	; (adr r3, 8007258 <scaraInitLSPB1+0x4a0>)
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007186:	f7f9 fb61 	bl	800084c <__aeabi_ddiv>
 800718a:	4603      	mov	r3, r0
 800718c:	460c      	mov	r4, r1
 800718e:	4618      	mov	r0, r3
 8007190:	4621      	mov	r1, r4
 8007192:	f7f9 fd29 	bl	8000be8 <__aeabi_d2f>
 8007196:	4603      	mov	r3, r0
 8007198:	ee00 3a10 	vmov	s0, r3
 800719c:	f012 fb6c 	bl	8019878 <ceilf>
 80071a0:	eef0 7a40 	vmov.f32	s15, s0
 80071a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a8:	ee17 3a90 	vmov	r3, s15
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params
	 lspb->dir= dir;
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80071b4:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = 0;
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	f04f 0400 	mov.w	r4, #0
 80071c0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = total_s;
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80071ca:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80071d4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80071de:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80071e8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 80071ec:	69fa      	ldr	r2, [r7, #28]
 80071ee:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80071f2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80071fc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_design;
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007206:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = 0;
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	f04f 0400 	mov.w	r4, #0
 8007214:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = 0;
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	f04f 0400 	mov.w	r4, #0
 8007222:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722a:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007238:	461a      	mov	r2, r3
 800723a:	4623      	mov	r3, r4
 800723c:	f7f9 f824 	bl	8000288 <__aeabi_dsub>
 8007240:	4603      	mov	r3, r0
 8007242:	460c      	mov	r4, r1
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3758      	adds	r7, #88	; 0x58
 8007250:	46bd      	mov	sp, r7
 8007252:	bdb0      	pop	{r4, r5, r7, pc}
 8007254:	f3af 8000 	nop.w
 8007258:	40000000 	.word	0x40000000
 800725c:	3f847ae1 	.word	0x3f847ae1
 8007260:	3fe00000 	.word	0x3fe00000
 8007264:	3ff00000 	.word	0x3ff00000
 8007268:	9999999a 	.word	0x9999999a
 800726c:	3fe99999 	.word	0x3fe99999

08007270 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007274:	b0ad      	sub	sp, #180	; 0xb4
 8007276:	af00      	add	r7, sp, #0
 8007278:	62f8      	str	r0, [r7, #44]	; 0x2c
 800727a:	460b      	mov	r3, r1
 800727c:	ed87 0b08 	vstr	d0, [r7, #32]
 8007280:	ed87 1b06 	vstr	d1, [r7, #24]
 8007284:	ed87 2b04 	vstr	d2, [r7, #16]
 8007288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728c:	4613      	mov	r3, r2
 800728e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8007292:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007296:	2b04      	cmp	r3, #4
 8007298:	d118      	bne.n	80072cc <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 800729a:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80072a6:	f7f9 f9a7 	bl	80005f8 <__aeabi_dmul>
 80072aa:	4603      	mov	r3, r0
 80072ac:	460c      	mov	r4, r1
 80072ae:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 80072b2:	f20f 7350 	addw	r3, pc, #1872	; 0x750
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80072be:	f7f9 f99b 	bl	80005f8 <__aeabi_dmul>
 80072c2:	4603      	mov	r3, r0
 80072c4:	460c      	mov	r4, r1
 80072c6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80072ca:	e092      	b.n	80073f2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 80072cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072d0:	2b05      	cmp	r3, #5
 80072d2:	d118      	bne.n	8007306 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 80072d4:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80072e0:	f7f9 f98a 	bl	80005f8 <__aeabi_dmul>
 80072e4:	4603      	mov	r3, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 80072ec:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80072f8:	f7f9 f97e 	bl	80005f8 <__aeabi_dmul>
 80072fc:	4603      	mov	r3, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007304:	e075      	b.n	80073f2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 8007306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800730a:	2b00      	cmp	r3, #0
 800730c:	d118      	bne.n	8007340 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 800730e:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800731a:	f7f9 f96d 	bl	80005f8 <__aeabi_dmul>
 800731e:	4603      	mov	r3, r0
 8007320:	460c      	mov	r4, r1
 8007322:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8007326:	f20f 63e4 	addw	r3, pc, #1764	; 0x6e4
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007332:	f7f9 f961 	bl	80005f8 <__aeabi_dmul>
 8007336:	4603      	mov	r3, r0
 8007338:	460c      	mov	r4, r1
 800733a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800733e:	e058      	b.n	80073f2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8007340:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007344:	2b01      	cmp	r3, #1
 8007346:	d118      	bne.n	800737a <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8007348:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007354:	f7f9 f950 	bl	80005f8 <__aeabi_dmul>
 8007358:	4603      	mov	r3, r0
 800735a:	460c      	mov	r4, r1
 800735c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8007360:	f20f 63a8 	addw	r3, pc, #1704	; 0x6a8
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800736c:	f7f9 f944 	bl	80005f8 <__aeabi_dmul>
 8007370:	4603      	mov	r3, r0
 8007372:	460c      	mov	r4, r1
 8007374:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8007378:	e03b      	b.n	80073f2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 800737a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800737e:	2b02      	cmp	r3, #2
 8007380:	d118      	bne.n	80073b4 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 8007382:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800738e:	f7f9 f933 	bl	80005f8 <__aeabi_dmul>
 8007392:	4603      	mov	r3, r0
 8007394:	460c      	mov	r4, r1
 8007396:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 800739a:	f20f 6368 	addw	r3, pc, #1640	; 0x668
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80073a6:	f7f9 f927 	bl	80005f8 <__aeabi_dmul>
 80073aa:	4603      	mov	r3, r0
 80073ac:	460c      	mov	r4, r1
 80073ae:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80073b2:	e01e      	b.n	80073f2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 80073b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d118      	bne.n	80073ee <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 80073bc:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073c8:	f7f9 f916 	bl	80005f8 <__aeabi_dmul>
 80073cc:	4603      	mov	r3, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 80073d4:	f20f 633c 	addw	r3, pc, #1596	; 0x63c
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80073e0:	f7f9 f90a 	bl	80005f8 <__aeabi_dmul>
 80073e4:	4603      	mov	r3, r0
 80073e6:	460c      	mov	r4, r1
 80073e8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80073ec:	e001      	b.n	80073f2 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80073ee:	2306      	movs	r3, #6
 80073f0:	e2fa      	b.n	80079e8 <scaraInitLSPB+0x778>
	 }

	 q0 = 0;
 80073f2:	f04f 0300 	mov.w	r3, #0
 80073f6:	f04f 0400 	mov.w	r4, #0
 80073fa:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 80073fe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007402:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	f04f 0400 	mov.w	r4, #0
 800740e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	f04f 0400 	mov.w	r4, #0
 800741a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 800741e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007422:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007426:	f7f9 fb63 	bl	8000af0 <__aeabi_dcmple>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007436:	e00c      	b.n	8007452 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8007438:	23ff      	movs	r3, #255	; 0xff
 800743a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 800743e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800744a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800744e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8007452:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007456:	2b01      	cmp	r3, #1
 8007458:	f040 809e 	bne.w	8007598 <scaraInitLSPB+0x328>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 800745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8007462:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007466:	f20f 53b4 	addw	r3, pc, #1460	; 0x5b4
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007472:	f7f9 fb51 	bl	8000b18 <__aeabi_dcmpgt>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 8081 	beq.w	8007580 <scaraInitLSPB+0x310>
			 v_lower 	= (q1 - q0) / tf;
 800747e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007482:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007486:	f7f8 feff 	bl	8000288 <__aeabi_dsub>
 800748a:	4603      	mov	r3, r0
 800748c:	460c      	mov	r4, r1
 800748e:	4618      	mov	r0, r3
 8007490:	4621      	mov	r1, r4
 8007492:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007496:	f7f9 f9d9 	bl	800084c <__aeabi_ddiv>
 800749a:	4603      	mov	r3, r0
 800749c:	460c      	mov	r4, r1
 800749e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 80074a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80074a6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80074aa:	f7f8 feed 	bl	8000288 <__aeabi_dsub>
 80074ae:	4603      	mov	r3, r0
 80074b0:	460c      	mov	r4, r1
 80074b2:	4618      	mov	r0, r3
 80074b4:	4621      	mov	r1, r4
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	f7f8 fee7 	bl	800028c <__adddf3>
 80074be:	4603      	mov	r3, r0
 80074c0:	460c      	mov	r4, r1
 80074c2:	4618      	mov	r0, r3
 80074c4:	4621      	mov	r1, r4
 80074c6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80074ca:	f7f9 f9bf 	bl	800084c <__aeabi_ddiv>
 80074ce:	4603      	mov	r3, r0
 80074d0:	460c      	mov	r4, r1
 80074d2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 80074d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074da:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80074de:	f7f9 fafd 	bl	8000adc <__aeabi_dcmplt>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 80074e8:	2309      	movs	r3, #9
 80074ea:	e27d      	b.n	80079e8 <scaraInitLSPB+0x778>
			 } else {
				 if ( v_upper <= v_design) {
 80074ec:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80074f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80074f4:	f7f9 fafc 	bl	8000af0 <__aeabi_dcmple>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <scaraInitLSPB+0x296>
					 v_design = v_upper;
 80074fe:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007502:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8007506:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007512:	f7f9 fb01 	bl	8000b18 <__aeabi_dcmpgt>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01a      	beq.n	8007552 <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 800751c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007520:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007524:	f7f8 feb0 	bl	8000288 <__aeabi_dsub>
 8007528:	4603      	mov	r3, r0
 800752a:	460c      	mov	r4, r1
 800752c:	4618      	mov	r0, r3
 800752e:	4621      	mov	r1, r4
 8007530:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8007534:	f7f9 f98a 	bl	800084c <__aeabi_ddiv>
 8007538:	4603      	mov	r3, r0
 800753a:	460c      	mov	r4, r1
 800753c:	461a      	mov	r2, r3
 800753e:	4623      	mov	r3, r4
 8007540:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007544:	f7f8 fea0 	bl	8000288 <__aeabi_dsub>
 8007548:	4603      	mov	r3, r0
 800754a:	460c      	mov	r4, r1
 800754c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8007550:	e00b      	b.n	800756a <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800755a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800755e:	f7f9 f975 	bl	800084c <__aeabi_ddiv>
 8007562:	4603      	mov	r3, r0
 8007564:	460c      	mov	r4, r1
 8007566:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 800756a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800756e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007572:	f7f9 f96b 	bl	800084c <__aeabi_ddiv>
 8007576:	4603      	mov	r3, r0
 8007578:	460c      	mov	r4, r1
 800757a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800757e:	e00b      	b.n	8007598 <scaraInitLSPB+0x328>
				//  } else {
				// 	 a_design = a_upper;
				//  }
			 }
		 } else {
			 v_design = 0;
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	f04f 0400 	mov.w	r4, #0
 8007588:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	f04f 0400 	mov.w	r4, #0
 8007594:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007598:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80075a4:	f7f9 fab8 	bl	8000b18 <__aeabi_dcmpgt>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 819c 	beq.w	80078e8 <scaraInitLSPB+0x678>
 80075b0:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80075bc:	f7f9 faac 	bl	8000b18 <__aeabi_dcmpgt>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8190 	beq.w	80078e8 <scaraInitLSPB+0x678>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80075c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80075cc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80075d0:	f7f8 fe5a 	bl	8000288 <__aeabi_dsub>
 80075d4:	4603      	mov	r3, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	461d      	mov	r5, r3
 80075da:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 80075de:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80075e2:	4628      	mov	r0, r5
 80075e4:	4631      	mov	r1, r6
 80075e6:	f7f9 f807 	bl	80005f8 <__aeabi_dmul>
 80075ea:	4603      	mov	r3, r0
 80075ec:	460c      	mov	r4, r1
 80075ee:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80075f2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80075f6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80075fa:	f7f8 fffd 	bl	80005f8 <__aeabi_dmul>
 80075fe:	4603      	mov	r3, r0
 8007600:	460c      	mov	r4, r1
 8007602:	e9c7 3400 	strd	r3, r4, [r7]
 8007606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800760a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800760e:	f7f8 fff3 	bl	80005f8 <__aeabi_dmul>
 8007612:	4603      	mov	r3, r0
 8007614:	460c      	mov	r4, r1
 8007616:	461d      	mov	r5, r3
 8007618:	4626      	mov	r6, r4
 800761a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800761e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007622:	f7f8 ffe9 	bl	80005f8 <__aeabi_dmul>
 8007626:	4603      	mov	r3, r0
 8007628:	460c      	mov	r4, r1
 800762a:	461a      	mov	r2, r3
 800762c:	4623      	mov	r3, r4
 800762e:	4628      	mov	r0, r5
 8007630:	4631      	mov	r1, r6
 8007632:	f7f8 fe2b 	bl	800028c <__adddf3>
 8007636:	4603      	mov	r3, r0
 8007638:	460c      	mov	r4, r1
 800763a:	4618      	mov	r0, r3
 800763c:	4621      	mov	r1, r4
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007646:	f7f9 f901 	bl	800084c <__aeabi_ddiv>
 800764a:	4603      	mov	r3, r0
 800764c:	460c      	mov	r4, r1
 800764e:	461a      	mov	r2, r3
 8007650:	4623      	mov	r3, r4
 8007652:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007656:	f7f8 fe17 	bl	8000288 <__aeabi_dsub>
 800765a:	4603      	mov	r3, r0
 800765c:	460c      	mov	r4, r1
 800765e:	461a      	mov	r2, r3
 8007660:	4623      	mov	r3, r4
 8007662:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007666:	f7f9 fa43 	bl	8000af0 <__aeabi_dcmple>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d075      	beq.n	800775c <scaraInitLSPB+0x4ec>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8007670:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007674:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007678:	f7f8 fe06 	bl	8000288 <__aeabi_dsub>
 800767c:	4603      	mov	r3, r0
 800767e:	460c      	mov	r4, r1
 8007680:	469a      	mov	sl, r3
 8007682:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8007686:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800768a:	4650      	mov	r0, sl
 800768c:	4659      	mov	r1, fp
 800768e:	f7f8 ffb3 	bl	80005f8 <__aeabi_dmul>
 8007692:	4603      	mov	r3, r0
 8007694:	460c      	mov	r4, r1
 8007696:	4625      	mov	r5, r4
 8007698:	461c      	mov	r4, r3
 800769a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800769e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80076a2:	f7f8 ffa9 	bl	80005f8 <__aeabi_dmul>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4690      	mov	r8, r2
 80076ac:	4699      	mov	r9, r3
 80076ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80076b6:	f7f8 ff9f 	bl	80005f8 <__aeabi_dmul>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	4640      	mov	r0, r8
 80076c0:	4649      	mov	r1, r9
 80076c2:	f7f8 fde3 	bl	800028c <__adddf3>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4610      	mov	r0, r2
 80076cc:	4619      	mov	r1, r3
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076d6:	f7f9 f8b9 	bl	800084c <__aeabi_ddiv>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	f7f8 fdd3 	bl	800028c <__adddf3>
 80076e6:	4603      	mov	r3, r0
 80076e8:	460c      	mov	r4, r1
 80076ea:	ec44 3b17 	vmov	d7, r3, r4
 80076ee:	eeb0 0a47 	vmov.f32	s0, s14
 80076f2:	eef0 0a67 	vmov.f32	s1, s15
 80076f6:	f012 f901 	bl	80198fc <sqrt>
 80076fa:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80076fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007702:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007706:	f7f8 fdbf 	bl	8000288 <__aeabi_dsub>
 800770a:	4603      	mov	r3, r0
 800770c:	460c      	mov	r4, r1
 800770e:	4618      	mov	r0, r3
 8007710:	4621      	mov	r1, r4
 8007712:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8007716:	f7f9 f899 	bl	800084c <__aeabi_ddiv>
 800771a:	4603      	mov	r3, r0
 800771c:	460c      	mov	r4, r1
 800771e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8007722:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007726:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800772a:	f7f8 fdad 	bl	8000288 <__aeabi_dsub>
 800772e:	4603      	mov	r3, r0
 8007730:	460c      	mov	r4, r1
 8007732:	4618      	mov	r0, r3
 8007734:	4621      	mov	r1, r4
 8007736:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800773a:	f7f9 f887 	bl	800084c <__aeabi_ddiv>
 800773e:	4603      	mov	r3, r0
 8007740:	460c      	mov	r4, r1
 8007742:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 8007746:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800774a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800774e:	f7f8 fd9d 	bl	800028c <__adddf3>
 8007752:	4603      	mov	r3, r0
 8007754:	460c      	mov	r4, r1
 8007756:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800775a:	e0e3      	b.n	8007924 <scaraInitLSPB+0x6b4>
		 } else {
			 v_lim	= v_design;
 800775c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007760:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8007764:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800776c:	f7f8 fd8c 	bl	8000288 <__aeabi_dsub>
 8007770:	4603      	mov	r3, r0
 8007772:	460c      	mov	r4, r1
 8007774:	4618      	mov	r0, r3
 8007776:	4621      	mov	r1, r4
 8007778:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800777c:	f7f9 f866 	bl	800084c <__aeabi_ddiv>
 8007780:	4603      	mov	r3, r0
 8007782:	460c      	mov	r4, r1
 8007784:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8007788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800778c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007790:	f7f8 fd7a 	bl	8000288 <__aeabi_dsub>
 8007794:	4603      	mov	r3, r0
 8007796:	460c      	mov	r4, r1
 8007798:	4618      	mov	r0, r3
 800779a:	4621      	mov	r1, r4
 800779c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80077a0:	f7f9 f854 	bl	800084c <__aeabi_ddiv>
 80077a4:	4603      	mov	r3, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80077ac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80077b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80077b4:	f7f8 fd68 	bl	8000288 <__aeabi_dsub>
 80077b8:	4603      	mov	r3, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	4698      	mov	r8, r3
 80077be:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80077c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80077c6:	4640      	mov	r0, r8
 80077c8:	4649      	mov	r1, r9
 80077ca:	f7f9 f83f 	bl	800084c <__aeabi_ddiv>
 80077ce:	4603      	mov	r3, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	4625      	mov	r5, r4
 80077d4:	461c      	mov	r4, r3
 80077d6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	f7f8 fd55 	bl	800028c <__adddf3>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077ea:	f7f9 f82f 	bl	800084c <__aeabi_ddiv>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4690      	mov	r8, r2
 80077f4:	4699      	mov	r9, r3
 80077f6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80077fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80077fe:	f7f9 f825 	bl	800084c <__aeabi_ddiv>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	f04f 0000 	mov.w	r0, #0
 800780a:	497d      	ldr	r1, [pc, #500]	; (8007a00 <scaraInitLSPB+0x790>)
 800780c:	f7f8 fd3c 	bl	8000288 <__aeabi_dsub>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4640      	mov	r0, r8
 8007816:	4649      	mov	r1, r9
 8007818:	f7f8 feee 	bl	80005f8 <__aeabi_dmul>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4690      	mov	r8, r2
 8007822:	4699      	mov	r9, r3
 8007824:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007828:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800782c:	f7f9 f80e 	bl	800084c <__aeabi_ddiv>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	f04f 0000 	mov.w	r0, #0
 8007838:	4971      	ldr	r1, [pc, #452]	; (8007a00 <scaraInitLSPB+0x790>)
 800783a:	f7f8 fd25 	bl	8000288 <__aeabi_dsub>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4640      	mov	r0, r8
 8007844:	4649      	mov	r1, r9
 8007846:	f7f8 fed7 	bl	80005f8 <__aeabi_dmul>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4620      	mov	r0, r4
 8007850:	4629      	mov	r1, r5
 8007852:	f7f8 fd1b 	bl	800028c <__adddf3>
 8007856:	4603      	mov	r3, r0
 8007858:	460c      	mov	r4, r1
 800785a:	4625      	mov	r5, r4
 800785c:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 800785e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	f7f8 fd11 	bl	800028c <__adddf3>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007872:	f7f8 ffeb 	bl	800084c <__aeabi_ddiv>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4690      	mov	r8, r2
 800787c:	4699      	mov	r9, r3
 800787e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007882:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007886:	f7f8 ffe1 	bl	800084c <__aeabi_ddiv>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	f04f 0000 	mov.w	r0, #0
 8007892:	495b      	ldr	r1, [pc, #364]	; (8007a00 <scaraInitLSPB+0x790>)
 8007894:	f7f8 fcf8 	bl	8000288 <__aeabi_dsub>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4640      	mov	r0, r8
 800789e:	4649      	mov	r1, r9
 80078a0:	f7f8 feaa 	bl	80005f8 <__aeabi_dmul>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4690      	mov	r8, r2
 80078aa:	4699      	mov	r9, r3
 80078ac:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80078b0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80078b4:	f7f8 ffca 	bl	800084c <__aeabi_ddiv>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	f04f 0000 	mov.w	r0, #0
 80078c0:	494f      	ldr	r1, [pc, #316]	; (8007a00 <scaraInitLSPB+0x790>)
 80078c2:	f7f8 fce1 	bl	8000288 <__aeabi_dsub>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4640      	mov	r0, r8
 80078cc:	4649      	mov	r1, r9
 80078ce:	f7f8 fe93 	bl	80005f8 <__aeabi_dmul>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80078d6:	4620      	mov	r0, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	f7f8 fcd7 	bl	800028c <__adddf3>
 80078de:	4603      	mov	r3, r0
 80078e0:	460c      	mov	r4, r1
 80078e2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80078e6:	e01d      	b.n	8007924 <scaraInitLSPB+0x6b4>
		 }
	 } else {
		 v_lim	= 0;
 80078e8:	f04f 0300 	mov.w	r3, #0
 80078ec:	f04f 0400 	mov.w	r4, #0
 80078f0:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078fc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007900:	f7f8 ffa4 	bl	800084c <__aeabi_ddiv>
 8007904:	4603      	mov	r3, r0
 8007906:	460c      	mov	r4, r1
 8007908:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007914:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007918:	f7f8 ff98 	bl	800084c <__aeabi_ddiv>
 800791c:	4603      	mov	r3, r0
 800791e:	460c      	mov	r4, r1
 8007920:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8007924:	a334      	add	r3, pc, #208	; (adr r3, 80079f8 <scaraInitLSPB+0x788>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800792e:	f7f8 ff8d 	bl	800084c <__aeabi_ddiv>
 8007932:	4603      	mov	r3, r0
 8007934:	460c      	mov	r4, r1
 8007936:	4618      	mov	r0, r3
 8007938:	4621      	mov	r1, r4
 800793a:	f7f9 f955 	bl	8000be8 <__aeabi_d2f>
 800793e:	4603      	mov	r3, r0
 8007940:	ee00 3a10 	vmov	s0, r3
 8007944:	f011 ff98 	bl	8019878 <ceilf>
 8007948:	eef0 7a40 	vmov.f32	s15, s0
 800794c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007950:	ee17 3a90 	vmov	r3, s15
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800795c:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 800795e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007960:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8007964:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8007968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800796a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800796e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8007972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007974:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8007978:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 800797c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800797e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8007982:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8007986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007988:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800798c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8007990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007992:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8007996:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 800799a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800799c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80079a0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 80079a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079a6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80079aa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 80079ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80079b4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 80079b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079ba:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80079be:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079c6:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80079c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80079d4:	461a      	mov	r2, r3
 80079d6:	4623      	mov	r3, r4
 80079d8:	f7f8 fc56 	bl	8000288 <__aeabi_dsub>
 80079dc:	4603      	mov	r3, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e2:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	37b4      	adds	r7, #180	; 0xb4
 80079ec:	46bd      	mov	sp, r7
 80079ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f2:	bf00      	nop
 80079f4:	f3af 8000 	nop.w
 80079f8:	40000000 	.word	0x40000000
 80079fc:	3f847ae1 	.word	0x3f847ae1
 8007a00:	3ff00000 	.word	0x3ff00000
 8007a04:	00000000 	.word	0x00000000
 8007a08:	405c2000 	.word	0x405c2000
 8007a0c:	14000000 	.word	0x14000000
 8007a10:	4000f6f0 	.word	0x4000f6f0
 8007a14:	6b259425 	.word	0x6b259425
 8007a18:	40069b91 	.word	0x40069b91
 8007a1c:	d2f1a9fc 	.word	0xd2f1a9fc
 8007a20:	3f50624d 	.word	0x3f50624d
 8007a24:	9abcaf48 	.word	0x9abcaf48
 8007a28:	3e7ad7f2 	.word	0x3e7ad7f2
 8007a2c:	00000000 	.word	0x00000000

08007a30 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8007a30:	b5b0      	push	{r4, r5, r7, lr}
 8007a32:	b0ba      	sub	sp, #232	; 0xe8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	61f8      	str	r0, [r7, #28]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	ed87 0b04 	vstr	d0, [r7, #16]
 8007a3e:	ed87 1b02 	vstr	d1, [r7, #8]
 8007a42:	ed87 2b00 	vstr	d2, [r7]
 8007a46:	76fb      	strb	r3, [r7, #27]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8007a4c:	7efb      	ldrb	r3, [r7, #27]
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d118      	bne.n	8007a84 <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8007a52:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a5e:	f7f8 fdcb 	bl	80005f8 <__aeabi_dmul>
 8007a62:	4603      	mov	r3, r0
 8007a64:	460c      	mov	r4, r1
 8007a66:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8007a6a:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a76:	f7f8 fdbf 	bl	80005f8 <__aeabi_dmul>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007a82:	e083      	b.n	8007b8c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8007a84:	7efb      	ldrb	r3, [r7, #27]
 8007a86:	2b05      	cmp	r3, #5
 8007a88:	d116      	bne.n	8007ab8 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 8007a8a:	a3fc      	add	r3, pc, #1008	; (adr r3, 8007e7c <scaraInitScurve+0x44c>)
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a94:	f7f8 fdb0 	bl	80005f8 <__aeabi_dmul>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8007aa0:	a3f6      	add	r3, pc, #984	; (adr r3, 8007e7c <scaraInitScurve+0x44c>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aaa:	f7f8 fda5 	bl	80005f8 <__aeabi_dmul>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007ab6:	e069      	b.n	8007b8c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 8007ab8:	7efb      	ldrb	r3, [r7, #27]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d116      	bne.n	8007aec <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 8007abe:	a3ef      	add	r3, pc, #956	; (adr r3, 8007e7c <scaraInitScurve+0x44c>)
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ac8:	f7f8 fd96 	bl	80005f8 <__aeabi_dmul>
 8007acc:	4603      	mov	r3, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8007ad4:	a3e9      	add	r3, pc, #932	; (adr r3, 8007e7c <scaraInitScurve+0x44c>)
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ade:	f7f8 fd8b 	bl	80005f8 <__aeabi_dmul>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007aea:	e04f      	b.n	8007b8c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 8007aec:	7efb      	ldrb	r3, [r7, #27]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d116      	bne.n	8007b20 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8007af2:	a3e2      	add	r3, pc, #904	; (adr r3, 8007e7c <scaraInitScurve+0x44c>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007afc:	f7f8 fd7c 	bl	80005f8 <__aeabi_dmul>
 8007b00:	4603      	mov	r3, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8007b08:	a3dc      	add	r3, pc, #880	; (adr r3, 8007e7c <scaraInitScurve+0x44c>)
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b12:	f7f8 fd71 	bl	80005f8 <__aeabi_dmul>
 8007b16:	4603      	mov	r3, r0
 8007b18:	460c      	mov	r4, r1
 8007b1a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007b1e:	e035      	b.n	8007b8c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8007b20:	7efb      	ldrb	r3, [r7, #27]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d116      	bne.n	8007b54 <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8007b26:	a3d3      	add	r3, pc, #844	; (adr r3, 8007e74 <scaraInitScurve+0x444>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b30:	f7f8 fd62 	bl	80005f8 <__aeabi_dmul>
 8007b34:	4603      	mov	r3, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8007b3c:	a3cd      	add	r3, pc, #820	; (adr r3, 8007e74 <scaraInitScurve+0x444>)
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b46:	f7f8 fd57 	bl	80005f8 <__aeabi_dmul>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007b52:	e01b      	b.n	8007b8c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8007b54:	7efb      	ldrb	r3, [r7, #27]
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d116      	bne.n	8007b88 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 8007b5a:	a3ca      	add	r3, pc, #808	; (adr r3, 8007e84 <scaraInitScurve+0x454>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b64:	f7f8 fd48 	bl	80005f8 <__aeabi_dmul>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8007b70:	a3c4      	add	r3, pc, #784	; (adr r3, 8007e84 <scaraInitScurve+0x454>)
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b7a:	f7f8 fd3d 	bl	80005f8 <__aeabi_dmul>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007b86:	e001      	b.n	8007b8c <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8007b88:	2306      	movs	r3, #6
 8007b8a:	e2c8      	b.n	800811e <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	f04f 0400 	mov.w	r4, #0
 8007b94:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8007b98:	f04f 0300 	mov.w	r3, #0
 8007b9c:	f04f 0400 	mov.w	r4, #0
 8007ba0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	f04f 0400 	mov.w	r4, #0
 8007bac:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8007bb0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007bb4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8007bb8:	f04f 0200 	mov.w	r2, #0
 8007bbc:	f04f 0300 	mov.w	r3, #0
 8007bc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bc4:	f7f8 ff8a 	bl	8000adc <__aeabi_dcmplt>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d015      	beq.n	8007bfa <scaraInitScurve+0x1ca>
		 dir = -1;
 8007bce:	f04f 0300 	mov.w	r3, #0
 8007bd2:	4ca5      	ldr	r4, [pc, #660]	; (8007e68 <scaraInitScurve+0x438>)
 8007bd4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8007bd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007be0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007be4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007be8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	613b      	str	r3, [r7, #16]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	e004      	b.n	8007c04 <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 8007bfa:	f04f 0300 	mov.w	r3, #0
 8007bfe:	4c9b      	ldr	r4, [pc, #620]	; (8007e6c <scaraInitScurve+0x43c>)
 8007c00:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8007c04:	7ebb      	ldrb	r3, [r7, #26]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	f040 8082 	bne.w	8007d10 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007c12:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007c16:	a390      	add	r3, pc, #576	; (adr r3, 8007e58 <scaraInitScurve+0x428>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007c20:	f7f8 ff7a 	bl	8000b18 <__aeabi_dcmpgt>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d066      	beq.n	8007cf8 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8007c2a:	f04f 0200 	mov.w	r2, #0
 8007c2e:	4b90      	ldr	r3, [pc, #576]	; (8007e70 <scaraInitScurve+0x440>)
 8007c30:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007c34:	f7f8 fe0a 	bl	800084c <__aeabi_ddiv>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8007c40:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	f7f8 fb20 	bl	800028c <__adddf3>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	460c      	mov	r4, r1
 8007c50:	461a      	mov	r2, r3
 8007c52:	4623      	mov	r3, r4
 8007c54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c58:	f7f8 fdf8 	bl	800084c <__aeabi_ddiv>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8007c64:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007c68:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007c6c:	f7f8 ff54 	bl	8000b18 <__aeabi_dcmpgt>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d022      	beq.n	8007cbc <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8007c76:	f04f 0200 	mov.w	r2, #0
 8007c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c7e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007c82:	f7f8 fde3 	bl	800084c <__aeabi_ddiv>
 8007c86:	4603      	mov	r3, r0
 8007c88:	460c      	mov	r4, r1
 8007c8a:	4625      	mov	r5, r4
 8007c8c:	461c      	mov	r4, r3
 8007c8e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	f7f8 faf9 	bl	800028c <__adddf3>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ca2:	f7f8 fdd3 	bl	800084c <__aeabi_ddiv>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4620      	mov	r0, r4
 8007cac:	4629      	mov	r1, r5
 8007cae:	f7f8 faeb 	bl	8000288 <__aeabi_dsub>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8007cba:	e003      	b.n	8007cc4 <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 8007cbc:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8007cc0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8007cc4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ccc:	f7f8 fdbe 	bl	800084c <__aeabi_ddiv>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8007cd8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007cdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ce0:	f7f8 ff1a 	bl	8000b18 <__aeabi_dcmpgt>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8007cea:	230a      	movs	r3, #10
 8007cec:	e217      	b.n	800811e <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 8007cee:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8007cf2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8007cf6:	e00b      	b.n	8007d10 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	f04f 0400 	mov.w	r4, #0
 8007d00:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8007d04:	f04f 0300 	mov.w	r3, #0
 8007d08:	f04f 0400 	mov.w	r4, #0
 8007d0c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007d10:	a353      	add	r3, pc, #332	; (adr r3, 8007e60 <scaraInitScurve+0x430>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007d1a:	f7f8 fefd 	bl	8000b18 <__aeabi_dcmpgt>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 80b3 	beq.w	8007e8c <scaraInitScurve+0x45c>
 8007d26:	a34e      	add	r3, pc, #312	; (adr r3, 8007e60 <scaraInitScurve+0x430>)
 8007d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d30:	f7f8 fef2 	bl	8000b18 <__aeabi_dcmpgt>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 80a8 	beq.w	8007e8c <scaraInitScurve+0x45c>
		 no_phases = 5;
 8007d3c:	2305      	movs	r3, #5
 8007d3e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8007d42:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007d46:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d4a:	f7f8 fd7f 	bl	800084c <__aeabi_ddiv>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	460c      	mov	r4, r1
 8007d52:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8007d56:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007d5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d5e:	f7f8 fd75 	bl	800084c <__aeabi_ddiv>
 8007d62:	4603      	mov	r3, r0
 8007d64:	460c      	mov	r4, r1
 8007d66:	4625      	mov	r5, r4
 8007d68:	461c      	mov	r4, r3
 8007d6a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	f7f8 fa8b 	bl	800028c <__adddf3>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f7f8 fa83 	bl	8000288 <__aeabi_dsub>
 8007d82:	4603      	mov	r3, r0
 8007d84:	460c      	mov	r4, r1
 8007d86:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 8007d8a:	f04f 0200 	mov.w	r2, #0
 8007d8e:	f04f 0300 	mov.w	r3, #0
 8007d92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d96:	f7f8 fea1 	bl	8000adc <__aeabi_dcmplt>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d022      	beq.n	8007de6 <scaraInitScurve+0x3b6>
			 tc = 0;
 8007da0:	f04f 0300 	mov.w	r3, #0
 8007da4:	f04f 0400 	mov.w	r4, #0
 8007da8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 8007dac:	2304      	movs	r3, #4
 8007dae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8007db2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	f7f8 fa67 	bl	800028c <__adddf3>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007dca:	f7f8 fd3f 	bl	800084c <__aeabi_ddiv>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	ec44 3b17 	vmov	d7, r3, r4
 8007dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8007dda:	eef0 0a67 	vmov.f32	s1, s15
 8007dde:	f011 fd8d 	bl	80198fc <sqrt>
 8007de2:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8007de6:	a31c      	add	r3, pc, #112	; (adr r3, 8007e58 <scaraInitScurve+0x428>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007df0:	f7f8 fe74 	bl	8000adc <__aeabi_dcmplt>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d006      	beq.n	8007e08 <scaraInitScurve+0x3d8>
			 j_max = 0;
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	f04f 0400 	mov.w	r4, #0
 8007e02:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8007e06:	e009      	b.n	8007e1c <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8007e08:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007e0c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007e10:	f7f8 fd1c 	bl	800084c <__aeabi_ddiv>
 8007e14:	4603      	mov	r3, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 8007e1c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007e20:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007e24:	f7f8 fbe8 	bl	80005f8 <__aeabi_dmul>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <scaraInitScurve+0x440>)
 8007e36:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007e3a:	f7f8 fbdd 	bl	80005f8 <__aeabi_dmul>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	460c      	mov	r4, r1
 8007e42:	461a      	mov	r2, r3
 8007e44:	4623      	mov	r3, r4
 8007e46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e4a:	f7f8 fa1f 	bl	800028c <__adddf3>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8007e56:	e039      	b.n	8007ecc <scaraInitScurve+0x49c>
 8007e58:	d2f1a9fc 	.word	0xd2f1a9fc
 8007e5c:	3f50624d 	.word	0x3f50624d
 8007e60:	9abcaf48 	.word	0x9abcaf48
 8007e64:	3e7ad7f2 	.word	0x3e7ad7f2
 8007e68:	bff00000 	.word	0xbff00000
 8007e6c:	3ff00000 	.word	0x3ff00000
 8007e70:	40100000 	.word	0x40100000
 8007e74:	00000000 	.word	0x00000000
 8007e78:	405c2000 	.word	0x405c2000
 8007e7c:	14000000 	.word	0x14000000
 8007e80:	4000f6f0 	.word	0x4000f6f0
 8007e84:	6b259425 	.word	0x6b259425
 8007e88:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	f04f 0400 	mov.w	r4, #0
 8007e94:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	f04f 0400 	mov.w	r4, #0
 8007ea0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8007ea4:	2304      	movs	r3, #4
 8007ea6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 8007eaa:	f04f 0200 	mov.w	r2, #0
 8007eae:	4ba0      	ldr	r3, [pc, #640]	; (8008130 <scaraInitScurve+0x700>)
 8007eb0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007eb4:	f7f8 fcca 	bl	800084c <__aeabi_ddiv>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8007ec0:	f04f 0300 	mov.w	r3, #0
 8007ec4:	f04f 0400 	mov.w	r4, #0
 8007ec8:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8007ecc:	a396      	add	r3, pc, #600	; (adr r3, 8008128 <scaraInitScurve+0x6f8>)
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007ed6:	f7f8 fcb9 	bl	800084c <__aeabi_ddiv>
 8007eda:	4603      	mov	r3, r0
 8007edc:	460c      	mov	r4, r1
 8007ede:	ec44 3b17 	vmov	d7, r3, r4
 8007ee2:	eeb0 0a47 	vmov.f32	s0, s14
 8007ee6:	eef0 0a67 	vmov.f32	s1, s15
 8007eea:	f011 fb6d 	bl	80195c8 <ceil>
 8007eee:	ec54 3b10 	vmov	r3, r4, d0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	f7f8 fe57 	bl	8000ba8 <__aeabi_d2uiz>
 8007efa:	4603      	mov	r3, r0
 8007efc:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	4b8c      	ldr	r3, [pc, #560]	; (8008134 <scaraInitScurve+0x704>)
 8007f04:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007f08:	f7f8 fb76 	bl	80005f8 <__aeabi_dmul>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	4618      	mov	r0, r3
 8007f12:	4621      	mov	r1, r4
 8007f14:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007f18:	f7f8 fb6e 	bl	80005f8 <__aeabi_dmul>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	461a      	mov	r2, r3
 8007f22:	4623      	mov	r3, r4
 8007f24:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007f28:	f7f8 fb66 	bl	80005f8 <__aeabi_dmul>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 8007f34:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007f38:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007f3c:	f7f8 fb5c 	bl	80005f8 <__aeabi_dmul>
 8007f40:	4603      	mov	r3, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	4618      	mov	r0, r3
 8007f46:	4621      	mov	r1, r4
 8007f48:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007f4c:	f7f8 fb54 	bl	80005f8 <__aeabi_dmul>
 8007f50:	4603      	mov	r3, r0
 8007f52:	460c      	mov	r4, r1
 8007f54:	4618      	mov	r0, r3
 8007f56:	4621      	mov	r1, r4
 8007f58:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007f5c:	f7f8 fb4c 	bl	80005f8 <__aeabi_dmul>
 8007f60:	4603      	mov	r3, r0
 8007f62:	460c      	mov	r4, r1
 8007f64:	4618      	mov	r0, r3
 8007f66:	4621      	mov	r1, r4
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	4b72      	ldr	r3, [pc, #456]	; (8008138 <scaraInitScurve+0x708>)
 8007f6e:	f7f8 fc6d 	bl	800084c <__aeabi_ddiv>
 8007f72:	4603      	mov	r3, r0
 8007f74:	460c      	mov	r4, r1
 8007f76:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 8007f7a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007f7e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007f82:	f7f8 fb39 	bl	80005f8 <__aeabi_dmul>
 8007f86:	4603      	mov	r3, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	4623      	mov	r3, r4
 8007f8e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007f92:	f7f8 fb31 	bl	80005f8 <__aeabi_dmul>
 8007f96:	4603      	mov	r3, r0
 8007f98:	460c      	mov	r4, r1
 8007f9a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 8007f9e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007fa2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007fa6:	f7f8 fb27 	bl	80005f8 <__aeabi_dmul>
 8007faa:	4603      	mov	r3, r0
 8007fac:	460c      	mov	r4, r1
 8007fae:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 8007fb2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007fb6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 8007fba:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007fbe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007fc2:	f7f8 fb19 	bl	80005f8 <__aeabi_dmul>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	461a      	mov	r2, r3
 8007fcc:	4623      	mov	r3, r4
 8007fce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007fd2:	f7f8 f95b 	bl	800028c <__adddf3>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	460c      	mov	r4, r1
 8007fda:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 8007fde:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8007fe2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 8007fe6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007fee:	f7f8 f94d 	bl	800028c <__adddf3>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ffe:	f7f8 f943 	bl	8000288 <__aeabi_dsub>
 8008002:	4603      	mov	r3, r0
 8008004:	460c      	mov	r4, r1
 8008006:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8008010:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800801a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 800801e:	69fa      	ldr	r2, [r7, #28]
 8008020:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8008024:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800802e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8008038:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8008042:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 8008046:	69fa      	ldr	r2, [r7, #28]
 8008048:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800804c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8008056:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8008060:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800806a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8008074:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800807e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008086:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8008088:	69fa      	ldr	r2, [r7, #28]
 800808a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800808e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 8008092:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008096:	f7f8 fd5f 	bl	8000b58 <__aeabi_d2iz>
 800809a:	4603      	mov	r3, r0
 800809c:	b25a      	sxtb	r2, r3
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 80080a2:	69fa      	ldr	r2, [r7, #28]
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	f04f 0400 	mov.w	r4, #0
 80080ac:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 80080b0:	69fa      	ldr	r2, [r7, #28]
 80080b2:	f04f 0300 	mov.w	r3, #0
 80080b6:	f04f 0400 	mov.w	r4, #0
 80080ba:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	f04f 0300 	mov.w	r3, #0
 80080c4:	f04f 0400 	mov.w	r4, #0
 80080c8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 80080cc:	69fa      	ldr	r2, [r7, #28]
 80080ce:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80080d2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80080dc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80080e6:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80080f0:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80080fa:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008104:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8008108:	69fa      	ldr	r2, [r7, #28]
 800810a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800810e:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008118:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	37e8      	adds	r7, #232	; 0xe8
 8008122:	46bd      	mov	sp, r7
 8008124:	bdb0      	pop	{r4, r5, r7, pc}
 8008126:	bf00      	nop
 8008128:	40000000 	.word	0x40000000
 800812c:	3f847ae1 	.word	0x3f847ae1
 8008130:	40100000 	.word	0x40100000
 8008134:	3fe00000 	.word	0x3fe00000
 8008138:	40180000 	.word	0x40180000

0800813c <scaraTestFlowDuty>:

SCARA_StatusTypeDef scaraTestFlowDuty(double time, SCARA_PositionTypeDef *pos_Next, SCARA_PositionTypeDef pos_Current)
{
 800813c:	b082      	sub	sp, #8
 800813e:	b5b0      	push	{r4, r5, r7, lr}
 8008140:	b0e6      	sub	sp, #408	; 0x198
 8008142:	af2e      	add	r7, sp, #184	; 0xb8
 8008144:	ed87 0b02 	vstr	d0, [r7, #8]
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800814e:	e881 000c 	stmia.w	r1, {r2, r3}
	double current_s;
	SCARA_StatusTypeDef status1;
	SCARA_PositionTypeDef positionCompute;
	current_s = time*myDUTY.task.trajectory_3d.lspb.v_design;
 8008152:	4b2e      	ldr	r3, [pc, #184]	; (800820c <scaraTestFlowDuty+0xd0>)
 8008154:	e9d3 3450 	ldrd	r3, r4, [r3, #320]	; 0x140
 8008158:	461a      	mov	r2, r3
 800815a:	4623      	mov	r3, r4
 800815c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008160:	f7f8 fa4a 	bl	80005f8 <__aeabi_dmul>
 8008164:	4603      	mov	r3, r0
 8008166:	460c      	mov	r4, r1
 8008168:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	status1 = scaraFlowLine(&(myDUTY.task.path.line), current_s);
 800816c:	ed97 0b36 	vldr	d0, [r7, #216]	; 0xd8
 8008170:	4827      	ldr	r0, [pc, #156]	; (8008210 <scaraTestFlowDuty+0xd4>)
 8008172:	f000 fbd9 	bl	8008928 <scaraFlowLine>
 8008176:	4603      	mov	r3, r0
 8008178:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	positionCompute.x = myDUTY.task.path.line.x_current;
 800817c:	4b23      	ldr	r3, [pc, #140]	; (800820c <scaraTestFlowDuty+0xd0>)
 800817e:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8008182:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	positionCompute.y = myDUTY.task.path.line.y_current;
 8008186:	4b21      	ldr	r3, [pc, #132]	; (800820c <scaraTestFlowDuty+0xd0>)
 8008188:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800818c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	positionCompute.z = myDUTY.task.path.line.z_current;
 8008190:	4b1e      	ldr	r3, [pc, #120]	; (800820c <scaraTestFlowDuty+0xd0>)
 8008192:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8008196:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	positionCompute.roll = myDUTY.task.roll_start + myDUTY.task.trajectory_roll.lspb.v_design*time;
 800819a:	4b1c      	ldr	r3, [pc, #112]	; (800820c <scaraTestFlowDuty+0xd0>)
 800819c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80081a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80081a4:	4b19      	ldr	r3, [pc, #100]	; (800820c <scaraTestFlowDuty+0xd0>)
 80081a6:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
 80081aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081ae:	f7f8 fa23 	bl	80005f8 <__aeabi_dmul>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f8 f867 	bl	800028c <__adddf3>
 80081be:	4603      	mov	r3, r0
 80081c0:	460c      	mov	r4, r1
 80081c2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 80081c6:	f107 0410 	add.w	r4, r7, #16
 80081ca:	4668      	mov	r0, sp
 80081cc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80081d0:	22b8      	movs	r2, #184	; 0xb8
 80081d2:	4619      	mov	r1, r3
 80081d4:	f00d fc8a 	bl	8015aec <memcpy>
 80081d8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80081dc:	cb0c      	ldmia	r3, {r2, r3}
 80081de:	4620      	mov	r0, r4
 80081e0:	f7fb fbca 	bl	8003978 <kinematicInverse>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <scaraTestFlowDuty+0xb2>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80081ea:	2307      	movs	r3, #7
 80081ec:	e007      	b.n	80081fe <scaraTestFlowDuty+0xc2>
	} else {
		memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80081ee:	f107 0310 	add.w	r3, r7, #16
 80081f2:	22c0      	movs	r2, #192	; 0xc0
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f00d fc78 	bl	8015aec <memcpy>
	}
	return SCARA_STATUS_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	37e0      	adds	r7, #224	; 0xe0
 8008202:	46bd      	mov	sp, r7
 8008204:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8008208:	b002      	add	sp, #8
 800820a:	4770      	bx	lr
 800820c:	20004f28 	.word	0x20004f28
 8008210:	20004f38 	.word	0x20004f38

08008214 <scaraFlowDuty>:

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8008214:	b082      	sub	sp, #8
 8008216:	b5b0      	push	{r4, r5, r7, lr}
 8008218:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800821c:	af2e      	add	r7, sp, #184	; 0xb8
 800821e:	f107 0108 	add.w	r1, r7, #8
 8008222:	ed81 0b00 	vstr	d0, [r1]
 8008226:	1d39      	adds	r1, r7, #4
 8008228:	6008      	str	r0, [r1, #0]
 800822a:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 800822e:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8008232:	f107 0210 	add.w	r2, r7, #16
 8008236:	f107 0308 	add.w	r3, r7, #8
 800823a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800823e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8008242:	4ba9      	ldr	r3, [pc, #676]	; (80084e8 <scaraFlowDuty+0x2d4>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	f040 815a 	bne.w	8008500 <scaraFlowDuty+0x2ec>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 800824c:	4ba6      	ldr	r3, [pc, #664]	; (80084e8 <scaraFlowDuty+0x2d4>)
 800824e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008252:	2b00      	cmp	r3, #0
 8008254:	d12b      	bne.n	80082ae <scaraFlowDuty+0x9a>
//			s = myDUTY.task.trajectory_3d.lspb.s_current;
//			v = myDUTY.task.trajectory_3d.lspb.v_current;
//			angle = myDUTY.task.trajectory_roll.lspb.s_current;
//			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
//			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
			status1 = scaraFlowLSPB1(&(myDUTY.task.trajectory_3d.lspb), time);
 8008256:	f107 0308 	add.w	r3, r7, #8
 800825a:	ed93 0b00 	vldr	d0, [r3]
 800825e:	48a3      	ldr	r0, [pc, #652]	; (80084ec <scaraFlowDuty+0x2d8>)
 8008260:	f000 fc72 	bl	8008b48 <scaraFlowLSPB1>
 8008264:	4603      	mov	r3, r0
 8008266:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 800826a:	4b9f      	ldr	r3, [pc, #636]	; (80084e8 <scaraFlowDuty+0x2d4>)
 800826c:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 8008270:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8008274:	4b9c      	ldr	r3, [pc, #624]	; (80084e8 <scaraFlowDuty+0x2d4>)
 8008276:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 800827a:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 800827e:	4b9a      	ldr	r3, [pc, #616]	; (80084e8 <scaraFlowDuty+0x2d4>)
 8008280:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008284:	f107 0108 	add.w	r1, r7, #8
 8008288:	461a      	mov	r2, r3
 800828a:	4623      	mov	r3, r4
 800828c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008290:	f7f8 f9b2 	bl	80005f8 <__aeabi_dmul>
 8008294:	4603      	mov	r3, r0
 8008296:	460c      	mov	r4, r1
 8008298:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 800829c:	4b92      	ldr	r3, [pc, #584]	; (80084e8 <scaraFlowDuty+0x2d4>)
 800829e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80082a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status2 = SCARA_STATUS_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 80082ac:	e063      	b.n	8008376 <scaraFlowDuty+0x162>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 80082ae:	4b8e      	ldr	r3, [pc, #568]	; (80084e8 <scaraFlowDuty+0x2d4>)
 80082b0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d12d      	bne.n	8008314 <scaraFlowDuty+0x100>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 80082b8:	f107 0308 	add.w	r3, r7, #8
 80082bc:	ed93 0b00 	vldr	d0, [r3]
 80082c0:	488b      	ldr	r0, [pc, #556]	; (80084f0 <scaraFlowDuty+0x2dc>)
 80082c2:	f000 ff8b 	bl	80091dc <scaraFLowScurve>
 80082c6:	4603      	mov	r3, r0
 80082c8:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 80082cc:	f107 0308 	add.w	r3, r7, #8
 80082d0:	ed93 0b00 	vldr	d0, [r3]
 80082d4:	4887      	ldr	r0, [pc, #540]	; (80084f4 <scaraFlowDuty+0x2e0>)
 80082d6:	f000 ff81 	bl	80091dc <scaraFLowScurve>
 80082da:	4603      	mov	r3, r0
 80082dc:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 80082e0:	4b81      	ldr	r3, [pc, #516]	; (80084e8 <scaraFlowDuty+0x2d4>)
 80082e2:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 80082e6:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 80082ea:	4b7f      	ldr	r3, [pc, #508]	; (80084e8 <scaraFlowDuty+0x2d4>)
 80082ec:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 80082f0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 80082f4:	4b7c      	ldr	r3, [pc, #496]	; (80084e8 <scaraFlowDuty+0x2d4>)
 80082f6:	e9d3 34f8 	ldrd	r3, r4, [r3, #992]	; 0x3e0
 80082fa:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 80082fe:	4b7a      	ldr	r3, [pc, #488]	; (80084e8 <scaraFlowDuty+0x2d4>)
 8008300:	e9d3 34f6 	ldrd	r3, r4, [r3, #984]	; 0x3d8
 8008304:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8008308:	4b77      	ldr	r3, [pc, #476]	; (80084e8 <scaraFlowDuty+0x2d4>)
 800830a:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 800830e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8008312:	e030      	b.n	8008376 <scaraFlowDuty+0x162>
		}else if( DUTY_TRAJECTORY_LINEAR == myDUTY.task.trajectory_3d.trajectory_type){
 8008314:	4b74      	ldr	r3, [pc, #464]	; (80084e8 <scaraFlowDuty+0x2d4>)
 8008316:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800831a:	2b02      	cmp	r3, #2
 800831c:	d129      	bne.n	8008372 <scaraFlowDuty+0x15e>
			s = time*myDUTY.task.trajectory_3d.linear.constant_v;
 800831e:	4b72      	ldr	r3, [pc, #456]	; (80084e8 <scaraFlowDuty+0x2d4>)
 8008320:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 8008324:	f107 0108 	add.w	r1, r7, #8
 8008328:	461a      	mov	r2, r3
 800832a:	4623      	mov	r3, r4
 800832c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008330:	f7f8 f962 	bl	80005f8 <__aeabi_dmul>
 8008334:	4603      	mov	r3, r0
 8008336:	460c      	mov	r4, r1
 8008338:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.linear.constant_v*time;
 800833c:	4b6a      	ldr	r3, [pc, #424]	; (80084e8 <scaraFlowDuty+0x2d4>)
 800833e:	e9d3 34fc 	ldrd	r3, r4, [r3, #1008]	; 0x3f0
 8008342:	f107 0108 	add.w	r1, r7, #8
 8008346:	461a      	mov	r2, r3
 8008348:	4623      	mov	r3, r4
 800834a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800834e:	f7f8 f953 	bl	80005f8 <__aeabi_dmul>
 8008352:	4603      	mov	r3, r0
 8008354:	460c      	mov	r4, r1
 8008356:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.linear.dir;
 800835a:	4b63      	ldr	r3, [pc, #396]	; (80084e8 <scaraFlowDuty+0x2d4>)
 800835c:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8008360:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			status1 = SCARA_STATUS_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = SCARA_STATUS_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 8008370:	e001      	b.n	8008376 <scaraFlowDuty+0x162>
		}else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8008372:	2305      	movs	r3, #5
 8008374:	e2cd      	b.n	8008912 <scaraFlowDuty+0x6fe>
		}

		if ( SCARA_STATUS_OK != status1) {
 8008376:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <scaraFlowDuty+0x170>
			return status1;
 800837e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008382:	e2c6      	b.n	8008912 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008384:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <scaraFlowDuty+0x17e>
			return status2;
 800838c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008390:	e2bf      	b.n	8008912 <scaraFlowDuty+0x6fe>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8008392:	4b55      	ldr	r3, [pc, #340]	; (80084e8 <scaraFlowDuty+0x2d4>)
 8008394:	7a1b      	ldrb	r3, [r3, #8]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d117      	bne.n	80083ca <scaraFlowDuty+0x1b6>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 800839a:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800839e:	4856      	ldr	r0, [pc, #344]	; (80084f8 <scaraFlowDuty+0x2e4>)
 80083a0:	f000 fac2 	bl	8008928 <scaraFlowLine>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.line.x_current;
 80083aa:	4b4f      	ldr	r3, [pc, #316]	; (80084e8 <scaraFlowDuty+0x2d4>)
 80083ac:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80083b0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.line.y_current;
 80083b4:	4b4c      	ldr	r3, [pc, #304]	; (80084e8 <scaraFlowDuty+0x2d4>)
 80083b6:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80083ba:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.line.z_current;
 80083be:	4b4a      	ldr	r3, [pc, #296]	; (80084e8 <scaraFlowDuty+0x2d4>)
 80083c0:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80083c4:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 80083c8:	e01d      	b.n	8008406 <scaraFlowDuty+0x1f2>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 80083ca:	4b47      	ldr	r3, [pc, #284]	; (80084e8 <scaraFlowDuty+0x2d4>)
 80083cc:	7a1b      	ldrb	r3, [r3, #8]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d117      	bne.n	8008402 <scaraFlowDuty+0x1ee>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 80083d2:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 80083d6:	4849      	ldr	r0, [pc, #292]	; (80084fc <scaraFlowDuty+0x2e8>)
 80083d8:	f000 fb2e 	bl	8008a38 <scaraFlowCircle>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			x = myDUTY.task.path.circle.x_current;
 80083e2:	4b41      	ldr	r3, [pc, #260]	; (80084e8 <scaraFlowDuty+0x2d4>)
 80083e4:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 80083e8:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			y = myDUTY.task.path.circle.y_current;
 80083ec:	4b3e      	ldr	r3, [pc, #248]	; (80084e8 <scaraFlowDuty+0x2d4>)
 80083ee:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 80083f2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			z = myDUTY.task.path.circle.z_current;
 80083f6:	4b3c      	ldr	r3, [pc, #240]	; (80084e8 <scaraFlowDuty+0x2d4>)
 80083f8:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 80083fc:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8008400:	e001      	b.n	8008406 <scaraFlowDuty+0x1f2>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8008402:	2303      	movs	r3, #3
 8008404:	e285      	b.n	8008912 <scaraFlowDuty+0x6fe>
		}

		positionCompute.x 		= x;
 8008406:	f107 0210 	add.w	r2, r7, #16
 800840a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800840e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8008412:	f107 0210 	add.w	r2, r7, #16
 8008416:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800841a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 800841e:	f107 0210 	add.w	r2, r7, #16
 8008422:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8008426:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 800842a:	4b2f      	ldr	r3, [pc, #188]	; (80084e8 <scaraFlowDuty+0x2d4>)
 800842c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008430:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008434:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8008438:	4618      	mov	r0, r3
 800843a:	f7f8 f873 	bl	8000524 <__aeabi_i2d>
 800843e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8008442:	f7f8 f8d9 	bl	80005f8 <__aeabi_dmul>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4620      	mov	r0, r4
 800844c:	4629      	mov	r1, r5
 800844e:	f7f7 ff1d 	bl	800028c <__adddf3>
 8008452:	4603      	mov	r3, r0
 8008454:	460c      	mov	r4, r1
 8008456:	f107 0210 	add.w	r2, r7, #16
 800845a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 800845e:	f107 0210 	add.w	r2, r7, #16
 8008462:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8008466:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 800846a:	f107 0210 	add.w	r2, r7, #16
 800846e:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8008472:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8008476:	f107 0210 	add.w	r2, r7, #16
 800847a:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800847e:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8008482:	f107 0210 	add.w	r2, r7, #16
 8008486:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800848a:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 800848e:	4b16      	ldr	r3, [pc, #88]	; (80084e8 <scaraFlowDuty+0x2d4>)
 8008490:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 8008494:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008498:	f107 0210 	add.w	r2, r7, #16
 800849c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80084a0:	f107 0210 	add.w	r2, r7, #16
 80084a4:	f107 0308 	add.w	r3, r7, #8
 80084a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084ac:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 80084b0:	f107 0410 	add.w	r4, r7, #16
 80084b4:	4668      	mov	r0, sp
 80084b6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80084ba:	22b8      	movs	r2, #184	; 0xb8
 80084bc:	4619      	mov	r1, r3
 80084be:	f00d fb15 	bl	8015aec <memcpy>
 80084c2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80084c6:	cb0c      	ldmia	r3, {r2, r3}
 80084c8:	4620      	mov	r0, r4
 80084ca:	f7fb fa55 	bl	8003978 <kinematicInverse>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <scaraFlowDuty+0x2c4>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80084d4:	2307      	movs	r3, #7
 80084d6:	e21c      	b.n	8008912 <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80084d8:	f107 0110 	add.w	r1, r7, #16
 80084dc:	1d3b      	adds	r3, r7, #4
 80084de:	22c0      	movs	r2, #192	; 0xc0
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	f00d fb03 	bl	8015aec <memcpy>
 80084e6:	e213      	b.n	8008910 <scaraFlowDuty+0x6fc>
 80084e8:	20004f28 	.word	0x20004f28
 80084ec:	20005040 	.word	0x20005040
 80084f0:	200050c0 	.word	0x200050c0
 80084f4:	20005240 	.word	0x20005240
 80084f8:	20004f38 	.word	0x20004f38
 80084fc:	20004fa8 	.word	0x20004fa8
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8008500:	4b8b      	ldr	r3, [pc, #556]	; (8008730 <scaraFlowDuty+0x51c>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	f040 8201 	bne.w	800890c <scaraFlowDuty+0x6f8>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800850a:	4b89      	ldr	r3, [pc, #548]	; (8008730 <scaraFlowDuty+0x51c>)
 800850c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008510:	2b00      	cmp	r3, #0
 8008512:	d174      	bne.n	80085fe <scaraFlowDuty+0x3ea>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8008514:	f107 0308 	add.w	r3, r7, #8
 8008518:	ed93 0b00 	vldr	d0, [r3]
 800851c:	4885      	ldr	r0, [pc, #532]	; (8008734 <scaraFlowDuty+0x520>)
 800851e:	f000 fcb1 	bl	8008e84 <scaraFlowLSPB>
 8008522:	4603      	mov	r3, r0
 8008524:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8008528:	f107 0308 	add.w	r3, r7, #8
 800852c:	ed93 0b00 	vldr	d0, [r3]
 8008530:	4881      	ldr	r0, [pc, #516]	; (8008738 <scaraFlowDuty+0x524>)
 8008532:	f000 fca7 	bl	8008e84 <scaraFlowLSPB>
 8008536:	4603      	mov	r3, r0
 8008538:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800853c:	f107 0308 	add.w	r3, r7, #8
 8008540:	ed93 0b00 	vldr	d0, [r3]
 8008544:	487d      	ldr	r0, [pc, #500]	; (800873c <scaraFlowDuty+0x528>)
 8008546:	f000 fc9d 	bl	8008e84 <scaraFlowLSPB>
 800854a:	4603      	mov	r3, r0
 800854c:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8008550:	f107 0308 	add.w	r3, r7, #8
 8008554:	ed93 0b00 	vldr	d0, [r3]
 8008558:	4879      	ldr	r0, [pc, #484]	; (8008740 <scaraFlowDuty+0x52c>)
 800855a:	f000 fc93 	bl	8008e84 <scaraFlowLSPB>
 800855e:	4603      	mov	r3, r0
 8008560:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8008564:	4b72      	ldr	r3, [pc, #456]	; (8008730 <scaraFlowDuty+0x51c>)
 8008566:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800856a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800856e:	4b70      	ldr	r3, [pc, #448]	; (8008730 <scaraFlowDuty+0x51c>)
 8008570:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8008574:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8008578:	4b6d      	ldr	r3, [pc, #436]	; (8008730 <scaraFlowDuty+0x51c>)
 800857a:	f893 3720 	ldrb.w	r3, [r3, #1824]	; 0x720
 800857e:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8008582:	4b6b      	ldr	r3, [pc, #428]	; (8008730 <scaraFlowDuty+0x51c>)
 8008584:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
 8008588:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800858c:	4b68      	ldr	r3, [pc, #416]	; (8008730 <scaraFlowDuty+0x51c>)
 800858e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008592:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008596:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800859a:	4b65      	ldr	r3, [pc, #404]	; (8008730 <scaraFlowDuty+0x51c>)
 800859c:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80085a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085a4:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 80085a8:	4b61      	ldr	r3, [pc, #388]	; (8008730 <scaraFlowDuty+0x51c>)
 80085aa:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 80085ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085b2:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 80085b6:	4b5e      	ldr	r3, [pc, #376]	; (8008730 <scaraFlowDuty+0x51c>)
 80085b8:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80085bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085c0:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 80085c4:	4b5a      	ldr	r3, [pc, #360]	; (8008730 <scaraFlowDuty+0x51c>)
 80085c6:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80085ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085ce:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 80085d2:	4b57      	ldr	r3, [pc, #348]	; (8008730 <scaraFlowDuty+0x51c>)
 80085d4:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 80085d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085dc:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 80085e0:	4b53      	ldr	r3, [pc, #332]	; (8008730 <scaraFlowDuty+0x51c>)
 80085e2:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 80085e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085ea:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 80085ee:	4b50      	ldr	r3, [pc, #320]	; (8008730 <scaraFlowDuty+0x51c>)
 80085f0:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80085f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085f8:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80085fc:	e07b      	b.n	80086f6 <scaraFlowDuty+0x4e2>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 80085fe:	4b4c      	ldr	r3, [pc, #304]	; (8008730 <scaraFlowDuty+0x51c>)
 8008600:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008604:	2b01      	cmp	r3, #1
 8008606:	d174      	bne.n	80086f2 <scaraFlowDuty+0x4de>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8008608:	f107 0308 	add.w	r3, r7, #8
 800860c:	ed93 0b00 	vldr	d0, [r3]
 8008610:	484c      	ldr	r0, [pc, #304]	; (8008744 <scaraFlowDuty+0x530>)
 8008612:	f000 fde3 	bl	80091dc <scaraFLowScurve>
 8008616:	4603      	mov	r3, r0
 8008618:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 800861c:	f107 0308 	add.w	r3, r7, #8
 8008620:	ed93 0b00 	vldr	d0, [r3]
 8008624:	4848      	ldr	r0, [pc, #288]	; (8008748 <scaraFlowDuty+0x534>)
 8008626:	f000 fdd9 	bl	80091dc <scaraFLowScurve>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8008630:	f107 0308 	add.w	r3, r7, #8
 8008634:	ed93 0b00 	vldr	d0, [r3]
 8008638:	4844      	ldr	r0, [pc, #272]	; (800874c <scaraFlowDuty+0x538>)
 800863a:	f000 fdcf 	bl	80091dc <scaraFLowScurve>
 800863e:	4603      	mov	r3, r0
 8008640:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8008644:	f107 0308 	add.w	r3, r7, #8
 8008648:	ed93 0b00 	vldr	d0, [r3]
 800864c:	4840      	ldr	r0, [pc, #256]	; (8008750 <scaraFlowDuty+0x53c>)
 800864e:	f000 fdc5 	bl	80091dc <scaraFLowScurve>
 8008652:	4603      	mov	r3, r0
 8008654:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8008658:	4b35      	ldr	r3, [pc, #212]	; (8008730 <scaraFlowDuty+0x51c>)
 800865a:	f893 34a0 	ldrb.w	r3, [r3, #1184]	; 0x4a0
 800865e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8008662:	4b33      	ldr	r3, [pc, #204]	; (8008730 <scaraFlowDuty+0x51c>)
 8008664:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 8008668:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 800866c:	4b30      	ldr	r3, [pc, #192]	; (8008730 <scaraFlowDuty+0x51c>)
 800866e:	f893 37a0 	ldrb.w	r3, [r3, #1952]	; 0x7a0
 8008672:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8008676:	4b2e      	ldr	r3, [pc, #184]	; (8008730 <scaraFlowDuty+0x51c>)
 8008678:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 800867c:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8008680:	4b2b      	ldr	r3, [pc, #172]	; (8008730 <scaraFlowDuty+0x51c>)
 8008682:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8008686:	e9d3 3400 	ldrd	r3, r4, [r3]
 800868a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 800868e:	4b28      	ldr	r3, [pc, #160]	; (8008730 <scaraFlowDuty+0x51c>)
 8008690:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8008694:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008698:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 800869c:	4b24      	ldr	r3, [pc, #144]	; (8008730 <scaraFlowDuty+0x51c>)
 800869e:	f603 0368 	addw	r3, r3, #2152	; 0x868
 80086a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086a6:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 80086aa:	4b21      	ldr	r3, [pc, #132]	; (8008730 <scaraFlowDuty+0x51c>)
 80086ac:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80086b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086b4:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 80086b8:	4b1d      	ldr	r3, [pc, #116]	; (8008730 <scaraFlowDuty+0x51c>)
 80086ba:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80086be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086c2:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 80086c6:	4b1a      	ldr	r3, [pc, #104]	; (8008730 <scaraFlowDuty+0x51c>)
 80086c8:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 80086cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086d0:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 80086d4:	4b16      	ldr	r3, [pc, #88]	; (8008730 <scaraFlowDuty+0x51c>)
 80086d6:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 80086da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086de:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 80086e2:	4b13      	ldr	r3, [pc, #76]	; (8008730 <scaraFlowDuty+0x51c>)
 80086e4:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80086e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086ec:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80086f0:	e001      	b.n	80086f6 <scaraFlowDuty+0x4e2>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80086f2:	2305      	movs	r3, #5
 80086f4:	e10d      	b.n	8008912 <scaraFlowDuty+0x6fe>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 80086f6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <scaraFlowDuty+0x4f0>
			return status1;
 80086fe:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8008702:	e106      	b.n	8008912 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status2) {
 8008704:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <scaraFlowDuty+0x4fe>
			return status2;
 800870c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8008710:	e0ff      	b.n	8008912 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status3) {
 8008712:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <scaraFlowDuty+0x50c>
			return status3;
 800871a:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 800871e:	e0f8      	b.n	8008912 <scaraFlowDuty+0x6fe>
		}
		if ( SCARA_STATUS_OK != status4) {
 8008720:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8008724:	2b00      	cmp	r3, #0
 8008726:	d015      	beq.n	8008754 <scaraFlowDuty+0x540>
			return status4;
 8008728:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800872c:	e0f1      	b.n	8008912 <scaraFlowDuty+0x6fe>
 800872e:	bf00      	nop
 8008730:	20004f28 	.word	0x20004f28
 8008734:	20005348 	.word	0x20005348
 8008738:	200054c8 	.word	0x200054c8
 800873c:	20005648 	.word	0x20005648
 8008740:	200057c8 	.word	0x200057c8
 8008744:	200053c8 	.word	0x200053c8
 8008748:	20005548 	.word	0x20005548
 800874c:	200056c8 	.word	0x200056c8
 8008750:	20005848 	.word	0x20005848
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8008754:	4b73      	ldr	r3, [pc, #460]	; (8008924 <scaraFlowDuty+0x710>)
 8008756:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800875a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800875e:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8008762:	4618      	mov	r0, r3
 8008764:	f7f7 fede 	bl	8000524 <__aeabi_i2d>
 8008768:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800876c:	f7f7 ff44 	bl	80005f8 <__aeabi_dmul>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4620      	mov	r0, r4
 8008776:	4629      	mov	r1, r5
 8008778:	f7f7 fd88 	bl	800028c <__adddf3>
 800877c:	4603      	mov	r3, r0
 800877e:	460c      	mov	r4, r1
 8008780:	f107 0210 	add.w	r2, r7, #16
 8008784:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8008788:	4b66      	ldr	r3, [pc, #408]	; (8008924 <scaraFlowDuty+0x710>)
 800878a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 800878e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008792:	f997 30d6 	ldrsb.w	r3, [r7, #214]	; 0xd6
 8008796:	4618      	mov	r0, r3
 8008798:	f7f7 fec4 	bl	8000524 <__aeabi_i2d>
 800879c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80087a0:	f7f7 ff2a 	bl	80005f8 <__aeabi_dmul>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	4620      	mov	r0, r4
 80087aa:	4629      	mov	r1, r5
 80087ac:	f7f7 fd6e 	bl	800028c <__adddf3>
 80087b0:	4603      	mov	r3, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	f107 0210 	add.w	r2, r7, #16
 80087b8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 80087bc:	4b59      	ldr	r3, [pc, #356]	; (8008924 <scaraFlowDuty+0x710>)
 80087be:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80087c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80087c6:	f997 30d5 	ldrsb.w	r3, [r7, #213]	; 0xd5
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7f7 feaa 	bl	8000524 <__aeabi_i2d>
 80087d0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80087d4:	f7f7 ff10 	bl	80005f8 <__aeabi_dmul>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4620      	mov	r0, r4
 80087de:	4629      	mov	r1, r5
 80087e0:	f7f7 fd54 	bl	800028c <__adddf3>
 80087e4:	4603      	mov	r3, r0
 80087e6:	460c      	mov	r4, r1
 80087e8:	f107 0210 	add.w	r2, r7, #16
 80087ec:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 80087f0:	4b4c      	ldr	r3, [pc, #304]	; (8008924 <scaraFlowDuty+0x710>)
 80087f2:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 80087f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80087fa:	f997 30d4 	ldrsb.w	r3, [r7, #212]	; 0xd4
 80087fe:	4618      	mov	r0, r3
 8008800:	f7f7 fe90 	bl	8000524 <__aeabi_i2d>
 8008804:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8008808:	f7f7 fef6 	bl	80005f8 <__aeabi_dmul>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	4620      	mov	r0, r4
 8008812:	4629      	mov	r1, r5
 8008814:	f7f7 fd3a 	bl	800028c <__adddf3>
 8008818:	4603      	mov	r3, r0
 800881a:	460c      	mov	r4, r1
 800881c:	f107 0210 	add.w	r2, r7, #16
 8008820:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8008824:	f107 0210 	add.w	r2, r7, #16
 8008828:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800882c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8008830:	f107 0210 	add.w	r2, r7, #16
 8008834:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8008838:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800883c:	f107 0210 	add.w	r2, r7, #16
 8008840:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8008844:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8008848:	f107 0210 	add.w	r2, r7, #16
 800884c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8008850:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 8008854:	f107 0210 	add.w	r2, r7, #16
 8008858:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800885c:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 8008860:	f107 0210 	add.w	r2, r7, #16
 8008864:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8008868:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 800886c:	f107 0210 	add.w	r2, r7, #16
 8008870:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8008874:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 8008878:	f107 0210 	add.w	r2, r7, #16
 800887c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8008880:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 8008884:	4b27      	ldr	r3, [pc, #156]	; (8008924 <scaraFlowDuty+0x710>)
 8008886:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800888a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800888e:	f107 0210 	add.w	r2, r7, #16
 8008892:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8008896:	f107 0210 	add.w	r2, r7, #16
 800889a:	f107 0308 	add.w	r3, r7, #8
 800889e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80088a2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 80088a6:	f107 0310 	add.w	r3, r7, #16
 80088aa:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80088ae:	f107 0310 	add.w	r3, r7, #16
 80088b2:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80088b6:	f107 0310 	add.w	r3, r7, #16
 80088ba:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 80088be:	f107 0310 	add.w	r3, r7, #16
 80088c2:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 80088c6:	eeb0 3a44 	vmov.f32	s6, s8
 80088ca:	eef0 3a64 	vmov.f32	s7, s9
 80088ce:	eeb0 2a45 	vmov.f32	s4, s10
 80088d2:	eef0 2a65 	vmov.f32	s5, s11
 80088d6:	eeb0 1a46 	vmov.f32	s2, s12
 80088da:	eef0 1a66 	vmov.f32	s3, s13
 80088de:	eeb0 0a47 	vmov.f32	s0, s14
 80088e2:	eef0 0a67 	vmov.f32	s1, s15
 80088e6:	f001 fb5f 	bl	8009fa8 <scaraCheckWorkSpace4>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <scaraFlowDuty+0x6e0>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80088f0:	2307      	movs	r3, #7
 80088f2:	e00e      	b.n	8008912 <scaraFlowDuty+0x6fe>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80088f4:	f107 0110 	add.w	r1, r7, #16
 80088f8:	1d3b      	adds	r3, r7, #4
 80088fa:	22c0      	movs	r2, #192	; 0xc0
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	f00d f8f5 	bl	8015aec <memcpy>
		}
		kinematicForward(pos_Next);
 8008902:	1d3b      	adds	r3, r7, #4
 8008904:	6818      	ldr	r0, [r3, #0]
 8008906:	f7fa fefb 	bl	8003700 <kinematicForward>
 800890a:	e001      	b.n	8008910 <scaraFlowDuty+0x6fc>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800890c:	2302      	movs	r3, #2
 800890e:	e000      	b.n	8008912 <scaraFlowDuty+0x6fe>
	}

	return SCARA_STATUS_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8008918:	46bd      	mov	sp, r7
 800891a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800891e:	b002      	add	sp, #8
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20004f28 	.word	0x20004f28

08008928 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8008928:	b5b0      	push	{r4, r5, r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800893a:	a33d      	add	r3, pc, #244	; (adr r3, 8008a30 <scaraFlowLine+0x108>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f8 f8ea 	bl	8000b18 <__aeabi_dcmpgt>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d05a      	beq.n	8008a00 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800895a:	f7f7 fe4d 	bl	80005f8 <__aeabi_dmul>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4610      	mov	r0, r2
 8008964:	4619      	mov	r1, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800896c:	f7f7 ff6e 	bl	800084c <__aeabi_ddiv>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4620      	mov	r0, r4
 8008976:	4629      	mov	r1, r5
 8008978:	f7f7 fc88 	bl	800028c <__adddf3>
 800897c:	4603      	mov	r3, r0
 800897e:	460c      	mov	r4, r1
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008996:	f7f7 fe2f 	bl	80005f8 <__aeabi_dmul>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4610      	mov	r0, r2
 80089a0:	4619      	mov	r1, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80089a8:	f7f7 ff50 	bl	800084c <__aeabi_ddiv>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4620      	mov	r0, r4
 80089b2:	4629      	mov	r1, r5
 80089b4:	f7f7 fc6a 	bl	800028c <__adddf3>
 80089b8:	4603      	mov	r3, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80089ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d2:	f7f7 fe11 	bl	80005f8 <__aeabi_dmul>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4610      	mov	r0, r2
 80089dc:	4619      	mov	r1, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80089e4:	f7f7 ff32 	bl	800084c <__aeabi_ddiv>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4620      	mov	r0, r4
 80089ee:	4629      	mov	r1, r5
 80089f0:	f7f7 fc4c 	bl	800028c <__adddf3>
 80089f4:	4603      	mov	r3, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 80089fe:	e011      	b.n	8008a24 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	47ae147b 	.word	0x47ae147b
 8008a34:	3f847ae1 	.word	0x3f847ae1

08008a38 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8008a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a3c:	b086      	sub	sp, #24
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	60f8      	str	r0, [r7, #12]
 8008a42:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4623      	mov	r3, r4
 8008a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a54:	f7f7 fefa 	bl	800084c <__aeabi_ddiv>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f993 3000 	ldrsb.w	r3, [r3]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7f7 fd53 	bl	8000524 <__aeabi_i2d>
 8008a7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008a82:	f7f7 fdb9 	bl	80005f8 <__aeabi_dmul>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4650      	mov	r0, sl
 8008a8c:	4659      	mov	r1, fp
 8008a8e:	f7f7 fbfd 	bl	800028c <__adddf3>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	ec43 2b17 	vmov	d7, r2, r3
 8008a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8008a9e:	eef0 0a67 	vmov.f32	s1, s15
 8008aa2:	f010 fe11 	bl	80196c8 <cos>
 8008aa6:	ec53 2b10 	vmov	r2, r3, d0
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	f7f7 fda3 	bl	80005f8 <__aeabi_dmul>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7f7 fbe7 	bl	800028c <__adddf3>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f993 3000 	ldrsb.w	r3, [r3]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7f7 fd1f 	bl	8000524 <__aeabi_i2d>
 8008ae6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008aea:	f7f7 fd85 	bl	80005f8 <__aeabi_dmul>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4650      	mov	r0, sl
 8008af4:	4659      	mov	r1, fp
 8008af6:	f7f7 fbc9 	bl	800028c <__adddf3>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	ec43 2b17 	vmov	d7, r2, r3
 8008b02:	eeb0 0a47 	vmov.f32	s0, s14
 8008b06:	eef0 0a67 	vmov.f32	s1, s15
 8008b0a:	f010 fe6d 	bl	80197e8 <sin>
 8008b0e:	ec53 2b10 	vmov	r2, r3, d0
 8008b12:	4640      	mov	r0, r8
 8008b14:	4649      	mov	r1, r9
 8008b16:	f7f7 fd6f 	bl	80005f8 <__aeabi_dmul>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4620      	mov	r0, r4
 8008b20:	4629      	mov	r1, r5
 8008b22:	f7f7 fbb3 	bl	800028c <__adddf3>
 8008b26:	4603      	mov	r3, r0
 8008b28:	460c      	mov	r4, r1
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b48 <scaraFlowLSPB1>:
SCARA_StatusTypeDef	scaraFlowLSPB1	(Trajectory_LSPB_TypeDef *lspb, double time){
 8008b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b4c:	b08b      	sub	sp, #44	; 0x2c
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008b5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008b66:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008b70:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008b74:	f04f 0200 	mov.w	r2, #0
 8008b78:	f04f 0300 	mov.w	r3, #0
 8008b7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b80:	f7f7 ffc0 	bl	8000b04 <__aeabi_dcmpge>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d05b      	beq.n	8008c42 <scaraFlowLSPB1+0xfa>
 8008b8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b92:	f7f7 ffad 	bl	8000af0 <__aeabi_dcmple>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d052      	beq.n	8008c42 <scaraFlowLSPB1+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bb8:	f7f7 fd1e 	bl	80005f8 <__aeabi_dmul>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	f7f7 fb62 	bl	800028c <__adddf3>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008be2:	f7f7 fd09 	bl	80005f8 <__aeabi_dmul>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4620      	mov	r0, r4
 8008bec:	4629      	mov	r1, r5
 8008bee:	f7f7 fb4d 	bl	800028c <__adddf3>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	4625      	mov	r5, r4
 8008bf8:	461c      	mov	r4, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008c00:	f04f 0200 	mov.w	r2, #0
 8008c04:	4b9e      	ldr	r3, [pc, #632]	; (8008e80 <scaraFlowLSPB1+0x338>)
 8008c06:	f7f7 fcf7 	bl	80005f8 <__aeabi_dmul>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c16:	f7f7 fcef 	bl	80005f8 <__aeabi_dmul>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	4610      	mov	r0, r2
 8008c20:	4619      	mov	r1, r3
 8008c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c26:	f7f7 fce7 	bl	80005f8 <__aeabi_dmul>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4629      	mov	r1, r5
 8008c32:	f7f7 fb2b 	bl	800028c <__adddf3>
 8008c36:	4603      	mov	r3, r0
 8008c38:	460c      	mov	r4, r1
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008c40:	e117      	b.n	8008e72 <scaraFlowLSPB1+0x32a>
	// Constant velocity
	} else if (ta <= time && time <= td) {
 8008c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008c4a:	f7f7 ff51 	bl	8000af0 <__aeabi_dcmple>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d056      	beq.n	8008d02 <scaraFlowLSPB1+0x1ba>
 8008c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c5c:	f7f7 ff48 	bl	8000af0 <__aeabi_dcmple>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d04d      	beq.n	8008d02 <scaraFlowLSPB1+0x1ba>
		lspb->a_current		=	0;
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	f04f 0300 	mov.w	r3, #0
 8008c6c:	f04f 0400 	mov.w	r4, #0
 8008c70:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta*0.5 + lspb->v_design*(time - ta*0.5);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008c8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c90:	f7f7 fcb2 	bl	80005f8 <__aeabi_dmul>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	f04f 0200 	mov.w	r2, #0
 8008ca0:	4b77      	ldr	r3, [pc, #476]	; (8008e80 <scaraFlowLSPB1+0x338>)
 8008ca2:	f7f7 fca9 	bl	80005f8 <__aeabi_dmul>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4620      	mov	r0, r4
 8008cac:	4629      	mov	r1, r5
 8008cae:	f7f7 faed 	bl	800028c <__adddf3>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	4698      	mov	r8, r3
 8008cb8:	46a1      	mov	r9, r4
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008cc0:	f04f 0200 	mov.w	r2, #0
 8008cc4:	4b6e      	ldr	r3, [pc, #440]	; (8008e80 <scaraFlowLSPB1+0x338>)
 8008cc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008cca:	f7f7 fc95 	bl	80005f8 <__aeabi_dmul>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cd6:	f7f7 fad7 	bl	8000288 <__aeabi_dsub>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4620      	mov	r0, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	f7f7 fc89 	bl	80005f8 <__aeabi_dmul>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	460c      	mov	r4, r1
 8008cea:	461a      	mov	r2, r3
 8008cec:	4623      	mov	r3, r4
 8008cee:	4640      	mov	r0, r8
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	f7f7 facb 	bl	800028c <__adddf3>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008d00:	e0b7      	b.n	8008e72 <scaraFlowLSPB1+0x32a>
	// Decelerate
	} else if (td <= time && time <= tf) {
 8008d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d0a:	f7f7 fef1 	bl	8000af0 <__aeabi_dcmple>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 809a 	beq.w	8008e4a <scaraFlowLSPB1+0x302>
 8008d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d1e:	f7f7 fee7 	bl	8000af0 <__aeabi_dcmple>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 8090 	beq.w	8008e4a <scaraFlowLSPB1+0x302>
		lspb->a_current		=	-lspb->a_design;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008d30:	4614      	mov	r4, r2
 8008d32:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v_design + lspb->a_design*(td - time);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d50:	f7f7 fa9a 	bl	8000288 <__aeabi_dsub>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4640      	mov	r0, r8
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	f7f7 fc4c 	bl	80005f8 <__aeabi_dmul>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4620      	mov	r0, r4
 8008d66:	4629      	mov	r1, r5
 8008d68:	f7f7 fa90 	bl	800028c <__adddf3>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	460c      	mov	r4, r1
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8008d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d8a:	f7f7 fa7d 	bl	8000288 <__aeabi_dsub>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4640      	mov	r0, r8
 8008d94:	4649      	mov	r1, r9
 8008d96:	f7f7 fc2f 	bl	80005f8 <__aeabi_dmul>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4620      	mov	r0, r4
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7f7 fa71 	bl	8000288 <__aeabi_dsub>
 8008da6:	4603      	mov	r3, r0
 8008da8:	460c      	mov	r4, r1
 8008daa:	461d      	mov	r5, r3
 8008dac:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v0)*(tf - time)*(tf - time)/(2*ta);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	4623      	mov	r3, r4
 8008dbe:	f7f7 fa63 	bl	8000288 <__aeabi_dsub>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	4698      	mov	r8, r3
 8008dc8:	46a1      	mov	r9, r4
 8008dca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008dd2:	f7f7 fa59 	bl	8000288 <__aeabi_dsub>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	460c      	mov	r4, r1
 8008dda:	461a      	mov	r2, r3
 8008ddc:	4623      	mov	r3, r4
 8008dde:	4640      	mov	r0, r8
 8008de0:	4649      	mov	r1, r9
 8008de2:	f7f7 fc09 	bl	80005f8 <__aeabi_dmul>
 8008de6:	4603      	mov	r3, r0
 8008de8:	460c      	mov	r4, r1
 8008dea:	4698      	mov	r8, r3
 8008dec:	46a1      	mov	r9, r4
 8008dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008df6:	f7f7 fa47 	bl	8000288 <__aeabi_dsub>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	461a      	mov	r2, r3
 8008e00:	4623      	mov	r3, r4
 8008e02:	4640      	mov	r0, r8
 8008e04:	4649      	mov	r1, r9
 8008e06:	f7f7 fbf7 	bl	80005f8 <__aeabi_dmul>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	4698      	mov	r8, r3
 8008e10:	46a1      	mov	r9, r4
 8008e12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	f7f7 fa37 	bl	800028c <__adddf3>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	460c      	mov	r4, r1
 8008e22:	461a      	mov	r2, r3
 8008e24:	4623      	mov	r3, r4
 8008e26:	4640      	mov	r0, r8
 8008e28:	4649      	mov	r1, r9
 8008e2a:	f7f7 fd0f 	bl	800084c <__aeabi_ddiv>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	460c      	mov	r4, r1
 8008e32:	461a      	mov	r2, r3
 8008e34:	4623      	mov	r3, r4
 8008e36:	4628      	mov	r0, r5
 8008e38:	4631      	mov	r1, r6
 8008e3a:	f7f7 fa25 	bl	8000288 <__aeabi_dsub>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v0*(tf - time)
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008e48:	e013      	b.n	8008e72 <scaraFlowLSPB1+0x32a>
	} else {
		lspb->a_current 	=	0;
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	f04f 0300 	mov.w	r3, #0
 8008e50:	f04f 0400 	mov.w	r4, #0
 8008e54:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	f04f 0300 	mov.w	r3, #0
 8008e5e:	f04f 0400 	mov.w	r4, #0
 8008e62:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	372c      	adds	r7, #44	; 0x2c
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e7e:	bf00      	nop
 8008e80:	3fe00000 	.word	0x3fe00000

08008e84 <scaraFlowLSPB>:
/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8008e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e88:	b08b      	sub	sp, #44	; 0x2c
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008e98:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008ea2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8008eac:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ebc:	f7f7 fe22 	bl	8000b04 <__aeabi_dcmpge>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d05b      	beq.n	8008f7e <scaraFlowLSPB+0xfa>
 8008ec6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ece:	f7f7 fe0f 	bl	8000af0 <__aeabi_dcmple>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d052      	beq.n	8008f7e <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef4:	f7f7 fb80 	bl	80005f8 <__aeabi_dmul>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4620      	mov	r0, r4
 8008efe:	4629      	mov	r1, r5
 8008f00:	f7f7 f9c4 	bl	800028c <__adddf3>
 8008f04:	4603      	mov	r3, r0
 8008f06:	460c      	mov	r4, r1
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f1e:	f7f7 fb6b 	bl	80005f8 <__aeabi_dmul>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4620      	mov	r0, r4
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f7f7 f9af 	bl	800028c <__adddf3>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	460c      	mov	r4, r1
 8008f32:	4625      	mov	r5, r4
 8008f34:	461c      	mov	r4, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	4ba5      	ldr	r3, [pc, #660]	; (80091d8 <scaraFlowLSPB+0x354>)
 8008f42:	f7f7 fb59 	bl	80005f8 <__aeabi_dmul>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f52:	f7f7 fb51 	bl	80005f8 <__aeabi_dmul>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f62:	f7f7 fb49 	bl	80005f8 <__aeabi_dmul>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	f7f7 f98d 	bl	800028c <__adddf3>
 8008f72:	4603      	mov	r3, r0
 8008f74:	460c      	mov	r4, r1
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008f7c:	e125      	b.n	80091ca <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 8008f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f86:	f7f7 fdb3 	bl	8000af0 <__aeabi_dcmple>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d05e      	beq.n	800904e <scaraFlowLSPB+0x1ca>
 8008f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f98:	f7f7 f976 	bl	8000288 <__aeabi_dsub>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fa4:	f7f7 fda4 	bl	8000af0 <__aeabi_dcmple>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d04f      	beq.n	800904e <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	f04f 0300 	mov.w	r3, #0
 8008fb4:	f04f 0400 	mov.w	r4, #0
 8008fb8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008fd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008fd8:	f7f7 fb0e 	bl	80005f8 <__aeabi_dmul>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008fec:	f7f7 fc2e 	bl	800084c <__aeabi_ddiv>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	f7f7 f948 	bl	800028c <__adddf3>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	460c      	mov	r4, r1
 8009000:	4698      	mov	r8, r3
 8009002:	46a1      	mov	r9, r4
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800900a:	f04f 0200 	mov.w	r2, #0
 800900e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009012:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009016:	f7f7 fc19 	bl	800084c <__aeabi_ddiv>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009022:	f7f7 f931 	bl	8000288 <__aeabi_dsub>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4620      	mov	r0, r4
 800902c:	4629      	mov	r1, r5
 800902e:	f7f7 fae3 	bl	80005f8 <__aeabi_dmul>
 8009032:	4603      	mov	r3, r0
 8009034:	460c      	mov	r4, r1
 8009036:	461a      	mov	r2, r3
 8009038:	4623      	mov	r3, r4
 800903a:	4640      	mov	r0, r8
 800903c:	4649      	mov	r1, r9
 800903e:	f7f7 f925 	bl	800028c <__adddf3>
 8009042:	4603      	mov	r3, r0
 8009044:	460c      	mov	r4, r1
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 800904c:	e0bd      	b.n	80091ca <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 800904e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009052:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009056:	f7f7 f917 	bl	8000288 <__aeabi_dsub>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009062:	f7f7 fd4f 	bl	8000b04 <__aeabi_dcmpge>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 809a 	beq.w	80091a2 <scaraFlowLSPB+0x31e>
 800906e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009072:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009076:	f7f7 fd3b 	bl	8000af0 <__aeabi_dcmple>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 8090 	beq.w	80091a2 <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8009088:	4614      	mov	r4, r2
 800908a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80090a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090a8:	f7f7 f8ee 	bl	8000288 <__aeabi_dsub>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4640      	mov	r0, r8
 80090b2:	4649      	mov	r1, r9
 80090b4:	f7f7 faa0 	bl	80005f8 <__aeabi_dmul>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4620      	mov	r0, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	f7f7 f8e4 	bl	800028c <__adddf3>
 80090c4:	4603      	mov	r3, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80090da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090e2:	f7f7 f8d1 	bl	8000288 <__aeabi_dsub>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4640      	mov	r0, r8
 80090ec:	4649      	mov	r1, r9
 80090ee:	f7f7 fa83 	bl	80005f8 <__aeabi_dmul>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4620      	mov	r0, r4
 80090f8:	4629      	mov	r1, r5
 80090fa:	f7f7 f8c5 	bl	8000288 <__aeabi_dsub>
 80090fe:	4603      	mov	r3, r0
 8009100:	460c      	mov	r4, r1
 8009102:	461d      	mov	r5, r3
 8009104:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8009112:	461a      	mov	r2, r3
 8009114:	4623      	mov	r3, r4
 8009116:	f7f7 f8b7 	bl	8000288 <__aeabi_dsub>
 800911a:	4603      	mov	r3, r0
 800911c:	460c      	mov	r4, r1
 800911e:	4698      	mov	r8, r3
 8009120:	46a1      	mov	r9, r4
 8009122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009126:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800912a:	f7f7 f8ad 	bl	8000288 <__aeabi_dsub>
 800912e:	4603      	mov	r3, r0
 8009130:	460c      	mov	r4, r1
 8009132:	461a      	mov	r2, r3
 8009134:	4623      	mov	r3, r4
 8009136:	4640      	mov	r0, r8
 8009138:	4649      	mov	r1, r9
 800913a:	f7f7 fa5d 	bl	80005f8 <__aeabi_dmul>
 800913e:	4603      	mov	r3, r0
 8009140:	460c      	mov	r4, r1
 8009142:	4698      	mov	r8, r3
 8009144:	46a1      	mov	r9, r4
 8009146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800914a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800914e:	f7f7 f89b 	bl	8000288 <__aeabi_dsub>
 8009152:	4603      	mov	r3, r0
 8009154:	460c      	mov	r4, r1
 8009156:	461a      	mov	r2, r3
 8009158:	4623      	mov	r3, r4
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f7f7 fa4b 	bl	80005f8 <__aeabi_dmul>
 8009162:	4603      	mov	r3, r0
 8009164:	460c      	mov	r4, r1
 8009166:	4698      	mov	r8, r3
 8009168:	46a1      	mov	r9, r4
 800916a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	f7f7 f88b 	bl	800028c <__adddf3>
 8009176:	4603      	mov	r3, r0
 8009178:	460c      	mov	r4, r1
 800917a:	461a      	mov	r2, r3
 800917c:	4623      	mov	r3, r4
 800917e:	4640      	mov	r0, r8
 8009180:	4649      	mov	r1, r9
 8009182:	f7f7 fb63 	bl	800084c <__aeabi_ddiv>
 8009186:	4603      	mov	r3, r0
 8009188:	460c      	mov	r4, r1
 800918a:	461a      	mov	r2, r3
 800918c:	4623      	mov	r3, r4
 800918e:	4628      	mov	r0, r5
 8009190:	4631      	mov	r1, r6
 8009192:	f7f7 f879 	bl	8000288 <__aeabi_dsub>
 8009196:	4603      	mov	r3, r0
 8009198:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80091a0:	e013      	b.n	80091ca <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	f04f 0300 	mov.w	r3, #0
 80091a8:	f04f 0400 	mov.w	r4, #0
 80091ac:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	f04f 0300 	mov.w	r3, #0
 80091b6:	f04f 0400 	mov.w	r4, #0
 80091ba:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	372c      	adds	r7, #44	; 0x2c
 80091d0:	46bd      	mov	sp, r7
 80091d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091d6:	bf00      	nop
 80091d8:	3fe00000 	.word	0x3fe00000

080091dc <scaraFLowScurve>:


/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 80091dc:	b5b0      	push	{r4, r5, r7, lr}
 80091de:	b092      	sub	sp, #72	; 0x48
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6278      	str	r0, [r7, #36]	; 0x24
 80091e4:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80091ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80091f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009202:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800920c:	2b04      	cmp	r3, #4
 800920e:	f040 8321 	bne.w	8009854 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8009212:	f04f 0200 	mov.w	r2, #0
 8009216:	f04f 0300 	mov.w	r3, #0
 800921a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800921e:	f7f7 fc71 	bl	8000b04 <__aeabi_dcmpge>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d059      	beq.n	80092dc <scaraFLowScurve+0x100>
 8009228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800922c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009230:	f7f7 fc54 	bl	8000adc <__aeabi_dcmplt>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d050      	beq.n	80092dc <scaraFLowScurve+0x100>
			 t = time;
 800923a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800923e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8009242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009246:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800924a:	f7f7 f9d5 	bl	80005f8 <__aeabi_dmul>
 800924e:	4603      	mov	r3, r0
 8009250:	460c      	mov	r4, r1
 8009252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009254:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8009258:	f04f 0200 	mov.w	r2, #0
 800925c:	4b93      	ldr	r3, [pc, #588]	; (80094ac <scaraFLowScurve+0x2d0>)
 800925e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009262:	f7f7 f9c9 	bl	80005f8 <__aeabi_dmul>
 8009266:	4603      	mov	r3, r0
 8009268:	460c      	mov	r4, r1
 800926a:	4618      	mov	r0, r3
 800926c:	4621      	mov	r1, r4
 800926e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009272:	f7f7 f9c1 	bl	80005f8 <__aeabi_dmul>
 8009276:	4603      	mov	r3, r0
 8009278:	460c      	mov	r4, r1
 800927a:	4618      	mov	r0, r3
 800927c:	4621      	mov	r1, r4
 800927e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009282:	f7f7 f9b9 	bl	80005f8 <__aeabi_dmul>
 8009286:	4603      	mov	r3, r0
 8009288:	460c      	mov	r4, r1
 800928a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8009290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009294:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009298:	f7f7 f9ae 	bl	80005f8 <__aeabi_dmul>
 800929c:	4603      	mov	r3, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	4618      	mov	r0, r3
 80092a2:	4621      	mov	r1, r4
 80092a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092a8:	f7f7 f9a6 	bl	80005f8 <__aeabi_dmul>
 80092ac:	4603      	mov	r3, r0
 80092ae:	460c      	mov	r4, r1
 80092b0:	4618      	mov	r0, r3
 80092b2:	4621      	mov	r1, r4
 80092b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092b8:	f7f7 f99e 	bl	80005f8 <__aeabi_dmul>
 80092bc:	4603      	mov	r3, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	4618      	mov	r0, r3
 80092c2:	4621      	mov	r1, r4
 80092c4:	f04f 0200 	mov.w	r2, #0
 80092c8:	4b79      	ldr	r3, [pc, #484]	; (80094b0 <scaraFLowScurve+0x2d4>)
 80092ca:	f7f7 fabf 	bl	800084c <__aeabi_ddiv>
 80092ce:	4603      	mov	r3, r0
 80092d0:	460c      	mov	r4, r1
 80092d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80092d8:	f000 be56 	b.w	8009f88 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 80092dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80092e4:	f7f7 fc04 	bl	8000af0 <__aeabi_dcmple>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 80e2 	beq.w	80094b4 <scaraFLowScurve+0x2d8>
 80092f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	f7f6 ffc8 	bl	800028c <__adddf3>
 80092fc:	4603      	mov	r3, r0
 80092fe:	460c      	mov	r4, r1
 8009300:	461a      	mov	r2, r3
 8009302:	4623      	mov	r3, r4
 8009304:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009308:	f7f7 fbe8 	bl	8000adc <__aeabi_dcmplt>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 80d0 	beq.w	80094b4 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8009314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800931c:	f7f6 ffb4 	bl	8000288 <__aeabi_dsub>
 8009320:	4603      	mov	r3, r0
 8009322:	460c      	mov	r4, r1
 8009324:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800932c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009330:	f7f7 f962 	bl	80005f8 <__aeabi_dmul>
 8009334:	4603      	mov	r3, r0
 8009336:	460c      	mov	r4, r1
 8009338:	4625      	mov	r5, r4
 800933a:	461c      	mov	r4, r3
 800933c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009340:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009344:	f7f7 f958 	bl	80005f8 <__aeabi_dmul>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	4620      	mov	r0, r4
 800934e:	4629      	mov	r1, r5
 8009350:	f7f6 ff9a 	bl	8000288 <__aeabi_dsub>
 8009354:	4603      	mov	r3, r0
 8009356:	460c      	mov	r4, r1
 8009358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935a:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8009364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009368:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800936c:	f7f7 f944 	bl	80005f8 <__aeabi_dmul>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4610      	mov	r0, r2
 8009376:	4619      	mov	r1, r3
 8009378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800937c:	f7f7 f93c 	bl	80005f8 <__aeabi_dmul>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4620      	mov	r0, r4
 8009386:	4629      	mov	r1, r5
 8009388:	f7f6 ff80 	bl	800028c <__adddf3>
 800938c:	4603      	mov	r3, r0
 800938e:	460c      	mov	r4, r1
 8009390:	4625      	mov	r5, r4
 8009392:	461c      	mov	r4, r3
 8009394:	f04f 0200 	mov.w	r2, #0
 8009398:	4b44      	ldr	r3, [pc, #272]	; (80094ac <scaraFLowScurve+0x2d0>)
 800939a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800939e:	f7f7 f92b 	bl	80005f8 <__aeabi_dmul>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4610      	mov	r0, r2
 80093a8:	4619      	mov	r1, r3
 80093aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093ae:	f7f7 f923 	bl	80005f8 <__aeabi_dmul>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4610      	mov	r0, r2
 80093b8:	4619      	mov	r1, r3
 80093ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093be:	f7f7 f91b 	bl	80005f8 <__aeabi_dmul>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4620      	mov	r0, r4
 80093c8:	4629      	mov	r1, r5
 80093ca:	f7f6 ff5d 	bl	8000288 <__aeabi_dsub>
 80093ce:	4603      	mov	r3, r0
 80093d0:	460c      	mov	r4, r1
 80093d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d4:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80093e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093e8:	f7f7 f906 	bl	80005f8 <__aeabi_dmul>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4620      	mov	r0, r4
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7f6 ff4a 	bl	800028c <__adddf3>
 80093f8:	4603      	mov	r3, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	4625      	mov	r5, r4
 80093fe:	461c      	mov	r4, r3
 8009400:	f04f 0200 	mov.w	r2, #0
 8009404:	4b29      	ldr	r3, [pc, #164]	; (80094ac <scaraFLowScurve+0x2d0>)
 8009406:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800940a:	f7f7 f8f5 	bl	80005f8 <__aeabi_dmul>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4610      	mov	r0, r2
 8009414:	4619      	mov	r1, r3
 8009416:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800941a:	f7f7 f8ed 	bl	80005f8 <__aeabi_dmul>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4610      	mov	r0, r2
 8009424:	4619      	mov	r1, r3
 8009426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800942a:	f7f7 f8e5 	bl	80005f8 <__aeabi_dmul>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4610      	mov	r0, r2
 8009434:	4619      	mov	r1, r3
 8009436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800943a:	f7f7 f8dd 	bl	80005f8 <__aeabi_dmul>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4620      	mov	r0, r4
 8009444:	4629      	mov	r1, r5
 8009446:	f7f6 ff21 	bl	800028c <__adddf3>
 800944a:	4603      	mov	r3, r0
 800944c:	460c      	mov	r4, r1
 800944e:	4625      	mov	r5, r4
 8009450:	461c      	mov	r4, r3
 8009452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009456:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800945a:	f7f7 f8cd 	bl	80005f8 <__aeabi_dmul>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4610      	mov	r0, r2
 8009464:	4619      	mov	r1, r3
 8009466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800946a:	f7f7 f8c5 	bl	80005f8 <__aeabi_dmul>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4610      	mov	r0, r2
 8009474:	4619      	mov	r1, r3
 8009476:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800947a:	f7f7 f8bd 	bl	80005f8 <__aeabi_dmul>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	4610      	mov	r0, r2
 8009484:	4619      	mov	r1, r3
 8009486:	f04f 0200 	mov.w	r2, #0
 800948a:	4b09      	ldr	r3, [pc, #36]	; (80094b0 <scaraFLowScurve+0x2d4>)
 800948c:	f7f7 f9de 	bl	800084c <__aeabi_ddiv>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4620      	mov	r0, r4
 8009496:	4629      	mov	r1, r5
 8009498:	f7f6 fef6 	bl	8000288 <__aeabi_dsub>
 800949c:	4603      	mov	r3, r0
 800949e:	460c      	mov	r4, r1
 80094a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a2:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80094a6:	f000 bd6f 	b.w	8009f88 <scaraFLowScurve+0xdac>
 80094aa:	bf00      	nop
 80094ac:	3fe00000 	.word	0x3fe00000
 80094b0:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 80094b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	f7f6 fee6 	bl	800028c <__adddf3>
 80094c0:	4603      	mov	r3, r0
 80094c2:	460c      	mov	r4, r1
 80094c4:	461a      	mov	r2, r3
 80094c6:	4623      	mov	r3, r4
 80094c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80094cc:	f7f7 fb1a 	bl	8000b04 <__aeabi_dcmpge>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 80a2 	beq.w	800961c <scaraFLowScurve+0x440>
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	4b4c      	ldr	r3, [pc, #304]	; (8009610 <scaraFLowScurve+0x434>)
 80094de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80094e2:	f7f7 f889 	bl	80005f8 <__aeabi_dmul>
 80094e6:	4603      	mov	r3, r0
 80094e8:	460c      	mov	r4, r1
 80094ea:	461a      	mov	r2, r3
 80094ec:	4623      	mov	r3, r4
 80094ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80094f2:	f7f7 faf3 	bl	8000adc <__aeabi_dcmplt>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 808f 	beq.w	800961c <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 80094fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	f7f6 fec1 	bl	800028c <__adddf3>
 800950a:	4603      	mov	r3, r0
 800950c:	460c      	mov	r4, r1
 800950e:	461a      	mov	r2, r3
 8009510:	4623      	mov	r3, r4
 8009512:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009516:	f7f6 feb7 	bl	8000288 <__aeabi_dsub>
 800951a:	4603      	mov	r3, r0
 800951c:	460c      	mov	r4, r1
 800951e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8009522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009524:	613b      	str	r3, [r7, #16]
 8009526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009528:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009532:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009536:	f7f7 f85f 	bl	80005f8 <__aeabi_dmul>
 800953a:	4603      	mov	r3, r0
 800953c:	460c      	mov	r4, r1
 800953e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009540:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 800954a:	f04f 0200 	mov.w	r2, #0
 800954e:	4b31      	ldr	r3, [pc, #196]	; (8009614 <scaraFLowScurve+0x438>)
 8009550:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009554:	f7f7 f850 	bl	80005f8 <__aeabi_dmul>
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4610      	mov	r0, r2
 800955e:	4619      	mov	r1, r3
 8009560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009564:	f7f7 f848 	bl	80005f8 <__aeabi_dmul>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4610      	mov	r0, r2
 800956e:	4619      	mov	r1, r3
 8009570:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009574:	f7f7 f840 	bl	80005f8 <__aeabi_dmul>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4620      	mov	r0, r4
 800957e:	4629      	mov	r1, r5
 8009580:	f7f6 fe82 	bl	8000288 <__aeabi_dsub>
 8009584:	4603      	mov	r3, r0
 8009586:	460c      	mov	r4, r1
 8009588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800958a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800959a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800959e:	f7f7 f82b 	bl	80005f8 <__aeabi_dmul>
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	4620      	mov	r0, r4
 80095a8:	4629      	mov	r1, r5
 80095aa:	f7f6 fe6f 	bl	800028c <__adddf3>
 80095ae:	4603      	mov	r3, r0
 80095b0:	460c      	mov	r4, r1
 80095b2:	4625      	mov	r5, r4
 80095b4:	461c      	mov	r4, r3
 80095b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80095be:	f7f7 f81b 	bl	80005f8 <__aeabi_dmul>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	4610      	mov	r0, r2
 80095c8:	4619      	mov	r1, r3
 80095ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095ce:	f7f7 f813 	bl	80005f8 <__aeabi_dmul>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4610      	mov	r0, r2
 80095d8:	4619      	mov	r1, r3
 80095da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095de:	f7f7 f80b 	bl	80005f8 <__aeabi_dmul>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	4610      	mov	r0, r2
 80095e8:	4619      	mov	r1, r3
 80095ea:	f04f 0200 	mov.w	r2, #0
 80095ee:	4b0a      	ldr	r3, [pc, #40]	; (8009618 <scaraFLowScurve+0x43c>)
 80095f0:	f7f7 f92c 	bl	800084c <__aeabi_ddiv>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4620      	mov	r0, r4
 80095fa:	4629      	mov	r1, r5
 80095fc:	f7f6 fe44 	bl	8000288 <__aeabi_dsub>
 8009600:	4603      	mov	r3, r0
 8009602:	460c      	mov	r4, r1
 8009604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009606:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800960a:	f000 bcbd 	b.w	8009f88 <scaraFLowScurve+0xdac>
 800960e:	bf00      	nop
 8009610:	40080000 	.word	0x40080000
 8009614:	3fe00000 	.word	0x3fe00000
 8009618:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 800961c:	f04f 0200 	mov.w	r2, #0
 8009620:	4b88      	ldr	r3, [pc, #544]	; (8009844 <scaraFLowScurve+0x668>)
 8009622:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009626:	f7f6 ffe7 	bl	80005f8 <__aeabi_dmul>
 800962a:	4603      	mov	r3, r0
 800962c:	460c      	mov	r4, r1
 800962e:	461a      	mov	r2, r3
 8009630:	4623      	mov	r3, r4
 8009632:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009636:	f7f7 fa65 	bl	8000b04 <__aeabi_dcmpge>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 80ec 	beq.w	800981a <scaraFLowScurve+0x63e>
 8009642:	f04f 0200 	mov.w	r2, #0
 8009646:	4b80      	ldr	r3, [pc, #512]	; (8009848 <scaraFLowScurve+0x66c>)
 8009648:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800964c:	f7f6 ffd4 	bl	80005f8 <__aeabi_dmul>
 8009650:	4603      	mov	r3, r0
 8009652:	460c      	mov	r4, r1
 8009654:	461a      	mov	r2, r3
 8009656:	4623      	mov	r3, r4
 8009658:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800965c:	f7f7 fa3e 	bl	8000adc <__aeabi_dcmplt>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 80d9 	beq.w	800981a <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 8009668:	f04f 0200 	mov.w	r2, #0
 800966c:	4b75      	ldr	r3, [pc, #468]	; (8009844 <scaraFLowScurve+0x668>)
 800966e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009672:	f7f6 ffc1 	bl	80005f8 <__aeabi_dmul>
 8009676:	4603      	mov	r3, r0
 8009678:	460c      	mov	r4, r1
 800967a:	461a      	mov	r2, r3
 800967c:	4623      	mov	r3, r4
 800967e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009682:	f7f6 fe01 	bl	8000288 <__aeabi_dsub>
 8009686:	4603      	mov	r3, r0
 8009688:	460c      	mov	r4, r1
 800968a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800968e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009690:	60bb      	str	r3, [r7, #8]
 8009692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009694:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009698:	60fb      	str	r3, [r7, #12]
 800969a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800969e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096a2:	f7f6 ffa9 	bl	80005f8 <__aeabi_dmul>
 80096a6:	4603      	mov	r3, r0
 80096a8:	460c      	mov	r4, r1
 80096aa:	4625      	mov	r5, r4
 80096ac:	461c      	mov	r4, r3
 80096ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80096b6:	f7f6 ff9f 	bl	80005f8 <__aeabi_dmul>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	4620      	mov	r0, r4
 80096c0:	4629      	mov	r1, r5
 80096c2:	f7f6 fde3 	bl	800028c <__adddf3>
 80096c6:	4603      	mov	r3, r0
 80096c8:	460c      	mov	r4, r1
 80096ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096cc:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80096d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80096de:	f7f6 ff8b 	bl	80005f8 <__aeabi_dmul>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4610      	mov	r0, r2
 80096e8:	4619      	mov	r1, r3
 80096ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096ee:	f7f6 ff83 	bl	80005f8 <__aeabi_dmul>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4620      	mov	r0, r4
 80096f8:	4629      	mov	r1, r5
 80096fa:	f7f6 fdc5 	bl	8000288 <__aeabi_dsub>
 80096fe:	4603      	mov	r3, r0
 8009700:	460c      	mov	r4, r1
 8009702:	4625      	mov	r5, r4
 8009704:	461c      	mov	r4, r3
 8009706:	f04f 0200 	mov.w	r2, #0
 800970a:	4b50      	ldr	r3, [pc, #320]	; (800984c <scaraFLowScurve+0x670>)
 800970c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009710:	f7f6 ff72 	bl	80005f8 <__aeabi_dmul>
 8009714:	4602      	mov	r2, r0
 8009716:	460b      	mov	r3, r1
 8009718:	4610      	mov	r0, r2
 800971a:	4619      	mov	r1, r3
 800971c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009720:	f7f6 ff6a 	bl	80005f8 <__aeabi_dmul>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4610      	mov	r0, r2
 800972a:	4619      	mov	r1, r3
 800972c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009730:	f7f6 ff62 	bl	80005f8 <__aeabi_dmul>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4620      	mov	r0, r4
 800973a:	4629      	mov	r1, r5
 800973c:	f7f6 fda6 	bl	800028c <__adddf3>
 8009740:	4603      	mov	r3, r0
 8009742:	460c      	mov	r4, r1
 8009744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009746:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009756:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800975a:	f7f6 ff4d 	bl	80005f8 <__aeabi_dmul>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	4620      	mov	r0, r4
 8009764:	4629      	mov	r1, r5
 8009766:	f7f6 fd91 	bl	800028c <__adddf3>
 800976a:	4603      	mov	r3, r0
 800976c:	460c      	mov	r4, r1
 800976e:	4625      	mov	r5, r4
 8009770:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 8009772:	f04f 0200 	mov.w	r2, #0
 8009776:	4b35      	ldr	r3, [pc, #212]	; (800984c <scaraFLowScurve+0x670>)
 8009778:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800977c:	f7f6 ff3c 	bl	80005f8 <__aeabi_dmul>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4610      	mov	r0, r2
 8009786:	4619      	mov	r1, r3
 8009788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800978c:	f7f6 ff34 	bl	80005f8 <__aeabi_dmul>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	4610      	mov	r0, r2
 8009796:	4619      	mov	r1, r3
 8009798:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800979c:	f7f6 ff2c 	bl	80005f8 <__aeabi_dmul>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4610      	mov	r0, r2
 80097a6:	4619      	mov	r1, r3
 80097a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097ac:	f7f6 ff24 	bl	80005f8 <__aeabi_dmul>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4620      	mov	r0, r4
 80097b6:	4629      	mov	r1, r5
 80097b8:	f7f6 fd66 	bl	8000288 <__aeabi_dsub>
 80097bc:	4603      	mov	r3, r0
 80097be:	460c      	mov	r4, r1
 80097c0:	4625      	mov	r5, r4
 80097c2:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 80097c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80097cc:	f7f6 ff14 	bl	80005f8 <__aeabi_dmul>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	4610      	mov	r0, r2
 80097d6:	4619      	mov	r1, r3
 80097d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097dc:	f7f6 ff0c 	bl	80005f8 <__aeabi_dmul>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4610      	mov	r0, r2
 80097e6:	4619      	mov	r1, r3
 80097e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097ec:	f7f6 ff04 	bl	80005f8 <__aeabi_dmul>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4610      	mov	r0, r2
 80097f6:	4619      	mov	r1, r3
 80097f8:	f04f 0200 	mov.w	r2, #0
 80097fc:	4b14      	ldr	r3, [pc, #80]	; (8009850 <scaraFLowScurve+0x674>)
 80097fe:	f7f7 f825 	bl	800084c <__aeabi_ddiv>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4620      	mov	r0, r4
 8009808:	4629      	mov	r1, r5
 800980a:	f7f6 fd3f 	bl	800028c <__adddf3>
 800980e:	4603      	mov	r3, r0
 8009810:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8009812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009814:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009818:	e3b6      	b.n	8009f88 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 800981a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981c:	f04f 0300 	mov.w	r3, #0
 8009820:	f04f 0400 	mov.w	r4, #0
 8009824:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8009828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800982a:	f04f 0300 	mov.w	r3, #0
 800982e:	f04f 0400 	mov.w	r4, #0
 8009832:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800983c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800983e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009842:	e3a1      	b.n	8009f88 <scaraFLowScurve+0xdac>
 8009844:	40080000 	.word	0x40080000
 8009848:	40100000 	.word	0x40100000
 800984c:	3fe00000 	.word	0x3fe00000
 8009850:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800985a:	2b05      	cmp	r3, #5
 800985c:	f040 8392 	bne.w	8009f84 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8009860:	f04f 0200 	mov.w	r2, #0
 8009864:	f04f 0300 	mov.w	r3, #0
 8009868:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800986c:	f7f7 f94a 	bl	8000b04 <__aeabi_dcmpge>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d058      	beq.n	8009928 <scaraFLowScurve+0x74c>
 8009876:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800987a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800987e:	f7f7 f92d 	bl	8000adc <__aeabi_dcmplt>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d04f      	beq.n	8009928 <scaraFLowScurve+0x74c>
			 t = time;
 8009888:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800988c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8009890:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009894:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009898:	f7f6 feae 	bl	80005f8 <__aeabi_dmul>
 800989c:	4603      	mov	r3, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80098a6:	f04f 0200 	mov.w	r2, #0
 80098aa:	4b91      	ldr	r3, [pc, #580]	; (8009af0 <scaraFLowScurve+0x914>)
 80098ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098b0:	f7f6 fea2 	bl	80005f8 <__aeabi_dmul>
 80098b4:	4603      	mov	r3, r0
 80098b6:	460c      	mov	r4, r1
 80098b8:	4618      	mov	r0, r3
 80098ba:	4621      	mov	r1, r4
 80098bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098c0:	f7f6 fe9a 	bl	80005f8 <__aeabi_dmul>
 80098c4:	4603      	mov	r3, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	4618      	mov	r0, r3
 80098ca:	4621      	mov	r1, r4
 80098cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098d0:	f7f6 fe92 	bl	80005f8 <__aeabi_dmul>
 80098d4:	4603      	mov	r3, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098da:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80098de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80098e6:	f7f6 fe87 	bl	80005f8 <__aeabi_dmul>
 80098ea:	4603      	mov	r3, r0
 80098ec:	460c      	mov	r4, r1
 80098ee:	4618      	mov	r0, r3
 80098f0:	4621      	mov	r1, r4
 80098f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098f6:	f7f6 fe7f 	bl	80005f8 <__aeabi_dmul>
 80098fa:	4603      	mov	r3, r0
 80098fc:	460c      	mov	r4, r1
 80098fe:	4618      	mov	r0, r3
 8009900:	4621      	mov	r1, r4
 8009902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009906:	f7f6 fe77 	bl	80005f8 <__aeabi_dmul>
 800990a:	4603      	mov	r3, r0
 800990c:	460c      	mov	r4, r1
 800990e:	4618      	mov	r0, r3
 8009910:	4621      	mov	r1, r4
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	4b77      	ldr	r3, [pc, #476]	; (8009af4 <scaraFLowScurve+0x918>)
 8009918:	f7f6 ff98 	bl	800084c <__aeabi_ddiv>
 800991c:	4603      	mov	r3, r0
 800991e:	460c      	mov	r4, r1
 8009920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009922:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009926:	e32f      	b.n	8009f88 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8009928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800992c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009930:	f7f7 f8de 	bl	8000af0 <__aeabi_dcmple>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 80de 	beq.w	8009af8 <scaraFLowScurve+0x91c>
 800993c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	f7f6 fca2 	bl	800028c <__adddf3>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009950:	f7f7 f8c4 	bl	8000adc <__aeabi_dcmplt>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 80ce 	beq.w	8009af8 <scaraFLowScurve+0x91c>
			 t = time - tm;
 800995c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009960:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009964:	f7f6 fc90 	bl	8000288 <__aeabi_dsub>
 8009968:	4603      	mov	r3, r0
 800996a:	460c      	mov	r4, r1
 800996c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8009970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009974:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009978:	f7f6 fe3e 	bl	80005f8 <__aeabi_dmul>
 800997c:	4603      	mov	r3, r0
 800997e:	460c      	mov	r4, r1
 8009980:	4625      	mov	r5, r4
 8009982:	461c      	mov	r4, r3
 8009984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009988:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800998c:	f7f6 fe34 	bl	80005f8 <__aeabi_dmul>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4620      	mov	r0, r4
 8009996:	4629      	mov	r1, r5
 8009998:	f7f6 fc76 	bl	8000288 <__aeabi_dsub>
 800999c:	4603      	mov	r3, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a2:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80099ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099b4:	f7f6 fe20 	bl	80005f8 <__aeabi_dmul>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4610      	mov	r0, r2
 80099be:	4619      	mov	r1, r3
 80099c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099c4:	f7f6 fe18 	bl	80005f8 <__aeabi_dmul>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	f7f6 fc5c 	bl	800028c <__adddf3>
 80099d4:	4603      	mov	r3, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	4625      	mov	r5, r4
 80099da:	461c      	mov	r4, r3
 80099dc:	f04f 0200 	mov.w	r2, #0
 80099e0:	4b43      	ldr	r3, [pc, #268]	; (8009af0 <scaraFLowScurve+0x914>)
 80099e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099e6:	f7f6 fe07 	bl	80005f8 <__aeabi_dmul>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4610      	mov	r0, r2
 80099f0:	4619      	mov	r1, r3
 80099f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099f6:	f7f6 fdff 	bl	80005f8 <__aeabi_dmul>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4610      	mov	r0, r2
 8009a00:	4619      	mov	r1, r3
 8009a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a06:	f7f6 fdf7 	bl	80005f8 <__aeabi_dmul>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4620      	mov	r0, r4
 8009a10:	4629      	mov	r1, r5
 8009a12:	f7f6 fc39 	bl	8000288 <__aeabi_dsub>
 8009a16:	4603      	mov	r3, r0
 8009a18:	460c      	mov	r4, r1
 8009a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8009a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a28:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009a2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a30:	f7f6 fde2 	bl	80005f8 <__aeabi_dmul>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4620      	mov	r0, r4
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	f7f6 fc26 	bl	800028c <__adddf3>
 8009a40:	4603      	mov	r3, r0
 8009a42:	460c      	mov	r4, r1
 8009a44:	4625      	mov	r5, r4
 8009a46:	461c      	mov	r4, r3
 8009a48:	f04f 0200 	mov.w	r2, #0
 8009a4c:	4b28      	ldr	r3, [pc, #160]	; (8009af0 <scaraFLowScurve+0x914>)
 8009a4e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009a52:	f7f6 fdd1 	bl	80005f8 <__aeabi_dmul>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a62:	f7f6 fdc9 	bl	80005f8 <__aeabi_dmul>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a72:	f7f6 fdc1 	bl	80005f8 <__aeabi_dmul>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a82:	f7f6 fdb9 	bl	80005f8 <__aeabi_dmul>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	f7f6 fbfd 	bl	800028c <__adddf3>
 8009a92:	4603      	mov	r3, r0
 8009a94:	460c      	mov	r4, r1
 8009a96:	4625      	mov	r5, r4
 8009a98:	461c      	mov	r4, r3
 8009a9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a9e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009aa2:	f7f6 fda9 	bl	80005f8 <__aeabi_dmul>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4610      	mov	r0, r2
 8009aac:	4619      	mov	r1, r3
 8009aae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4610      	mov	r0, r2
 8009abc:	4619      	mov	r1, r3
 8009abe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ac2:	f7f6 fd99 	bl	80005f8 <__aeabi_dmul>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4610      	mov	r0, r2
 8009acc:	4619      	mov	r1, r3
 8009ace:	f04f 0200 	mov.w	r2, #0
 8009ad2:	4b08      	ldr	r3, [pc, #32]	; (8009af4 <scaraFLowScurve+0x918>)
 8009ad4:	f7f6 feba 	bl	800084c <__aeabi_ddiv>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4620      	mov	r0, r4
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f7f6 fbd2 	bl	8000288 <__aeabi_dsub>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aea:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009aee:	e24b      	b.n	8009f88 <scaraFLowScurve+0xdac>
 8009af0:	3fe00000 	.word	0x3fe00000
 8009af4:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8009af8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	f7f6 fbc4 	bl	800028c <__adddf3>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b0c:	f7f6 fffa 	bl	8000b04 <__aeabi_dcmpge>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d04b      	beq.n	8009bae <scaraFLowScurve+0x9d2>
 8009b16:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	f7f6 fbb5 	bl	800028c <__adddf3>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4610      	mov	r0, r2
 8009b28:	4619      	mov	r1, r3
 8009b2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009b2e:	f7f6 fbad 	bl	800028c <__adddf3>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b3a:	f7f6 ffcf 	bl	8000adc <__aeabi_dcmplt>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d034      	beq.n	8009bae <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8009b44:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	f7f6 fb9e 	bl	800028c <__adddf3>
 8009b50:	4603      	mov	r3, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	461a      	mov	r2, r3
 8009b56:	4623      	mov	r3, r4
 8009b58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b5c:	f7f6 fb94 	bl	8000288 <__aeabi_dsub>
 8009b60:	4603      	mov	r3, r0
 8009b62:	460c      	mov	r4, r1
 8009b64:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8009b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6a:	f04f 0300 	mov.w	r3, #0
 8009b6e:	f04f 0400 	mov.w	r4, #0
 8009b72:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8009b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b92:	f7f6 fd31 	bl	80005f8 <__aeabi_dmul>
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	4629      	mov	r1, r5
 8009b9e:	f7f6 fb75 	bl	800028c <__adddf3>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009bac:	e1ec      	b.n	8009f88 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8009bae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	f7f6 fb69 	bl	800028c <__adddf3>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009bc6:	f7f6 fb61 	bl	800028c <__adddf3>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009bd2:	f7f6 ff97 	bl	8000b04 <__aeabi_dcmpge>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 80af 	beq.w	8009d3c <scaraFLowScurve+0xb60>
 8009bde:	f04f 0200 	mov.w	r2, #0
 8009be2:	4b53      	ldr	r3, [pc, #332]	; (8009d30 <scaraFLowScurve+0xb54>)
 8009be4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009be8:	f7f6 fd06 	bl	80005f8 <__aeabi_dmul>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009bf8:	f7f6 fb48 	bl	800028c <__adddf3>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c04:	f7f6 ff6a 	bl	8000adc <__aeabi_dcmplt>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 8096 	beq.w	8009d3c <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 8009c10:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	f7f6 fb38 	bl	800028c <__adddf3>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	4618      	mov	r0, r3
 8009c22:	4621      	mov	r1, r4
 8009c24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009c28:	f7f6 fb30 	bl	800028c <__adddf3>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	461a      	mov	r2, r3
 8009c32:	4623      	mov	r3, r4
 8009c34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c38:	f7f6 fb26 	bl	8000288 <__aeabi_dsub>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8009c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c46:	603b      	str	r3, [r7, #0]
 8009c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c4a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009c4e:	607b      	str	r3, [r7, #4]
 8009c50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c58:	f7f6 fcce 	bl	80005f8 <__aeabi_dmul>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	460c      	mov	r4, r1
 8009c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c62:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8009c6c:	f04f 0200 	mov.w	r2, #0
 8009c70:	4b30      	ldr	r3, [pc, #192]	; (8009d34 <scaraFLowScurve+0xb58>)
 8009c72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009c76:	f7f6 fcbf 	bl	80005f8 <__aeabi_dmul>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4610      	mov	r0, r2
 8009c80:	4619      	mov	r1, r3
 8009c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c86:	f7f6 fcb7 	bl	80005f8 <__aeabi_dmul>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4610      	mov	r0, r2
 8009c90:	4619      	mov	r1, r3
 8009c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c96:	f7f6 fcaf 	bl	80005f8 <__aeabi_dmul>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	f7f6 faf1 	bl	8000288 <__aeabi_dsub>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	460c      	mov	r4, r1
 8009caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cac:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8009cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cc0:	f7f6 fc9a 	bl	80005f8 <__aeabi_dmul>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4620      	mov	r0, r4
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f7f6 fade 	bl	800028c <__adddf3>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	4625      	mov	r5, r4
 8009cd6:	461c      	mov	r4, r3
 8009cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cdc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ce0:	f7f6 fc8a 	bl	80005f8 <__aeabi_dmul>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4619      	mov	r1, r3
 8009cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cf0:	f7f6 fc82 	bl	80005f8 <__aeabi_dmul>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d00:	f7f6 fc7a 	bl	80005f8 <__aeabi_dmul>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	f04f 0200 	mov.w	r2, #0
 8009d10:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <scaraFLowScurve+0xb5c>)
 8009d12:	f7f6 fd9b 	bl	800084c <__aeabi_ddiv>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	f7f6 fab3 	bl	8000288 <__aeabi_dsub>
 8009d22:	4603      	mov	r3, r0
 8009d24:	460c      	mov	r4, r1
 8009d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d28:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009d2c:	e12c      	b.n	8009f88 <scaraFLowScurve+0xdac>
 8009d2e:	bf00      	nop
 8009d30:	40080000 	.word	0x40080000
 8009d34:	3fe00000 	.word	0x3fe00000
 8009d38:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8009d3c:	f04f 0200 	mov.w	r2, #0
 8009d40:	4b94      	ldr	r3, [pc, #592]	; (8009f94 <scaraFLowScurve+0xdb8>)
 8009d42:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009d46:	f7f6 fc57 	bl	80005f8 <__aeabi_dmul>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4610      	mov	r0, r2
 8009d50:	4619      	mov	r1, r3
 8009d52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d56:	f7f6 fa99 	bl	800028c <__adddf3>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d62:	f7f6 fecf 	bl	8000b04 <__aeabi_dcmpge>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 80f6 	beq.w	8009f5a <scaraFLowScurve+0xd7e>
 8009d6e:	f04f 0200 	mov.w	r2, #0
 8009d72:	4b89      	ldr	r3, [pc, #548]	; (8009f98 <scaraFLowScurve+0xdbc>)
 8009d74:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009d78:	f7f6 fc3e 	bl	80005f8 <__aeabi_dmul>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4610      	mov	r0, r2
 8009d82:	4619      	mov	r1, r3
 8009d84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d88:	f7f6 fa80 	bl	800028c <__adddf3>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009d94:	f7f6 fea2 	bl	8000adc <__aeabi_dcmplt>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f000 80dd 	beq.w	8009f5a <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 8009da0:	f04f 0200 	mov.w	r2, #0
 8009da4:	4b7b      	ldr	r3, [pc, #492]	; (8009f94 <scaraFLowScurve+0xdb8>)
 8009da6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009daa:	f7f6 fc25 	bl	80005f8 <__aeabi_dmul>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	4610      	mov	r0, r2
 8009db4:	4619      	mov	r1, r3
 8009db6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009dba:	f7f6 fa67 	bl	800028c <__adddf3>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009dc6:	f7f6 fa5f 	bl	8000288 <__aeabi_dsub>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8009dd2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dd6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009dda:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009dde:	4620      	mov	r0, r4
 8009de0:	4629      	mov	r1, r5
 8009de2:	f7f6 fc09 	bl	80005f8 <__aeabi_dmul>
 8009de6:	4603      	mov	r3, r0
 8009de8:	460c      	mov	r4, r1
 8009dea:	4625      	mov	r5, r4
 8009dec:	461c      	mov	r4, r3
 8009dee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009df2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009df6:	f7f6 fbff 	bl	80005f8 <__aeabi_dmul>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4620      	mov	r0, r4
 8009e00:	4629      	mov	r1, r5
 8009e02:	f7f6 fa43 	bl	800028c <__adddf3>
 8009e06:	4603      	mov	r3, r0
 8009e08:	460c      	mov	r4, r1
 8009e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8009e16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e1a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e1e:	f7f6 fbeb 	bl	80005f8 <__aeabi_dmul>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4610      	mov	r0, r2
 8009e28:	4619      	mov	r1, r3
 8009e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e2e:	f7f6 fbe3 	bl	80005f8 <__aeabi_dmul>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	4620      	mov	r0, r4
 8009e38:	4629      	mov	r1, r5
 8009e3a:	f7f6 fa25 	bl	8000288 <__aeabi_dsub>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	460c      	mov	r4, r1
 8009e42:	4625      	mov	r5, r4
 8009e44:	461c      	mov	r4, r3
 8009e46:	f04f 0200 	mov.w	r2, #0
 8009e4a:	4b54      	ldr	r3, [pc, #336]	; (8009f9c <scaraFLowScurve+0xdc0>)
 8009e4c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e50:	f7f6 fbd2 	bl	80005f8 <__aeabi_dmul>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4610      	mov	r0, r2
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e60:	f7f6 fbca 	bl	80005f8 <__aeabi_dmul>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4610      	mov	r0, r2
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e70:	f7f6 fbc2 	bl	80005f8 <__aeabi_dmul>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	4620      	mov	r0, r4
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	f7f6 fa06 	bl	800028c <__adddf3>
 8009e80:	4603      	mov	r3, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e86:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8009e96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e9a:	f7f6 fbad 	bl	80005f8 <__aeabi_dmul>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	f7f6 f9f1 	bl	800028c <__adddf3>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	460c      	mov	r4, r1
 8009eae:	4625      	mov	r5, r4
 8009eb0:	461c      	mov	r4, r3
 8009eb2:	f04f 0200 	mov.w	r2, #0
 8009eb6:	4b39      	ldr	r3, [pc, #228]	; (8009f9c <scaraFLowScurve+0xdc0>)
 8009eb8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009ebc:	f7f6 fb9c 	bl	80005f8 <__aeabi_dmul>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ecc:	f7f6 fb94 	bl	80005f8 <__aeabi_dmul>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009edc:	f7f6 fb8c 	bl	80005f8 <__aeabi_dmul>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009eec:	f7f6 fb84 	bl	80005f8 <__aeabi_dmul>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	f7f6 f9c6 	bl	8000288 <__aeabi_dsub>
 8009efc:	4603      	mov	r3, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	4625      	mov	r5, r4
 8009f02:	461c      	mov	r4, r3
 8009f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f0c:	f7f6 fb74 	bl	80005f8 <__aeabi_dmul>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4610      	mov	r0, r2
 8009f16:	4619      	mov	r1, r3
 8009f18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f1c:	f7f6 fb6c 	bl	80005f8 <__aeabi_dmul>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4610      	mov	r0, r2
 8009f26:	4619      	mov	r1, r3
 8009f28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f2c:	f7f6 fb64 	bl	80005f8 <__aeabi_dmul>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4610      	mov	r0, r2
 8009f36:	4619      	mov	r1, r3
 8009f38:	f04f 0200 	mov.w	r2, #0
 8009f3c:	4b18      	ldr	r3, [pc, #96]	; (8009fa0 <scaraFLowScurve+0xdc4>)
 8009f3e:	f7f6 fc85 	bl	800084c <__aeabi_ddiv>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	4620      	mov	r0, r4
 8009f48:	4629      	mov	r1, r5
 8009f4a:	f7f6 f99f 	bl	800028c <__adddf3>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	460c      	mov	r4, r1
 8009f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f54:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009f58:	e016      	b.n	8009f88 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8009f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f5c:	f04f 0300 	mov.w	r3, #0
 8009f60:	f04f 0400 	mov.w	r4, #0
 8009f64:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8009f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6a:	f04f 0300 	mov.w	r3, #0
 8009f6e:	f04f 0400 	mov.w	r4, #0
 8009f72:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8009f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f7e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8009f82:	e001      	b.n	8009f88 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e000      	b.n	8009f8a <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3748      	adds	r7, #72	; 0x48
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bdb0      	pop	{r4, r5, r7, pc}
 8009f92:	bf00      	nop
 8009f94:	40080000 	.word	0x40080000
 8009f98:	40100000 	.word	0x40100000
 8009f9c:	3fe00000 	.word	0x3fe00000
 8009fa0:	40180000 	.word	0x40180000
 8009fa4:	00000000 	.word	0x00000000

08009fa8 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b088      	sub	sp, #32
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	ed87 0b06 	vstr	d0, [r7, #24]
 8009fb2:	ed87 1b04 	vstr	d1, [r7, #16]
 8009fb6:	ed87 2b02 	vstr	d2, [r7, #8]
 8009fba:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0-0.1 || theta1 > LIM_MAX_J0+0.1) {
 8009fbe:	a335      	add	r3, pc, #212	; (adr r3, 800a094 <scaraCheckWorkSpace4+0xec>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009fc8:	f7f6 fd88 	bl	8000adc <__aeabi_dcmplt>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d109      	bne.n	8009fe6 <scaraCheckWorkSpace4+0x3e>
 8009fd2:	a332      	add	r3, pc, #200	; (adr r3, 800a09c <scaraCheckWorkSpace4+0xf4>)
 8009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009fdc:	f7f6 fd9c 	bl	8000b18 <__aeabi_dcmpgt>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009fe6:	2307      	movs	r3, #7
 8009fe8:	e043      	b.n	800a072 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1-0.1 || theta2 > LIM_MAX_J1+0.1) {
 8009fea:	a32e      	add	r3, pc, #184	; (adr r3, 800a0a4 <scaraCheckWorkSpace4+0xfc>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009ff4:	f7f6 fd72 	bl	8000adc <__aeabi_dcmplt>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d109      	bne.n	800a012 <scaraCheckWorkSpace4+0x6a>
 8009ffe:	a32b      	add	r3, pc, #172	; (adr r3, 800a0ac <scaraCheckWorkSpace4+0x104>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a008:	f7f6 fd86 	bl	8000b18 <__aeabi_dcmpgt>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a012:	2307      	movs	r3, #7
 800a014:	e02d      	b.n	800a072 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800a016:	f04f 0200 	mov.w	r2, #0
 800a01a:	f04f 0300 	mov.w	r3, #0
 800a01e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a022:	f7f6 fd5b 	bl	8000adc <__aeabi_dcmplt>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d109      	bne.n	800a040 <scaraCheckWorkSpace4+0x98>
 800a02c:	f04f 0200 	mov.w	r2, #0
 800a030:	4b17      	ldr	r3, [pc, #92]	; (800a090 <scaraCheckWorkSpace4+0xe8>)
 800a032:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a036:	f7f6 fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a040:	2307      	movs	r3, #7
 800a042:	e016      	b.n	800a072 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3-0.1 || theta4 > LIM_MAX_J3+0.1) {
 800a044:	a30e      	add	r3, pc, #56	; (adr r3, 800a080 <scaraCheckWorkSpace4+0xd8>)
 800a046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a04e:	f7f6 fd45 	bl	8000adc <__aeabi_dcmplt>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d109      	bne.n	800a06c <scaraCheckWorkSpace4+0xc4>
 800a058:	a30b      	add	r3, pc, #44	; (adr r3, 800a088 <scaraCheckWorkSpace4+0xe0>)
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a062:	f7f6 fd59 	bl	8000b18 <__aeabi_dcmpgt>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a06c:	2307      	movs	r3, #7
 800a06e:	e000      	b.n	800a072 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3720      	adds	r7, #32
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	f3af 8000 	nop.w
 800a080:	a7777778 	.word	0xa7777778
 800a084:	c0088956 	.word	0xc0088956
 800a088:	a7777778 	.word	0xa7777778
 800a08c:	40088956 	.word	0x40088956
 800a090:	40590000 	.word	0x40590000
 800a094:	74444445 	.word	0x74444445
 800a098:	bff95623 	.word	0xbff95623
 800a09c:	74444445 	.word	0x74444445
 800a0a0:	3ff95623 	.word	0x3ff95623
 800a0a4:	54cccccd 	.word	0x54cccccd
 800a0a8:	c003a649 	.word	0xc003a649
 800a0ac:	54cccccd 	.word	0x54cccccd
 800a0b0:	4003a649 	.word	0x4003a649
 800a0b4:	00000000 	.word	0x00000000

0800a0b8 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	ed87 0b00 	vstr	d0, [r7]
 800a0c4:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d117      	bne.n	800a0fc <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 800a0cc:	a33d      	add	r3, pc, #244	; (adr r3, 800a1c4 <scaraCheckWorkSpace1+0x10c>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0d6:	f7f6 fd15 	bl	8000b04 <__aeabi_dcmpge>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00b      	beq.n	800a0f8 <scaraCheckWorkSpace1+0x40>
 800a0e0:	a33a      	add	r3, pc, #232	; (adr r3, 800a1cc <scaraCheckWorkSpace1+0x114>)
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0ea:	f7f6 fd01 	bl	8000af0 <__aeabi_dcmple>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e054      	b.n	800a1a2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a0f8:	2307      	movs	r3, #7
 800a0fa:	e052      	b.n	800a1a2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d117      	bne.n	800a132 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800a102:	a334      	add	r3, pc, #208	; (adr r3, 800a1d4 <scaraCheckWorkSpace1+0x11c>)
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a10c:	f7f6 fcfa 	bl	8000b04 <__aeabi_dcmpge>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00b      	beq.n	800a12e <scaraCheckWorkSpace1+0x76>
 800a116:	a331      	add	r3, pc, #196	; (adr r3, 800a1dc <scaraCheckWorkSpace1+0x124>)
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a120:	f7f6 fce6 	bl	8000af0 <__aeabi_dcmple>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	e039      	b.n	800a1a2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a12e:	2307      	movs	r3, #7
 800a130:	e037      	b.n	800a1a2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	2b02      	cmp	r3, #2
 800a136:	d118      	bne.n	800a16a <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 800a138:	f04f 0200 	mov.w	r2, #0
 800a13c:	f04f 0300 	mov.w	r3, #0
 800a140:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a144:	f7f6 fcde 	bl	8000b04 <__aeabi_dcmpge>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00b      	beq.n	800a166 <scaraCheckWorkSpace1+0xae>
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	4b1b      	ldr	r3, [pc, #108]	; (800a1c0 <scaraCheckWorkSpace1+0x108>)
 800a154:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a158:	f7f6 fcca 	bl	8000af0 <__aeabi_dcmple>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	e01d      	b.n	800a1a2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a166:	2307      	movs	r3, #7
 800a168:	e01b      	b.n	800a1a2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d117      	bne.n	800a1a0 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 800a170:	a30f      	add	r3, pc, #60	; (adr r3, 800a1b0 <scaraCheckWorkSpace1+0xf8>)
 800a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a176:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a17a:	f7f6 fcc3 	bl	8000b04 <__aeabi_dcmpge>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00b      	beq.n	800a19c <scaraCheckWorkSpace1+0xe4>
 800a184:	a30c      	add	r3, pc, #48	; (adr r3, 800a1b8 <scaraCheckWorkSpace1+0x100>)
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a18e:	f7f6 fcaf 	bl	8000af0 <__aeabi_dcmple>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	e002      	b.n	800a1a2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a19c:	2307      	movs	r3, #7
 800a19e:	e000      	b.n	800a1a2 <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 800a1a0:	2301      	movs	r3, #1
	}
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	f3af 8000 	nop.w
 800a1b0:	daaaaaab 	.word	0xdaaaaaab
 800a1b4:	c007bc89 	.word	0xc007bc89
 800a1b8:	daaaaaab 	.word	0xdaaaaaab
 800a1bc:	4007bc89 	.word	0x4007bc89
 800a1c0:	40590000 	.word	0x40590000
 800a1c4:	daaaaaab 	.word	0xdaaaaaab
 800a1c8:	bff7bc89 	.word	0xbff7bc89
 800a1cc:	daaaaaab 	.word	0xdaaaaaab
 800a1d0:	3ff7bc89 	.word	0x3ff7bc89
 800a1d4:	88000000 	.word	0x88000000
 800a1d8:	c002d97c 	.word	0xc002d97c
 800a1dc:	88000000 	.word	0x88000000
 800a1e0:	4002d97c 	.word	0x4002d97c
 800a1e4:	00000000 	.word	0x00000000

0800a1e8 <scaraTestLinearDuty>:

SCARA_StatusTypeDef scaraTestLinearDuty()
{
 800a1e8:	b5b0      	push	{r4, r5, r7, lr}
 800a1ea:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a1ee:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a1f0:	f04f 0300 	mov.w	r3, #0
 800a1f4:	f04f 0400 	mov.w	r4, #0
 800a1f8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a1fc:	463b      	mov	r3, r7
 800a1fe:	4a36      	ldr	r2, [pc, #216]	; (800a2d8 <scaraTestLinearDuty+0xf0>)
 800a200:	4618      	mov	r0, r3
 800a202:	4611      	mov	r1, r2
 800a204:	23c0      	movs	r3, #192	; 0xc0
 800a206:	461a      	mov	r2, r3
 800a208:	f00b fc70 	bl	8015aec <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a20c:	4b33      	ldr	r3, [pc, #204]	; (800a2dc <scaraTestLinearDuty+0xf4>)
 800a20e:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a212:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a216:	a32e      	add	r3, pc, #184	; (adr r3, 800a2d0 <scaraTestLinearDuty+0xe8>)
 800a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21c:	f7f6 fb16 	bl	800084c <__aeabi_ddiv>
 800a220:	4603      	mov	r3, r0
 800a222:	460c      	mov	r4, r1
 800a224:	ec44 3b17 	vmov	d7, r3, r4
 800a228:	eeb0 0a47 	vmov.f32	s0, s14
 800a22c:	eef0 0a67 	vmov.f32	s1, s15
 800a230:	f00f f9ca 	bl	80195c8 <ceil>
 800a234:	ec54 3b10 	vmov	r3, r4, d0
 800a238:	4618      	mov	r0, r3
 800a23a:	4621      	mov	r1, r4
 800a23c:	f7f6 fc8c 	bl	8000b58 <__aeabi_d2iz>
 800a240:	4603      	mov	r3, r0
 800a242:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a246:	2301      	movs	r3, #1
 800a248:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a24c:	e032      	b.n	800a2b4 <scaraTestLinearDuty+0xcc>
		run_time += T_SAMPLING;
 800a24e:	a320      	add	r3, pc, #128	; (adr r3, 800a2d0 <scaraTestLinearDuty+0xe8>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a258:	f7f6 f818 	bl	800028c <__adddf3>
 800a25c:	4603      	mov	r3, r0
 800a25e:	460c      	mov	r4, r1
 800a260:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraTestFlowDuty(run_time, &test_Next, test_Current);
 800a264:	463c      	mov	r4, r7
 800a266:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a26a:	4668      	mov	r0, sp
 800a26c:	f104 0308 	add.w	r3, r4, #8
 800a270:	22b8      	movs	r2, #184	; 0xb8
 800a272:	4619      	mov	r1, r3
 800a274:	f00b fc3a 	bl	8015aec <memcpy>
 800a278:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a27c:	4628      	mov	r0, r5
 800a27e:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a282:	f7fd ff5b 	bl	800813c <scaraTestFlowDuty>
 800a286:	4603      	mov	r3, r0
 800a288:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a28c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <scaraTestLinearDuty+0xb2>
			return status;
 800a294:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a298:	e013      	b.n	800a2c2 <scaraTestLinearDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a29a:	463a      	mov	r2, r7
 800a29c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	22c0      	movs	r2, #192	; 0xc0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f00b fc21 	bl	8015aec <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a2aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a2b4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a2b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	dbc6      	blt.n	800a24e <scaraTestLinearDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bdb0      	pop	{r4, r5, r7, pc}
 800a2cc:	f3af 8000 	nop.w
 800a2d0:	40000000 	.word	0x40000000
 800a2d4:	3f847ae1 	.word	0x3f847ae1
 800a2d8:	20005ae8 	.word	0x20005ae8
 800a2dc:	20004f28 	.word	0x20004f28

0800a2e0 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 800a2e0:	b5b0      	push	{r4, r5, r7, lr}
 800a2e2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a2e6:	af2e      	add	r7, sp, #184	; 0xb8
	int32_t sample_count;
	double run_time = 0;
 800a2e8:	f04f 0300 	mov.w	r3, #0
 800a2ec:	f04f 0400 	mov.w	r4, #0
 800a2f0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a2f4:	463b      	mov	r3, r7
 800a2f6:	4a36      	ldr	r2, [pc, #216]	; (800a3d0 <scaraTestDuty+0xf0>)
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	23c0      	movs	r3, #192	; 0xc0
 800a2fe:	461a      	mov	r2, r3
 800a300:	f00b fbf4 	bl	8015aec <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800a304:	4b33      	ldr	r3, [pc, #204]	; (800a3d4 <scaraTestDuty+0xf4>)
 800a306:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a30a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a30e:	a32e      	add	r3, pc, #184	; (adr r3, 800a3c8 <scaraTestDuty+0xe8>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f7f6 fa9a 	bl	800084c <__aeabi_ddiv>
 800a318:	4603      	mov	r3, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	ec44 3b17 	vmov	d7, r3, r4
 800a320:	eeb0 0a47 	vmov.f32	s0, s14
 800a324:	eef0 0a67 	vmov.f32	s1, s15
 800a328:	f00f f94e 	bl	80195c8 <ceil>
 800a32c:	ec54 3b10 	vmov	r3, r4, d0
 800a330:	4618      	mov	r0, r3
 800a332:	4621      	mov	r1, r4
 800a334:	f7f6 fc10 	bl	8000b58 <__aeabi_d2iz>
 800a338:	4603      	mov	r3, r0
 800a33a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	for (int32_t i = 1; i < sample_count; i++) {
 800a33e:	2301      	movs	r3, #1
 800a340:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a344:	e032      	b.n	800a3ac <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800a346:	a320      	add	r3, pc, #128	; (adr r3, 800a3c8 <scaraTestDuty+0xe8>)
 800a348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800a350:	f7f5 ff9c 	bl	800028c <__adddf3>
 800a354:	4603      	mov	r3, r0
 800a356:	460c      	mov	r4, r1
 800a358:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 800a35c:	463c      	mov	r4, r7
 800a35e:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 800a362:	4668      	mov	r0, sp
 800a364:	f104 0308 	add.w	r3, r4, #8
 800a368:	22b8      	movs	r2, #184	; 0xb8
 800a36a:	4619      	mov	r1, r3
 800a36c:	f00b fbbe 	bl	8015aec <memcpy>
 800a370:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a374:	4628      	mov	r0, r5
 800a376:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800a37a:	f7fd ff4b 	bl	8008214 <scaraFlowDuty>
 800a37e:	4603      	mov	r3, r0
 800a380:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (status != SCARA_STATUS_OK) {
 800a384:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <scaraTestDuty+0xb2>
			return status;
 800a38c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a390:	e013      	b.n	800a3ba <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800a392:	463a      	mov	r2, r7
 800a394:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a398:	4611      	mov	r1, r2
 800a39a:	22c0      	movs	r2, #192	; 0xc0
 800a39c:	4618      	mov	r0, r3
 800a39e:	f00b fba5 	bl	8015aec <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800a3a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a3ac:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a3b0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	dbc6      	blt.n	800a346 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bdb0      	pop	{r4, r5, r7, pc}
 800a3c4:	f3af 8000 	nop.w
 800a3c8:	40000000 	.word	0x40000000
 800a3cc:	3f847ae1 	.word	0x3f847ae1
 800a3d0:	20005ae8 	.word	0x20005ae8
 800a3d4:	20004f28 	.word	0x20004f28

0800a3d8 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 800a3d8:	b480      	push	{r7}
 800a3da:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 800a3dc:	4b03      	ldr	r3, [pc, #12]	; (800a3ec <scaraSetScanFlag+0x14>)
 800a3de:	2201      	movs	r2, #1
 800a3e0:	70da      	strb	r2, [r3, #3]
}
 800a3e2:	bf00      	nop
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	20000818 	.word	0x20000818

0800a3f0 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800a3fa:	4a05      	ldr	r2, [pc, #20]	; (800a410 <scaraSetOutput+0x20>)
 800a3fc:	79fb      	ldrb	r3, [r7, #7]
 800a3fe:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	4618      	mov	r0, r3
 800a404:	f7fa fd48 	bl	8004e98 <lowlayer_setOutput>
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	20000818 	.word	0x20000818

0800a414 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 800a41e:	4a04      	ldr	r2, [pc, #16]	; (800a430 <scaraSetDutyState+0x1c>)
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	7093      	strb	r3, [r2, #2]
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	20000818 	.word	0x20000818

0800a434 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	4603      	mov	r3, r0
 800a43c:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 800a43e:	4a04      	ldr	r2, [pc, #16]	; (800a450 <scaraSetMode+0x1c>)
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	7053      	strb	r3, [r2, #1]
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	20000818 	.word	0x20000818

0800a454 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 800a45e:	4a04      	ldr	r2, [pc, #16]	; (800a470 <scaraSetMethod+0x1c>)
 800a460:	79fb      	ldrb	r3, [r7, #7]
 800a462:	7013      	strb	r3, [r2, #0]
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	20000818 	.word	0x20000818

0800a474 <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800a47c:	22c0      	movs	r2, #192	; 0xc0
 800a47e:	4904      	ldr	r1, [pc, #16]	; (800a490 <scaraGetPosition+0x1c>)
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f00b fb33 	bl	8015aec <memcpy>
}
 800a486:	bf00      	nop
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20005ae8 	.word	0x20005ae8

0800a494 <scaraUpdatePosition>:

void				scaraUpdatePosition (SCARA_PositionTypeDef *pos) {
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
	memcpy(&positionNext, pos, sizeof(SCARA_PositionTypeDef));
 800a49c:	22c0      	movs	r2, #192	; 0xc0
 800a49e:	6879      	ldr	r1, [r7, #4]
 800a4a0:	4803      	ldr	r0, [pc, #12]	; (800a4b0 <scaraUpdatePosition+0x1c>)
 800a4a2:	f00b fb23 	bl	8015aec <memcpy>
}
 800a4a6:	bf00      	nop
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20005c68 	.word	0x20005c68

0800a4b4 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800a4b4:	b480      	push	{r7}
 800a4b6:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800a4b8:	4b03      	ldr	r3, [pc, #12]	; (800a4c8 <scaraGetMode+0x14>)
 800a4ba:	785b      	ldrb	r3, [r3, #1]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	20000818 	.word	0x20000818

0800a4cc <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
	return mySCARA.method;
 800a4d0:	4b03      	ldr	r3, [pc, #12]	; (800a4e0 <scaraGetMethod+0x14>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	20000818 	.word	0x20000818

0800a4e4 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800a4e4:	b480      	push	{r7}
 800a4e6:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 800a4e8:	4b03      	ldr	r3, [pc, #12]	; (800a4f8 <scaraGetDutyState+0x14>)
 800a4ea:	789b      	ldrb	r3, [r3, #2]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	20000818 	.word	0x20000818

0800a4fc <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 800a4fc:	b480      	push	{r7}
 800a4fe:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 800a500:	4b03      	ldr	r3, [pc, #12]	; (800a510 <scaraIsScanLimit+0x14>)
 800a502:	78db      	ldrb	r3, [r3, #3]
}
 800a504:	4618      	mov	r0, r3
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	20000818 	.word	0x20000818

0800a514 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 800a514:	b590      	push	{r4, r7, lr}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total  < run_time) {
 800a51e:	4b0a      	ldr	r3, [pc, #40]	; (800a548 <scaraIsFinish+0x34>)
 800a520:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a524:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a528:	461a      	mov	r2, r3
 800a52a:	4623      	mov	r3, r4
 800a52c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a530:	f7f6 faf2 	bl	8000b18 <__aeabi_dcmpgt>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <scaraIsFinish+0x2a>
		return TRUE;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e000      	b.n	800a540 <scaraIsFinish+0x2c>
	} else {
		return FALSE;
 800a53e:	2300      	movs	r3, #0
	}
}
 800a540:	4618      	mov	r0, r3
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	bd90      	pop	{r4, r7, pc}
 800a548:	20004f28 	.word	0x20004f28
 800a54c:	00000000 	.word	0x00000000

0800a550 <scaraPosition_packaging>:
						time);
	return lenght_buff;
}

int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 800a550:	b082      	sub	sp, #8
 800a552:	b590      	push	{r4, r7, lr}
 800a554:	b085      	sub	sp, #20
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	f107 0120 	add.w	r1, r7, #32
 800a55e:	e881 000c 	stmia.w	r1, {r2, r3}
	int32_t cur_ptr = -4;
 800a562:	f06f 0303 	mvn.w	r3, #3
 800a566:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a568:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a56c:	a35c      	add	r3, pc, #368	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	f7f6 f841 	bl	80005f8 <__aeabi_dmul>
 800a576:	4603      	mov	r3, r0
 800a578:	460c      	mov	r4, r1
 800a57a:	4618      	mov	r0, r3
 800a57c:	4621      	mov	r1, r4
 800a57e:	f7f6 faeb 	bl	8000b58 <__aeabi_d2iz>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3304      	adds	r3, #4
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	4413      	add	r3, r2
 800a58e:	4619      	mov	r1, r3
 800a590:	f000 f8aa 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a594:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a598:	a351      	add	r3, pc, #324	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f6 f82b 	bl	80005f8 <__aeabi_dmul>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	f7f6 fad5 	bl	8000b58 <__aeabi_d2iz>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	f000 f894 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a5c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a5c4:	a346      	add	r3, pc, #280	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	f7f6 f815 	bl	80005f8 <__aeabi_dmul>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	f7f6 fabf 	bl	8000b58 <__aeabi_d2iz>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	f000 f87e 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a5ec:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a5f0:	a33b      	add	r3, pc, #236	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	f7f5 ffff 	bl	80005f8 <__aeabi_dmul>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	4618      	mov	r0, r3
 800a600:	4621      	mov	r1, r4
 800a602:	f7f6 faa9 	bl	8000b58 <__aeabi_d2iz>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3304      	adds	r3, #4
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	4413      	add	r3, r2
 800a612:	4619      	mov	r1, r3
 800a614:	f000 f868 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a618:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a61c:	a330      	add	r3, pc, #192	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	f7f5 ffe9 	bl	80005f8 <__aeabi_dmul>
 800a626:	4603      	mov	r3, r0
 800a628:	460c      	mov	r4, r1
 800a62a:	4618      	mov	r0, r3
 800a62c:	4621      	mov	r1, r4
 800a62e:	f7f6 fa93 	bl	8000b58 <__aeabi_d2iz>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3304      	adds	r3, #4
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	4413      	add	r3, r2
 800a63e:	4619      	mov	r1, r3
 800a640:	f000 f852 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a644:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a648:	a325      	add	r3, pc, #148	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64e:	f7f5 ffd3 	bl	80005f8 <__aeabi_dmul>
 800a652:	4603      	mov	r3, r0
 800a654:	460c      	mov	r4, r1
 800a656:	4618      	mov	r0, r3
 800a658:	4621      	mov	r1, r4
 800a65a:	f7f6 fa7d 	bl	8000b58 <__aeabi_d2iz>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3304      	adds	r3, #4
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	4413      	add	r3, r2
 800a66a:	4619      	mov	r1, r3
 800a66c:	f000 f83c 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.D3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a670:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a674:	a31a      	add	r3, pc, #104	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	f7f5 ffbd 	bl	80005f8 <__aeabi_dmul>
 800a67e:	4603      	mov	r3, r0
 800a680:	460c      	mov	r4, r1
 800a682:	4618      	mov	r0, r3
 800a684:	4621      	mov	r1, r4
 800a686:	f7f6 fa67 	bl	8000b58 <__aeabi_d2iz>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3304      	adds	r3, #4
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	4413      	add	r3, r2
 800a696:	4619      	mov	r1, r3
 800a698:	f000 f826 	bl	800a6e8 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800a69c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800a6a0:	a30f      	add	r3, pc, #60	; (adr r3, 800a6e0 <scaraPosition_packaging+0x190>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 ffa7 	bl	80005f8 <__aeabi_dmul>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	f7f6 fa51 	bl	8000b58 <__aeabi_d2iz>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	60fb      	str	r3, [r7, #12]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	f000 f810 	bl	800a6e8 <Append_Coordinate_Value>
	return cur_ptr + 4;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3304      	adds	r3, #4
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a6d6:	b002      	add	sp, #8
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	f3af 8000 	nop.w
 800a6e0:	00000000 	.word	0x00000000
 800a6e4:	412e8480 	.word	0x412e8480

0800a6e8 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	121a      	asrs	r2, r3, #8
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	3301      	adds	r3, #1
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	141a      	asrs	r2, r3, #16
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	3302      	adds	r3, #2
 800a70e:	b2d2      	uxtb	r2, r2
 800a710:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	161a      	asrs	r2, r3, #24
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	3303      	adds	r3, #3
 800a71a:	b2d2      	uxtb	r2, r2
 800a71c:	701a      	strb	r2, [r3, #0]
}
 800a71e:	bf00      	nop
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	0000      	movs	r0, r0
 800a72c:	0000      	movs	r0, r0
	...

0800a730 <scaraKeyInit1>:
SCARA_StatusTypeDef  scaraKeyInit1(SCARA_KeyTypeDef key, int32_t speed)
{
 800a730:	b590      	push	{r4, r7, lr}
 800a732:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 800a736:	af6c      	add	r7, sp, #432	; 0x1b0
 800a738:	4602      	mov	r2, r0
 800a73a:	463b      	mov	r3, r7
 800a73c:	6019      	str	r1, [r3, #0]
 800a73e:	1dfb      	adds	r3, r7, #7
 800a740:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800a742:	f107 0308 	add.w	r3, r7, #8
 800a746:	2201      	movs	r2, #1
 800a748:	731a      	strb	r2, [r3, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 800a74a:	f107 0308 	add.w	r3, r7, #8
 800a74e:	2200      	movs	r2, #0
 800a750:	741a      	strb	r2, [r3, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVT;
 800a752:	f107 0308 	add.w	r3, r7, #8
 800a756:	2201      	movs	r2, #1
 800a758:	745a      	strb	r2, [r3, #17]
	double v_current = 0;
 800a75a:	f04f 0300 	mov.w	r3, #0
 800a75e:	f04f 0400 	mov.w	r4, #0
 800a762:	e9c7 3474 	strd	r3, r4, [r7, #464]	; 0x1d0
	Trajectory_LSPB_TypeDef *lspb;
	if(speed < SHIFT_SPEED_MIN || speed > SHIFT_SPEED_MAX){
 800a766:	463b      	mov	r3, r7
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	dd03      	ble.n	800a776 <scaraKeyInit1+0x46>
 800a76e:	463b      	mov	r3, r7
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b07      	cmp	r3, #7
 800a774:	dd01      	ble.n	800a77a <scaraKeyInit1+0x4a>
		return SCARA_STATUS_ERROR_PARA;
 800a776:	2306      	movs	r3, #6
 800a778:	e2c0      	b.n	800acfc <scaraKeyInit1+0x5cc>
	}
	switch(key){
 800a77a:	1dfb      	adds	r3, r7, #7
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b07      	cmp	r3, #7
 800a780:	f200 8298 	bhi.w	800acb4 <scaraKeyInit1+0x584>
 800a784:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <scaraKeyInit1+0x5c>)
 800a786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78a:	bf00      	nop
 800a78c:	0800a7ad 	.word	0x0800a7ad
 800a790:	0800a851 	.word	0x0800a851
 800a794:	0800a8f5 	.word	0x0800a8f5
 800a798:	0800a995 	.word	0x0800a995
 800a79c:	0800aa35 	.word	0x0800aa35
 800a7a0:	0800aad5 	.word	0x0800aad5
 800a7a4:	0800ab75 	.word	0x0800ab75
 800a7a8:	0800ac15 	.word	0x0800ac15
		case SCARA_KEY_X_INC:{
			cmd.v_factor = 0;
 800a7ac:	f107 0208 	add.w	r2, r7, #8
 800a7b0:	f04f 0300 	mov.w	r3, #0
 800a7b4:	f04f 0400 	mov.w	r4, #0
 800a7b8:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a7bc:	f107 0308 	add.w	r3, r7, #8
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a7c4:	f107 0308 	add.w	r3, r7, #8
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= speed*10;
 800a7cc:	463b      	mov	r3, r7
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7f5 fea3 	bl	8000524 <__aeabi_i2d>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	f107 0208 	add.w	r2, r7, #8
 800a7e6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a7ea:	f107 0208 	add.w	r2, r7, #8
 800a7ee:	f04f 0300 	mov.w	r3, #0
 800a7f2:	f04f 0400 	mov.w	r4, #0
 800a7f6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a7fa:	f107 0208 	add.w	r2, r7, #8
 800a7fe:	f04f 0300 	mov.w	r3, #0
 800a802:	f04f 0400 	mov.w	r4, #0
 800a806:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a80a:	f107 0208 	add.w	r2, r7, #8
 800a80e:	f04f 0300 	mov.w	r3, #0
 800a812:	f04f 0400 	mov.w	r4, #0
 800a816:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*0.1;
 800a81a:	463b      	mov	r3, r7
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	f7f5 fe81 	bl	8000524 <__aeabi_i2d>
 800a822:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 800a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82a:	f7f5 fee5 	bl	80005f8 <__aeabi_dmul>
 800a82e:	4603      	mov	r3, r0
 800a830:	460c      	mov	r4, r1
 800a832:	4618      	mov	r0, r3
 800a834:	4621      	mov	r1, r4
 800a836:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f7f5 fd25 	bl	800028c <__adddf3>
 800a842:	4603      	mov	r3, r0
 800a844:	460c      	mov	r4, r1
 800a846:	f107 0208 	add.w	r2, r7, #8
 800a84a:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800a84e:	e231      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_X_DEC:{
			cmd.v_factor = 0;
 800a850:	f107 0208 	add.w	r2, r7, #8
 800a854:	f04f 0300 	mov.w	r3, #0
 800a858:	f04f 0400 	mov.w	r4, #0
 800a85c:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a860:	f107 0308 	add.w	r3, r7, #8
 800a864:	2200      	movs	r2, #0
 800a866:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a868:	f107 0308 	add.w	r3, r7, #8
 800a86c:	2200      	movs	r2, #0
 800a86e:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= -speed*10;
 800a870:	463b      	mov	r3, r7
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f06f 0209 	mvn.w	r2, #9
 800a878:	fb02 f303 	mul.w	r3, r2, r3
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7f5 fe51 	bl	8000524 <__aeabi_i2d>
 800a882:	4603      	mov	r3, r0
 800a884:	460c      	mov	r4, r1
 800a886:	f107 0208 	add.w	r2, r7, #8
 800a88a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800a88e:	f107 0208 	add.w	r2, r7, #8
 800a892:	f04f 0300 	mov.w	r3, #0
 800a896:	f04f 0400 	mov.w	r4, #0
 800a89a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a89e:	f107 0208 	add.w	r2, r7, #8
 800a8a2:	f04f 0300 	mov.w	r3, #0
 800a8a6:	f04f 0400 	mov.w	r4, #0
 800a8aa:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a8ae:	f107 0208 	add.w	r2, r7, #8
 800a8b2:	f04f 0300 	mov.w	r3, #0
 800a8b6:	f04f 0400 	mov.w	r4, #0
 800a8ba:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*0.1;
 800a8be:	463b      	mov	r3, r7
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	f7f5 fe2f 	bl	8000524 <__aeabi_i2d>
 800a8c6:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	f7f5 fe93 	bl	80005f8 <__aeabi_dmul>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	4621      	mov	r1, r4
 800a8da:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f7f5 fcd3 	bl	800028c <__adddf3>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	460c      	mov	r4, r1
 800a8ea:	f107 0208 	add.w	r2, r7, #8
 800a8ee:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800a8f2:	e1df      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Y_INC:{
			cmd.v_factor = 0;
 800a8f4:	f107 0208 	add.w	r2, r7, #8
 800a8f8:	f04f 0300 	mov.w	r3, #0
 800a8fc:	f04f 0400 	mov.w	r4, #0
 800a900:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a904:	f107 0308 	add.w	r3, r7, #8
 800a908:	2200      	movs	r2, #0
 800a90a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a90c:	f107 0308 	add.w	r3, r7, #8
 800a910:	2200      	movs	r2, #0
 800a912:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a914:	f107 0208 	add.w	r2, r7, #8
 800a918:	f04f 0300 	mov.w	r3, #0
 800a91c:	f04f 0400 	mov.w	r4, #0
 800a920:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= speed*10;
 800a924:	463b      	mov	r3, r7
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	4618      	mov	r0, r3
 800a932:	f7f5 fdf7 	bl	8000524 <__aeabi_i2d>
 800a936:	4603      	mov	r3, r0
 800a938:	460c      	mov	r4, r1
 800a93a:	f107 0208 	add.w	r2, r7, #8
 800a93e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a942:	f107 0208 	add.w	r2, r7, #8
 800a946:	f04f 0300 	mov.w	r3, #0
 800a94a:	f04f 0400 	mov.w	r4, #0
 800a94e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a952:	f107 0208 	add.w	r2, r7, #8
 800a956:	f04f 0300 	mov.w	r3, #0
 800a95a:	f04f 0400 	mov.w	r4, #0
 800a95e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*0.1;
 800a962:	463b      	mov	r3, r7
 800a964:	6818      	ldr	r0, [r3, #0]
 800a966:	f7f5 fddd 	bl	8000524 <__aeabi_i2d>
 800a96a:	a3e7      	add	r3, pc, #924	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	f7f5 fe42 	bl	80005f8 <__aeabi_dmul>
 800a974:	4603      	mov	r3, r0
 800a976:	460c      	mov	r4, r1
 800a978:	4618      	mov	r0, r3
 800a97a:	4621      	mov	r1, r4
 800a97c:	a3e4      	add	r3, pc, #912	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	f7f5 fc83 	bl	800028c <__adddf3>
 800a986:	4603      	mov	r3, r0
 800a988:	460c      	mov	r4, r1
 800a98a:	f107 0208 	add.w	r2, r7, #8
 800a98e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800a992:	e18f      	b.n	800acb4 <scaraKeyInit1+0x584>

		case SCARA_KEY_Y_DEC:{
			cmd.v_factor = 0;
 800a994:	f107 0208 	add.w	r2, r7, #8
 800a998:	f04f 0300 	mov.w	r3, #0
 800a99c:	f04f 0400 	mov.w	r4, #0
 800a9a0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800a9a4:	f107 0308 	add.w	r3, r7, #8
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800a9ac:	f107 0308 	add.w	r3, r7, #8
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800a9b4:	f107 0208 	add.w	r2, r7, #8
 800a9b8:	f04f 0300 	mov.w	r3, #0
 800a9bc:	f04f 0400 	mov.w	r4, #0
 800a9c0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= -speed*10;
 800a9c4:	463b      	mov	r3, r7
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f06f 0209 	mvn.w	r2, #9
 800a9cc:	fb02 f303 	mul.w	r3, r2, r3
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7f5 fda7 	bl	8000524 <__aeabi_i2d>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	460c      	mov	r4, r1
 800a9da:	f107 0208 	add.w	r2, r7, #8
 800a9de:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800a9e2:	f107 0208 	add.w	r2, r7, #8
 800a9e6:	f04f 0300 	mov.w	r3, #0
 800a9ea:	f04f 0400 	mov.w	r4, #0
 800a9ee:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800a9f2:	f107 0208 	add.w	r2, r7, #8
 800a9f6:	f04f 0300 	mov.w	r3, #0
 800a9fa:	f04f 0400 	mov.w	r4, #0
 800a9fe:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*0.1;
 800aa02:	463b      	mov	r3, r7
 800aa04:	6818      	ldr	r0, [r3, #0]
 800aa06:	f7f5 fd8d 	bl	8000524 <__aeabi_i2d>
 800aa0a:	a3bf      	add	r3, pc, #764	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fdf2 	bl	80005f8 <__aeabi_dmul>
 800aa14:	4603      	mov	r3, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	4618      	mov	r0, r3
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	a3bc      	add	r3, pc, #752	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f5 fc33 	bl	800028c <__adddf3>
 800aa26:	4603      	mov	r3, r0
 800aa28:	460c      	mov	r4, r1
 800aa2a:	f107 0208 	add.w	r2, r7, #8
 800aa2e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aa32:	e13f      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_INC:{
			cmd.v_factor = 0;
 800aa34:	f107 0208 	add.w	r2, r7, #8
 800aa38:	f04f 0300 	mov.w	r3, #0
 800aa3c:	f04f 0400 	mov.w	r4, #0
 800aa40:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aa44:	f107 0308 	add.w	r3, r7, #8
 800aa48:	2200      	movs	r2, #0
 800aa4a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aa4c:	f107 0308 	add.w	r3, r7, #8
 800aa50:	2200      	movs	r2, #0
 800aa52:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aa54:	f107 0208 	add.w	r2, r7, #8
 800aa58:	f04f 0300 	mov.w	r3, #0
 800aa5c:	f04f 0400 	mov.w	r4, #0
 800aa60:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aa64:	f107 0208 	add.w	r2, r7, #8
 800aa68:	f04f 0300 	mov.w	r3, #0
 800aa6c:	f04f 0400 	mov.w	r4, #0
 800aa70:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= speed*10;
 800aa74:	463b      	mov	r3, r7
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7f5 fd4f 	bl	8000524 <__aeabi_i2d>
 800aa86:	4603      	mov	r3, r0
 800aa88:	460c      	mov	r4, r1
 800aa8a:	f107 0208 	add.w	r2, r7, #8
 800aa8e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800aa92:	f107 0208 	add.w	r2, r7, #8
 800aa96:	f04f 0300 	mov.w	r3, #0
 800aa9a:	f04f 0400 	mov.w	r4, #0
 800aa9e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*0.1;
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	6818      	ldr	r0, [r3, #0]
 800aaa6:	f7f5 fd3d 	bl	8000524 <__aeabi_i2d>
 800aaaa:	a397      	add	r3, pc, #604	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	f7f5 fda2 	bl	80005f8 <__aeabi_dmul>
 800aab4:	4603      	mov	r3, r0
 800aab6:	460c      	mov	r4, r1
 800aab8:	4618      	mov	r0, r3
 800aaba:	4621      	mov	r1, r4
 800aabc:	a394      	add	r3, pc, #592	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	f7f5 fbe3 	bl	800028c <__adddf3>
 800aac6:	4603      	mov	r3, r0
 800aac8:	460c      	mov	r4, r1
 800aaca:	f107 0208 	add.w	r2, r7, #8
 800aace:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800aad2:	e0ef      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_Z_DEC:{
			cmd.v_factor = 0;
 800aad4:	f107 0208 	add.w	r2, r7, #8
 800aad8:	f04f 0300 	mov.w	r3, #0
 800aadc:	f04f 0400 	mov.w	r4, #0
 800aae0:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800aae4:	f107 0308 	add.w	r3, r7, #8
 800aae8:	2200      	movs	r2, #0
 800aaea:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800aaec:	f107 0308 	add.w	r3, r7, #8
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800aaf4:	f107 0208 	add.w	r2, r7, #8
 800aaf8:	f04f 0300 	mov.w	r3, #0
 800aafc:	f04f 0400 	mov.w	r4, #0
 800ab00:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ab04:	f107 0208 	add.w	r2, r7, #8
 800ab08:	f04f 0300 	mov.w	r3, #0
 800ab0c:	f04f 0400 	mov.w	r4, #0
 800ab10:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= -speed*10;
 800ab14:	463b      	mov	r3, r7
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f06f 0209 	mvn.w	r2, #9
 800ab1c:	fb02 f303 	mul.w	r3, r2, r3
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7f5 fcff 	bl	8000524 <__aeabi_i2d>
 800ab26:	4603      	mov	r3, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	f107 0208 	add.w	r2, r7, #8
 800ab2e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= 0;
 800ab32:	f107 0208 	add.w	r2, r7, #8
 800ab36:	f04f 0300 	mov.w	r3, #0
 800ab3a:	f04f 0400 	mov.w	r4, #0
 800ab3e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*0.1;
 800ab42:	463b      	mov	r3, r7
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	f7f5 fced 	bl	8000524 <__aeabi_i2d>
 800ab4a:	a36f      	add	r3, pc, #444	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f7f5 fd52 	bl	80005f8 <__aeabi_dmul>
 800ab54:	4603      	mov	r3, r0
 800ab56:	460c      	mov	r4, r1
 800ab58:	4618      	mov	r0, r3
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	a36c      	add	r3, pc, #432	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	f7f5 fb93 	bl	800028c <__adddf3>
 800ab66:	4603      	mov	r3, r0
 800ab68:	460c      	mov	r4, r1
 800ab6a:	f107 0208 	add.w	r2, r7, #8
 800ab6e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ab72:	e09f      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_INC:{
			cmd.v_factor = 0;
 800ab74:	f107 0208 	add.w	r2, r7, #8
 800ab78:	f04f 0300 	mov.w	r3, #0
 800ab7c:	f04f 0400 	mov.w	r4, #0
 800ab80:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	2200      	movs	r2, #0
 800ab8a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ab8c:	f107 0308 	add.w	r3, r7, #8
 800ab90:	2200      	movs	r2, #0
 800ab92:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ab94:	f107 0208 	add.w	r2, r7, #8
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	f04f 0400 	mov.w	r4, #0
 800aba0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800aba4:	f107 0208 	add.w	r2, r7, #8
 800aba8:	f04f 0300 	mov.w	r3, #0
 800abac:	f04f 0400 	mov.w	r4, #0
 800abb0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800abb4:	f107 0208 	add.w	r2, r7, #8
 800abb8:	f04f 0300 	mov.w	r3, #0
 800abbc:	f04f 0400 	mov.w	r4, #0
 800abc0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= speed*10;
 800abc4:	463b      	mov	r3, r7
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	4613      	mov	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7f5 fca7 	bl	8000524 <__aeabi_i2d>
 800abd6:	4603      	mov	r3, r0
 800abd8:	460c      	mov	r4, r1
 800abda:	f107 0208 	add.w	r2, r7, #8
 800abde:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*0.1;
 800abe2:	463b      	mov	r3, r7
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	f7f5 fc9d 	bl	8000524 <__aeabi_i2d>
 800abea:	a347      	add	r3, pc, #284	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	f7f5 fd02 	bl	80005f8 <__aeabi_dmul>
 800abf4:	4603      	mov	r3, r0
 800abf6:	460c      	mov	r4, r1
 800abf8:	4618      	mov	r0, r3
 800abfa:	4621      	mov	r1, r4
 800abfc:	a344      	add	r3, pc, #272	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800abfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac02:	f7f5 fb43 	bl	800028c <__adddf3>
 800ac06:	4603      	mov	r3, r0
 800ac08:	460c      	mov	r4, r1
 800ac0a:	f107 0208 	add.w	r2, r7, #8
 800ac0e:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800ac12:	e04f      	b.n	800acb4 <scaraKeyInit1+0x584>
		case SCARA_KEY_ROLL_DEC:{
			cmd.v_factor = 0;
 800ac14:	f107 0208 	add.w	r2, r7, #8
 800ac18:	f04f 0300 	mov.w	r3, #0
 800ac1c:	f04f 0400 	mov.w	r4, #0
 800ac20:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8
			cmd.space_type = DUTY_SPACE_TASK;
 800ac24:	f107 0308 	add.w	r3, r7, #8
 800ac28:	2200      	movs	r2, #0
 800ac2a:	735a      	strb	r2, [r3, #13]
			cmd.path_type = DUTY_PATH_LINE;
 800ac2c:	f107 0308 	add.w	r3, r7, #8
 800ac30:	2200      	movs	r2, #0
 800ac32:	739a      	strb	r2, [r3, #14]
			cmd.target_point.x 		= 0;
 800ac34:	f107 0208 	add.w	r2, r7, #8
 800ac38:	f04f 0300 	mov.w	r3, #0
 800ac3c:	f04f 0400 	mov.w	r4, #0
 800ac40:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
			cmd.target_point.y 		= 0;
 800ac44:	f107 0208 	add.w	r2, r7, #8
 800ac48:	f04f 0300 	mov.w	r3, #0
 800ac4c:	f04f 0400 	mov.w	r4, #0
 800ac50:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
			cmd.target_point.z 		= 0;
 800ac54:	f107 0208 	add.w	r2, r7, #8
 800ac58:	f04f 0300 	mov.w	r3, #0
 800ac5c:	f04f 0400 	mov.w	r4, #0
 800ac60:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			cmd.target_point.roll 	= -speed*10;
 800ac64:	463b      	mov	r3, r7
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f06f 0209 	mvn.w	r2, #9
 800ac6c:	fb02 f303 	mul.w	r3, r2, r3
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7f5 fc57 	bl	8000524 <__aeabi_i2d>
 800ac76:	4603      	mov	r3, r0
 800ac78:	460c      	mov	r4, r1
 800ac7a:	f107 0208 	add.w	r2, r7, #8
 800ac7e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			cmd.time_total 			= 0.8 + speed*0.1;
 800ac82:	463b      	mov	r3, r7
 800ac84:	6818      	ldr	r0, [r3, #0]
 800ac86:	f7f5 fc4d 	bl	8000524 <__aeabi_i2d>
 800ac8a:	a31f      	add	r3, pc, #124	; (adr r3, 800ad08 <scaraKeyInit1+0x5d8>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	f7f5 fcb2 	bl	80005f8 <__aeabi_dmul>
 800ac94:	4603      	mov	r3, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	4618      	mov	r0, r3
 800ac9a:	4621      	mov	r1, r4
 800ac9c:	a31c      	add	r3, pc, #112	; (adr r3, 800ad10 <scaraKeyInit1+0x5e0>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 faf3 	bl	800028c <__adddf3>
 800aca6:	4603      	mov	r3, r0
 800aca8:	460c      	mov	r4, r1
 800acaa:	f107 0208 	add.w	r2, r7, #8
 800acae:	e9c2 3408 	strd	r3, r4, [r2, #32]
		}
		break;
 800acb2:	bf00      	nop
	}

	status = scaraInitDuty(cmd);
 800acb4:	f107 0408 	add.w	r4, r7, #8
 800acb8:	4668      	mov	r0, sp
 800acba:	f104 0310 	add.w	r3, r4, #16
 800acbe:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800acc2:	4619      	mov	r1, r3
 800acc4:	f00a ff12 	bl	8015aec <memcpy>
 800acc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800accc:	f7fa fa64 	bl	8005198 <scaraInitDuty>
 800acd0:	4603      	mov	r3, r0
 800acd2:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	if (status == SCARA_STATUS_OK) {
 800acd6:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10b      	bne.n	800acf6 <scaraKeyInit1+0x5c6>
		status = scaraTestDuty();
 800acde:	f7ff faff 	bl	800a2e0 <scaraTestDuty>
 800ace2:	4603      	mov	r3, r0
 800ace4:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		if (status != SCARA_STATUS_OK) {
 800ace8:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800acec:	2b00      	cmp	r3, #0
 800acee:	d005      	beq.n	800acfc <scaraKeyInit1+0x5cc>
			return status;
 800acf0:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800acf4:	e002      	b.n	800acfc <scaraKeyInit1+0x5cc>
		// tinh lai run time so vs v hien tai
//		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
//		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
//		return status;
	} else {
		return status;
 800acf6:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800acfa:	e7ff      	b.n	800acfc <scaraKeyInit1+0x5cc>
	}
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd90      	pop	{r4, r7, pc}
 800ad06:	bf00      	nop
 800ad08:	9999999a 	.word	0x9999999a
 800ad0c:	3fb99999 	.word	0x3fb99999
 800ad10:	9999999a 	.word	0x9999999a
 800ad14:	3fe99999 	.word	0x3fe99999

0800ad18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad1e:	2300      	movs	r3, #0
 800ad20:	607b      	str	r3, [r7, #4]
 800ad22:	4b12      	ldr	r3, [pc, #72]	; (800ad6c <HAL_MspInit+0x54>)
 800ad24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad26:	4a11      	ldr	r2, [pc, #68]	; (800ad6c <HAL_MspInit+0x54>)
 800ad28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad2c:	6453      	str	r3, [r2, #68]	; 0x44
 800ad2e:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <HAL_MspInit+0x54>)
 800ad30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad36:	607b      	str	r3, [r7, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	603b      	str	r3, [r7, #0]
 800ad3e:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <HAL_MspInit+0x54>)
 800ad40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad42:	4a0a      	ldr	r2, [pc, #40]	; (800ad6c <HAL_MspInit+0x54>)
 800ad44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad48:	6413      	str	r3, [r2, #64]	; 0x40
 800ad4a:	4b08      	ldr	r3, [pc, #32]	; (800ad6c <HAL_MspInit+0x54>)
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad52:	603b      	str	r3, [r7, #0]
 800ad54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ad56:	2200      	movs	r2, #0
 800ad58:	210f      	movs	r1, #15
 800ad5a:	f06f 0001 	mvn.w	r0, #1
 800ad5e:	f000 fbe7 	bl	800b530 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad62:	bf00      	nop
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	40023800 	.word	0x40023800

0800ad70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08c      	sub	sp, #48	; 0x30
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800ad80:	2200      	movs	r2, #0
 800ad82:	6879      	ldr	r1, [r7, #4]
 800ad84:	2036      	movs	r0, #54	; 0x36
 800ad86:	f000 fbd3 	bl	800b530 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ad8a:	2036      	movs	r0, #54	; 0x36
 800ad8c:	f000 fbec 	bl	800b568 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	4b1f      	ldr	r3, [pc, #124]	; (800ae14 <HAL_InitTick+0xa4>)
 800ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad98:	4a1e      	ldr	r2, [pc, #120]	; (800ae14 <HAL_InitTick+0xa4>)
 800ad9a:	f043 0310 	orr.w	r3, r3, #16
 800ad9e:	6413      	str	r3, [r2, #64]	; 0x40
 800ada0:	4b1c      	ldr	r3, [pc, #112]	; (800ae14 <HAL_InitTick+0xa4>)
 800ada2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada4:	f003 0310 	and.w	r3, r3, #16
 800ada8:	60fb      	str	r3, [r7, #12]
 800adaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800adac:	f107 0210 	add.w	r2, r7, #16
 800adb0:	f107 0314 	add.w	r3, r7, #20
 800adb4:	4611      	mov	r1, r2
 800adb6:	4618      	mov	r0, r3
 800adb8:	f002 ff72 	bl	800dca0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800adbc:	f002 ff48 	bl	800dc50 <HAL_RCC_GetPCLK1Freq>
 800adc0:	4603      	mov	r3, r0
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800adc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc8:	4a13      	ldr	r2, [pc, #76]	; (800ae18 <HAL_InitTick+0xa8>)
 800adca:	fba2 2303 	umull	r2, r3, r2, r3
 800adce:	0c9b      	lsrs	r3, r3, #18
 800add0:	3b01      	subs	r3, #1
 800add2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800add4:	4b11      	ldr	r3, [pc, #68]	; (800ae1c <HAL_InitTick+0xac>)
 800add6:	4a12      	ldr	r2, [pc, #72]	; (800ae20 <HAL_InitTick+0xb0>)
 800add8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800adda:	4b10      	ldr	r3, [pc, #64]	; (800ae1c <HAL_InitTick+0xac>)
 800addc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ade0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ade2:	4a0e      	ldr	r2, [pc, #56]	; (800ae1c <HAL_InitTick+0xac>)
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ade8:	4b0c      	ldr	r3, [pc, #48]	; (800ae1c <HAL_InitTick+0xac>)
 800adea:	2200      	movs	r2, #0
 800adec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800adee:	4b0b      	ldr	r3, [pc, #44]	; (800ae1c <HAL_InitTick+0xac>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800adf4:	4809      	ldr	r0, [pc, #36]	; (800ae1c <HAL_InitTick+0xac>)
 800adf6:	f002 ff85 	bl	800dd04 <HAL_TIM_Base_Init>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d104      	bne.n	800ae0a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800ae00:	4806      	ldr	r0, [pc, #24]	; (800ae1c <HAL_InitTick+0xac>)
 800ae02:	f002 ffaa 	bl	800dd5a <HAL_TIM_Base_Start_IT>
 800ae06:	4603      	mov	r3, r0
 800ae08:	e000      	b.n	800ae0c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3730      	adds	r7, #48	; 0x30
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	40023800 	.word	0x40023800
 800ae18:	431bde83 	.word	0x431bde83
 800ae1c:	20005d28 	.word	0x20005d28
 800ae20:	40001000 	.word	0x40001000

0800ae24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae24:	b480      	push	{r7}
 800ae26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ae28:	bf00      	nop
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
	...

0800ae34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800ae38:	2162      	movs	r1, #98	; 0x62
 800ae3a:	4802      	ldr	r0, [pc, #8]	; (800ae44 <HardFault_Handler+0x10>)
 800ae3c:	f7f6 fdfe 	bl	8001a3c <LOG_REPORT>
 800ae40:	e7fa      	b.n	800ae38 <HardFault_Handler+0x4>
 800ae42:	bf00      	nop
 800ae44:	0801b1d0 	.word	0x0801b1d0

0800ae48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800ae4c:	2172      	movs	r1, #114	; 0x72
 800ae4e:	4802      	ldr	r0, [pc, #8]	; (800ae58 <MemManage_Handler+0x10>)
 800ae50:	f7f6 fdf4 	bl	8001a3c <LOG_REPORT>
 800ae54:	e7fa      	b.n	800ae4c <MemManage_Handler+0x4>
 800ae56:	bf00      	nop
 800ae58:	0801b1e8 	.word	0x0801b1e8

0800ae5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800ae60:	2182      	movs	r1, #130	; 0x82
 800ae62:	4802      	ldr	r0, [pc, #8]	; (800ae6c <BusFault_Handler+0x10>)
 800ae64:	f7f6 fdea 	bl	8001a3c <LOG_REPORT>
 800ae68:	e7fa      	b.n	800ae60 <BusFault_Handler+0x4>
 800ae6a:	bf00      	nop
 800ae6c:	0801b1fc 	.word	0x0801b1fc

0800ae70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ae70:	b480      	push	{r7}
 800ae72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ae74:	e7fe      	b.n	800ae74 <UsageFault_Handler+0x4>

0800ae76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ae76:	b480      	push	{r7}
 800ae78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ae7a:	bf00      	nop
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800ae88:	4802      	ldr	r0, [pc, #8]	; (800ae94 <DMA1_Stream4_IRQHandler+0x10>)
 800ae8a:	f000 fca3 	bl	800b7d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ae8e:	bf00      	nop
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	20005e28 	.word	0x20005e28

0800ae98 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ae9c:	4802      	ldr	r0, [pc, #8]	; (800aea8 <UART4_IRQHandler+0x10>)
 800ae9e:	f003 fbeb 	bl	800e678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800aea2:	bf00      	nop
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20005de8 	.word	0x20005de8

0800aeac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800aeb0:	4802      	ldr	r0, [pc, #8]	; (800aebc <TIM6_DAC_IRQHandler+0x10>)
 800aeb2:	f002 ff76 	bl	800dda2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800aeb6:	bf00      	nop
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	20005d28 	.word	0x20005d28

0800aec0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800aec4:	4b05      	ldr	r3, [pc, #20]	; (800aedc <TIM7_IRQHandler+0x1c>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2101      	movs	r1, #1
 800aeca:	4618      	mov	r0, r3
 800aecc:	f007 fab8 	bl	8012440 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800aed0:	4803      	ldr	r0, [pc, #12]	; (800aee0 <TIM7_IRQHandler+0x20>)
 800aed2:	f002 ff66 	bl	800dda2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800aed6:	bf00      	nop
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20004e64 	.word	0x20004e64
 800aee0:	20005da8 	.word	0x20005da8

0800aee4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800aee8:	4802      	ldr	r0, [pc, #8]	; (800aef4 <OTG_FS_IRQHandler+0x10>)
 800aeea:	f001 fa43 	bl	800c374 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800aeee:	bf00      	nop
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	20006764 	.word	0x20006764

0800aef8 <_sbrk>:
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	4b11      	ldr	r3, [pc, #68]	; (800af48 <_sbrk+0x50>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d102      	bne.n	800af0e <_sbrk+0x16>
 800af08:	4b0f      	ldr	r3, [pc, #60]	; (800af48 <_sbrk+0x50>)
 800af0a:	4a10      	ldr	r2, [pc, #64]	; (800af4c <_sbrk+0x54>)
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	4b0e      	ldr	r3, [pc, #56]	; (800af48 <_sbrk+0x50>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	4b0c      	ldr	r3, [pc, #48]	; (800af48 <_sbrk+0x50>)
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4413      	add	r3, r2
 800af1c:	466a      	mov	r2, sp
 800af1e:	4293      	cmp	r3, r2
 800af20:	d907      	bls.n	800af32 <_sbrk+0x3a>
 800af22:	f00a fda9 	bl	8015a78 <__errno>
 800af26:	4602      	mov	r2, r0
 800af28:	230c      	movs	r3, #12
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	f04f 33ff 	mov.w	r3, #4294967295
 800af30:	e006      	b.n	800af40 <_sbrk+0x48>
 800af32:	4b05      	ldr	r3, [pc, #20]	; (800af48 <_sbrk+0x50>)
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4413      	add	r3, r2
 800af3a:	4a03      	ldr	r2, [pc, #12]	; (800af48 <_sbrk+0x50>)
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	20001000 	.word	0x20001000
 800af4c:	20006b70 	.word	0x20006b70

0800af50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800af50:	b480      	push	{r7}
 800af52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800af54:	4b08      	ldr	r3, [pc, #32]	; (800af78 <SystemInit+0x28>)
 800af56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af5a:	4a07      	ldr	r2, [pc, #28]	; (800af78 <SystemInit+0x28>)
 800af5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800af64:	4b04      	ldr	r3, [pc, #16]	; (800af78 <SystemInit+0x28>)
 800af66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af6a:	609a      	str	r2, [r3, #8]
#endif
}
 800af6c:	bf00      	nop
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	e000ed00 	.word	0xe000ed00

0800af7c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800af82:	f107 0308 	add.w	r3, r7, #8
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	605a      	str	r2, [r3, #4]
 800af8c:	609a      	str	r2, [r3, #8]
 800af8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af90:	463b      	mov	r3, r7
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800af98:	4b1e      	ldr	r3, [pc, #120]	; (800b014 <MX_TIM2_Init+0x98>)
 800af9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800af9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 800afa0:	4b1c      	ldr	r3, [pc, #112]	; (800b014 <MX_TIM2_Init+0x98>)
 800afa2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800afa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800afa8:	4b1a      	ldr	r3, [pc, #104]	; (800b014 <MX_TIM2_Init+0x98>)
 800afaa:	2200      	movs	r2, #0
 800afac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800afae:	4b19      	ldr	r3, [pc, #100]	; (800b014 <MX_TIM2_Init+0x98>)
 800afb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800afb6:	4b17      	ldr	r3, [pc, #92]	; (800b014 <MX_TIM2_Init+0x98>)
 800afb8:	2200      	movs	r2, #0
 800afba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800afbc:	4b15      	ldr	r3, [pc, #84]	; (800b014 <MX_TIM2_Init+0x98>)
 800afbe:	2200      	movs	r2, #0
 800afc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800afc2:	4814      	ldr	r0, [pc, #80]	; (800b014 <MX_TIM2_Init+0x98>)
 800afc4:	f002 fe9e 	bl	800dd04 <HAL_TIM_Base_Init>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800afce:	f7f8 ff65 	bl	8003e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800afd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800afd8:	f107 0308 	add.w	r3, r7, #8
 800afdc:	4619      	mov	r1, r3
 800afde:	480d      	ldr	r0, [pc, #52]	; (800b014 <MX_TIM2_Init+0x98>)
 800afe0:	f002 ffe7 	bl	800dfb2 <HAL_TIM_ConfigClockSource>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800afea:	f7f8 ff57 	bl	8003e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800afee:	2300      	movs	r3, #0
 800aff0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aff2:	2300      	movs	r3, #0
 800aff4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800aff6:	463b      	mov	r3, r7
 800aff8:	4619      	mov	r1, r3
 800affa:	4806      	ldr	r0, [pc, #24]	; (800b014 <MX_TIM2_Init+0x98>)
 800affc:	f003 f9f2 	bl	800e3e4 <HAL_TIMEx_MasterConfigSynchronization>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b006:	f7f8 ff49 	bl	8003e9c <Error_Handler>
  }

}
 800b00a:	bf00      	nop
 800b00c:	3718      	adds	r7, #24
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	20005d68 	.word	0x20005d68

0800b018 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b01e:	463b      	mov	r3, r7
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800b026:	4b15      	ldr	r3, [pc, #84]	; (800b07c <MX_TIM7_Init+0x64>)
 800b028:	4a15      	ldr	r2, [pc, #84]	; (800b080 <MX_TIM7_Init+0x68>)
 800b02a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800b02c:	4b13      	ldr	r3, [pc, #76]	; (800b07c <MX_TIM7_Init+0x64>)
 800b02e:	2253      	movs	r2, #83	; 0x53
 800b030:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b032:	4b12      	ldr	r3, [pc, #72]	; (800b07c <MX_TIM7_Init+0x64>)
 800b034:	2200      	movs	r2, #0
 800b036:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800b038:	4b10      	ldr	r3, [pc, #64]	; (800b07c <MX_TIM7_Init+0x64>)
 800b03a:	f242 720f 	movw	r2, #9999	; 0x270f
 800b03e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b040:	4b0e      	ldr	r3, [pc, #56]	; (800b07c <MX_TIM7_Init+0x64>)
 800b042:	2200      	movs	r2, #0
 800b044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b046:	480d      	ldr	r0, [pc, #52]	; (800b07c <MX_TIM7_Init+0x64>)
 800b048:	f002 fe5c 	bl	800dd04 <HAL_TIM_Base_Init>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b052:	f7f8 ff23 	bl	8003e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b056:	2300      	movs	r3, #0
 800b058:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b05a:	2300      	movs	r3, #0
 800b05c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b05e:	463b      	mov	r3, r7
 800b060:	4619      	mov	r1, r3
 800b062:	4806      	ldr	r0, [pc, #24]	; (800b07c <MX_TIM7_Init+0x64>)
 800b064:	f003 f9be 	bl	800e3e4 <HAL_TIMEx_MasterConfigSynchronization>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b06e:	f7f8 ff15 	bl	8003e9c <Error_Handler>
  }

}
 800b072:	bf00      	nop
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20005da8 	.word	0x20005da8
 800b080:	40001400 	.word	0x40001400

0800b084 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b094:	d10e      	bne.n	800b0b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b096:	2300      	movs	r3, #0
 800b098:	60fb      	str	r3, [r7, #12]
 800b09a:	4b16      	ldr	r3, [pc, #88]	; (800b0f4 <HAL_TIM_Base_MspInit+0x70>)
 800b09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09e:	4a15      	ldr	r2, [pc, #84]	; (800b0f4 <HAL_TIM_Base_MspInit+0x70>)
 800b0a0:	f043 0301 	orr.w	r3, r3, #1
 800b0a4:	6413      	str	r3, [r2, #64]	; 0x40
 800b0a6:	4b13      	ldr	r3, [pc, #76]	; (800b0f4 <HAL_TIM_Base_MspInit+0x70>)
 800b0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800b0b2:	e01a      	b.n	800b0ea <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a0f      	ldr	r2, [pc, #60]	; (800b0f8 <HAL_TIM_Base_MspInit+0x74>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d115      	bne.n	800b0ea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b0be:	2300      	movs	r3, #0
 800b0c0:	60bb      	str	r3, [r7, #8]
 800b0c2:	4b0c      	ldr	r3, [pc, #48]	; (800b0f4 <HAL_TIM_Base_MspInit+0x70>)
 800b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c6:	4a0b      	ldr	r2, [pc, #44]	; (800b0f4 <HAL_TIM_Base_MspInit+0x70>)
 800b0c8:	f043 0320 	orr.w	r3, r3, #32
 800b0cc:	6413      	str	r3, [r2, #64]	; 0x40
 800b0ce:	4b09      	ldr	r3, [pc, #36]	; (800b0f4 <HAL_TIM_Base_MspInit+0x70>)
 800b0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d2:	f003 0320 	and.w	r3, r3, #32
 800b0d6:	60bb      	str	r3, [r7, #8]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2105      	movs	r1, #5
 800b0de:	2037      	movs	r0, #55	; 0x37
 800b0e0:	f000 fa26 	bl	800b530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b0e4:	2037      	movs	r0, #55	; 0x37
 800b0e6:	f000 fa3f 	bl	800b568 <HAL_NVIC_EnableIRQ>
}
 800b0ea:	bf00      	nop
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	40023800 	.word	0x40023800
 800b0f8:	40001400 	.word	0x40001400

0800b0fc <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800b100:	4b11      	ldr	r3, [pc, #68]	; (800b148 <MX_UART4_Init+0x4c>)
 800b102:	4a12      	ldr	r2, [pc, #72]	; (800b14c <MX_UART4_Init+0x50>)
 800b104:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b106:	4b10      	ldr	r3, [pc, #64]	; (800b148 <MX_UART4_Init+0x4c>)
 800b108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b10c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b10e:	4b0e      	ldr	r3, [pc, #56]	; (800b148 <MX_UART4_Init+0x4c>)
 800b110:	2200      	movs	r2, #0
 800b112:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b114:	4b0c      	ldr	r3, [pc, #48]	; (800b148 <MX_UART4_Init+0x4c>)
 800b116:	2200      	movs	r2, #0
 800b118:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b11a:	4b0b      	ldr	r3, [pc, #44]	; (800b148 <MX_UART4_Init+0x4c>)
 800b11c:	2200      	movs	r2, #0
 800b11e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b120:	4b09      	ldr	r3, [pc, #36]	; (800b148 <MX_UART4_Init+0x4c>)
 800b122:	220c      	movs	r2, #12
 800b124:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b126:	4b08      	ldr	r3, [pc, #32]	; (800b148 <MX_UART4_Init+0x4c>)
 800b128:	2200      	movs	r2, #0
 800b12a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b12c:	4b06      	ldr	r3, [pc, #24]	; (800b148 <MX_UART4_Init+0x4c>)
 800b12e:	2200      	movs	r2, #0
 800b130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b132:	4805      	ldr	r0, [pc, #20]	; (800b148 <MX_UART4_Init+0x4c>)
 800b134:	f003 f9e6 	bl	800e504 <HAL_UART_Init>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d001      	beq.n	800b142 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800b13e:	f7f8 fead 	bl	8003e9c <Error_Handler>
  }

}
 800b142:	bf00      	nop
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	20005de8 	.word	0x20005de8
 800b14c:	40004c00 	.word	0x40004c00

0800b150 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08a      	sub	sp, #40	; 0x28
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b158:	f107 0314 	add.w	r3, r7, #20
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	605a      	str	r2, [r3, #4]
 800b162:	609a      	str	r2, [r3, #8]
 800b164:	60da      	str	r2, [r3, #12]
 800b166:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a34      	ldr	r2, [pc, #208]	; (800b240 <HAL_UART_MspInit+0xf0>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d161      	bne.n	800b236 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b172:	2300      	movs	r3, #0
 800b174:	613b      	str	r3, [r7, #16]
 800b176:	4b33      	ldr	r3, [pc, #204]	; (800b244 <HAL_UART_MspInit+0xf4>)
 800b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17a:	4a32      	ldr	r2, [pc, #200]	; (800b244 <HAL_UART_MspInit+0xf4>)
 800b17c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b180:	6413      	str	r3, [r2, #64]	; 0x40
 800b182:	4b30      	ldr	r3, [pc, #192]	; (800b244 <HAL_UART_MspInit+0xf4>)
 800b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b18a:	613b      	str	r3, [r7, #16]
 800b18c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b18e:	2300      	movs	r3, #0
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	4b2c      	ldr	r3, [pc, #176]	; (800b244 <HAL_UART_MspInit+0xf4>)
 800b194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b196:	4a2b      	ldr	r2, [pc, #172]	; (800b244 <HAL_UART_MspInit+0xf4>)
 800b198:	f043 0301 	orr.w	r3, r3, #1
 800b19c:	6313      	str	r3, [r2, #48]	; 0x30
 800b19e:	4b29      	ldr	r3, [pc, #164]	; (800b244 <HAL_UART_MspInit+0xf4>)
 800b1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	60fb      	str	r3, [r7, #12]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b1ba:	2308      	movs	r3, #8
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1be:	f107 0314 	add.w	r3, r7, #20
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4820      	ldr	r0, [pc, #128]	; (800b248 <HAL_UART_MspInit+0xf8>)
 800b1c6:	f000 fd7b 	bl	800bcc0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b1ca:	4b20      	ldr	r3, [pc, #128]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b1cc:	4a20      	ldr	r2, [pc, #128]	; (800b250 <HAL_UART_MspInit+0x100>)
 800b1ce:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b1d0:	4b1e      	ldr	r3, [pc, #120]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b1d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b1d6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b1d8:	4b1c      	ldr	r3, [pc, #112]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b1da:	2240      	movs	r2, #64	; 0x40
 800b1dc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b1de:	4b1b      	ldr	r3, [pc, #108]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b1e4:	4b19      	ldr	r3, [pc, #100]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b1e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b1ea:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b1ec:	4b17      	ldr	r3, [pc, #92]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b1f2:	4b16      	ldr	r3, [pc, #88]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b1f8:	4b14      	ldr	r3, [pc, #80]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b1fe:	4b13      	ldr	r3, [pc, #76]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b200:	2200      	movs	r2, #0
 800b202:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b204:	4b11      	ldr	r3, [pc, #68]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b206:	2200      	movs	r2, #0
 800b208:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b20a:	4810      	ldr	r0, [pc, #64]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b20c:	f000 f9ba 	bl	800b584 <HAL_DMA_Init>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d001      	beq.n	800b21a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b216:	f7f8 fe41 	bl	8003e9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a0b      	ldr	r2, [pc, #44]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b21e:	631a      	str	r2, [r3, #48]	; 0x30
 800b220:	4a0a      	ldr	r2, [pc, #40]	; (800b24c <HAL_UART_MspInit+0xfc>)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b226:	2200      	movs	r2, #0
 800b228:	2105      	movs	r1, #5
 800b22a:	2034      	movs	r0, #52	; 0x34
 800b22c:	f000 f980 	bl	800b530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b230:	2034      	movs	r0, #52	; 0x34
 800b232:	f000 f999 	bl	800b568 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b236:	bf00      	nop
 800b238:	3728      	adds	r7, #40	; 0x28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	40004c00 	.word	0x40004c00
 800b244:	40023800 	.word	0x40023800
 800b248:	40020000 	.word	0x40020000
 800b24c:	20005e28 	.word	0x20005e28
 800b250:	40026070 	.word	0x40026070

0800b254 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a0c      	ldr	r2, [pc, #48]	; (800b294 <HAL_UART_TxCpltCallback+0x40>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d112      	bne.n	800b28c <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b26a:	490b      	ldr	r1, [pc, #44]	; (800b298 <HAL_UART_TxCpltCallback+0x44>)
 800b26c:	480b      	ldr	r0, [pc, #44]	; (800b29c <HAL_UART_TxCpltCallback+0x48>)
 800b26e:	f7f8 feb4 	bl	8003fda <ringBuff_PopArray>
 800b272:	4603      	mov	r3, r0
 800b274:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b276:	89fb      	ldrh	r3, [r7, #14]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d006      	beq.n	800b28a <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b27c:	89fb      	ldrh	r3, [r7, #14]
 800b27e:	461a      	mov	r2, r3
 800b280:	4905      	ldr	r1, [pc, #20]	; (800b298 <HAL_UART_TxCpltCallback+0x44>)
 800b282:	4807      	ldr	r0, [pc, #28]	; (800b2a0 <HAL_UART_TxCpltCallback+0x4c>)
 800b284:	f003 f98c 	bl	800e5a0 <HAL_UART_Transmit_DMA>
 800b288:	e000      	b.n	800b28c <HAL_UART_TxCpltCallback+0x38>
			return;
 800b28a:	bf00      	nop
	}
}
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	40004c00 	.word	0x40004c00
 800b298:	20004d64 	.word	0x20004d64
 800b29c:	2000040c 	.word	0x2000040c
 800b2a0:	20005de8 	.word	0x20005de8

0800b2a4 <Reset_Handler>:
 800b2a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b2dc <LoopFillZerobss+0x14>
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	e003      	b.n	800b2b4 <LoopCopyDataInit>

0800b2ac <CopyDataInit>:
 800b2ac:	4b0c      	ldr	r3, [pc, #48]	; (800b2e0 <LoopFillZerobss+0x18>)
 800b2ae:	585b      	ldr	r3, [r3, r1]
 800b2b0:	5043      	str	r3, [r0, r1]
 800b2b2:	3104      	adds	r1, #4

0800b2b4 <LoopCopyDataInit>:
 800b2b4:	480b      	ldr	r0, [pc, #44]	; (800b2e4 <LoopFillZerobss+0x1c>)
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <LoopFillZerobss+0x20>)
 800b2b8:	1842      	adds	r2, r0, r1
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d3f6      	bcc.n	800b2ac <CopyDataInit>
 800b2be:	4a0b      	ldr	r2, [pc, #44]	; (800b2ec <LoopFillZerobss+0x24>)
 800b2c0:	e002      	b.n	800b2c8 <LoopFillZerobss>

0800b2c2 <FillZerobss>:
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f842 3b04 	str.w	r3, [r2], #4

0800b2c8 <LoopFillZerobss>:
 800b2c8:	4b09      	ldr	r3, [pc, #36]	; (800b2f0 <LoopFillZerobss+0x28>)
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d3f9      	bcc.n	800b2c2 <FillZerobss>
 800b2ce:	f7ff fe3f 	bl	800af50 <SystemInit>
 800b2d2:	f00a fbd7 	bl	8015a84 <__libc_init_array>
 800b2d6:	f7f8 fd4d 	bl	8003d74 <main>
 800b2da:	4770      	bx	lr
 800b2dc:	20020000 	.word	0x20020000
 800b2e0:	0801b768 	.word	0x0801b768
 800b2e4:	20000000 	.word	0x20000000
 800b2e8:	20000b7c 	.word	0x20000b7c
 800b2ec:	20000b80 	.word	0x20000b80
 800b2f0:	20006b70 	.word	0x20006b70

0800b2f4 <ADC_IRQHandler>:
 800b2f4:	e7fe      	b.n	800b2f4 <ADC_IRQHandler>
	...

0800b2f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b2fc:	4b0e      	ldr	r3, [pc, #56]	; (800b338 <HAL_Init+0x40>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0d      	ldr	r2, [pc, #52]	; (800b338 <HAL_Init+0x40>)
 800b302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b308:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <HAL_Init+0x40>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a0a      	ldr	r2, [pc, #40]	; (800b338 <HAL_Init+0x40>)
 800b30e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b314:	4b08      	ldr	r3, [pc, #32]	; (800b338 <HAL_Init+0x40>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a07      	ldr	r2, [pc, #28]	; (800b338 <HAL_Init+0x40>)
 800b31a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b31e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b320:	2003      	movs	r0, #3
 800b322:	f000 f8fa 	bl	800b51a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b326:	2000      	movs	r0, #0
 800b328:	f7ff fd22 	bl	800ad70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b32c:	f7ff fcf4 	bl	800ad18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	40023c00 	.word	0x40023c00

0800b33c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b33c:	b480      	push	{r7}
 800b33e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b340:	4b06      	ldr	r3, [pc, #24]	; (800b35c <HAL_IncTick+0x20>)
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	461a      	mov	r2, r3
 800b346:	4b06      	ldr	r3, [pc, #24]	; (800b360 <HAL_IncTick+0x24>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4413      	add	r3, r2
 800b34c:	4a04      	ldr	r2, [pc, #16]	; (800b360 <HAL_IncTick+0x24>)
 800b34e:	6013      	str	r3, [r2, #0]
}
 800b350:	bf00      	nop
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	2000082c 	.word	0x2000082c
 800b360:	20005e88 	.word	0x20005e88

0800b364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0
  return uwTick;
 800b368:	4b03      	ldr	r3, [pc, #12]	; (800b378 <HAL_GetTick+0x14>)
 800b36a:	681b      	ldr	r3, [r3, #0]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	20005e88 	.word	0x20005e88

0800b37c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b384:	f7ff ffee 	bl	800b364 <HAL_GetTick>
 800b388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b394:	d005      	beq.n	800b3a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b396:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <HAL_Delay+0x40>)
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4413      	add	r3, r2
 800b3a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b3a2:	bf00      	nop
 800b3a4:	f7ff ffde 	bl	800b364 <HAL_GetTick>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d8f7      	bhi.n	800b3a4 <HAL_Delay+0x28>
  {
  }
}
 800b3b4:	bf00      	nop
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	2000082c 	.word	0x2000082c

0800b3c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f003 0307 	and.w	r3, r3, #7
 800b3ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b3d0:	4b0c      	ldr	r3, [pc, #48]	; (800b404 <__NVIC_SetPriorityGrouping+0x44>)
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b3dc:	4013      	ands	r3, r2
 800b3de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b3e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b3ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b3f2:	4a04      	ldr	r2, [pc, #16]	; (800b404 <__NVIC_SetPriorityGrouping+0x44>)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	60d3      	str	r3, [r2, #12]
}
 800b3f8:	bf00      	nop
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr
 800b404:	e000ed00 	.word	0xe000ed00

0800b408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b408:	b480      	push	{r7}
 800b40a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b40c:	4b04      	ldr	r3, [pc, #16]	; (800b420 <__NVIC_GetPriorityGrouping+0x18>)
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	0a1b      	lsrs	r3, r3, #8
 800b412:	f003 0307 	and.w	r3, r3, #7
}
 800b416:	4618      	mov	r0, r3
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	e000ed00 	.word	0xe000ed00

0800b424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	4603      	mov	r3, r0
 800b42c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b42e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b432:	2b00      	cmp	r3, #0
 800b434:	db0b      	blt.n	800b44e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	f003 021f 	and.w	r2, r3, #31
 800b43c:	4907      	ldr	r1, [pc, #28]	; (800b45c <__NVIC_EnableIRQ+0x38>)
 800b43e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b442:	095b      	lsrs	r3, r3, #5
 800b444:	2001      	movs	r0, #1
 800b446:	fa00 f202 	lsl.w	r2, r0, r2
 800b44a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b44e:	bf00      	nop
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	e000e100 	.word	0xe000e100

0800b460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	4603      	mov	r3, r0
 800b468:	6039      	str	r1, [r7, #0]
 800b46a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b46c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b470:	2b00      	cmp	r3, #0
 800b472:	db0a      	blt.n	800b48a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	b2da      	uxtb	r2, r3
 800b478:	490c      	ldr	r1, [pc, #48]	; (800b4ac <__NVIC_SetPriority+0x4c>)
 800b47a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b47e:	0112      	lsls	r2, r2, #4
 800b480:	b2d2      	uxtb	r2, r2
 800b482:	440b      	add	r3, r1
 800b484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b488:	e00a      	b.n	800b4a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	b2da      	uxtb	r2, r3
 800b48e:	4908      	ldr	r1, [pc, #32]	; (800b4b0 <__NVIC_SetPriority+0x50>)
 800b490:	79fb      	ldrb	r3, [r7, #7]
 800b492:	f003 030f 	and.w	r3, r3, #15
 800b496:	3b04      	subs	r3, #4
 800b498:	0112      	lsls	r2, r2, #4
 800b49a:	b2d2      	uxtb	r2, r2
 800b49c:	440b      	add	r3, r1
 800b49e:	761a      	strb	r2, [r3, #24]
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	e000e100 	.word	0xe000e100
 800b4b0:	e000ed00 	.word	0xe000ed00

0800b4b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b089      	sub	sp, #36	; 0x24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f003 0307 	and.w	r3, r3, #7
 800b4c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	f1c3 0307 	rsb	r3, r3, #7
 800b4ce:	2b04      	cmp	r3, #4
 800b4d0:	bf28      	it	cs
 800b4d2:	2304      	movcs	r3, #4
 800b4d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	2b06      	cmp	r3, #6
 800b4dc:	d902      	bls.n	800b4e4 <NVIC_EncodePriority+0x30>
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	3b03      	subs	r3, #3
 800b4e2:	e000      	b.n	800b4e6 <NVIC_EncodePriority+0x32>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f2:	43da      	mvns	r2, r3
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	401a      	ands	r2, r3
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b4fc:	f04f 31ff 	mov.w	r1, #4294967295
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	fa01 f303 	lsl.w	r3, r1, r3
 800b506:	43d9      	mvns	r1, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b50c:	4313      	orrs	r3, r2
         );
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3724      	adds	r7, #36	; 0x24
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7ff ff4c 	bl	800b3c0 <__NVIC_SetPriorityGrouping>
}
 800b528:	bf00      	nop
 800b52a:	3708      	adds	r7, #8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	4603      	mov	r3, r0
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
 800b53c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b53e:	2300      	movs	r3, #0
 800b540:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b542:	f7ff ff61 	bl	800b408 <__NVIC_GetPriorityGrouping>
 800b546:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	6978      	ldr	r0, [r7, #20]
 800b54e:	f7ff ffb1 	bl	800b4b4 <NVIC_EncodePriority>
 800b552:	4602      	mov	r2, r0
 800b554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b558:	4611      	mov	r1, r2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7ff ff80 	bl	800b460 <__NVIC_SetPriority>
}
 800b560:	bf00      	nop
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	4603      	mov	r3, r0
 800b570:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff ff54 	bl	800b424 <__NVIC_EnableIRQ>
}
 800b57c:	bf00      	nop
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b58c:	2300      	movs	r3, #0
 800b58e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b590:	f7ff fee8 	bl	800b364 <HAL_GetTick>
 800b594:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d101      	bne.n	800b5a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e099      	b.n	800b6d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2202      	movs	r2, #2
 800b5ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f022 0201 	bic.w	r2, r2, #1
 800b5be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b5c0:	e00f      	b.n	800b5e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b5c2:	f7ff fecf 	bl	800b364 <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	2b05      	cmp	r3, #5
 800b5ce:	d908      	bls.n	800b5e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2220      	movs	r2, #32
 800b5d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2203      	movs	r2, #3
 800b5da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	e078      	b.n	800b6d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e8      	bne.n	800b5c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	4b38      	ldr	r3, [pc, #224]	; (800b6dc <HAL_DMA_Init+0x158>)
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b60e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b61a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	4313      	orrs	r3, r2
 800b632:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b638:	2b04      	cmp	r3, #4
 800b63a:	d107      	bne.n	800b64c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b644:	4313      	orrs	r3, r2
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	4313      	orrs	r3, r2
 800b64a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	f023 0307 	bic.w	r3, r3, #7
 800b662:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	697a      	ldr	r2, [r7, #20]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b672:	2b04      	cmp	r3, #4
 800b674:	d117      	bne.n	800b6a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00e      	beq.n	800b6a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fa9f 	bl	800bbcc <DMA_CheckFifoParam>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d008      	beq.n	800b6a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2240      	movs	r2, #64	; 0x40
 800b698:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e016      	b.n	800b6d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fa56 	bl	800bb60 <DMA_CalcBaseAndBitshift>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6bc:	223f      	movs	r2, #63	; 0x3f
 800b6be:	409a      	lsls	r2, r3
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	f010803f 	.word	0xf010803f

0800b6e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b086      	sub	sp, #24
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
 800b6ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d101      	bne.n	800b706 <HAL_DMA_Start_IT+0x26>
 800b702:	2302      	movs	r3, #2
 800b704:	e040      	b.n	800b788 <HAL_DMA_Start_IT+0xa8>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b01      	cmp	r3, #1
 800b718:	d12f      	bne.n	800b77a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2202      	movs	r2, #2
 800b71e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	68b9      	ldr	r1, [r7, #8]
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f000 f9e8 	bl	800bb04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b738:	223f      	movs	r2, #63	; 0x3f
 800b73a:	409a      	lsls	r2, r3
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f042 0216 	orr.w	r2, r2, #22
 800b74e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b754:	2b00      	cmp	r3, #0
 800b756:	d007      	beq.n	800b768 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f042 0208 	orr.w	r2, r2, #8
 800b766:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f042 0201 	orr.w	r2, r2, #1
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	e005      	b.n	800b786 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b782:	2302      	movs	r3, #2
 800b784:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b786:	7dfb      	ldrb	r3, [r7, #23]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3718      	adds	r7, #24
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d004      	beq.n	800b7ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2280      	movs	r2, #128	; 0x80
 800b7a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e00c      	b.n	800b7c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2205      	movs	r2, #5
 800b7b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 0201 	bic.w	r2, r2, #1
 800b7c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b7e0:	4b92      	ldr	r3, [pc, #584]	; (800ba2c <HAL_DMA_IRQHandler+0x258>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a92      	ldr	r2, [pc, #584]	; (800ba30 <HAL_DMA_IRQHandler+0x25c>)
 800b7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ea:	0a9b      	lsrs	r3, r3, #10
 800b7ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7fe:	2208      	movs	r2, #8
 800b800:	409a      	lsls	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	4013      	ands	r3, r2
 800b806:	2b00      	cmp	r3, #0
 800b808:	d01a      	beq.n	800b840 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f003 0304 	and.w	r3, r3, #4
 800b814:	2b00      	cmp	r3, #0
 800b816:	d013      	beq.n	800b840 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f022 0204 	bic.w	r2, r2, #4
 800b826:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b82c:	2208      	movs	r2, #8
 800b82e:	409a      	lsls	r2, r3
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b838:	f043 0201 	orr.w	r2, r3, #1
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b844:	2201      	movs	r2, #1
 800b846:	409a      	lsls	r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	4013      	ands	r3, r2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d012      	beq.n	800b876 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00b      	beq.n	800b876 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b862:	2201      	movs	r2, #1
 800b864:	409a      	lsls	r2, r3
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b86e:	f043 0202 	orr.w	r2, r3, #2
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b87a:	2204      	movs	r2, #4
 800b87c:	409a      	lsls	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	4013      	ands	r3, r2
 800b882:	2b00      	cmp	r3, #0
 800b884:	d012      	beq.n	800b8ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 0302 	and.w	r3, r3, #2
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00b      	beq.n	800b8ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b898:	2204      	movs	r2, #4
 800b89a:	409a      	lsls	r2, r3
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a4:	f043 0204 	orr.w	r2, r3, #4
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8b0:	2210      	movs	r2, #16
 800b8b2:	409a      	lsls	r2, r3
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	4013      	ands	r3, r2
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d043      	beq.n	800b944 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f003 0308 	and.w	r3, r3, #8
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d03c      	beq.n	800b944 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ce:	2210      	movs	r2, #16
 800b8d0:	409a      	lsls	r2, r3
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d018      	beq.n	800b916 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d108      	bne.n	800b904 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d024      	beq.n	800b944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	4798      	blx	r3
 800b902:	e01f      	b.n	800b944 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d01b      	beq.n	800b944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	4798      	blx	r3
 800b914:	e016      	b.n	800b944 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b920:	2b00      	cmp	r3, #0
 800b922:	d107      	bne.n	800b934 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f022 0208 	bic.w	r2, r2, #8
 800b932:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d003      	beq.n	800b944 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b948:	2220      	movs	r2, #32
 800b94a:	409a      	lsls	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4013      	ands	r3, r2
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 808e 	beq.w	800ba72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 0310 	and.w	r3, r3, #16
 800b960:	2b00      	cmp	r3, #0
 800b962:	f000 8086 	beq.w	800ba72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b96a:	2220      	movs	r2, #32
 800b96c:	409a      	lsls	r2, r3
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b05      	cmp	r3, #5
 800b97c:	d136      	bne.n	800b9ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f022 0216 	bic.w	r2, r2, #22
 800b98c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	695a      	ldr	r2, [r3, #20]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b99c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d103      	bne.n	800b9ae <HAL_DMA_IRQHandler+0x1da>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d007      	beq.n	800b9be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f022 0208 	bic.w	r2, r2, #8
 800b9bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9c2:	223f      	movs	r2, #63	; 0x3f
 800b9c4:	409a      	lsls	r2, r3
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d07d      	beq.n	800bade <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	4798      	blx	r3
        }
        return;
 800b9ea:	e078      	b.n	800bade <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d01c      	beq.n	800ba34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d108      	bne.n	800ba1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d030      	beq.n	800ba72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	4798      	blx	r3
 800ba18:	e02b      	b.n	800ba72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d027      	beq.n	800ba72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	4798      	blx	r3
 800ba2a:	e022      	b.n	800ba72 <HAL_DMA_IRQHandler+0x29e>
 800ba2c:	20000824 	.word	0x20000824
 800ba30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10f      	bne.n	800ba62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f022 0210 	bic.w	r2, r2, #16
 800ba50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d032      	beq.n	800bae0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba7e:	f003 0301 	and.w	r3, r3, #1
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d022      	beq.n	800bacc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2205      	movs	r2, #5
 800ba8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f022 0201 	bic.w	r2, r2, #1
 800ba9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	3301      	adds	r3, #1
 800baa2:	60bb      	str	r3, [r7, #8]
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d307      	bcc.n	800baba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1f2      	bne.n	800ba9e <HAL_DMA_IRQHandler+0x2ca>
 800bab8:	e000      	b.n	800babc <HAL_DMA_IRQHandler+0x2e8>
          break;
 800baba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d005      	beq.n	800bae0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	4798      	blx	r3
 800badc:	e000      	b.n	800bae0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bade:	bf00      	nop
    }
  }
}
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop

0800bae8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800baf6:	b2db      	uxtb	r3, r3
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
 800bb10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bb20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	2b40      	cmp	r3, #64	; 0x40
 800bb30:	d108      	bne.n	800bb44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bb42:	e007      	b.n	800bb54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	60da      	str	r2, [r3, #12]
}
 800bb54:	bf00      	nop
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	3b10      	subs	r3, #16
 800bb70:	4a14      	ldr	r2, [pc, #80]	; (800bbc4 <DMA_CalcBaseAndBitshift+0x64>)
 800bb72:	fba2 2303 	umull	r2, r3, r2, r3
 800bb76:	091b      	lsrs	r3, r3, #4
 800bb78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bb7a:	4a13      	ldr	r2, [pc, #76]	; (800bbc8 <DMA_CalcBaseAndBitshift+0x68>)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	4413      	add	r3, r2
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	461a      	mov	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d909      	bls.n	800bba2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bb96:	f023 0303 	bic.w	r3, r3, #3
 800bb9a:	1d1a      	adds	r2, r3, #4
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	659a      	str	r2, [r3, #88]	; 0x58
 800bba0:	e007      	b.n	800bbb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bbaa:	f023 0303 	bic.w	r3, r3, #3
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3714      	adds	r7, #20
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	aaaaaaab 	.word	0xaaaaaaab
 800bbc8:	0801b278 	.word	0x0801b278

0800bbcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d11f      	bne.n	800bc26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d855      	bhi.n	800bc98 <DMA_CheckFifoParam+0xcc>
 800bbec:	a201      	add	r2, pc, #4	; (adr r2, 800bbf4 <DMA_CheckFifoParam+0x28>)
 800bbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf2:	bf00      	nop
 800bbf4:	0800bc05 	.word	0x0800bc05
 800bbf8:	0800bc17 	.word	0x0800bc17
 800bbfc:	0800bc05 	.word	0x0800bc05
 800bc00:	0800bc99 	.word	0x0800bc99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d045      	beq.n	800bc9c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc14:	e042      	b.n	800bc9c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bc1e:	d13f      	bne.n	800bca0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc24:	e03c      	b.n	800bca0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc2e:	d121      	bne.n	800bc74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d836      	bhi.n	800bca4 <DMA_CheckFifoParam+0xd8>
 800bc36:	a201      	add	r2, pc, #4	; (adr r2, 800bc3c <DMA_CheckFifoParam+0x70>)
 800bc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3c:	0800bc4d 	.word	0x0800bc4d
 800bc40:	0800bc53 	.word	0x0800bc53
 800bc44:	0800bc4d 	.word	0x0800bc4d
 800bc48:	0800bc65 	.word	0x0800bc65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc50:	e02f      	b.n	800bcb2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d024      	beq.n	800bca8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc62:	e021      	b.n	800bca8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bc6c:	d11e      	bne.n	800bcac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bc72:	e01b      	b.n	800bcac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	d902      	bls.n	800bc80 <DMA_CheckFifoParam+0xb4>
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	d003      	beq.n	800bc86 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bc7e:	e018      	b.n	800bcb2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	73fb      	strb	r3, [r7, #15]
      break;
 800bc84:	e015      	b.n	800bcb2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00e      	beq.n	800bcb0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	73fb      	strb	r3, [r7, #15]
      break;
 800bc96:	e00b      	b.n	800bcb0 <DMA_CheckFifoParam+0xe4>
      break;
 800bc98:	bf00      	nop
 800bc9a:	e00a      	b.n	800bcb2 <DMA_CheckFifoParam+0xe6>
      break;
 800bc9c:	bf00      	nop
 800bc9e:	e008      	b.n	800bcb2 <DMA_CheckFifoParam+0xe6>
      break;
 800bca0:	bf00      	nop
 800bca2:	e006      	b.n	800bcb2 <DMA_CheckFifoParam+0xe6>
      break;
 800bca4:	bf00      	nop
 800bca6:	e004      	b.n	800bcb2 <DMA_CheckFifoParam+0xe6>
      break;
 800bca8:	bf00      	nop
 800bcaa:	e002      	b.n	800bcb2 <DMA_CheckFifoParam+0xe6>
      break;   
 800bcac:	bf00      	nop
 800bcae:	e000      	b.n	800bcb2 <DMA_CheckFifoParam+0xe6>
      break;
 800bcb0:	bf00      	nop
    }
  } 
  
  return status; 
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b089      	sub	sp, #36	; 0x24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	61fb      	str	r3, [r7, #28]
 800bcda:	e16b      	b.n	800bfb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bcdc:	2201      	movs	r2, #1
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	fa02 f303 	lsl.w	r3, r2, r3
 800bce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	4013      	ands	r3, r2
 800bcee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	f040 815a 	bne.w	800bfae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d00b      	beq.n	800bd1a <HAL_GPIO_Init+0x5a>
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d007      	beq.n	800bd1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bd0e:	2b11      	cmp	r3, #17
 800bd10:	d003      	beq.n	800bd1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	2b12      	cmp	r3, #18
 800bd18:	d130      	bne.n	800bd7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	005b      	lsls	r3, r3, #1
 800bd24:	2203      	movs	r2, #3
 800bd26:	fa02 f303 	lsl.w	r3, r2, r3
 800bd2a:	43db      	mvns	r3, r3
 800bd2c:	69ba      	ldr	r2, [r7, #24]
 800bd2e:	4013      	ands	r3, r2
 800bd30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	68da      	ldr	r2, [r3, #12]
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	005b      	lsls	r3, r3, #1
 800bd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3e:	69ba      	ldr	r2, [r7, #24]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	69ba      	ldr	r2, [r7, #24]
 800bd48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bd50:	2201      	movs	r2, #1
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	fa02 f303 	lsl.w	r3, r2, r3
 800bd58:	43db      	mvns	r3, r3
 800bd5a:	69ba      	ldr	r2, [r7, #24]
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	091b      	lsrs	r3, r3, #4
 800bd66:	f003 0201 	and.w	r2, r3, #1
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd70:	69ba      	ldr	r2, [r7, #24]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	69ba      	ldr	r2, [r7, #24]
 800bd7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	005b      	lsls	r3, r3, #1
 800bd86:	2203      	movs	r2, #3
 800bd88:	fa02 f303 	lsl.w	r3, r2, r3
 800bd8c:	43db      	mvns	r3, r3
 800bd8e:	69ba      	ldr	r2, [r7, #24]
 800bd90:	4013      	ands	r3, r2
 800bd92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	689a      	ldr	r2, [r3, #8]
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bda0:	69ba      	ldr	r2, [r7, #24]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	69ba      	ldr	r2, [r7, #24]
 800bdaa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d003      	beq.n	800bdbc <HAL_GPIO_Init+0xfc>
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	2b12      	cmp	r3, #18
 800bdba:	d123      	bne.n	800be04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	08da      	lsrs	r2, r3, #3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	3208      	adds	r2, #8
 800bdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	f003 0307 	and.w	r3, r3, #7
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	220f      	movs	r2, #15
 800bdd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd8:	43db      	mvns	r3, r3
 800bdda:	69ba      	ldr	r2, [r7, #24]
 800bddc:	4013      	ands	r3, r2
 800bdde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	691a      	ldr	r2, [r3, #16]
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	f003 0307 	and.w	r3, r3, #7
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf0:	69ba      	ldr	r2, [r7, #24]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	08da      	lsrs	r2, r3, #3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	3208      	adds	r2, #8
 800bdfe:	69b9      	ldr	r1, [r7, #24]
 800be00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	2203      	movs	r2, #3
 800be10:	fa02 f303 	lsl.w	r3, r2, r3
 800be14:	43db      	mvns	r3, r3
 800be16:	69ba      	ldr	r2, [r7, #24]
 800be18:	4013      	ands	r3, r2
 800be1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	f003 0203 	and.w	r2, r3, #3
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	005b      	lsls	r3, r3, #1
 800be28:	fa02 f303 	lsl.w	r3, r2, r3
 800be2c:	69ba      	ldr	r2, [r7, #24]
 800be2e:	4313      	orrs	r3, r2
 800be30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	69ba      	ldr	r2, [r7, #24]
 800be36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 80b4 	beq.w	800bfae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be46:	2300      	movs	r3, #0
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	4b5f      	ldr	r3, [pc, #380]	; (800bfc8 <HAL_GPIO_Init+0x308>)
 800be4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be4e:	4a5e      	ldr	r2, [pc, #376]	; (800bfc8 <HAL_GPIO_Init+0x308>)
 800be50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be54:	6453      	str	r3, [r2, #68]	; 0x44
 800be56:	4b5c      	ldr	r3, [pc, #368]	; (800bfc8 <HAL_GPIO_Init+0x308>)
 800be58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800be62:	4a5a      	ldr	r2, [pc, #360]	; (800bfcc <HAL_GPIO_Init+0x30c>)
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	089b      	lsrs	r3, r3, #2
 800be68:	3302      	adds	r3, #2
 800be6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	f003 0303 	and.w	r3, r3, #3
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	220f      	movs	r2, #15
 800be7a:	fa02 f303 	lsl.w	r3, r2, r3
 800be7e:	43db      	mvns	r3, r3
 800be80:	69ba      	ldr	r2, [r7, #24]
 800be82:	4013      	ands	r3, r2
 800be84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a51      	ldr	r2, [pc, #324]	; (800bfd0 <HAL_GPIO_Init+0x310>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d02b      	beq.n	800bee6 <HAL_GPIO_Init+0x226>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a50      	ldr	r2, [pc, #320]	; (800bfd4 <HAL_GPIO_Init+0x314>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d025      	beq.n	800bee2 <HAL_GPIO_Init+0x222>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a4f      	ldr	r2, [pc, #316]	; (800bfd8 <HAL_GPIO_Init+0x318>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d01f      	beq.n	800bede <HAL_GPIO_Init+0x21e>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a4e      	ldr	r2, [pc, #312]	; (800bfdc <HAL_GPIO_Init+0x31c>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d019      	beq.n	800beda <HAL_GPIO_Init+0x21a>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a4d      	ldr	r2, [pc, #308]	; (800bfe0 <HAL_GPIO_Init+0x320>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d013      	beq.n	800bed6 <HAL_GPIO_Init+0x216>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a4c      	ldr	r2, [pc, #304]	; (800bfe4 <HAL_GPIO_Init+0x324>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d00d      	beq.n	800bed2 <HAL_GPIO_Init+0x212>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a4b      	ldr	r2, [pc, #300]	; (800bfe8 <HAL_GPIO_Init+0x328>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d007      	beq.n	800bece <HAL_GPIO_Init+0x20e>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a4a      	ldr	r2, [pc, #296]	; (800bfec <HAL_GPIO_Init+0x32c>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d101      	bne.n	800beca <HAL_GPIO_Init+0x20a>
 800bec6:	2307      	movs	r3, #7
 800bec8:	e00e      	b.n	800bee8 <HAL_GPIO_Init+0x228>
 800beca:	2308      	movs	r3, #8
 800becc:	e00c      	b.n	800bee8 <HAL_GPIO_Init+0x228>
 800bece:	2306      	movs	r3, #6
 800bed0:	e00a      	b.n	800bee8 <HAL_GPIO_Init+0x228>
 800bed2:	2305      	movs	r3, #5
 800bed4:	e008      	b.n	800bee8 <HAL_GPIO_Init+0x228>
 800bed6:	2304      	movs	r3, #4
 800bed8:	e006      	b.n	800bee8 <HAL_GPIO_Init+0x228>
 800beda:	2303      	movs	r3, #3
 800bedc:	e004      	b.n	800bee8 <HAL_GPIO_Init+0x228>
 800bede:	2302      	movs	r3, #2
 800bee0:	e002      	b.n	800bee8 <HAL_GPIO_Init+0x228>
 800bee2:	2301      	movs	r3, #1
 800bee4:	e000      	b.n	800bee8 <HAL_GPIO_Init+0x228>
 800bee6:	2300      	movs	r3, #0
 800bee8:	69fa      	ldr	r2, [r7, #28]
 800beea:	f002 0203 	and.w	r2, r2, #3
 800beee:	0092      	lsls	r2, r2, #2
 800bef0:	4093      	lsls	r3, r2
 800bef2:	69ba      	ldr	r2, [r7, #24]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bef8:	4934      	ldr	r1, [pc, #208]	; (800bfcc <HAL_GPIO_Init+0x30c>)
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	089b      	lsrs	r3, r3, #2
 800befe:	3302      	adds	r3, #2
 800bf00:	69ba      	ldr	r2, [r7, #24]
 800bf02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bf06:	4b3a      	ldr	r3, [pc, #232]	; (800bff0 <HAL_GPIO_Init+0x330>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	43db      	mvns	r3, r3
 800bf10:	69ba      	ldr	r2, [r7, #24]
 800bf12:	4013      	ands	r3, r2
 800bf14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d003      	beq.n	800bf2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800bf22:	69ba      	ldr	r2, [r7, #24]
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bf2a:	4a31      	ldr	r2, [pc, #196]	; (800bff0 <HAL_GPIO_Init+0x330>)
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bf30:	4b2f      	ldr	r3, [pc, #188]	; (800bff0 <HAL_GPIO_Init+0x330>)
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	43db      	mvns	r3, r3
 800bf3a:	69ba      	ldr	r2, [r7, #24]
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d003      	beq.n	800bf54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bf54:	4a26      	ldr	r2, [pc, #152]	; (800bff0 <HAL_GPIO_Init+0x330>)
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bf5a:	4b25      	ldr	r3, [pc, #148]	; (800bff0 <HAL_GPIO_Init+0x330>)
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	43db      	mvns	r3, r3
 800bf64:	69ba      	ldr	r2, [r7, #24]
 800bf66:	4013      	ands	r3, r2
 800bf68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800bf76:	69ba      	ldr	r2, [r7, #24]
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bf7e:	4a1c      	ldr	r2, [pc, #112]	; (800bff0 <HAL_GPIO_Init+0x330>)
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bf84:	4b1a      	ldr	r3, [pc, #104]	; (800bff0 <HAL_GPIO_Init+0x330>)
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	43db      	mvns	r3, r3
 800bf8e:	69ba      	ldr	r2, [r7, #24]
 800bf90:	4013      	ands	r3, r2
 800bf92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800bfa0:	69ba      	ldr	r2, [r7, #24]
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bfa8:	4a11      	ldr	r2, [pc, #68]	; (800bff0 <HAL_GPIO_Init+0x330>)
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	61fb      	str	r3, [r7, #28]
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	2b0f      	cmp	r3, #15
 800bfb8:	f67f ae90 	bls.w	800bcdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bfbc:	bf00      	nop
 800bfbe:	3724      	adds	r7, #36	; 0x24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	40023800 	.word	0x40023800
 800bfcc:	40013800 	.word	0x40013800
 800bfd0:	40020000 	.word	0x40020000
 800bfd4:	40020400 	.word	0x40020400
 800bfd8:	40020800 	.word	0x40020800
 800bfdc:	40020c00 	.word	0x40020c00
 800bfe0:	40021000 	.word	0x40021000
 800bfe4:	40021400 	.word	0x40021400
 800bfe8:	40021800 	.word	0x40021800
 800bfec:	40021c00 	.word	0x40021c00
 800bff0:	40013c00 	.word	0x40013c00

0800bff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	807b      	strh	r3, [r7, #2]
 800c000:	4613      	mov	r3, r2
 800c002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c004:	787b      	ldrb	r3, [r7, #1]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c00a:	887a      	ldrh	r2, [r7, #2]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c010:	e003      	b.n	800c01a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c012:	887b      	ldrh	r3, [r7, #2]
 800c014:	041a      	lsls	r2, r3, #16
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	619a      	str	r2, [r3, #24]
}
 800c01a:	bf00      	nop
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
	...

0800c028 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d101      	bne.n	800c03e <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	e043      	b.n	800c0c6 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c044:	b2db      	uxtb	r3, r3
 800c046:	2b00      	cmp	r3, #0
 800c048:	d106      	bne.n	800c058 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f7f7 fa92 	bl	800357c <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	3308      	adds	r3, #8
 800c060:	4619      	mov	r1, r3
 800c062:	4610      	mov	r0, r2
 800c064:	f003 f95a 	bl	800f31c <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6818      	ldr	r0, [r3, #0]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	461a      	mov	r2, r3
 800c072:	68b9      	ldr	r1, [r7, #8]
 800c074:	f003 f9a4 	bl	800f3c0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6858      	ldr	r0, [r3, #4]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	689a      	ldr	r2, [r3, #8]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	f003 f9d9 	bl	800f43c <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	6892      	ldr	r2, [r2, #8]
 800c092:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	6892      	ldr	r2, [r2, #8]
 800c09e:	f041 0101 	orr.w	r1, r1, #1
 800c0a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	695b      	ldr	r3, [r3, #20]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d103      	bne.n	800c0b6 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800c0ae:	4b08      	ldr	r3, [pc, #32]	; (800c0d0 <HAL_NOR_Init+0xa8>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	601a      	str	r2, [r3, #0]
 800c0b4:	e002      	b.n	800c0bc <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800c0b6:	4b06      	ldr	r3, [pc, #24]	; (800c0d0 <HAL_NOR_Init+0xa8>)
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	20001004 	.word	0x20001004

0800c0d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0d6:	b08f      	sub	sp, #60	; 0x3c
 800c0d8:	af0a      	add	r7, sp, #40	; 0x28
 800c0da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d101      	bne.n	800c0e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e10f      	b.n	800c306 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d106      	bne.n	800c106 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f009 f9b5 	bl	8015470 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2203      	movs	r2, #3
 800c10a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c116:	2b00      	cmp	r3, #0
 800c118:	d102      	bne.n	800c120 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4618      	mov	r0, r3
 800c126:	f003 fade 	bl	800f6e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	603b      	str	r3, [r7, #0]
 800c130:	687e      	ldr	r6, [r7, #4]
 800c132:	466d      	mov	r5, sp
 800c134:	f106 0410 	add.w	r4, r6, #16
 800c138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c13a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c13c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c13e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c140:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c144:	e885 0003 	stmia.w	r5, {r0, r1}
 800c148:	1d33      	adds	r3, r6, #4
 800c14a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c14c:	6838      	ldr	r0, [r7, #0]
 800c14e:	f003 f9b5 	bl	800f4bc <USB_CoreInit>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d005      	beq.n	800c164 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2202      	movs	r2, #2
 800c15c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	e0d0      	b.n	800c306 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2100      	movs	r1, #0
 800c16a:	4618      	mov	r0, r3
 800c16c:	f003 facc 	bl	800f708 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c170:	2300      	movs	r3, #0
 800c172:	73fb      	strb	r3, [r7, #15]
 800c174:	e04a      	b.n	800c20c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c176:	7bfa      	ldrb	r2, [r7, #15]
 800c178:	6879      	ldr	r1, [r7, #4]
 800c17a:	4613      	mov	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	1a9b      	subs	r3, r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	440b      	add	r3, r1
 800c184:	333d      	adds	r3, #61	; 0x3d
 800c186:	2201      	movs	r2, #1
 800c188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c18a:	7bfa      	ldrb	r2, [r7, #15]
 800c18c:	6879      	ldr	r1, [r7, #4]
 800c18e:	4613      	mov	r3, r2
 800c190:	00db      	lsls	r3, r3, #3
 800c192:	1a9b      	subs	r3, r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	440b      	add	r3, r1
 800c198:	333c      	adds	r3, #60	; 0x3c
 800c19a:	7bfa      	ldrb	r2, [r7, #15]
 800c19c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c19e:	7bfa      	ldrb	r2, [r7, #15]
 800c1a0:	7bfb      	ldrb	r3, [r7, #15]
 800c1a2:	b298      	uxth	r0, r3
 800c1a4:	6879      	ldr	r1, [r7, #4]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	00db      	lsls	r3, r3, #3
 800c1aa:	1a9b      	subs	r3, r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	440b      	add	r3, r1
 800c1b0:	3342      	adds	r3, #66	; 0x42
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c1b6:	7bfa      	ldrb	r2, [r7, #15]
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	00db      	lsls	r3, r3, #3
 800c1be:	1a9b      	subs	r3, r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	440b      	add	r3, r1
 800c1c4:	333f      	adds	r3, #63	; 0x3f
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c1ca:	7bfa      	ldrb	r2, [r7, #15]
 800c1cc:	6879      	ldr	r1, [r7, #4]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	00db      	lsls	r3, r3, #3
 800c1d2:	1a9b      	subs	r3, r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	440b      	add	r3, r1
 800c1d8:	3344      	adds	r3, #68	; 0x44
 800c1da:	2200      	movs	r2, #0
 800c1dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c1de:	7bfa      	ldrb	r2, [r7, #15]
 800c1e0:	6879      	ldr	r1, [r7, #4]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	00db      	lsls	r3, r3, #3
 800c1e6:	1a9b      	subs	r3, r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	440b      	add	r3, r1
 800c1ec:	3348      	adds	r3, #72	; 0x48
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c1f2:	7bfa      	ldrb	r2, [r7, #15]
 800c1f4:	6879      	ldr	r1, [r7, #4]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	00db      	lsls	r3, r3, #3
 800c1fa:	1a9b      	subs	r3, r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	440b      	add	r3, r1
 800c200:	3350      	adds	r3, #80	; 0x50
 800c202:	2200      	movs	r2, #0
 800c204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c206:	7bfb      	ldrb	r3, [r7, #15]
 800c208:	3301      	adds	r3, #1
 800c20a:	73fb      	strb	r3, [r7, #15]
 800c20c:	7bfa      	ldrb	r2, [r7, #15]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	429a      	cmp	r2, r3
 800c214:	d3af      	bcc.n	800c176 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c216:	2300      	movs	r3, #0
 800c218:	73fb      	strb	r3, [r7, #15]
 800c21a:	e044      	b.n	800c2a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c21c:	7bfa      	ldrb	r2, [r7, #15]
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	4613      	mov	r3, r2
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	1a9b      	subs	r3, r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	440b      	add	r3, r1
 800c22a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c22e:	2200      	movs	r2, #0
 800c230:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c232:	7bfa      	ldrb	r2, [r7, #15]
 800c234:	6879      	ldr	r1, [r7, #4]
 800c236:	4613      	mov	r3, r2
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	1a9b      	subs	r3, r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	440b      	add	r3, r1
 800c240:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c244:	7bfa      	ldrb	r2, [r7, #15]
 800c246:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c248:	7bfa      	ldrb	r2, [r7, #15]
 800c24a:	6879      	ldr	r1, [r7, #4]
 800c24c:	4613      	mov	r3, r2
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	1a9b      	subs	r3, r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	440b      	add	r3, r1
 800c256:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c25a:	2200      	movs	r2, #0
 800c25c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c25e:	7bfa      	ldrb	r2, [r7, #15]
 800c260:	6879      	ldr	r1, [r7, #4]
 800c262:	4613      	mov	r3, r2
 800c264:	00db      	lsls	r3, r3, #3
 800c266:	1a9b      	subs	r3, r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	440b      	add	r3, r1
 800c26c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c270:	2200      	movs	r2, #0
 800c272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c274:	7bfa      	ldrb	r2, [r7, #15]
 800c276:	6879      	ldr	r1, [r7, #4]
 800c278:	4613      	mov	r3, r2
 800c27a:	00db      	lsls	r3, r3, #3
 800c27c:	1a9b      	subs	r3, r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	440b      	add	r3, r1
 800c282:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c286:	2200      	movs	r2, #0
 800c288:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c28a:	7bfa      	ldrb	r2, [r7, #15]
 800c28c:	6879      	ldr	r1, [r7, #4]
 800c28e:	4613      	mov	r3, r2
 800c290:	00db      	lsls	r3, r3, #3
 800c292:	1a9b      	subs	r3, r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	440b      	add	r3, r1
 800c298:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c29c:	2200      	movs	r2, #0
 800c29e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	73fb      	strb	r3, [r7, #15]
 800c2a6:	7bfa      	ldrb	r2, [r7, #15]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d3b5      	bcc.n	800c21c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	603b      	str	r3, [r7, #0]
 800c2b6:	687e      	ldr	r6, [r7, #4]
 800c2b8:	466d      	mov	r5, sp
 800c2ba:	f106 0410 	add.w	r4, r6, #16
 800c2be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c2ca:	e885 0003 	stmia.w	r5, {r0, r1}
 800c2ce:	1d33      	adds	r3, r6, #4
 800c2d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c2d2:	6838      	ldr	r0, [r7, #0]
 800c2d4:	f003 fa42 	bl	800f75c <USB_DevInit>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d005      	beq.n	800c2ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e00d      	b.n	800c306 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f004 fa8a 	bl	8010818 <USB_DevDisconnect>

  return HAL_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c30e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b084      	sub	sp, #16
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c322:	2b01      	cmp	r3, #1
 800c324:	d101      	bne.n	800c32a <HAL_PCD_Start+0x1c>
 800c326:	2302      	movs	r3, #2
 800c328:	e020      	b.n	800c36c <HAL_PCD_Start+0x5e>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2201      	movs	r2, #1
 800c32e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c336:	2b01      	cmp	r3, #1
 800c338:	d109      	bne.n	800c34e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d005      	beq.n	800c34e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c346:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4618      	mov	r0, r3
 800c354:	f003 f9b6 	bl	800f6c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f004 fa3a 	bl	80107d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c374:	b590      	push	{r4, r7, lr}
 800c376:	b08d      	sub	sp, #52	; 0x34
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c382:	6a3b      	ldr	r3, [r7, #32]
 800c384:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f004 faf8 	bl	8010980 <USB_GetMode>
 800c390:	4603      	mov	r3, r0
 800c392:	2b00      	cmp	r3, #0
 800c394:	f040 839d 	bne.w	800cad2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f004 fa5c 	bl	801085a <USB_ReadInterrupts>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f000 8393 	beq.w	800cad0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f004 fa53 	bl	801085a <USB_ReadInterrupts>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	f003 0302 	and.w	r3, r3, #2
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d107      	bne.n	800c3ce <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	695a      	ldr	r2, [r3, #20]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f002 0202 	and.w	r2, r2, #2
 800c3cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f004 fa41 	bl	801085a <USB_ReadInterrupts>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	f003 0310 	and.w	r3, r3, #16
 800c3de:	2b10      	cmp	r3, #16
 800c3e0:	d161      	bne.n	800c4a6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	699a      	ldr	r2, [r3, #24]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f022 0210 	bic.w	r2, r2, #16
 800c3f0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
 800c3f4:	6a1b      	ldr	r3, [r3, #32]
 800c3f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	f003 020f 	and.w	r2, r3, #15
 800c3fe:	4613      	mov	r3, r2
 800c400:	00db      	lsls	r3, r3, #3
 800c402:	1a9b      	subs	r3, r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	4413      	add	r3, r2
 800c40e:	3304      	adds	r3, #4
 800c410:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	0c5b      	lsrs	r3, r3, #17
 800c416:	f003 030f 	and.w	r3, r3, #15
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d124      	bne.n	800c468 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c41e:	69ba      	ldr	r2, [r7, #24]
 800c420:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c424:	4013      	ands	r3, r2
 800c426:	2b00      	cmp	r3, #0
 800c428:	d035      	beq.n	800c496 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	091b      	lsrs	r3, r3, #4
 800c432:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c438:	b29b      	uxth	r3, r3
 800c43a:	461a      	mov	r2, r3
 800c43c:	6a38      	ldr	r0, [r7, #32]
 800c43e:	f004 f8a7 	bl	8010590 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	68da      	ldr	r2, [r3, #12]
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	091b      	lsrs	r3, r3, #4
 800c44a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c44e:	441a      	add	r2, r3
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	699a      	ldr	r2, [r3, #24]
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	091b      	lsrs	r3, r3, #4
 800c45c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c460:	441a      	add	r2, r3
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	619a      	str	r2, [r3, #24]
 800c466:	e016      	b.n	800c496 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	0c5b      	lsrs	r3, r3, #17
 800c46c:	f003 030f 	and.w	r3, r3, #15
 800c470:	2b06      	cmp	r3, #6
 800c472:	d110      	bne.n	800c496 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c47a:	2208      	movs	r2, #8
 800c47c:	4619      	mov	r1, r3
 800c47e:	6a38      	ldr	r0, [r7, #32]
 800c480:	f004 f886 	bl	8010590 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	699a      	ldr	r2, [r3, #24]
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	091b      	lsrs	r3, r3, #4
 800c48c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c490:	441a      	add	r2, r3
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	699a      	ldr	r2, [r3, #24]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f042 0210 	orr.w	r2, r2, #16
 800c4a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f004 f9d5 	bl	801085a <USB_ReadInterrupts>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c4b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c4ba:	d16e      	bne.n	800c59a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f004 f9db 	bl	8010880 <USB_ReadDevAllOutEpInterrupt>
 800c4ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c4cc:	e062      	b.n	800c594 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	f003 0301 	and.w	r3, r3, #1
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d057      	beq.n	800c588 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4de:	b2d2      	uxtb	r2, r2
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f004 fa00 	bl	80108e8 <USB_ReadDevOutEPInterrupt>
 800c4e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	f003 0301 	and.w	r3, r3, #1
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00c      	beq.n	800c50e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f6:	015a      	lsls	r2, r3, #5
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	4413      	add	r3, r2
 800c4fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c500:	461a      	mov	r2, r3
 800c502:	2301      	movs	r3, #1
 800c504:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 fdb1 	bl	800d070 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	f003 0308 	and.w	r3, r3, #8
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00c      	beq.n	800c532 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	4413      	add	r3, r2
 800c520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c524:	461a      	mov	r2, r3
 800c526:	2308      	movs	r3, #8
 800c528:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c52a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 feab 	bl	800d288 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	f003 0310 	and.w	r3, r3, #16
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d008      	beq.n	800c54e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53e:	015a      	lsls	r2, r3, #5
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	4413      	add	r3, r2
 800c544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c548:	461a      	mov	r2, r3
 800c54a:	2310      	movs	r3, #16
 800c54c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	f003 0320 	and.w	r3, r3, #32
 800c554:	2b00      	cmp	r3, #0
 800c556:	d008      	beq.n	800c56a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	015a      	lsls	r2, r3, #5
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	4413      	add	r3, r2
 800c560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c564:	461a      	mov	r2, r3
 800c566:	2320      	movs	r3, #32
 800c568:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c570:	2b00      	cmp	r3, #0
 800c572:	d009      	beq.n	800c588 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	015a      	lsls	r2, r3, #5
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	4413      	add	r3, r2
 800c57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c580:	461a      	mov	r2, r3
 800c582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c586:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	3301      	adds	r3, #1
 800c58c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	085b      	lsrs	r3, r3, #1
 800c592:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c596:	2b00      	cmp	r3, #0
 800c598:	d199      	bne.n	800c4ce <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f004 f95b 	bl	801085a <USB_ReadInterrupts>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5ae:	f040 80c0 	bne.w	800c732 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f004 f97c 	bl	80108b4 <USB_ReadDevAllInEpInterrupt>
 800c5bc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c5c2:	e0b2      	b.n	800c72a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c6:	f003 0301 	and.w	r3, r3, #1
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f000 80a7 	beq.w	800c71e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5d6:	b2d2      	uxtb	r2, r2
 800c5d8:	4611      	mov	r1, r2
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f004 f9a2 	bl	8010924 <USB_ReadDevInEPInterrupt>
 800c5e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	f003 0301 	and.w	r3, r3, #1
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d057      	beq.n	800c69c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	f003 030f 	and.w	r3, r3, #15
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	43db      	mvns	r3, r3
 800c606:	69f9      	ldr	r1, [r7, #28]
 800c608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c60c:	4013      	ands	r3, r2
 800c60e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	015a      	lsls	r2, r3, #5
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	4413      	add	r3, r2
 800c618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c61c:	461a      	mov	r2, r3
 800c61e:	2301      	movs	r3, #1
 800c620:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d132      	bne.n	800c690 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c62e:	4613      	mov	r3, r2
 800c630:	00db      	lsls	r3, r3, #3
 800c632:	1a9b      	subs	r3, r3, r2
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	440b      	add	r3, r1
 800c638:	3348      	adds	r3, #72	; 0x48
 800c63a:	6819      	ldr	r1, [r3, #0]
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c640:	4613      	mov	r3, r2
 800c642:	00db      	lsls	r3, r3, #3
 800c644:	1a9b      	subs	r3, r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4403      	add	r3, r0
 800c64a:	3344      	adds	r3, #68	; 0x44
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4419      	add	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c654:	4613      	mov	r3, r2
 800c656:	00db      	lsls	r3, r3, #3
 800c658:	1a9b      	subs	r3, r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	4403      	add	r3, r0
 800c65e:	3348      	adds	r3, #72	; 0x48
 800c660:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c664:	2b00      	cmp	r3, #0
 800c666:	d113      	bne.n	800c690 <HAL_PCD_IRQHandler+0x31c>
 800c668:	6879      	ldr	r1, [r7, #4]
 800c66a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c66c:	4613      	mov	r3, r2
 800c66e:	00db      	lsls	r3, r3, #3
 800c670:	1a9b      	subs	r3, r3, r2
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	440b      	add	r3, r1
 800c676:	3350      	adds	r3, #80	; 0x50
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d108      	bne.n	800c690 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6818      	ldr	r0, [r3, #0]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c688:	461a      	mov	r2, r3
 800c68a:	2101      	movs	r1, #1
 800c68c:	f004 f9aa 	bl	80109e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	b2db      	uxtb	r3, r3
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f008 ff6b 	bl	8015572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	f003 0308 	and.w	r3, r3, #8
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d008      	beq.n	800c6b8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a8:	015a      	lsls	r2, r3, #5
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	2308      	movs	r3, #8
 800c6b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	f003 0310 	and.w	r3, r3, #16
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d008      	beq.n	800c6d4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c4:	015a      	lsls	r2, r3, #5
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	2310      	movs	r3, #16
 800c6d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d008      	beq.n	800c6f0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e0:	015a      	lsls	r2, r3, #5
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	2340      	movs	r3, #64	; 0x40
 800c6ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f003 0302 	and.w	r3, r3, #2
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d008      	beq.n	800c70c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fc:	015a      	lsls	r2, r3, #5
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	4413      	add	r3, r2
 800c702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c706:	461a      	mov	r2, r3
 800c708:	2302      	movs	r3, #2
 800c70a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c712:	2b00      	cmp	r3, #0
 800c714:	d003      	beq.n	800c71e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fc1b 	bl	800cf54 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c720:	3301      	adds	r3, #1
 800c722:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c726:	085b      	lsrs	r3, r3, #1
 800c728:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f47f af49 	bne.w	800c5c4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4618      	mov	r0, r3
 800c738:	f004 f88f 	bl	801085a <USB_ReadInterrupts>
 800c73c:	4603      	mov	r3, r0
 800c73e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c746:	d122      	bne.n	800c78e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	69fa      	ldr	r2, [r7, #28]
 800c752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c756:	f023 0301 	bic.w	r3, r3, #1
 800c75a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c762:	2b01      	cmp	r3, #1
 800c764:	d108      	bne.n	800c778 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c76e:	2100      	movs	r1, #0
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fe27 	bl	800d3c4 <HAL_PCDEx_LPM_Callback>
 800c776:	e002      	b.n	800c77e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f008 ff71 	bl	8015660 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	695a      	ldr	r2, [r3, #20]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c78c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f004 f861 	bl	801085a <USB_ReadInterrupts>
 800c798:	4603      	mov	r3, r0
 800c79a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c79e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7a2:	d112      	bne.n	800c7ca <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	f003 0301 	and.w	r3, r3, #1
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d102      	bne.n	800c7ba <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f008 ff2d 	bl	8015614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	695a      	ldr	r2, [r3, #20]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c7c8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f004 f843 	bl	801085a <USB_ReadInterrupts>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c7da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7de:	f040 80c7 	bne.w	800c970 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	69fa      	ldr	r2, [r7, #28]
 800c7ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7f0:	f023 0301 	bic.w	r3, r3, #1
 800c7f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2110      	movs	r1, #16
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f003 f911 	bl	800fa24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c802:	2300      	movs	r3, #0
 800c804:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c806:	e056      	b.n	800c8b6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	015a      	lsls	r2, r3, #5
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	4413      	add	r3, r2
 800c810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c814:	461a      	mov	r2, r3
 800c816:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c81a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	015a      	lsls	r2, r3, #5
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	4413      	add	r3, r2
 800c824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c82c:	0151      	lsls	r1, r2, #5
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	440a      	add	r2, r1
 800c832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c83a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	015a      	lsls	r2, r3, #5
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	4413      	add	r3, r2
 800c844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c84c:	0151      	lsls	r1, r2, #5
 800c84e:	69fa      	ldr	r2, [r7, #28]
 800c850:	440a      	add	r2, r1
 800c852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c856:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c85a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	015a      	lsls	r2, r3, #5
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	4413      	add	r3, r2
 800c864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c868:	461a      	mov	r2, r3
 800c86a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c86e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	015a      	lsls	r2, r3, #5
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	4413      	add	r3, r2
 800c878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c880:	0151      	lsls	r1, r2, #5
 800c882:	69fa      	ldr	r2, [r7, #28]
 800c884:	440a      	add	r2, r1
 800c886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c88a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c88e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c892:	015a      	lsls	r2, r3, #5
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	4413      	add	r3, r2
 800c898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a0:	0151      	lsls	r1, r2, #5
 800c8a2:	69fa      	ldr	r2, [r7, #28]
 800c8a4:	440a      	add	r2, r1
 800c8a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c8ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d3a3      	bcc.n	800c808 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c6:	69db      	ldr	r3, [r3, #28]
 800c8c8:	69fa      	ldr	r2, [r7, #28]
 800c8ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c8d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d016      	beq.n	800c90a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8e6:	69fa      	ldr	r2, [r7, #28]
 800c8e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8ec:	f043 030b 	orr.w	r3, r3, #11
 800c8f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8fc:	69fa      	ldr	r2, [r7, #28]
 800c8fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c902:	f043 030b 	orr.w	r3, r3, #11
 800c906:	6453      	str	r3, [r2, #68]	; 0x44
 800c908:	e015      	b.n	800c936 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	69fa      	ldr	r2, [r7, #28]
 800c914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c918:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c91c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c920:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	69fa      	ldr	r2, [r7, #28]
 800c92c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c930:	f043 030b 	orr.w	r3, r3, #11
 800c934:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c936:	69fb      	ldr	r3, [r7, #28]
 800c938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	69fa      	ldr	r2, [r7, #28]
 800c940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c944:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c948:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6818      	ldr	r0, [r3, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	691b      	ldr	r3, [r3, #16]
 800c952:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c95a:	461a      	mov	r2, r3
 800c95c:	f004 f842 	bl	80109e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	695a      	ldr	r2, [r3, #20]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c96e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4618      	mov	r0, r3
 800c976:	f003 ff70 	bl	801085a <USB_ReadInterrupts>
 800c97a:	4603      	mov	r3, r0
 800c97c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c984:	d124      	bne.n	800c9d0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4618      	mov	r0, r3
 800c98c:	f004 f806 	bl	801099c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4618      	mov	r0, r3
 800c996:	f003 f8a6 	bl	800fae6 <USB_GetDevSpeed>
 800c99a:	4603      	mov	r3, r0
 800c99c:	461a      	mov	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681c      	ldr	r4, [r3, #0]
 800c9a6:	f001 f947 	bl	800dc38 <HAL_RCC_GetHCLKFreq>
 800c9aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	f002 fde3 	bl	800f580 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f008 fe01 	bl	80155c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	695a      	ldr	r2, [r3, #20]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c9ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f003 ff40 	bl	801085a <USB_ReadInterrupts>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f003 0308 	and.w	r3, r3, #8
 800c9e0:	2b08      	cmp	r3, #8
 800c9e2:	d10a      	bne.n	800c9fa <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f008 fdde 	bl	80155a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	695a      	ldr	r2, [r3, #20]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f002 0208 	and.w	r2, r2, #8
 800c9f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f003 ff2b 	bl	801085a <USB_ReadInterrupts>
 800ca04:	4603      	mov	r3, r0
 800ca06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca0e:	d10f      	bne.n	800ca30 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800ca10:	2300      	movs	r3, #0
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ca14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	4619      	mov	r1, r3
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f008 fe40 	bl	80156a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	695a      	ldr	r2, [r3, #20]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ca2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f003 ff10 	bl	801085a <USB_ReadInterrupts>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca44:	d10f      	bne.n	800ca66 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800ca46:	2300      	movs	r3, #0
 800ca48:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	4619      	mov	r1, r3
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f008 fe13 	bl	801567c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	695a      	ldr	r2, [r3, #20]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ca64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f003 fef5 	bl	801085a <USB_ReadInterrupts>
 800ca70:	4603      	mov	r3, r0
 800ca72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca7a:	d10a      	bne.n	800ca92 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f008 fe21 	bl	80156c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	695a      	ldr	r2, [r3, #20]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ca90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f003 fedf 	bl	801085a <USB_ReadInterrupts>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	f003 0304 	and.w	r3, r3, #4
 800caa2:	2b04      	cmp	r3, #4
 800caa4:	d115      	bne.n	800cad2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	f003 0304 	and.w	r3, r3, #4
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d002      	beq.n	800cabe <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f008 fe11 	bl	80156e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	6859      	ldr	r1, [r3, #4]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	69ba      	ldr	r2, [r7, #24]
 800caca:	430a      	orrs	r2, r1
 800cacc:	605a      	str	r2, [r3, #4]
 800cace:	e000      	b.n	800cad2 <HAL_PCD_IRQHandler+0x75e>
      return;
 800cad0:	bf00      	nop
    }
  }
}
 800cad2:	3734      	adds	r7, #52	; 0x34
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd90      	pop	{r4, r7, pc}

0800cad8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	460b      	mov	r3, r1
 800cae2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800caea:	2b01      	cmp	r3, #1
 800caec:	d101      	bne.n	800caf2 <HAL_PCD_SetAddress+0x1a>
 800caee:	2302      	movs	r3, #2
 800caf0:	e013      	b.n	800cb1a <HAL_PCD_SetAddress+0x42>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2201      	movs	r2, #1
 800caf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	78fa      	ldrb	r2, [r7, #3]
 800cafe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	78fa      	ldrb	r2, [r7, #3]
 800cb08:	4611      	mov	r1, r2
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f003 fe3d 	bl	801078a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b084      	sub	sp, #16
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
 800cb2a:	4608      	mov	r0, r1
 800cb2c:	4611      	mov	r1, r2
 800cb2e:	461a      	mov	r2, r3
 800cb30:	4603      	mov	r3, r0
 800cb32:	70fb      	strb	r3, [r7, #3]
 800cb34:	460b      	mov	r3, r1
 800cb36:	803b      	strh	r3, [r7, #0]
 800cb38:	4613      	mov	r3, r2
 800cb3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cb40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	da0f      	bge.n	800cb68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb48:	78fb      	ldrb	r3, [r7, #3]
 800cb4a:	f003 020f 	and.w	r2, r3, #15
 800cb4e:	4613      	mov	r3, r2
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	1a9b      	subs	r3, r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	3338      	adds	r3, #56	; 0x38
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2201      	movs	r2, #1
 800cb64:	705a      	strb	r2, [r3, #1]
 800cb66:	e00f      	b.n	800cb88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb68:	78fb      	ldrb	r3, [r7, #3]
 800cb6a:	f003 020f 	and.w	r2, r3, #15
 800cb6e:	4613      	mov	r3, r2
 800cb70:	00db      	lsls	r3, r3, #3
 800cb72:	1a9b      	subs	r3, r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	3304      	adds	r3, #4
 800cb80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cb88:	78fb      	ldrb	r3, [r7, #3]
 800cb8a:	f003 030f 	and.w	r3, r3, #15
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800cb94:	883a      	ldrh	r2, [r7, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	78ba      	ldrb	r2, [r7, #2]
 800cb9e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	785b      	ldrb	r3, [r3, #1]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d004      	beq.n	800cbb2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cbb2:	78bb      	ldrb	r3, [r7, #2]
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d102      	bne.n	800cbbe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d101      	bne.n	800cbcc <HAL_PCD_EP_Open+0xaa>
 800cbc8:	2302      	movs	r3, #2
 800cbca:	e00e      	b.n	800cbea <HAL_PCD_EP_Open+0xc8>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68f9      	ldr	r1, [r7, #12]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f002 ffa8 	bl	800fb30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800cbe8:	7afb      	ldrb	r3, [r7, #11]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cbfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	da0f      	bge.n	800cc26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc06:	78fb      	ldrb	r3, [r7, #3]
 800cc08:	f003 020f 	and.w	r2, r3, #15
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	00db      	lsls	r3, r3, #3
 800cc10:	1a9b      	subs	r3, r3, r2
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	3338      	adds	r3, #56	; 0x38
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	4413      	add	r3, r2
 800cc1a:	3304      	adds	r3, #4
 800cc1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2201      	movs	r2, #1
 800cc22:	705a      	strb	r2, [r3, #1]
 800cc24:	e00f      	b.n	800cc46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc26:	78fb      	ldrb	r3, [r7, #3]
 800cc28:	f003 020f 	and.w	r2, r3, #15
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	00db      	lsls	r3, r3, #3
 800cc30:	1a9b      	subs	r3, r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	3304      	adds	r3, #4
 800cc3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cc46:	78fb      	ldrb	r3, [r7, #3]
 800cc48:	f003 030f 	and.w	r3, r3, #15
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d101      	bne.n	800cc60 <HAL_PCD_EP_Close+0x6e>
 800cc5c:	2302      	movs	r3, #2
 800cc5e:	e00e      	b.n	800cc7e <HAL_PCD_EP_Close+0x8c>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2201      	movs	r2, #1
 800cc64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68f9      	ldr	r1, [r7, #12]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f002 ffe6 	bl	800fc40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b086      	sub	sp, #24
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	60f8      	str	r0, [r7, #12]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
 800cc92:	460b      	mov	r3, r1
 800cc94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc96:	7afb      	ldrb	r3, [r7, #11]
 800cc98:	f003 020f 	and.w	r2, r3, #15
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	00db      	lsls	r3, r3, #3
 800cca0:	1a9b      	subs	r3, r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	4413      	add	r3, r2
 800ccac:	3304      	adds	r3, #4
 800ccae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	683a      	ldr	r2, [r7, #0]
 800ccba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ccc8:	7afb      	ldrb	r3, [r7, #11]
 800ccca:	f003 030f 	and.w	r3, r3, #15
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	691b      	ldr	r3, [r3, #16]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d102      	bne.n	800cce2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cce2:	7afb      	ldrb	r3, [r7, #11]
 800cce4:	f003 030f 	and.w	r3, r3, #15
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d109      	bne.n	800cd00 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6818      	ldr	r0, [r3, #0]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	6979      	ldr	r1, [r7, #20]
 800ccfa:	f003 fac1 	bl	8010280 <USB_EP0StartXfer>
 800ccfe:	e008      	b.n	800cd12 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6818      	ldr	r0, [r3, #0]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	6979      	ldr	r1, [r7, #20]
 800cd0e:	f003 f873 	bl	800fdf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3718      	adds	r7, #24
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	460b      	mov	r3, r1
 800cd26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cd28:	78fb      	ldrb	r3, [r7, #3]
 800cd2a:	f003 020f 	and.w	r2, r3, #15
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	4613      	mov	r3, r2
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	1a9b      	subs	r3, r3, r2
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	440b      	add	r3, r1
 800cd3a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800cd3e:	681b      	ldr	r3, [r3, #0]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	607a      	str	r2, [r7, #4]
 800cd56:	603b      	str	r3, [r7, #0]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd5c:	7afb      	ldrb	r3, [r7, #11]
 800cd5e:	f003 020f 	and.w	r2, r3, #15
 800cd62:	4613      	mov	r3, r2
 800cd64:	00db      	lsls	r3, r3, #3
 800cd66:	1a9b      	subs	r3, r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	3338      	adds	r3, #56	; 0x38
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	4413      	add	r3, r2
 800cd70:	3304      	adds	r3, #4
 800cd72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	683a      	ldr	r2, [r7, #0]
 800cd7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	2200      	movs	r2, #0
 800cd84:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cd8c:	7afb      	ldrb	r3, [r7, #11]
 800cd8e:	f003 030f 	and.w	r3, r3, #15
 800cd92:	b2da      	uxtb	r2, r3
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d102      	bne.n	800cda6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cda6:	7afb      	ldrb	r3, [r7, #11]
 800cda8:	f003 030f 	and.w	r3, r3, #15
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d109      	bne.n	800cdc4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6818      	ldr	r0, [r3, #0]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	461a      	mov	r2, r3
 800cdbc:	6979      	ldr	r1, [r7, #20]
 800cdbe:	f003 fa5f 	bl	8010280 <USB_EP0StartXfer>
 800cdc2:	e008      	b.n	800cdd6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6818      	ldr	r0, [r3, #0]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	691b      	ldr	r3, [r3, #16]
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	461a      	mov	r2, r3
 800cdd0:	6979      	ldr	r1, [r7, #20]
 800cdd2:	f003 f811 	bl	800fdf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cdec:	78fb      	ldrb	r3, [r7, #3]
 800cdee:	f003 020f 	and.w	r2, r3, #15
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d901      	bls.n	800cdfe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e050      	b.n	800cea0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cdfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	da0f      	bge.n	800ce26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce06:	78fb      	ldrb	r3, [r7, #3]
 800ce08:	f003 020f 	and.w	r2, r3, #15
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	00db      	lsls	r3, r3, #3
 800ce10:	1a9b      	subs	r3, r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	3338      	adds	r3, #56	; 0x38
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	4413      	add	r3, r2
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2201      	movs	r2, #1
 800ce22:	705a      	strb	r2, [r3, #1]
 800ce24:	e00d      	b.n	800ce42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ce26:	78fa      	ldrb	r2, [r7, #3]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	00db      	lsls	r3, r3, #3
 800ce2c:	1a9b      	subs	r3, r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	4413      	add	r3, r2
 800ce38:	3304      	adds	r3, #4
 800ce3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2201      	movs	r2, #1
 800ce46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce48:	78fb      	ldrb	r3, [r7, #3]
 800ce4a:	f003 030f 	and.w	r3, r3, #15
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d101      	bne.n	800ce62 <HAL_PCD_EP_SetStall+0x82>
 800ce5e:	2302      	movs	r3, #2
 800ce60:	e01e      	b.n	800cea0 <HAL_PCD_EP_SetStall+0xc0>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2201      	movs	r2, #1
 800ce66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68f9      	ldr	r1, [r7, #12]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f003 fbb6 	bl	80105e2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ce76:	78fb      	ldrb	r3, [r7, #3]
 800ce78:	f003 030f 	and.w	r3, r3, #15
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d10a      	bne.n	800ce96 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6818      	ldr	r0, [r3, #0]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	b2d9      	uxtb	r1, r3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ce90:	461a      	mov	r2, r3
 800ce92:	f003 fda7 	bl	80109e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3710      	adds	r7, #16
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ceb4:	78fb      	ldrb	r3, [r7, #3]
 800ceb6:	f003 020f 	and.w	r2, r3, #15
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d901      	bls.n	800cec6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e042      	b.n	800cf4c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	da0f      	bge.n	800ceee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cece:	78fb      	ldrb	r3, [r7, #3]
 800ced0:	f003 020f 	and.w	r2, r3, #15
 800ced4:	4613      	mov	r3, r2
 800ced6:	00db      	lsls	r3, r3, #3
 800ced8:	1a9b      	subs	r3, r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	3338      	adds	r3, #56	; 0x38
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	4413      	add	r3, r2
 800cee2:	3304      	adds	r3, #4
 800cee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2201      	movs	r2, #1
 800ceea:	705a      	strb	r2, [r3, #1]
 800ceec:	e00f      	b.n	800cf0e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ceee:	78fb      	ldrb	r3, [r7, #3]
 800cef0:	f003 020f 	and.w	r2, r3, #15
 800cef4:	4613      	mov	r3, r2
 800cef6:	00db      	lsls	r3, r3, #3
 800cef8:	1a9b      	subs	r3, r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	4413      	add	r3, r2
 800cf04:	3304      	adds	r3, #4
 800cf06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf14:	78fb      	ldrb	r3, [r7, #3]
 800cf16:	f003 030f 	and.w	r3, r3, #15
 800cf1a:	b2da      	uxtb	r2, r3
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d101      	bne.n	800cf2e <HAL_PCD_EP_ClrStall+0x86>
 800cf2a:	2302      	movs	r3, #2
 800cf2c:	e00e      	b.n	800cf4c <HAL_PCD_EP_ClrStall+0xa4>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	68f9      	ldr	r1, [r7, #12]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f003 fbbe 	bl	80106be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cf4a:	2300      	movs	r3, #0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08a      	sub	sp, #40	; 0x28
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	00db      	lsls	r3, r3, #3
 800cf6e:	1a9b      	subs	r3, r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	3338      	adds	r3, #56	; 0x38
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	4413      	add	r3, r2
 800cf78:	3304      	adds	r3, #4
 800cf7a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	699a      	ldr	r2, [r3, #24]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	695b      	ldr	r3, [r3, #20]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d901      	bls.n	800cf8c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e06c      	b.n	800d066 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	695a      	ldr	r2, [r3, #20]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	699b      	ldr	r3, [r3, #24]
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	69fa      	ldr	r2, [r7, #28]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d902      	bls.n	800cfa8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	3303      	adds	r3, #3
 800cfac:	089b      	lsrs	r3, r3, #2
 800cfae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfb0:	e02b      	b.n	800d00a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	695a      	ldr	r2, [r3, #20]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	699b      	ldr	r3, [r3, #24]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	69fa      	ldr	r2, [r7, #28]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d902      	bls.n	800cfce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	3303      	adds	r3, #3
 800cfd2:	089b      	lsrs	r3, r3, #2
 800cfd4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	68d9      	ldr	r1, [r3, #12]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	4603      	mov	r3, r0
 800cfec:	6978      	ldr	r0, [r7, #20]
 800cfee:	f003 fa9a 	bl	8010526 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	68da      	ldr	r2, [r3, #12]
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	441a      	add	r2, r3
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	699a      	ldr	r2, [r3, #24]
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	441a      	add	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	015a      	lsls	r2, r3, #5
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	4413      	add	r3, r2
 800d012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d016:	699b      	ldr	r3, [r3, #24]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	69ba      	ldr	r2, [r7, #24]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d809      	bhi.n	800d034 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	699a      	ldr	r2, [r3, #24]
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d028:	429a      	cmp	r2, r3
 800d02a:	d203      	bcs.n	800d034 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d1be      	bne.n	800cfb2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	695a      	ldr	r2, [r3, #20]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d811      	bhi.n	800d064 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	f003 030f 	and.w	r3, r3, #15
 800d046:	2201      	movs	r2, #1
 800d048:	fa02 f303 	lsl.w	r3, r2, r3
 800d04c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	43db      	mvns	r3, r3
 800d05a:	6939      	ldr	r1, [r7, #16]
 800d05c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d060:	4013      	ands	r3, r2
 800d062:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3720      	adds	r7, #32
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
	...

0800d070 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	333c      	adds	r3, #60	; 0x3c
 800d088:	3304      	adds	r3, #4
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	015a      	lsls	r2, r3, #5
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	4413      	add	r3, r2
 800d096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	691b      	ldr	r3, [r3, #16]
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	f040 80a0 	bne.w	800d1e8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	f003 0308 	and.w	r3, r3, #8
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d015      	beq.n	800d0de <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	4a72      	ldr	r2, [pc, #456]	; (800d280 <PCD_EP_OutXfrComplete_int+0x210>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	f240 80dd 	bls.w	800d276 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 80d7 	beq.w	800d276 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	015a      	lsls	r2, r3, #5
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0da:	6093      	str	r3, [r2, #8]
 800d0dc:	e0cb      	b.n	800d276 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	f003 0320 	and.w	r3, r3, #32
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d009      	beq.n	800d0fc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	015a      	lsls	r2, r3, #5
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	2320      	movs	r3, #32
 800d0f8:	6093      	str	r3, [r2, #8]
 800d0fa:	e0bc      	b.n	800d276 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d102:	2b00      	cmp	r3, #0
 800d104:	f040 80b7 	bne.w	800d276 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	4a5d      	ldr	r2, [pc, #372]	; (800d280 <PCD_EP_OutXfrComplete_int+0x210>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d90f      	bls.n	800d130 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00a      	beq.n	800d130 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	015a      	lsls	r2, r3, #5
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	4413      	add	r3, r2
 800d122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d126:	461a      	mov	r2, r3
 800d128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d12c:	6093      	str	r3, [r2, #8]
 800d12e:	e0a2      	b.n	800d276 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800d130:	6879      	ldr	r1, [r7, #4]
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	4613      	mov	r3, r2
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	1a9b      	subs	r3, r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	440b      	add	r3, r1
 800d13e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d142:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	0159      	lsls	r1, r3, #5
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	440b      	add	r3, r1
 800d14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d150:	691b      	ldr	r3, [r3, #16]
 800d152:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d156:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	4613      	mov	r3, r2
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	1a9b      	subs	r3, r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4403      	add	r3, r0
 800d166:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d16a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d16c:	6879      	ldr	r1, [r7, #4]
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	4613      	mov	r3, r2
 800d172:	00db      	lsls	r3, r3, #3
 800d174:	1a9b      	subs	r3, r3, r2
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	440b      	add	r3, r1
 800d17a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d17e:	6819      	ldr	r1, [r3, #0]
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	4613      	mov	r3, r2
 800d186:	00db      	lsls	r3, r3, #3
 800d188:	1a9b      	subs	r3, r3, r2
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	4403      	add	r3, r0
 800d18e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4419      	add	r1, r3
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	683a      	ldr	r2, [r7, #0]
 800d19a:	4613      	mov	r3, r2
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	1a9b      	subs	r3, r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4403      	add	r3, r0
 800d1a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d1a8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d114      	bne.n	800d1da <PCD_EP_OutXfrComplete_int+0x16a>
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	00db      	lsls	r3, r3, #3
 800d1b8:	1a9b      	subs	r3, r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	440b      	add	r3, r1
 800d1be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d108      	bne.n	800d1da <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6818      	ldr	r0, [r3, #0]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	2101      	movs	r1, #1
 800d1d6:	f003 fc05 	bl	80109e4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	4619      	mov	r1, r3
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f008 f9ab 	bl	801553c <HAL_PCD_DataOutStageCallback>
 800d1e6:	e046      	b.n	800d276 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	4a26      	ldr	r2, [pc, #152]	; (800d284 <PCD_EP_OutXfrComplete_int+0x214>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d124      	bne.n	800d23a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00a      	beq.n	800d210 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	015a      	lsls	r2, r3, #5
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	4413      	add	r3, r2
 800d202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d206:	461a      	mov	r2, r3
 800d208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d20c:	6093      	str	r3, [r2, #8]
 800d20e:	e032      	b.n	800d276 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	f003 0320 	and.w	r3, r3, #32
 800d216:	2b00      	cmp	r3, #0
 800d218:	d008      	beq.n	800d22c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	015a      	lsls	r2, r3, #5
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	4413      	add	r3, r2
 800d222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d226:	461a      	mov	r2, r3
 800d228:	2320      	movs	r3, #32
 800d22a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	4619      	mov	r1, r3
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f008 f982 	bl	801553c <HAL_PCD_DataOutStageCallback>
 800d238:	e01d      	b.n	800d276 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d114      	bne.n	800d26a <PCD_EP_OutXfrComplete_int+0x1fa>
 800d240:	6879      	ldr	r1, [r7, #4]
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	4613      	mov	r3, r2
 800d246:	00db      	lsls	r3, r3, #3
 800d248:	1a9b      	subs	r3, r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	440b      	add	r3, r1
 800d24e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d108      	bne.n	800d26a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6818      	ldr	r0, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d262:	461a      	mov	r2, r3
 800d264:	2100      	movs	r1, #0
 800d266:	f003 fbbd 	bl	80109e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	4619      	mov	r1, r3
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f008 f963 	bl	801553c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	4f54300a 	.word	0x4f54300a
 800d284:	4f54310a 	.word	0x4f54310a

0800d288 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	333c      	adds	r3, #60	; 0x3c
 800d2a0:	3304      	adds	r3, #4
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	4a15      	ldr	r2, [pc, #84]	; (800d310 <PCD_EP_OutSetupPacket_int+0x88>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d90e      	bls.n	800d2dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d009      	beq.n	800d2dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	015a      	lsls	r2, r3, #5
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f008 f91b 	bl	8015518 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	4a0a      	ldr	r2, [pc, #40]	; (800d310 <PCD_EP_OutSetupPacket_int+0x88>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d90c      	bls.n	800d304 <PCD_EP_OutSetupPacket_int+0x7c>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d108      	bne.n	800d304 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6818      	ldr	r0, [r3, #0]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	2101      	movs	r1, #1
 800d300:	f003 fb70 	bl	80109e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3718      	adds	r7, #24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	4f54300a 	.word	0x4f54300a

0800d314 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d314:	b480      	push	{r7}
 800d316:	b085      	sub	sp, #20
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	460b      	mov	r3, r1
 800d31e:	70fb      	strb	r3, [r7, #3]
 800d320:	4613      	mov	r3, r2
 800d322:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d32c:	78fb      	ldrb	r3, [r7, #3]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d107      	bne.n	800d342 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d332:	883b      	ldrh	r3, [r7, #0]
 800d334:	0419      	lsls	r1, r3, #16
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	430a      	orrs	r2, r1
 800d33e:	629a      	str	r2, [r3, #40]	; 0x28
 800d340:	e028      	b.n	800d394 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d348:	0c1b      	lsrs	r3, r3, #16
 800d34a:	68ba      	ldr	r2, [r7, #8]
 800d34c:	4413      	add	r3, r2
 800d34e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d350:	2300      	movs	r3, #0
 800d352:	73fb      	strb	r3, [r7, #15]
 800d354:	e00d      	b.n	800d372 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
 800d35c:	3340      	adds	r3, #64	; 0x40
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	0c1b      	lsrs	r3, r3, #16
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	4413      	add	r3, r2
 800d36a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	3301      	adds	r3, #1
 800d370:	73fb      	strb	r3, [r7, #15]
 800d372:	7bfa      	ldrb	r2, [r7, #15]
 800d374:	78fb      	ldrb	r3, [r7, #3]
 800d376:	3b01      	subs	r3, #1
 800d378:	429a      	cmp	r2, r3
 800d37a:	d3ec      	bcc.n	800d356 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d37c:	883b      	ldrh	r3, [r7, #0]
 800d37e:	0418      	lsls	r0, r3, #16
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6819      	ldr	r1, [r3, #0]
 800d384:	78fb      	ldrb	r3, [r7, #3]
 800d386:	3b01      	subs	r3, #1
 800d388:	68ba      	ldr	r2, [r7, #8]
 800d38a:	4302      	orrs	r2, r0
 800d38c:	3340      	adds	r3, #64	; 0x40
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	440b      	add	r3, r1
 800d392:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3714      	adds	r7, #20
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr

0800d3a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d3a2:	b480      	push	{r7}
 800d3a4:	b083      	sub	sp, #12
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	887a      	ldrh	r2, [r7, #2]
 800d3b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d3b6:	2300      	movs	r3, #0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d3d0:	bf00      	nop
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b086      	sub	sp, #24
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d101      	bne.n	800d3ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e25b      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f003 0301 	and.w	r3, r3, #1
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d075      	beq.n	800d4e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d3fa:	4ba3      	ldr	r3, [pc, #652]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	f003 030c 	and.w	r3, r3, #12
 800d402:	2b04      	cmp	r3, #4
 800d404:	d00c      	beq.n	800d420 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d406:	4ba0      	ldr	r3, [pc, #640]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d40e:	2b08      	cmp	r3, #8
 800d410:	d112      	bne.n	800d438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d412:	4b9d      	ldr	r3, [pc, #628]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d41a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d41e:	d10b      	bne.n	800d438 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d420:	4b99      	ldr	r3, [pc, #612]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d05b      	beq.n	800d4e4 <HAL_RCC_OscConfig+0x108>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d157      	bne.n	800d4e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d434:	2301      	movs	r3, #1
 800d436:	e236      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d440:	d106      	bne.n	800d450 <HAL_RCC_OscConfig+0x74>
 800d442:	4b91      	ldr	r3, [pc, #580]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a90      	ldr	r2, [pc, #576]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	e01d      	b.n	800d48c <HAL_RCC_OscConfig+0xb0>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d458:	d10c      	bne.n	800d474 <HAL_RCC_OscConfig+0x98>
 800d45a:	4b8b      	ldr	r3, [pc, #556]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a8a      	ldr	r2, [pc, #552]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d464:	6013      	str	r3, [r2, #0]
 800d466:	4b88      	ldr	r3, [pc, #544]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a87      	ldr	r2, [pc, #540]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d46c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	e00b      	b.n	800d48c <HAL_RCC_OscConfig+0xb0>
 800d474:	4b84      	ldr	r3, [pc, #528]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a83      	ldr	r2, [pc, #524]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d47a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d47e:	6013      	str	r3, [r2, #0]
 800d480:	4b81      	ldr	r3, [pc, #516]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a80      	ldr	r2, [pc, #512]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d48a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d013      	beq.n	800d4bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d494:	f7fd ff66 	bl	800b364 <HAL_GetTick>
 800d498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d49a:	e008      	b.n	800d4ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d49c:	f7fd ff62 	bl	800b364 <HAL_GetTick>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	1ad3      	subs	r3, r2, r3
 800d4a6:	2b64      	cmp	r3, #100	; 0x64
 800d4a8:	d901      	bls.n	800d4ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d4aa:	2303      	movs	r3, #3
 800d4ac:	e1fb      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d4ae:	4b76      	ldr	r3, [pc, #472]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d0f0      	beq.n	800d49c <HAL_RCC_OscConfig+0xc0>
 800d4ba:	e014      	b.n	800d4e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d4bc:	f7fd ff52 	bl	800b364 <HAL_GetTick>
 800d4c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d4c2:	e008      	b.n	800d4d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d4c4:	f7fd ff4e 	bl	800b364 <HAL_GetTick>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	2b64      	cmp	r3, #100	; 0x64
 800d4d0:	d901      	bls.n	800d4d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d4d2:	2303      	movs	r3, #3
 800d4d4:	e1e7      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d4d6:	4b6c      	ldr	r3, [pc, #432]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1f0      	bne.n	800d4c4 <HAL_RCC_OscConfig+0xe8>
 800d4e2:	e000      	b.n	800d4e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d4e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f003 0302 	and.w	r3, r3, #2
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d063      	beq.n	800d5ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d4f2:	4b65      	ldr	r3, [pc, #404]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	f003 030c 	and.w	r3, r3, #12
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00b      	beq.n	800d516 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d4fe:	4b62      	ldr	r3, [pc, #392]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d506:	2b08      	cmp	r3, #8
 800d508:	d11c      	bne.n	800d544 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d50a:	4b5f      	ldr	r3, [pc, #380]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d512:	2b00      	cmp	r3, #0
 800d514:	d116      	bne.n	800d544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d516:	4b5c      	ldr	r3, [pc, #368]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 0302 	and.w	r3, r3, #2
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d005      	beq.n	800d52e <HAL_RCC_OscConfig+0x152>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	2b01      	cmp	r3, #1
 800d528:	d001      	beq.n	800d52e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	e1bb      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d52e:	4b56      	ldr	r3, [pc, #344]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	00db      	lsls	r3, r3, #3
 800d53c:	4952      	ldr	r1, [pc, #328]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d53e:	4313      	orrs	r3, r2
 800d540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d542:	e03a      	b.n	800d5ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d020      	beq.n	800d58e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d54c:	4b4f      	ldr	r3, [pc, #316]	; (800d68c <HAL_RCC_OscConfig+0x2b0>)
 800d54e:	2201      	movs	r2, #1
 800d550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d552:	f7fd ff07 	bl	800b364 <HAL_GetTick>
 800d556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d558:	e008      	b.n	800d56c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d55a:	f7fd ff03 	bl	800b364 <HAL_GetTick>
 800d55e:	4602      	mov	r2, r0
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	2b02      	cmp	r3, #2
 800d566:	d901      	bls.n	800d56c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d568:	2303      	movs	r3, #3
 800d56a:	e19c      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d56c:	4b46      	ldr	r3, [pc, #280]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f003 0302 	and.w	r3, r3, #2
 800d574:	2b00      	cmp	r3, #0
 800d576:	d0f0      	beq.n	800d55a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d578:	4b43      	ldr	r3, [pc, #268]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	00db      	lsls	r3, r3, #3
 800d586:	4940      	ldr	r1, [pc, #256]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d588:	4313      	orrs	r3, r2
 800d58a:	600b      	str	r3, [r1, #0]
 800d58c:	e015      	b.n	800d5ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d58e:	4b3f      	ldr	r3, [pc, #252]	; (800d68c <HAL_RCC_OscConfig+0x2b0>)
 800d590:	2200      	movs	r2, #0
 800d592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d594:	f7fd fee6 	bl	800b364 <HAL_GetTick>
 800d598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d59a:	e008      	b.n	800d5ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d59c:	f7fd fee2 	bl	800b364 <HAL_GetTick>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	2b02      	cmp	r3, #2
 800d5a8:	d901      	bls.n	800d5ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d5aa:	2303      	movs	r3, #3
 800d5ac:	e17b      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d5ae:	4b36      	ldr	r3, [pc, #216]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f003 0302 	and.w	r3, r3, #2
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1f0      	bne.n	800d59c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f003 0308 	and.w	r3, r3, #8
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d030      	beq.n	800d628 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d016      	beq.n	800d5fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d5ce:	4b30      	ldr	r3, [pc, #192]	; (800d690 <HAL_RCC_OscConfig+0x2b4>)
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5d4:	f7fd fec6 	bl	800b364 <HAL_GetTick>
 800d5d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d5da:	e008      	b.n	800d5ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d5dc:	f7fd fec2 	bl	800b364 <HAL_GetTick>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	2b02      	cmp	r3, #2
 800d5e8:	d901      	bls.n	800d5ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	e15b      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d5ee:	4b26      	ldr	r3, [pc, #152]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5f2:	f003 0302 	and.w	r3, r3, #2
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d0f0      	beq.n	800d5dc <HAL_RCC_OscConfig+0x200>
 800d5fa:	e015      	b.n	800d628 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d5fc:	4b24      	ldr	r3, [pc, #144]	; (800d690 <HAL_RCC_OscConfig+0x2b4>)
 800d5fe:	2200      	movs	r2, #0
 800d600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d602:	f7fd feaf 	bl	800b364 <HAL_GetTick>
 800d606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d608:	e008      	b.n	800d61c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d60a:	f7fd feab 	bl	800b364 <HAL_GetTick>
 800d60e:	4602      	mov	r2, r0
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	2b02      	cmp	r3, #2
 800d616:	d901      	bls.n	800d61c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d618:	2303      	movs	r3, #3
 800d61a:	e144      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d61c:	4b1a      	ldr	r3, [pc, #104]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d61e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d620:	f003 0302 	and.w	r3, r3, #2
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1f0      	bne.n	800d60a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f003 0304 	and.w	r3, r3, #4
 800d630:	2b00      	cmp	r3, #0
 800d632:	f000 80a0 	beq.w	800d776 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d636:	2300      	movs	r3, #0
 800d638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d63a:	4b13      	ldr	r3, [pc, #76]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10f      	bne.n	800d666 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d646:	2300      	movs	r3, #0
 800d648:	60bb      	str	r3, [r7, #8]
 800d64a:	4b0f      	ldr	r3, [pc, #60]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64e:	4a0e      	ldr	r2, [pc, #56]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d654:	6413      	str	r3, [r2, #64]	; 0x40
 800d656:	4b0c      	ldr	r3, [pc, #48]	; (800d688 <HAL_RCC_OscConfig+0x2ac>)
 800d658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d65a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d65e:	60bb      	str	r3, [r7, #8]
 800d660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d662:	2301      	movs	r3, #1
 800d664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d666:	4b0b      	ldr	r3, [pc, #44]	; (800d694 <HAL_RCC_OscConfig+0x2b8>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d121      	bne.n	800d6b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d672:	4b08      	ldr	r3, [pc, #32]	; (800d694 <HAL_RCC_OscConfig+0x2b8>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a07      	ldr	r2, [pc, #28]	; (800d694 <HAL_RCC_OscConfig+0x2b8>)
 800d678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d67c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d67e:	f7fd fe71 	bl	800b364 <HAL_GetTick>
 800d682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d684:	e011      	b.n	800d6aa <HAL_RCC_OscConfig+0x2ce>
 800d686:	bf00      	nop
 800d688:	40023800 	.word	0x40023800
 800d68c:	42470000 	.word	0x42470000
 800d690:	42470e80 	.word	0x42470e80
 800d694:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d698:	f7fd fe64 	bl	800b364 <HAL_GetTick>
 800d69c:	4602      	mov	r2, r0
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d901      	bls.n	800d6aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	e0fd      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d6aa:	4b81      	ldr	r3, [pc, #516]	; (800d8b0 <HAL_RCC_OscConfig+0x4d4>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d0f0      	beq.n	800d698 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d106      	bne.n	800d6cc <HAL_RCC_OscConfig+0x2f0>
 800d6be:	4b7d      	ldr	r3, [pc, #500]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6c2:	4a7c      	ldr	r2, [pc, #496]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d6c4:	f043 0301 	orr.w	r3, r3, #1
 800d6c8:	6713      	str	r3, [r2, #112]	; 0x70
 800d6ca:	e01c      	b.n	800d706 <HAL_RCC_OscConfig+0x32a>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	2b05      	cmp	r3, #5
 800d6d2:	d10c      	bne.n	800d6ee <HAL_RCC_OscConfig+0x312>
 800d6d4:	4b77      	ldr	r3, [pc, #476]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d8:	4a76      	ldr	r2, [pc, #472]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d6da:	f043 0304 	orr.w	r3, r3, #4
 800d6de:	6713      	str	r3, [r2, #112]	; 0x70
 800d6e0:	4b74      	ldr	r3, [pc, #464]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6e4:	4a73      	ldr	r2, [pc, #460]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d6e6:	f043 0301 	orr.w	r3, r3, #1
 800d6ea:	6713      	str	r3, [r2, #112]	; 0x70
 800d6ec:	e00b      	b.n	800d706 <HAL_RCC_OscConfig+0x32a>
 800d6ee:	4b71      	ldr	r3, [pc, #452]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6f2:	4a70      	ldr	r2, [pc, #448]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d6f4:	f023 0301 	bic.w	r3, r3, #1
 800d6f8:	6713      	str	r3, [r2, #112]	; 0x70
 800d6fa:	4b6e      	ldr	r3, [pc, #440]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6fe:	4a6d      	ldr	r2, [pc, #436]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d700:	f023 0304 	bic.w	r3, r3, #4
 800d704:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d015      	beq.n	800d73a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d70e:	f7fd fe29 	bl	800b364 <HAL_GetTick>
 800d712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d714:	e00a      	b.n	800d72c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d716:	f7fd fe25 	bl	800b364 <HAL_GetTick>
 800d71a:	4602      	mov	r2, r0
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	f241 3288 	movw	r2, #5000	; 0x1388
 800d724:	4293      	cmp	r3, r2
 800d726:	d901      	bls.n	800d72c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d728:	2303      	movs	r3, #3
 800d72a:	e0bc      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d72c:	4b61      	ldr	r3, [pc, #388]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d730:	f003 0302 	and.w	r3, r3, #2
 800d734:	2b00      	cmp	r3, #0
 800d736:	d0ee      	beq.n	800d716 <HAL_RCC_OscConfig+0x33a>
 800d738:	e014      	b.n	800d764 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d73a:	f7fd fe13 	bl	800b364 <HAL_GetTick>
 800d73e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d740:	e00a      	b.n	800d758 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d742:	f7fd fe0f 	bl	800b364 <HAL_GetTick>
 800d746:	4602      	mov	r2, r0
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d750:	4293      	cmp	r3, r2
 800d752:	d901      	bls.n	800d758 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d754:	2303      	movs	r3, #3
 800d756:	e0a6      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d758:	4b56      	ldr	r3, [pc, #344]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d75c:	f003 0302 	and.w	r3, r3, #2
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1ee      	bne.n	800d742 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d764:	7dfb      	ldrb	r3, [r7, #23]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d105      	bne.n	800d776 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d76a:	4b52      	ldr	r3, [pc, #328]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76e:	4a51      	ldr	r2, [pc, #324]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d774:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 8092 	beq.w	800d8a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d780:	4b4c      	ldr	r3, [pc, #304]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	f003 030c 	and.w	r3, r3, #12
 800d788:	2b08      	cmp	r3, #8
 800d78a:	d05c      	beq.n	800d846 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	699b      	ldr	r3, [r3, #24]
 800d790:	2b02      	cmp	r3, #2
 800d792:	d141      	bne.n	800d818 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d794:	4b48      	ldr	r3, [pc, #288]	; (800d8b8 <HAL_RCC_OscConfig+0x4dc>)
 800d796:	2200      	movs	r2, #0
 800d798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d79a:	f7fd fde3 	bl	800b364 <HAL_GetTick>
 800d79e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d7a0:	e008      	b.n	800d7b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d7a2:	f7fd fddf 	bl	800b364 <HAL_GetTick>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	1ad3      	subs	r3, r2, r3
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	d901      	bls.n	800d7b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d7b0:	2303      	movs	r3, #3
 800d7b2:	e078      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d7b4:	4b3f      	ldr	r3, [pc, #252]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d1f0      	bne.n	800d7a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	69da      	ldr	r2, [r3, #28]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6a1b      	ldr	r3, [r3, #32]
 800d7c8:	431a      	orrs	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ce:	019b      	lsls	r3, r3, #6
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7d6:	085b      	lsrs	r3, r3, #1
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	041b      	lsls	r3, r3, #16
 800d7dc:	431a      	orrs	r2, r3
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e2:	061b      	lsls	r3, r3, #24
 800d7e4:	4933      	ldr	r1, [pc, #204]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d7ea:	4b33      	ldr	r3, [pc, #204]	; (800d8b8 <HAL_RCC_OscConfig+0x4dc>)
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d7f0:	f7fd fdb8 	bl	800b364 <HAL_GetTick>
 800d7f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d7f6:	e008      	b.n	800d80a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d7f8:	f7fd fdb4 	bl	800b364 <HAL_GetTick>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	2b02      	cmp	r3, #2
 800d804:	d901      	bls.n	800d80a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d806:	2303      	movs	r3, #3
 800d808:	e04d      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d80a:	4b2a      	ldr	r3, [pc, #168]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d812:	2b00      	cmp	r3, #0
 800d814:	d0f0      	beq.n	800d7f8 <HAL_RCC_OscConfig+0x41c>
 800d816:	e045      	b.n	800d8a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d818:	4b27      	ldr	r3, [pc, #156]	; (800d8b8 <HAL_RCC_OscConfig+0x4dc>)
 800d81a:	2200      	movs	r2, #0
 800d81c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d81e:	f7fd fda1 	bl	800b364 <HAL_GetTick>
 800d822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d824:	e008      	b.n	800d838 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d826:	f7fd fd9d 	bl	800b364 <HAL_GetTick>
 800d82a:	4602      	mov	r2, r0
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	2b02      	cmp	r3, #2
 800d832:	d901      	bls.n	800d838 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d834:	2303      	movs	r3, #3
 800d836:	e036      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d838:	4b1e      	ldr	r3, [pc, #120]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d840:	2b00      	cmp	r3, #0
 800d842:	d1f0      	bne.n	800d826 <HAL_RCC_OscConfig+0x44a>
 800d844:	e02e      	b.n	800d8a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d101      	bne.n	800d852 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d84e:	2301      	movs	r3, #1
 800d850:	e029      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d852:	4b18      	ldr	r3, [pc, #96]	; (800d8b4 <HAL_RCC_OscConfig+0x4d8>)
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	69db      	ldr	r3, [r3, #28]
 800d862:	429a      	cmp	r2, r3
 800d864:	d11c      	bne.n	800d8a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d870:	429a      	cmp	r2, r3
 800d872:	d115      	bne.n	800d8a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d87a:	4013      	ands	r3, r2
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d880:	4293      	cmp	r3, r2
 800d882:	d10d      	bne.n	800d8a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d88e:	429a      	cmp	r2, r3
 800d890:	d106      	bne.n	800d8a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d001      	beq.n	800d8a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e000      	b.n	800d8a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3718      	adds	r7, #24
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	40007000 	.word	0x40007000
 800d8b4:	40023800 	.word	0x40023800
 800d8b8:	42470060 	.word	0x42470060

0800d8bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d101      	bne.n	800d8d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	e0cc      	b.n	800da6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d8d0:	4b68      	ldr	r3, [pc, #416]	; (800da74 <HAL_RCC_ClockConfig+0x1b8>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f003 030f 	and.w	r3, r3, #15
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d90c      	bls.n	800d8f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d8de:	4b65      	ldr	r3, [pc, #404]	; (800da74 <HAL_RCC_ClockConfig+0x1b8>)
 800d8e0:	683a      	ldr	r2, [r7, #0]
 800d8e2:	b2d2      	uxtb	r2, r2
 800d8e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d8e6:	4b63      	ldr	r3, [pc, #396]	; (800da74 <HAL_RCC_ClockConfig+0x1b8>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f003 030f 	and.w	r3, r3, #15
 800d8ee:	683a      	ldr	r2, [r7, #0]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d001      	beq.n	800d8f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e0b8      	b.n	800da6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f003 0302 	and.w	r3, r3, #2
 800d900:	2b00      	cmp	r3, #0
 800d902:	d020      	beq.n	800d946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f003 0304 	and.w	r3, r3, #4
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d005      	beq.n	800d91c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d910:	4b59      	ldr	r3, [pc, #356]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	4a58      	ldr	r2, [pc, #352]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d91a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f003 0308 	and.w	r3, r3, #8
 800d924:	2b00      	cmp	r3, #0
 800d926:	d005      	beq.n	800d934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d928:	4b53      	ldr	r3, [pc, #332]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	4a52      	ldr	r2, [pc, #328]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d92e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d934:	4b50      	ldr	r3, [pc, #320]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	494d      	ldr	r1, [pc, #308]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d942:	4313      	orrs	r3, r2
 800d944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f003 0301 	and.w	r3, r3, #1
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d044      	beq.n	800d9dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	2b01      	cmp	r3, #1
 800d958:	d107      	bne.n	800d96a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d95a:	4b47      	ldr	r3, [pc, #284]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d962:	2b00      	cmp	r3, #0
 800d964:	d119      	bne.n	800d99a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d966:	2301      	movs	r3, #1
 800d968:	e07f      	b.n	800da6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d003      	beq.n	800d97a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d976:	2b03      	cmp	r3, #3
 800d978:	d107      	bne.n	800d98a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d97a:	4b3f      	ldr	r3, [pc, #252]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d982:	2b00      	cmp	r3, #0
 800d984:	d109      	bne.n	800d99a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d986:	2301      	movs	r3, #1
 800d988:	e06f      	b.n	800da6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d98a:	4b3b      	ldr	r3, [pc, #236]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f003 0302 	and.w	r3, r3, #2
 800d992:	2b00      	cmp	r3, #0
 800d994:	d101      	bne.n	800d99a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	e067      	b.n	800da6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d99a:	4b37      	ldr	r3, [pc, #220]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	f023 0203 	bic.w	r2, r3, #3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	4934      	ldr	r1, [pc, #208]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d9ac:	f7fd fcda 	bl	800b364 <HAL_GetTick>
 800d9b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d9b2:	e00a      	b.n	800d9ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d9b4:	f7fd fcd6 	bl	800b364 <HAL_GetTick>
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d901      	bls.n	800d9ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d9c6:	2303      	movs	r3, #3
 800d9c8:	e04f      	b.n	800da6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d9ca:	4b2b      	ldr	r3, [pc, #172]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	f003 020c 	and.w	r2, r3, #12
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d1eb      	bne.n	800d9b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d9dc:	4b25      	ldr	r3, [pc, #148]	; (800da74 <HAL_RCC_ClockConfig+0x1b8>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f003 030f 	and.w	r3, r3, #15
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d20c      	bcs.n	800da04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9ea:	4b22      	ldr	r3, [pc, #136]	; (800da74 <HAL_RCC_ClockConfig+0x1b8>)
 800d9ec:	683a      	ldr	r2, [r7, #0]
 800d9ee:	b2d2      	uxtb	r2, r2
 800d9f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9f2:	4b20      	ldr	r3, [pc, #128]	; (800da74 <HAL_RCC_ClockConfig+0x1b8>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f003 030f 	and.w	r3, r3, #15
 800d9fa:	683a      	ldr	r2, [r7, #0]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d001      	beq.n	800da04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	e032      	b.n	800da6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f003 0304 	and.w	r3, r3, #4
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d008      	beq.n	800da22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800da10:	4b19      	ldr	r3, [pc, #100]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	4916      	ldr	r1, [pc, #88]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800da1e:	4313      	orrs	r3, r2
 800da20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f003 0308 	and.w	r3, r3, #8
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d009      	beq.n	800da42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800da2e:	4b12      	ldr	r3, [pc, #72]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	691b      	ldr	r3, [r3, #16]
 800da3a:	00db      	lsls	r3, r3, #3
 800da3c:	490e      	ldr	r1, [pc, #56]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800da3e:	4313      	orrs	r3, r2
 800da40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800da42:	f000 f821 	bl	800da88 <HAL_RCC_GetSysClockFreq>
 800da46:	4601      	mov	r1, r0
 800da48:	4b0b      	ldr	r3, [pc, #44]	; (800da78 <HAL_RCC_ClockConfig+0x1bc>)
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	091b      	lsrs	r3, r3, #4
 800da4e:	f003 030f 	and.w	r3, r3, #15
 800da52:	4a0a      	ldr	r2, [pc, #40]	; (800da7c <HAL_RCC_ClockConfig+0x1c0>)
 800da54:	5cd3      	ldrb	r3, [r2, r3]
 800da56:	fa21 f303 	lsr.w	r3, r1, r3
 800da5a:	4a09      	ldr	r2, [pc, #36]	; (800da80 <HAL_RCC_ClockConfig+0x1c4>)
 800da5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800da5e:	4b09      	ldr	r3, [pc, #36]	; (800da84 <HAL_RCC_ClockConfig+0x1c8>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4618      	mov	r0, r3
 800da64:	f7fd f984 	bl	800ad70 <HAL_InitTick>

  return HAL_OK;
 800da68:	2300      	movs	r3, #0
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3710      	adds	r7, #16
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	40023c00 	.word	0x40023c00
 800da78:	40023800 	.word	0x40023800
 800da7c:	0801b260 	.word	0x0801b260
 800da80:	20000824 	.word	0x20000824
 800da84:	20000828 	.word	0x20000828

0800da88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800da88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800da8e:	2300      	movs	r3, #0
 800da90:	607b      	str	r3, [r7, #4]
 800da92:	2300      	movs	r3, #0
 800da94:	60fb      	str	r3, [r7, #12]
 800da96:	2300      	movs	r3, #0
 800da98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800da9a:	2300      	movs	r3, #0
 800da9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800da9e:	4b63      	ldr	r3, [pc, #396]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	f003 030c 	and.w	r3, r3, #12
 800daa6:	2b04      	cmp	r3, #4
 800daa8:	d007      	beq.n	800daba <HAL_RCC_GetSysClockFreq+0x32>
 800daaa:	2b08      	cmp	r3, #8
 800daac:	d008      	beq.n	800dac0 <HAL_RCC_GetSysClockFreq+0x38>
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f040 80b4 	bne.w	800dc1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dab4:	4b5e      	ldr	r3, [pc, #376]	; (800dc30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dab6:	60bb      	str	r3, [r7, #8]
       break;
 800dab8:	e0b3      	b.n	800dc22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800daba:	4b5e      	ldr	r3, [pc, #376]	; (800dc34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800dabc:	60bb      	str	r3, [r7, #8]
      break;
 800dabe:	e0b0      	b.n	800dc22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dac0:	4b5a      	ldr	r3, [pc, #360]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dac8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800daca:	4b58      	ldr	r3, [pc, #352]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d04a      	beq.n	800db6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dad6:	4b55      	ldr	r3, [pc, #340]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	099b      	lsrs	r3, r3, #6
 800dadc:	f04f 0400 	mov.w	r4, #0
 800dae0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dae4:	f04f 0200 	mov.w	r2, #0
 800dae8:	ea03 0501 	and.w	r5, r3, r1
 800daec:	ea04 0602 	and.w	r6, r4, r2
 800daf0:	4629      	mov	r1, r5
 800daf2:	4632      	mov	r2, r6
 800daf4:	f04f 0300 	mov.w	r3, #0
 800daf8:	f04f 0400 	mov.w	r4, #0
 800dafc:	0154      	lsls	r4, r2, #5
 800dafe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800db02:	014b      	lsls	r3, r1, #5
 800db04:	4619      	mov	r1, r3
 800db06:	4622      	mov	r2, r4
 800db08:	1b49      	subs	r1, r1, r5
 800db0a:	eb62 0206 	sbc.w	r2, r2, r6
 800db0e:	f04f 0300 	mov.w	r3, #0
 800db12:	f04f 0400 	mov.w	r4, #0
 800db16:	0194      	lsls	r4, r2, #6
 800db18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800db1c:	018b      	lsls	r3, r1, #6
 800db1e:	1a5b      	subs	r3, r3, r1
 800db20:	eb64 0402 	sbc.w	r4, r4, r2
 800db24:	f04f 0100 	mov.w	r1, #0
 800db28:	f04f 0200 	mov.w	r2, #0
 800db2c:	00e2      	lsls	r2, r4, #3
 800db2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800db32:	00d9      	lsls	r1, r3, #3
 800db34:	460b      	mov	r3, r1
 800db36:	4614      	mov	r4, r2
 800db38:	195b      	adds	r3, r3, r5
 800db3a:	eb44 0406 	adc.w	r4, r4, r6
 800db3e:	f04f 0100 	mov.w	r1, #0
 800db42:	f04f 0200 	mov.w	r2, #0
 800db46:	0262      	lsls	r2, r4, #9
 800db48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800db4c:	0259      	lsls	r1, r3, #9
 800db4e:	460b      	mov	r3, r1
 800db50:	4614      	mov	r4, r2
 800db52:	4618      	mov	r0, r3
 800db54:	4621      	mov	r1, r4
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f04f 0400 	mov.w	r4, #0
 800db5c:	461a      	mov	r2, r3
 800db5e:	4623      	mov	r3, r4
 800db60:	f7f3 f892 	bl	8000c88 <__aeabi_uldivmod>
 800db64:	4603      	mov	r3, r0
 800db66:	460c      	mov	r4, r1
 800db68:	60fb      	str	r3, [r7, #12]
 800db6a:	e049      	b.n	800dc00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800db6c:	4b2f      	ldr	r3, [pc, #188]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	099b      	lsrs	r3, r3, #6
 800db72:	f04f 0400 	mov.w	r4, #0
 800db76:	f240 11ff 	movw	r1, #511	; 0x1ff
 800db7a:	f04f 0200 	mov.w	r2, #0
 800db7e:	ea03 0501 	and.w	r5, r3, r1
 800db82:	ea04 0602 	and.w	r6, r4, r2
 800db86:	4629      	mov	r1, r5
 800db88:	4632      	mov	r2, r6
 800db8a:	f04f 0300 	mov.w	r3, #0
 800db8e:	f04f 0400 	mov.w	r4, #0
 800db92:	0154      	lsls	r4, r2, #5
 800db94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800db98:	014b      	lsls	r3, r1, #5
 800db9a:	4619      	mov	r1, r3
 800db9c:	4622      	mov	r2, r4
 800db9e:	1b49      	subs	r1, r1, r5
 800dba0:	eb62 0206 	sbc.w	r2, r2, r6
 800dba4:	f04f 0300 	mov.w	r3, #0
 800dba8:	f04f 0400 	mov.w	r4, #0
 800dbac:	0194      	lsls	r4, r2, #6
 800dbae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dbb2:	018b      	lsls	r3, r1, #6
 800dbb4:	1a5b      	subs	r3, r3, r1
 800dbb6:	eb64 0402 	sbc.w	r4, r4, r2
 800dbba:	f04f 0100 	mov.w	r1, #0
 800dbbe:	f04f 0200 	mov.w	r2, #0
 800dbc2:	00e2      	lsls	r2, r4, #3
 800dbc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dbc8:	00d9      	lsls	r1, r3, #3
 800dbca:	460b      	mov	r3, r1
 800dbcc:	4614      	mov	r4, r2
 800dbce:	195b      	adds	r3, r3, r5
 800dbd0:	eb44 0406 	adc.w	r4, r4, r6
 800dbd4:	f04f 0100 	mov.w	r1, #0
 800dbd8:	f04f 0200 	mov.w	r2, #0
 800dbdc:	02a2      	lsls	r2, r4, #10
 800dbde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dbe2:	0299      	lsls	r1, r3, #10
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	4614      	mov	r4, r2
 800dbe8:	4618      	mov	r0, r3
 800dbea:	4621      	mov	r1, r4
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f04f 0400 	mov.w	r4, #0
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	4623      	mov	r3, r4
 800dbf6:	f7f3 f847 	bl	8000c88 <__aeabi_uldivmod>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	460c      	mov	r4, r1
 800dbfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dc00:	4b0a      	ldr	r3, [pc, #40]	; (800dc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	0c1b      	lsrs	r3, r3, #16
 800dc06:	f003 0303 	and.w	r3, r3, #3
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dc10:	68fa      	ldr	r2, [r7, #12]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc18:	60bb      	str	r3, [r7, #8]
      break;
 800dc1a:	e002      	b.n	800dc22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dc1c:	4b04      	ldr	r3, [pc, #16]	; (800dc30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dc1e:	60bb      	str	r3, [r7, #8]
      break;
 800dc20:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dc22:	68bb      	ldr	r3, [r7, #8]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3714      	adds	r7, #20
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc2c:	40023800 	.word	0x40023800
 800dc30:	00f42400 	.word	0x00f42400
 800dc34:	007a1200 	.word	0x007a1200

0800dc38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dc3c:	4b03      	ldr	r3, [pc, #12]	; (800dc4c <HAL_RCC_GetHCLKFreq+0x14>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	20000824 	.word	0x20000824

0800dc50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800dc54:	f7ff fff0 	bl	800dc38 <HAL_RCC_GetHCLKFreq>
 800dc58:	4601      	mov	r1, r0
 800dc5a:	4b05      	ldr	r3, [pc, #20]	; (800dc70 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dc5c:	689b      	ldr	r3, [r3, #8]
 800dc5e:	0a9b      	lsrs	r3, r3, #10
 800dc60:	f003 0307 	and.w	r3, r3, #7
 800dc64:	4a03      	ldr	r2, [pc, #12]	; (800dc74 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dc66:	5cd3      	ldrb	r3, [r2, r3]
 800dc68:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	40023800 	.word	0x40023800
 800dc74:	0801b270 	.word	0x0801b270

0800dc78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800dc7c:	f7ff ffdc 	bl	800dc38 <HAL_RCC_GetHCLKFreq>
 800dc80:	4601      	mov	r1, r0
 800dc82:	4b05      	ldr	r3, [pc, #20]	; (800dc98 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	0b5b      	lsrs	r3, r3, #13
 800dc88:	f003 0307 	and.w	r3, r3, #7
 800dc8c:	4a03      	ldr	r2, [pc, #12]	; (800dc9c <HAL_RCC_GetPCLK2Freq+0x24>)
 800dc8e:	5cd3      	ldrb	r3, [r2, r3]
 800dc90:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	40023800 	.word	0x40023800
 800dc9c:	0801b270 	.word	0x0801b270

0800dca0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	220f      	movs	r2, #15
 800dcae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dcb0:	4b12      	ldr	r3, [pc, #72]	; (800dcfc <HAL_RCC_GetClockConfig+0x5c>)
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	f003 0203 	and.w	r2, r3, #3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dcbc:	4b0f      	ldr	r3, [pc, #60]	; (800dcfc <HAL_RCC_GetClockConfig+0x5c>)
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800dcc8:	4b0c      	ldr	r3, [pc, #48]	; (800dcfc <HAL_RCC_GetClockConfig+0x5c>)
 800dcca:	689b      	ldr	r3, [r3, #8]
 800dccc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800dcd4:	4b09      	ldr	r3, [pc, #36]	; (800dcfc <HAL_RCC_GetClockConfig+0x5c>)
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	08db      	lsrs	r3, r3, #3
 800dcda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dce2:	4b07      	ldr	r3, [pc, #28]	; (800dd00 <HAL_RCC_GetClockConfig+0x60>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f003 020f 	and.w	r2, r3, #15
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	601a      	str	r2, [r3, #0]
}
 800dcee:	bf00      	nop
 800dcf0:	370c      	adds	r7, #12
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	40023800 	.word	0x40023800
 800dd00:	40023c00 	.word	0x40023c00

0800dd04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d101      	bne.n	800dd16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e01d      	b.n	800dd52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d106      	bne.n	800dd30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7fd f9aa 	bl	800b084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2202      	movs	r2, #2
 800dd34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	3304      	adds	r3, #4
 800dd40:	4619      	mov	r1, r3
 800dd42:	4610      	mov	r0, r2
 800dd44:	f000 fa14 	bl	800e170 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dd5a:	b480      	push	{r7}
 800dd5c:	b085      	sub	sp, #20
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68da      	ldr	r2, [r3, #12]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f042 0201 	orr.w	r2, r2, #1
 800dd70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	f003 0307 	and.w	r3, r3, #7
 800dd7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2b06      	cmp	r3, #6
 800dd82:	d007      	beq.n	800dd94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f042 0201 	orr.w	r2, r2, #1
 800dd92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dd94:	2300      	movs	r3, #0
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3714      	adds	r7, #20
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b082      	sub	sp, #8
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	f003 0302 	and.w	r3, r3, #2
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d122      	bne.n	800ddfe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	f003 0302 	and.w	r3, r3, #2
 800ddc2:	2b02      	cmp	r3, #2
 800ddc4:	d11b      	bne.n	800ddfe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f06f 0202 	mvn.w	r2, #2
 800ddce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	699b      	ldr	r3, [r3, #24]
 800dddc:	f003 0303 	and.w	r3, r3, #3
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d003      	beq.n	800ddec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 f9a5 	bl	800e134 <HAL_TIM_IC_CaptureCallback>
 800ddea:	e005      	b.n	800ddf8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 f997 	bl	800e120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f9a8 	bl	800e148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	691b      	ldr	r3, [r3, #16]
 800de04:	f003 0304 	and.w	r3, r3, #4
 800de08:	2b04      	cmp	r3, #4
 800de0a:	d122      	bne.n	800de52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	f003 0304 	and.w	r3, r3, #4
 800de16:	2b04      	cmp	r3, #4
 800de18:	d11b      	bne.n	800de52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f06f 0204 	mvn.w	r2, #4
 800de22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2202      	movs	r2, #2
 800de28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	699b      	ldr	r3, [r3, #24]
 800de30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de34:	2b00      	cmp	r3, #0
 800de36:	d003      	beq.n	800de40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f97b 	bl	800e134 <HAL_TIM_IC_CaptureCallback>
 800de3e:	e005      	b.n	800de4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 f96d 	bl	800e120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f97e 	bl	800e148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	f003 0308 	and.w	r3, r3, #8
 800de5c:	2b08      	cmp	r3, #8
 800de5e:	d122      	bne.n	800dea6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	f003 0308 	and.w	r3, r3, #8
 800de6a:	2b08      	cmp	r3, #8
 800de6c:	d11b      	bne.n	800dea6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f06f 0208 	mvn.w	r2, #8
 800de76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2204      	movs	r2, #4
 800de7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	69db      	ldr	r3, [r3, #28]
 800de84:	f003 0303 	and.w	r3, r3, #3
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d003      	beq.n	800de94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 f951 	bl	800e134 <HAL_TIM_IC_CaptureCallback>
 800de92:	e005      	b.n	800dea0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f943 	bl	800e120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 f954 	bl	800e148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	f003 0310 	and.w	r3, r3, #16
 800deb0:	2b10      	cmp	r3, #16
 800deb2:	d122      	bne.n	800defa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	f003 0310 	and.w	r3, r3, #16
 800debe:	2b10      	cmp	r3, #16
 800dec0:	d11b      	bne.n	800defa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f06f 0210 	mvn.w	r2, #16
 800deca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2208      	movs	r2, #8
 800ded0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	69db      	ldr	r3, [r3, #28]
 800ded8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d003      	beq.n	800dee8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 f927 	bl	800e134 <HAL_TIM_IC_CaptureCallback>
 800dee6:	e005      	b.n	800def4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 f919 	bl	800e120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 f92a 	bl	800e148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	f003 0301 	and.w	r3, r3, #1
 800df04:	2b01      	cmp	r3, #1
 800df06:	d10e      	bne.n	800df26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	f003 0301 	and.w	r3, r3, #1
 800df12:	2b01      	cmp	r3, #1
 800df14:	d107      	bne.n	800df26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f06f 0201 	mvn.w	r2, #1
 800df1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7f5 ffa9 	bl	8003e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df30:	2b80      	cmp	r3, #128	; 0x80
 800df32:	d10e      	bne.n	800df52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df3e:	2b80      	cmp	r3, #128	; 0x80
 800df40:	d107      	bne.n	800df52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800df4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 facf 	bl	800e4f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df5c:	2b40      	cmp	r3, #64	; 0x40
 800df5e:	d10e      	bne.n	800df7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df6a:	2b40      	cmp	r3, #64	; 0x40
 800df6c:	d107      	bne.n	800df7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f8ef 	bl	800e15c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	691b      	ldr	r3, [r3, #16]
 800df84:	f003 0320 	and.w	r3, r3, #32
 800df88:	2b20      	cmp	r3, #32
 800df8a:	d10e      	bne.n	800dfaa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	f003 0320 	and.w	r3, r3, #32
 800df96:	2b20      	cmp	r3, #32
 800df98:	d107      	bne.n	800dfaa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f06f 0220 	mvn.w	r2, #32
 800dfa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fa99 	bl	800e4dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dfaa:	bf00      	nop
 800dfac:	3708      	adds	r7, #8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b084      	sub	sp, #16
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
 800dfba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d101      	bne.n	800dfca <HAL_TIM_ConfigClockSource+0x18>
 800dfc6:	2302      	movs	r3, #2
 800dfc8:	e0a6      	b.n	800e118 <HAL_TIM_ConfigClockSource+0x166>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2201      	movs	r2, #1
 800dfce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2202      	movs	r2, #2
 800dfd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800dfe8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dff0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2b40      	cmp	r3, #64	; 0x40
 800e000:	d067      	beq.n	800e0d2 <HAL_TIM_ConfigClockSource+0x120>
 800e002:	2b40      	cmp	r3, #64	; 0x40
 800e004:	d80b      	bhi.n	800e01e <HAL_TIM_ConfigClockSource+0x6c>
 800e006:	2b10      	cmp	r3, #16
 800e008:	d073      	beq.n	800e0f2 <HAL_TIM_ConfigClockSource+0x140>
 800e00a:	2b10      	cmp	r3, #16
 800e00c:	d802      	bhi.n	800e014 <HAL_TIM_ConfigClockSource+0x62>
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d06f      	beq.n	800e0f2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e012:	e078      	b.n	800e106 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e014:	2b20      	cmp	r3, #32
 800e016:	d06c      	beq.n	800e0f2 <HAL_TIM_ConfigClockSource+0x140>
 800e018:	2b30      	cmp	r3, #48	; 0x30
 800e01a:	d06a      	beq.n	800e0f2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e01c:	e073      	b.n	800e106 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e01e:	2b70      	cmp	r3, #112	; 0x70
 800e020:	d00d      	beq.n	800e03e <HAL_TIM_ConfigClockSource+0x8c>
 800e022:	2b70      	cmp	r3, #112	; 0x70
 800e024:	d804      	bhi.n	800e030 <HAL_TIM_ConfigClockSource+0x7e>
 800e026:	2b50      	cmp	r3, #80	; 0x50
 800e028:	d033      	beq.n	800e092 <HAL_TIM_ConfigClockSource+0xe0>
 800e02a:	2b60      	cmp	r3, #96	; 0x60
 800e02c:	d041      	beq.n	800e0b2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e02e:	e06a      	b.n	800e106 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e034:	d066      	beq.n	800e104 <HAL_TIM_ConfigClockSource+0x152>
 800e036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e03a:	d017      	beq.n	800e06c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e03c:	e063      	b.n	800e106 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6818      	ldr	r0, [r3, #0]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	6899      	ldr	r1, [r3, #8]
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	685a      	ldr	r2, [r3, #4]
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	f000 f9a9 	bl	800e3a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e060:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68fa      	ldr	r2, [r7, #12]
 800e068:	609a      	str	r2, [r3, #8]
      break;
 800e06a:	e04c      	b.n	800e106 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6818      	ldr	r0, [r3, #0]
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	6899      	ldr	r1, [r3, #8]
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	685a      	ldr	r2, [r3, #4]
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	f000 f992 	bl	800e3a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	689a      	ldr	r2, [r3, #8]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e08e:	609a      	str	r2, [r3, #8]
      break;
 800e090:	e039      	b.n	800e106 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6818      	ldr	r0, [r3, #0]
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	6859      	ldr	r1, [r3, #4]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	68db      	ldr	r3, [r3, #12]
 800e09e:	461a      	mov	r2, r3
 800e0a0:	f000 f906 	bl	800e2b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2150      	movs	r1, #80	; 0x50
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f000 f95f 	bl	800e36e <TIM_ITRx_SetConfig>
      break;
 800e0b0:	e029      	b.n	800e106 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6818      	ldr	r0, [r3, #0]
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	6859      	ldr	r1, [r3, #4]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	68db      	ldr	r3, [r3, #12]
 800e0be:	461a      	mov	r2, r3
 800e0c0:	f000 f925 	bl	800e30e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2160      	movs	r1, #96	; 0x60
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f000 f94f 	bl	800e36e <TIM_ITRx_SetConfig>
      break;
 800e0d0:	e019      	b.n	800e106 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6818      	ldr	r0, [r3, #0]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	6859      	ldr	r1, [r3, #4]
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	f000 f8e6 	bl	800e2b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2140      	movs	r1, #64	; 0x40
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 f93f 	bl	800e36e <TIM_ITRx_SetConfig>
      break;
 800e0f0:	e009      	b.n	800e106 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681a      	ldr	r2, [r3, #0]
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	f000 f936 	bl	800e36e <TIM_ITRx_SetConfig>
      break;
 800e102:	e000      	b.n	800e106 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e104:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2201      	movs	r2, #1
 800e10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e116:	2300      	movs	r3, #0
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e120:	b480      	push	{r7}
 800e122:	b083      	sub	sp, #12
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e13c:	bf00      	nop
 800e13e:	370c      	adds	r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e150:	bf00      	nop
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	4a40      	ldr	r2, [pc, #256]	; (800e284 <TIM_Base_SetConfig+0x114>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d013      	beq.n	800e1b0 <TIM_Base_SetConfig+0x40>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e18e:	d00f      	beq.n	800e1b0 <TIM_Base_SetConfig+0x40>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a3d      	ldr	r2, [pc, #244]	; (800e288 <TIM_Base_SetConfig+0x118>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d00b      	beq.n	800e1b0 <TIM_Base_SetConfig+0x40>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4a3c      	ldr	r2, [pc, #240]	; (800e28c <TIM_Base_SetConfig+0x11c>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d007      	beq.n	800e1b0 <TIM_Base_SetConfig+0x40>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4a3b      	ldr	r2, [pc, #236]	; (800e290 <TIM_Base_SetConfig+0x120>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d003      	beq.n	800e1b0 <TIM_Base_SetConfig+0x40>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a3a      	ldr	r2, [pc, #232]	; (800e294 <TIM_Base_SetConfig+0x124>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d108      	bne.n	800e1c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4a2f      	ldr	r2, [pc, #188]	; (800e284 <TIM_Base_SetConfig+0x114>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d02b      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1d0:	d027      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4a2c      	ldr	r2, [pc, #176]	; (800e288 <TIM_Base_SetConfig+0x118>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d023      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4a2b      	ldr	r2, [pc, #172]	; (800e28c <TIM_Base_SetConfig+0x11c>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d01f      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	4a2a      	ldr	r2, [pc, #168]	; (800e290 <TIM_Base_SetConfig+0x120>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d01b      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4a29      	ldr	r2, [pc, #164]	; (800e294 <TIM_Base_SetConfig+0x124>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d017      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	4a28      	ldr	r2, [pc, #160]	; (800e298 <TIM_Base_SetConfig+0x128>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d013      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	4a27      	ldr	r2, [pc, #156]	; (800e29c <TIM_Base_SetConfig+0x12c>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d00f      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4a26      	ldr	r2, [pc, #152]	; (800e2a0 <TIM_Base_SetConfig+0x130>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d00b      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	4a25      	ldr	r2, [pc, #148]	; (800e2a4 <TIM_Base_SetConfig+0x134>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d007      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	4a24      	ldr	r2, [pc, #144]	; (800e2a8 <TIM_Base_SetConfig+0x138>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d003      	beq.n	800e222 <TIM_Base_SetConfig+0xb2>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4a23      	ldr	r2, [pc, #140]	; (800e2ac <TIM_Base_SetConfig+0x13c>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d108      	bne.n	800e234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	68fa      	ldr	r2, [r7, #12]
 800e230:	4313      	orrs	r3, r2
 800e232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	695b      	ldr	r3, [r3, #20]
 800e23e:	4313      	orrs	r3, r2
 800e240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	689a      	ldr	r2, [r3, #8]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	4a0a      	ldr	r2, [pc, #40]	; (800e284 <TIM_Base_SetConfig+0x114>)
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d003      	beq.n	800e268 <TIM_Base_SetConfig+0xf8>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4a0c      	ldr	r2, [pc, #48]	; (800e294 <TIM_Base_SetConfig+0x124>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d103      	bne.n	800e270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	691a      	ldr	r2, [r3, #16]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2201      	movs	r2, #1
 800e274:	615a      	str	r2, [r3, #20]
}
 800e276:	bf00      	nop
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	40010000 	.word	0x40010000
 800e288:	40000400 	.word	0x40000400
 800e28c:	40000800 	.word	0x40000800
 800e290:	40000c00 	.word	0x40000c00
 800e294:	40010400 	.word	0x40010400
 800e298:	40014000 	.word	0x40014000
 800e29c:	40014400 	.word	0x40014400
 800e2a0:	40014800 	.word	0x40014800
 800e2a4:	40001800 	.word	0x40001800
 800e2a8:	40001c00 	.word	0x40001c00
 800e2ac:	40002000 	.word	0x40002000

0800e2b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b087      	sub	sp, #28
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6a1b      	ldr	r3, [r3, #32]
 800e2c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	f023 0201 	bic.w	r2, r3, #1
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	699b      	ldr	r3, [r3, #24]
 800e2d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e2da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	011b      	lsls	r3, r3, #4
 800e2e0:	693a      	ldr	r2, [r7, #16]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	f023 030a 	bic.w	r3, r3, #10
 800e2ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e2ee:	697a      	ldr	r2, [r7, #20]
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	693a      	ldr	r2, [r7, #16]
 800e2fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	697a      	ldr	r2, [r7, #20]
 800e300:	621a      	str	r2, [r3, #32]
}
 800e302:	bf00      	nop
 800e304:	371c      	adds	r7, #28
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e30e:	b480      	push	{r7}
 800e310:	b087      	sub	sp, #28
 800e312:	af00      	add	r7, sp, #0
 800e314:	60f8      	str	r0, [r7, #12]
 800e316:	60b9      	str	r1, [r7, #8]
 800e318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6a1b      	ldr	r3, [r3, #32]
 800e31e:	f023 0210 	bic.w	r2, r3, #16
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	699b      	ldr	r3, [r3, #24]
 800e32a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6a1b      	ldr	r3, [r3, #32]
 800e330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	031b      	lsls	r3, r3, #12
 800e33e:	697a      	ldr	r2, [r7, #20]
 800e340:	4313      	orrs	r3, r2
 800e342:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e34a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	011b      	lsls	r3, r3, #4
 800e350:	693a      	ldr	r2, [r7, #16]
 800e352:	4313      	orrs	r3, r2
 800e354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	697a      	ldr	r2, [r7, #20]
 800e35a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	693a      	ldr	r2, [r7, #16]
 800e360:	621a      	str	r2, [r3, #32]
}
 800e362:	bf00      	nop
 800e364:	371c      	adds	r7, #28
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr

0800e36e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e36e:	b480      	push	{r7}
 800e370:	b085      	sub	sp, #20
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
 800e376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	689b      	ldr	r3, [r3, #8]
 800e37c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e386:	683a      	ldr	r2, [r7, #0]
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	4313      	orrs	r3, r2
 800e38c:	f043 0307 	orr.w	r3, r3, #7
 800e390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	609a      	str	r2, [r3, #8]
}
 800e398:	bf00      	nop
 800e39a:	3714      	adds	r7, #20
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b087      	sub	sp, #28
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
 800e3b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	689b      	ldr	r3, [r3, #8]
 800e3b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e3be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	021a      	lsls	r2, r3, #8
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	431a      	orrs	r2, r3
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	4313      	orrs	r3, r2
 800e3cc:	697a      	ldr	r2, [r7, #20]
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	697a      	ldr	r2, [r7, #20]
 800e3d6:	609a      	str	r2, [r3, #8]
}
 800e3d8:	bf00      	nop
 800e3da:	371c      	adds	r7, #28
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d101      	bne.n	800e3fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e3f8:	2302      	movs	r3, #2
 800e3fa:	e05a      	b.n	800e4b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2201      	movs	r2, #1
 800e400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2202      	movs	r2, #2
 800e408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	68fa      	ldr	r2, [r7, #12]
 800e42a:	4313      	orrs	r3, r2
 800e42c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	68fa      	ldr	r2, [r7, #12]
 800e434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4a21      	ldr	r2, [pc, #132]	; (800e4c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d022      	beq.n	800e486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e448:	d01d      	beq.n	800e486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4a1d      	ldr	r2, [pc, #116]	; (800e4c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e450:	4293      	cmp	r3, r2
 800e452:	d018      	beq.n	800e486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a1b      	ldr	r2, [pc, #108]	; (800e4c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d013      	beq.n	800e486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4a1a      	ldr	r2, [pc, #104]	; (800e4cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d00e      	beq.n	800e486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4a18      	ldr	r2, [pc, #96]	; (800e4d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e46e:	4293      	cmp	r3, r2
 800e470:	d009      	beq.n	800e486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4a17      	ldr	r2, [pc, #92]	; (800e4d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d004      	beq.n	800e486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4a15      	ldr	r2, [pc, #84]	; (800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d10c      	bne.n	800e4a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e48c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	4313      	orrs	r3, r2
 800e496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3714      	adds	r7, #20
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	40010000 	.word	0x40010000
 800e4c4:	40000400 	.word	0x40000400
 800e4c8:	40000800 	.word	0x40000800
 800e4cc:	40000c00 	.word	0x40000c00
 800e4d0:	40010400 	.word	0x40010400
 800e4d4:	40014000 	.word	0x40014000
 800e4d8:	40001800 	.word	0x40001800

0800e4dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e4e4:	bf00      	nop
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e4f8:	bf00      	nop
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d101      	bne.n	800e516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e512:	2301      	movs	r3, #1
 800e514:	e03f      	b.n	800e596 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d106      	bne.n	800e530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7fc fe10 	bl	800b150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2224      	movs	r2, #36	; 0x24
 800e534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	68da      	ldr	r2, [r3, #12]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 fb6b 	bl	800ec24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	691a      	ldr	r2, [r3, #16]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e55c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	695a      	ldr	r2, [r3, #20]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e56c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68da      	ldr	r2, [r3, #12]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e57c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2220      	movs	r2, #32
 800e588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2220      	movs	r2, #32
 800e590:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	3708      	adds	r7, #8
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
	...

0800e5a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	2b20      	cmp	r3, #32
 800e5b8:	d153      	bne.n	800e662 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d002      	beq.n	800e5c6 <HAL_UART_Transmit_DMA+0x26>
 800e5c0:	88fb      	ldrh	r3, [r7, #6]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d101      	bne.n	800e5ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e04c      	b.n	800e664 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d101      	bne.n	800e5d8 <HAL_UART_Transmit_DMA+0x38>
 800e5d4:	2302      	movs	r3, #2
 800e5d6:	e045      	b.n	800e664 <HAL_UART_Transmit_DMA+0xc4>
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e5e0:	68ba      	ldr	r2, [r7, #8]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	88fa      	ldrh	r2, [r7, #6]
 800e5ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	88fa      	ldrh	r2, [r7, #6]
 800e5f0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2221      	movs	r2, #33	; 0x21
 800e5fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e604:	4a19      	ldr	r2, [pc, #100]	; (800e66c <HAL_UART_Transmit_DMA+0xcc>)
 800e606:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e60c:	4a18      	ldr	r2, [pc, #96]	; (800e670 <HAL_UART_Transmit_DMA+0xd0>)
 800e60e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e614:	4a17      	ldr	r2, [pc, #92]	; (800e674 <HAL_UART_Transmit_DMA+0xd4>)
 800e616:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e61c:	2200      	movs	r2, #0
 800e61e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e620:	f107 0308 	add.w	r3, r7, #8
 800e624:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	6819      	ldr	r1, [r3, #0]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3304      	adds	r3, #4
 800e634:	461a      	mov	r2, r3
 800e636:	88fb      	ldrh	r3, [r7, #6]
 800e638:	f7fd f852 	bl	800b6e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e644:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2200      	movs	r2, #0
 800e64a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	695a      	ldr	r2, [r3, #20]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e65c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e65e:	2300      	movs	r3, #0
 800e660:	e000      	b.n	800e664 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e662:	2302      	movs	r3, #2
  }
}
 800e664:	4618      	mov	r0, r3
 800e666:	3718      	adds	r7, #24
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	0800e8b5 	.word	0x0800e8b5
 800e670:	0800e907 	.word	0x0800e907
 800e674:	0800e923 	.word	0x0800e923

0800e678 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b088      	sub	sp, #32
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	695b      	ldr	r3, [r3, #20]
 800e696:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e698:	2300      	movs	r3, #0
 800e69a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e69c:	2300      	movs	r3, #0
 800e69e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	f003 030f 	and.w	r3, r3, #15
 800e6a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d10d      	bne.n	800e6ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	f003 0320 	and.w	r3, r3, #32
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d008      	beq.n	800e6ca <HAL_UART_IRQHandler+0x52>
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	f003 0320 	and.w	r3, r3, #32
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d003      	beq.n	800e6ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 fa2d 	bl	800eb22 <UART_Receive_IT>
      return;
 800e6c8:	e0d1      	b.n	800e86e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f000 80b0 	beq.w	800e832 <HAL_UART_IRQHandler+0x1ba>
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f003 0301 	and.w	r3, r3, #1
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d105      	bne.n	800e6e8 <HAL_UART_IRQHandler+0x70>
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	f000 80a5 	beq.w	800e832 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	f003 0301 	and.w	r3, r3, #1
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00a      	beq.n	800e708 <HAL_UART_IRQHandler+0x90>
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d005      	beq.n	800e708 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e700:	f043 0201 	orr.w	r2, r3, #1
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	f003 0304 	and.w	r3, r3, #4
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00a      	beq.n	800e728 <HAL_UART_IRQHandler+0xb0>
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	f003 0301 	and.w	r3, r3, #1
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d005      	beq.n	800e728 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e720:	f043 0202 	orr.w	r2, r3, #2
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	f003 0302 	and.w	r3, r3, #2
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00a      	beq.n	800e748 <HAL_UART_IRQHandler+0xd0>
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	f003 0301 	and.w	r3, r3, #1
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d005      	beq.n	800e748 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e740:	f043 0204 	orr.w	r2, r3, #4
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	f003 0308 	and.w	r3, r3, #8
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00f      	beq.n	800e772 <HAL_UART_IRQHandler+0xfa>
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	f003 0320 	and.w	r3, r3, #32
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d104      	bne.n	800e766 <HAL_UART_IRQHandler+0xee>
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	f003 0301 	and.w	r3, r3, #1
 800e762:	2b00      	cmp	r3, #0
 800e764:	d005      	beq.n	800e772 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e76a:	f043 0208 	orr.w	r2, r3, #8
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e776:	2b00      	cmp	r3, #0
 800e778:	d078      	beq.n	800e86c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e77a:	69fb      	ldr	r3, [r7, #28]
 800e77c:	f003 0320 	and.w	r3, r3, #32
 800e780:	2b00      	cmp	r3, #0
 800e782:	d007      	beq.n	800e794 <HAL_UART_IRQHandler+0x11c>
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	f003 0320 	and.w	r3, r3, #32
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d002      	beq.n	800e794 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 f9c7 	bl	800eb22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	695b      	ldr	r3, [r3, #20]
 800e79a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e79e:	2b40      	cmp	r3, #64	; 0x40
 800e7a0:	bf0c      	ite	eq
 800e7a2:	2301      	moveq	r3, #1
 800e7a4:	2300      	movne	r3, #0
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7ae:	f003 0308 	and.w	r3, r3, #8
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d102      	bne.n	800e7bc <HAL_UART_IRQHandler+0x144>
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d031      	beq.n	800e820 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 f910 	bl	800e9e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	695b      	ldr	r3, [r3, #20]
 800e7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7cc:	2b40      	cmp	r3, #64	; 0x40
 800e7ce:	d123      	bne.n	800e818 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	695a      	ldr	r2, [r3, #20]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d013      	beq.n	800e810 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ec:	4a21      	ldr	r2, [pc, #132]	; (800e874 <HAL_UART_IRQHandler+0x1fc>)
 800e7ee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fc ffcb 	bl	800b790 <HAL_DMA_Abort_IT>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d016      	beq.n	800e82e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e80a:	4610      	mov	r0, r2
 800e80c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e80e:	e00e      	b.n	800e82e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 f845 	bl	800e8a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e816:	e00a      	b.n	800e82e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 f841 	bl	800e8a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e81e:	e006      	b.n	800e82e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 f83d 	bl	800e8a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2200      	movs	r2, #0
 800e82a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e82c:	e01e      	b.n	800e86c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e82e:	bf00      	nop
    return;
 800e830:	e01c      	b.n	800e86c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e832:	69fb      	ldr	r3, [r7, #28]
 800e834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d008      	beq.n	800e84e <HAL_UART_IRQHandler+0x1d6>
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e842:	2b00      	cmp	r3, #0
 800e844:	d003      	beq.n	800e84e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 f8fd 	bl	800ea46 <UART_Transmit_IT>
    return;
 800e84c:	e00f      	b.n	800e86e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00a      	beq.n	800e86e <HAL_UART_IRQHandler+0x1f6>
 800e858:	69bb      	ldr	r3, [r7, #24]
 800e85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d005      	beq.n	800e86e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 f945 	bl	800eaf2 <UART_EndTransmit_IT>
    return;
 800e868:	bf00      	nop
 800e86a:	e000      	b.n	800e86e <HAL_UART_IRQHandler+0x1f6>
    return;
 800e86c:	bf00      	nop
  }
}
 800e86e:	3720      	adds	r7, #32
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	0800ea1f 	.word	0x0800ea1f

0800e878 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e880:	bf00      	nop
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e894:	bf00      	nop
 800e896:	370c      	adds	r7, #12
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr

0800e8a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e8a8:	bf00      	nop
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d113      	bne.n	800e8f8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	695a      	ldr	r2, [r3, #20]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e8e4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	68da      	ldr	r2, [r3, #12]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8f4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e8f6:	e002      	b.n	800e8fe <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800e8f8:	68f8      	ldr	r0, [r7, #12]
 800e8fa:	f7fc fcab 	bl	800b254 <HAL_UART_TxCpltCallback>
}
 800e8fe:	bf00      	nop
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b084      	sub	sp, #16
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e912:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f7ff ffaf 	bl	800e878 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e91a:	bf00      	nop
 800e91c:	3710      	adds	r7, #16
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b084      	sub	sp, #16
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e92a:	2300      	movs	r3, #0
 800e92c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e932:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	695b      	ldr	r3, [r3, #20]
 800e93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e93e:	2b80      	cmp	r3, #128	; 0x80
 800e940:	bf0c      	ite	eq
 800e942:	2301      	moveq	r3, #1
 800e944:	2300      	movne	r3, #0
 800e946:	b2db      	uxtb	r3, r3
 800e948:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e950:	b2db      	uxtb	r3, r3
 800e952:	2b21      	cmp	r3, #33	; 0x21
 800e954:	d108      	bne.n	800e968 <UART_DMAError+0x46>
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d005      	beq.n	800e968 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	2200      	movs	r2, #0
 800e960:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e962:	68b8      	ldr	r0, [r7, #8]
 800e964:	f000 f827 	bl	800e9b6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	695b      	ldr	r3, [r3, #20]
 800e96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e972:	2b40      	cmp	r3, #64	; 0x40
 800e974:	bf0c      	ite	eq
 800e976:	2301      	moveq	r3, #1
 800e978:	2300      	movne	r3, #0
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e984:	b2db      	uxtb	r3, r3
 800e986:	2b22      	cmp	r3, #34	; 0x22
 800e988:	d108      	bne.n	800e99c <UART_DMAError+0x7a>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d005      	beq.n	800e99c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2200      	movs	r2, #0
 800e994:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e996:	68b8      	ldr	r0, [r7, #8]
 800e998:	f000 f823 	bl	800e9e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9a0:	f043 0210 	orr.w	r2, r3, #16
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9a8:	68b8      	ldr	r0, [r7, #8]
 800e9aa:	f7ff ff79 	bl	800e8a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9ae:	bf00      	nop
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e9b6:	b480      	push	{r7}
 800e9b8:	b083      	sub	sp, #12
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	68da      	ldr	r2, [r3, #12]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e9cc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2220      	movs	r2, #32
 800e9d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800e9d6:	bf00      	nop
 800e9d8:	370c      	adds	r7, #12
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr

0800e9e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e9e2:	b480      	push	{r7}
 800e9e4:	b083      	sub	sp, #12
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	68da      	ldr	r2, [r3, #12]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e9f8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	695a      	ldr	r2, [r3, #20]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f022 0201 	bic.w	r2, r2, #1
 800ea08:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2220      	movs	r2, #32
 800ea0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ea12:	bf00      	nop
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b084      	sub	sp, #16
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea38:	68f8      	ldr	r0, [r7, #12]
 800ea3a:	f7ff ff31 	bl	800e8a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea3e:	bf00      	nop
 800ea40:	3710      	adds	r7, #16
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ea46:	b480      	push	{r7}
 800ea48:	b085      	sub	sp, #20
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	2b21      	cmp	r3, #33	; 0x21
 800ea58:	d144      	bne.n	800eae4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea62:	d11a      	bne.n	800ea9a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a1b      	ldr	r3, [r3, #32]
 800ea68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	881b      	ldrh	r3, [r3, #0]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea78:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	691b      	ldr	r3, [r3, #16]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d105      	bne.n	800ea8e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a1b      	ldr	r3, [r3, #32]
 800ea86:	1c9a      	adds	r2, r3, #2
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	621a      	str	r2, [r3, #32]
 800ea8c:	e00e      	b.n	800eaac <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6a1b      	ldr	r3, [r3, #32]
 800ea92:	1c5a      	adds	r2, r3, #1
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	621a      	str	r2, [r3, #32]
 800ea98:	e008      	b.n	800eaac <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6a1b      	ldr	r3, [r3, #32]
 800ea9e:	1c59      	adds	r1, r3, #1
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	6211      	str	r1, [r2, #32]
 800eaa4:	781a      	ldrb	r2, [r3, #0]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	3b01      	subs	r3, #1
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	4619      	mov	r1, r3
 800eaba:	84d1      	strh	r1, [r2, #38]	; 0x26
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d10f      	bne.n	800eae0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	68da      	ldr	r2, [r3, #12]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eace:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	68da      	ldr	r2, [r3, #12]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eade:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	e000      	b.n	800eae6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800eae4:	2302      	movs	r3, #2
  }
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3714      	adds	r7, #20
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr

0800eaf2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b082      	sub	sp, #8
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	68da      	ldr	r2, [r3, #12]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2220      	movs	r2, #32
 800eb0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7fc fb9e 	bl	800b254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b084      	sub	sp, #16
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b22      	cmp	r3, #34	; 0x22
 800eb34:	d171      	bne.n	800ec1a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb3e:	d123      	bne.n	800eb88 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb44:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	691b      	ldr	r3, [r3, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d10e      	bne.n	800eb6c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb5a:	b29a      	uxth	r2, r3
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb64:	1c9a      	adds	r2, r3, #2
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	629a      	str	r2, [r3, #40]	; 0x28
 800eb6a:	e029      	b.n	800ebc0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	b29a      	uxth	r2, r3
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb80:	1c5a      	adds	r2, r3, #1
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	629a      	str	r2, [r3, #40]	; 0x28
 800eb86:	e01b      	b.n	800ebc0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d10a      	bne.n	800eba6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	6858      	ldr	r0, [r3, #4]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb9a:	1c59      	adds	r1, r3, #1
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	6291      	str	r1, [r2, #40]	; 0x28
 800eba0:	b2c2      	uxtb	r2, r0
 800eba2:	701a      	strb	r2, [r3, #0]
 800eba4:	e00c      	b.n	800ebc0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	b2da      	uxtb	r2, r3
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb2:	1c58      	adds	r0, r3, #1
 800ebb4:	6879      	ldr	r1, [r7, #4]
 800ebb6:	6288      	str	r0, [r1, #40]	; 0x28
 800ebb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ebbc:	b2d2      	uxtb	r2, r2
 800ebbe:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	4619      	mov	r1, r3
 800ebce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d120      	bne.n	800ec16 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	68da      	ldr	r2, [r3, #12]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f022 0220 	bic.w	r2, r2, #32
 800ebe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	68da      	ldr	r2, [r3, #12]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ebf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	695a      	ldr	r2, [r3, #20]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f022 0201 	bic.w	r2, r2, #1
 800ec02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2220      	movs	r2, #32
 800ec08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7ff fe3d 	bl	800e88c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ec12:	2300      	movs	r3, #0
 800ec14:	e002      	b.n	800ec1c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ec16:	2300      	movs	r3, #0
 800ec18:	e000      	b.n	800ec1c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ec1a:	2302      	movs	r3, #2
  }
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3710      	adds	r7, #16
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec28:	b085      	sub	sp, #20
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	691b      	ldr	r3, [r3, #16]
 800ec34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	68da      	ldr	r2, [r3, #12]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	430a      	orrs	r2, r1
 800ec42:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	689a      	ldr	r2, [r3, #8]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	431a      	orrs	r2, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	695b      	ldr	r3, [r3, #20]
 800ec52:	431a      	orrs	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	69db      	ldr	r3, [r3, #28]
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ec66:	f023 030c 	bic.w	r3, r3, #12
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	6812      	ldr	r2, [r2, #0]
 800ec6e:	68f9      	ldr	r1, [r7, #12]
 800ec70:	430b      	orrs	r3, r1
 800ec72:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	695b      	ldr	r3, [r3, #20]
 800ec7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	699a      	ldr	r2, [r3, #24]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	430a      	orrs	r2, r1
 800ec88:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	69db      	ldr	r3, [r3, #28]
 800ec8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec92:	f040 818b 	bne.w	800efac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4ac1      	ldr	r2, [pc, #772]	; (800efa0 <UART_SetConfig+0x37c>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d005      	beq.n	800ecac <UART_SetConfig+0x88>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4abf      	ldr	r2, [pc, #764]	; (800efa4 <UART_SetConfig+0x380>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	f040 80bd 	bne.w	800ee26 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ecac:	f7fe ffe4 	bl	800dc78 <HAL_RCC_GetPCLK2Freq>
 800ecb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	461d      	mov	r5, r3
 800ecb6:	f04f 0600 	mov.w	r6, #0
 800ecba:	46a8      	mov	r8, r5
 800ecbc:	46b1      	mov	r9, r6
 800ecbe:	eb18 0308 	adds.w	r3, r8, r8
 800ecc2:	eb49 0409 	adc.w	r4, r9, r9
 800ecc6:	4698      	mov	r8, r3
 800ecc8:	46a1      	mov	r9, r4
 800ecca:	eb18 0805 	adds.w	r8, r8, r5
 800ecce:	eb49 0906 	adc.w	r9, r9, r6
 800ecd2:	f04f 0100 	mov.w	r1, #0
 800ecd6:	f04f 0200 	mov.w	r2, #0
 800ecda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ecde:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ece2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ece6:	4688      	mov	r8, r1
 800ece8:	4691      	mov	r9, r2
 800ecea:	eb18 0005 	adds.w	r0, r8, r5
 800ecee:	eb49 0106 	adc.w	r1, r9, r6
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	461d      	mov	r5, r3
 800ecf8:	f04f 0600 	mov.w	r6, #0
 800ecfc:	196b      	adds	r3, r5, r5
 800ecfe:	eb46 0406 	adc.w	r4, r6, r6
 800ed02:	461a      	mov	r2, r3
 800ed04:	4623      	mov	r3, r4
 800ed06:	f7f1 ffbf 	bl	8000c88 <__aeabi_uldivmod>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	460c      	mov	r4, r1
 800ed0e:	461a      	mov	r2, r3
 800ed10:	4ba5      	ldr	r3, [pc, #660]	; (800efa8 <UART_SetConfig+0x384>)
 800ed12:	fba3 2302 	umull	r2, r3, r3, r2
 800ed16:	095b      	lsrs	r3, r3, #5
 800ed18:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	461d      	mov	r5, r3
 800ed20:	f04f 0600 	mov.w	r6, #0
 800ed24:	46a9      	mov	r9, r5
 800ed26:	46b2      	mov	sl, r6
 800ed28:	eb19 0309 	adds.w	r3, r9, r9
 800ed2c:	eb4a 040a 	adc.w	r4, sl, sl
 800ed30:	4699      	mov	r9, r3
 800ed32:	46a2      	mov	sl, r4
 800ed34:	eb19 0905 	adds.w	r9, r9, r5
 800ed38:	eb4a 0a06 	adc.w	sl, sl, r6
 800ed3c:	f04f 0100 	mov.w	r1, #0
 800ed40:	f04f 0200 	mov.w	r2, #0
 800ed44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ed48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ed4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ed50:	4689      	mov	r9, r1
 800ed52:	4692      	mov	sl, r2
 800ed54:	eb19 0005 	adds.w	r0, r9, r5
 800ed58:	eb4a 0106 	adc.w	r1, sl, r6
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	461d      	mov	r5, r3
 800ed62:	f04f 0600 	mov.w	r6, #0
 800ed66:	196b      	adds	r3, r5, r5
 800ed68:	eb46 0406 	adc.w	r4, r6, r6
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	4623      	mov	r3, r4
 800ed70:	f7f1 ff8a 	bl	8000c88 <__aeabi_uldivmod>
 800ed74:	4603      	mov	r3, r0
 800ed76:	460c      	mov	r4, r1
 800ed78:	461a      	mov	r2, r3
 800ed7a:	4b8b      	ldr	r3, [pc, #556]	; (800efa8 <UART_SetConfig+0x384>)
 800ed7c:	fba3 1302 	umull	r1, r3, r3, r2
 800ed80:	095b      	lsrs	r3, r3, #5
 800ed82:	2164      	movs	r1, #100	; 0x64
 800ed84:	fb01 f303 	mul.w	r3, r1, r3
 800ed88:	1ad3      	subs	r3, r2, r3
 800ed8a:	00db      	lsls	r3, r3, #3
 800ed8c:	3332      	adds	r3, #50	; 0x32
 800ed8e:	4a86      	ldr	r2, [pc, #536]	; (800efa8 <UART_SetConfig+0x384>)
 800ed90:	fba2 2303 	umull	r2, r3, r2, r3
 800ed94:	095b      	lsrs	r3, r3, #5
 800ed96:	005b      	lsls	r3, r3, #1
 800ed98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ed9c:	4498      	add	r8, r3
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	461d      	mov	r5, r3
 800eda2:	f04f 0600 	mov.w	r6, #0
 800eda6:	46a9      	mov	r9, r5
 800eda8:	46b2      	mov	sl, r6
 800edaa:	eb19 0309 	adds.w	r3, r9, r9
 800edae:	eb4a 040a 	adc.w	r4, sl, sl
 800edb2:	4699      	mov	r9, r3
 800edb4:	46a2      	mov	sl, r4
 800edb6:	eb19 0905 	adds.w	r9, r9, r5
 800edba:	eb4a 0a06 	adc.w	sl, sl, r6
 800edbe:	f04f 0100 	mov.w	r1, #0
 800edc2:	f04f 0200 	mov.w	r2, #0
 800edc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800edca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800edce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800edd2:	4689      	mov	r9, r1
 800edd4:	4692      	mov	sl, r2
 800edd6:	eb19 0005 	adds.w	r0, r9, r5
 800edda:	eb4a 0106 	adc.w	r1, sl, r6
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	461d      	mov	r5, r3
 800ede4:	f04f 0600 	mov.w	r6, #0
 800ede8:	196b      	adds	r3, r5, r5
 800edea:	eb46 0406 	adc.w	r4, r6, r6
 800edee:	461a      	mov	r2, r3
 800edf0:	4623      	mov	r3, r4
 800edf2:	f7f1 ff49 	bl	8000c88 <__aeabi_uldivmod>
 800edf6:	4603      	mov	r3, r0
 800edf8:	460c      	mov	r4, r1
 800edfa:	461a      	mov	r2, r3
 800edfc:	4b6a      	ldr	r3, [pc, #424]	; (800efa8 <UART_SetConfig+0x384>)
 800edfe:	fba3 1302 	umull	r1, r3, r3, r2
 800ee02:	095b      	lsrs	r3, r3, #5
 800ee04:	2164      	movs	r1, #100	; 0x64
 800ee06:	fb01 f303 	mul.w	r3, r1, r3
 800ee0a:	1ad3      	subs	r3, r2, r3
 800ee0c:	00db      	lsls	r3, r3, #3
 800ee0e:	3332      	adds	r3, #50	; 0x32
 800ee10:	4a65      	ldr	r2, [pc, #404]	; (800efa8 <UART_SetConfig+0x384>)
 800ee12:	fba2 2303 	umull	r2, r3, r2, r3
 800ee16:	095b      	lsrs	r3, r3, #5
 800ee18:	f003 0207 	and.w	r2, r3, #7
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4442      	add	r2, r8
 800ee22:	609a      	str	r2, [r3, #8]
 800ee24:	e26f      	b.n	800f306 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ee26:	f7fe ff13 	bl	800dc50 <HAL_RCC_GetPCLK1Freq>
 800ee2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	461d      	mov	r5, r3
 800ee30:	f04f 0600 	mov.w	r6, #0
 800ee34:	46a8      	mov	r8, r5
 800ee36:	46b1      	mov	r9, r6
 800ee38:	eb18 0308 	adds.w	r3, r8, r8
 800ee3c:	eb49 0409 	adc.w	r4, r9, r9
 800ee40:	4698      	mov	r8, r3
 800ee42:	46a1      	mov	r9, r4
 800ee44:	eb18 0805 	adds.w	r8, r8, r5
 800ee48:	eb49 0906 	adc.w	r9, r9, r6
 800ee4c:	f04f 0100 	mov.w	r1, #0
 800ee50:	f04f 0200 	mov.w	r2, #0
 800ee54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ee58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ee5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ee60:	4688      	mov	r8, r1
 800ee62:	4691      	mov	r9, r2
 800ee64:	eb18 0005 	adds.w	r0, r8, r5
 800ee68:	eb49 0106 	adc.w	r1, r9, r6
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	461d      	mov	r5, r3
 800ee72:	f04f 0600 	mov.w	r6, #0
 800ee76:	196b      	adds	r3, r5, r5
 800ee78:	eb46 0406 	adc.w	r4, r6, r6
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	4623      	mov	r3, r4
 800ee80:	f7f1 ff02 	bl	8000c88 <__aeabi_uldivmod>
 800ee84:	4603      	mov	r3, r0
 800ee86:	460c      	mov	r4, r1
 800ee88:	461a      	mov	r2, r3
 800ee8a:	4b47      	ldr	r3, [pc, #284]	; (800efa8 <UART_SetConfig+0x384>)
 800ee8c:	fba3 2302 	umull	r2, r3, r3, r2
 800ee90:	095b      	lsrs	r3, r3, #5
 800ee92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	461d      	mov	r5, r3
 800ee9a:	f04f 0600 	mov.w	r6, #0
 800ee9e:	46a9      	mov	r9, r5
 800eea0:	46b2      	mov	sl, r6
 800eea2:	eb19 0309 	adds.w	r3, r9, r9
 800eea6:	eb4a 040a 	adc.w	r4, sl, sl
 800eeaa:	4699      	mov	r9, r3
 800eeac:	46a2      	mov	sl, r4
 800eeae:	eb19 0905 	adds.w	r9, r9, r5
 800eeb2:	eb4a 0a06 	adc.w	sl, sl, r6
 800eeb6:	f04f 0100 	mov.w	r1, #0
 800eeba:	f04f 0200 	mov.w	r2, #0
 800eebe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eec2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eec6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eeca:	4689      	mov	r9, r1
 800eecc:	4692      	mov	sl, r2
 800eece:	eb19 0005 	adds.w	r0, r9, r5
 800eed2:	eb4a 0106 	adc.w	r1, sl, r6
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	461d      	mov	r5, r3
 800eedc:	f04f 0600 	mov.w	r6, #0
 800eee0:	196b      	adds	r3, r5, r5
 800eee2:	eb46 0406 	adc.w	r4, r6, r6
 800eee6:	461a      	mov	r2, r3
 800eee8:	4623      	mov	r3, r4
 800eeea:	f7f1 fecd 	bl	8000c88 <__aeabi_uldivmod>
 800eeee:	4603      	mov	r3, r0
 800eef0:	460c      	mov	r4, r1
 800eef2:	461a      	mov	r2, r3
 800eef4:	4b2c      	ldr	r3, [pc, #176]	; (800efa8 <UART_SetConfig+0x384>)
 800eef6:	fba3 1302 	umull	r1, r3, r3, r2
 800eefa:	095b      	lsrs	r3, r3, #5
 800eefc:	2164      	movs	r1, #100	; 0x64
 800eefe:	fb01 f303 	mul.w	r3, r1, r3
 800ef02:	1ad3      	subs	r3, r2, r3
 800ef04:	00db      	lsls	r3, r3, #3
 800ef06:	3332      	adds	r3, #50	; 0x32
 800ef08:	4a27      	ldr	r2, [pc, #156]	; (800efa8 <UART_SetConfig+0x384>)
 800ef0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef0e:	095b      	lsrs	r3, r3, #5
 800ef10:	005b      	lsls	r3, r3, #1
 800ef12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ef16:	4498      	add	r8, r3
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	461d      	mov	r5, r3
 800ef1c:	f04f 0600 	mov.w	r6, #0
 800ef20:	46a9      	mov	r9, r5
 800ef22:	46b2      	mov	sl, r6
 800ef24:	eb19 0309 	adds.w	r3, r9, r9
 800ef28:	eb4a 040a 	adc.w	r4, sl, sl
 800ef2c:	4699      	mov	r9, r3
 800ef2e:	46a2      	mov	sl, r4
 800ef30:	eb19 0905 	adds.w	r9, r9, r5
 800ef34:	eb4a 0a06 	adc.w	sl, sl, r6
 800ef38:	f04f 0100 	mov.w	r1, #0
 800ef3c:	f04f 0200 	mov.w	r2, #0
 800ef40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ef48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ef4c:	4689      	mov	r9, r1
 800ef4e:	4692      	mov	sl, r2
 800ef50:	eb19 0005 	adds.w	r0, r9, r5
 800ef54:	eb4a 0106 	adc.w	r1, sl, r6
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	461d      	mov	r5, r3
 800ef5e:	f04f 0600 	mov.w	r6, #0
 800ef62:	196b      	adds	r3, r5, r5
 800ef64:	eb46 0406 	adc.w	r4, r6, r6
 800ef68:	461a      	mov	r2, r3
 800ef6a:	4623      	mov	r3, r4
 800ef6c:	f7f1 fe8c 	bl	8000c88 <__aeabi_uldivmod>
 800ef70:	4603      	mov	r3, r0
 800ef72:	460c      	mov	r4, r1
 800ef74:	461a      	mov	r2, r3
 800ef76:	4b0c      	ldr	r3, [pc, #48]	; (800efa8 <UART_SetConfig+0x384>)
 800ef78:	fba3 1302 	umull	r1, r3, r3, r2
 800ef7c:	095b      	lsrs	r3, r3, #5
 800ef7e:	2164      	movs	r1, #100	; 0x64
 800ef80:	fb01 f303 	mul.w	r3, r1, r3
 800ef84:	1ad3      	subs	r3, r2, r3
 800ef86:	00db      	lsls	r3, r3, #3
 800ef88:	3332      	adds	r3, #50	; 0x32
 800ef8a:	4a07      	ldr	r2, [pc, #28]	; (800efa8 <UART_SetConfig+0x384>)
 800ef8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ef90:	095b      	lsrs	r3, r3, #5
 800ef92:	f003 0207 	and.w	r2, r3, #7
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4442      	add	r2, r8
 800ef9c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ef9e:	e1b2      	b.n	800f306 <UART_SetConfig+0x6e2>
 800efa0:	40011000 	.word	0x40011000
 800efa4:	40011400 	.word	0x40011400
 800efa8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	4ad7      	ldr	r2, [pc, #860]	; (800f310 <UART_SetConfig+0x6ec>)
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d005      	beq.n	800efc2 <UART_SetConfig+0x39e>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4ad6      	ldr	r2, [pc, #856]	; (800f314 <UART_SetConfig+0x6f0>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	f040 80d1 	bne.w	800f164 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800efc2:	f7fe fe59 	bl	800dc78 <HAL_RCC_GetPCLK2Freq>
 800efc6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	469a      	mov	sl, r3
 800efcc:	f04f 0b00 	mov.w	fp, #0
 800efd0:	46d0      	mov	r8, sl
 800efd2:	46d9      	mov	r9, fp
 800efd4:	eb18 0308 	adds.w	r3, r8, r8
 800efd8:	eb49 0409 	adc.w	r4, r9, r9
 800efdc:	4698      	mov	r8, r3
 800efde:	46a1      	mov	r9, r4
 800efe0:	eb18 080a 	adds.w	r8, r8, sl
 800efe4:	eb49 090b 	adc.w	r9, r9, fp
 800efe8:	f04f 0100 	mov.w	r1, #0
 800efec:	f04f 0200 	mov.w	r2, #0
 800eff0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800eff4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800eff8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800effc:	4688      	mov	r8, r1
 800effe:	4691      	mov	r9, r2
 800f000:	eb1a 0508 	adds.w	r5, sl, r8
 800f004:	eb4b 0609 	adc.w	r6, fp, r9
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	4619      	mov	r1, r3
 800f00e:	f04f 0200 	mov.w	r2, #0
 800f012:	f04f 0300 	mov.w	r3, #0
 800f016:	f04f 0400 	mov.w	r4, #0
 800f01a:	0094      	lsls	r4, r2, #2
 800f01c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f020:	008b      	lsls	r3, r1, #2
 800f022:	461a      	mov	r2, r3
 800f024:	4623      	mov	r3, r4
 800f026:	4628      	mov	r0, r5
 800f028:	4631      	mov	r1, r6
 800f02a:	f7f1 fe2d 	bl	8000c88 <__aeabi_uldivmod>
 800f02e:	4603      	mov	r3, r0
 800f030:	460c      	mov	r4, r1
 800f032:	461a      	mov	r2, r3
 800f034:	4bb8      	ldr	r3, [pc, #736]	; (800f318 <UART_SetConfig+0x6f4>)
 800f036:	fba3 2302 	umull	r2, r3, r3, r2
 800f03a:	095b      	lsrs	r3, r3, #5
 800f03c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	469b      	mov	fp, r3
 800f044:	f04f 0c00 	mov.w	ip, #0
 800f048:	46d9      	mov	r9, fp
 800f04a:	46e2      	mov	sl, ip
 800f04c:	eb19 0309 	adds.w	r3, r9, r9
 800f050:	eb4a 040a 	adc.w	r4, sl, sl
 800f054:	4699      	mov	r9, r3
 800f056:	46a2      	mov	sl, r4
 800f058:	eb19 090b 	adds.w	r9, r9, fp
 800f05c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f060:	f04f 0100 	mov.w	r1, #0
 800f064:	f04f 0200 	mov.w	r2, #0
 800f068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f06c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f070:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f074:	4689      	mov	r9, r1
 800f076:	4692      	mov	sl, r2
 800f078:	eb1b 0509 	adds.w	r5, fp, r9
 800f07c:	eb4c 060a 	adc.w	r6, ip, sl
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	4619      	mov	r1, r3
 800f086:	f04f 0200 	mov.w	r2, #0
 800f08a:	f04f 0300 	mov.w	r3, #0
 800f08e:	f04f 0400 	mov.w	r4, #0
 800f092:	0094      	lsls	r4, r2, #2
 800f094:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f098:	008b      	lsls	r3, r1, #2
 800f09a:	461a      	mov	r2, r3
 800f09c:	4623      	mov	r3, r4
 800f09e:	4628      	mov	r0, r5
 800f0a0:	4631      	mov	r1, r6
 800f0a2:	f7f1 fdf1 	bl	8000c88 <__aeabi_uldivmod>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	460c      	mov	r4, r1
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	4b9a      	ldr	r3, [pc, #616]	; (800f318 <UART_SetConfig+0x6f4>)
 800f0ae:	fba3 1302 	umull	r1, r3, r3, r2
 800f0b2:	095b      	lsrs	r3, r3, #5
 800f0b4:	2164      	movs	r1, #100	; 0x64
 800f0b6:	fb01 f303 	mul.w	r3, r1, r3
 800f0ba:	1ad3      	subs	r3, r2, r3
 800f0bc:	011b      	lsls	r3, r3, #4
 800f0be:	3332      	adds	r3, #50	; 0x32
 800f0c0:	4a95      	ldr	r2, [pc, #596]	; (800f318 <UART_SetConfig+0x6f4>)
 800f0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0c6:	095b      	lsrs	r3, r3, #5
 800f0c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0cc:	4498      	add	r8, r3
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	469b      	mov	fp, r3
 800f0d2:	f04f 0c00 	mov.w	ip, #0
 800f0d6:	46d9      	mov	r9, fp
 800f0d8:	46e2      	mov	sl, ip
 800f0da:	eb19 0309 	adds.w	r3, r9, r9
 800f0de:	eb4a 040a 	adc.w	r4, sl, sl
 800f0e2:	4699      	mov	r9, r3
 800f0e4:	46a2      	mov	sl, r4
 800f0e6:	eb19 090b 	adds.w	r9, r9, fp
 800f0ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f0ee:	f04f 0100 	mov.w	r1, #0
 800f0f2:	f04f 0200 	mov.w	r2, #0
 800f0f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f0fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f102:	4689      	mov	r9, r1
 800f104:	4692      	mov	sl, r2
 800f106:	eb1b 0509 	adds.w	r5, fp, r9
 800f10a:	eb4c 060a 	adc.w	r6, ip, sl
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	4619      	mov	r1, r3
 800f114:	f04f 0200 	mov.w	r2, #0
 800f118:	f04f 0300 	mov.w	r3, #0
 800f11c:	f04f 0400 	mov.w	r4, #0
 800f120:	0094      	lsls	r4, r2, #2
 800f122:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f126:	008b      	lsls	r3, r1, #2
 800f128:	461a      	mov	r2, r3
 800f12a:	4623      	mov	r3, r4
 800f12c:	4628      	mov	r0, r5
 800f12e:	4631      	mov	r1, r6
 800f130:	f7f1 fdaa 	bl	8000c88 <__aeabi_uldivmod>
 800f134:	4603      	mov	r3, r0
 800f136:	460c      	mov	r4, r1
 800f138:	461a      	mov	r2, r3
 800f13a:	4b77      	ldr	r3, [pc, #476]	; (800f318 <UART_SetConfig+0x6f4>)
 800f13c:	fba3 1302 	umull	r1, r3, r3, r2
 800f140:	095b      	lsrs	r3, r3, #5
 800f142:	2164      	movs	r1, #100	; 0x64
 800f144:	fb01 f303 	mul.w	r3, r1, r3
 800f148:	1ad3      	subs	r3, r2, r3
 800f14a:	011b      	lsls	r3, r3, #4
 800f14c:	3332      	adds	r3, #50	; 0x32
 800f14e:	4a72      	ldr	r2, [pc, #456]	; (800f318 <UART_SetConfig+0x6f4>)
 800f150:	fba2 2303 	umull	r2, r3, r2, r3
 800f154:	095b      	lsrs	r3, r3, #5
 800f156:	f003 020f 	and.w	r2, r3, #15
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4442      	add	r2, r8
 800f160:	609a      	str	r2, [r3, #8]
 800f162:	e0d0      	b.n	800f306 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f164:	f7fe fd74 	bl	800dc50 <HAL_RCC_GetPCLK1Freq>
 800f168:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	469a      	mov	sl, r3
 800f16e:	f04f 0b00 	mov.w	fp, #0
 800f172:	46d0      	mov	r8, sl
 800f174:	46d9      	mov	r9, fp
 800f176:	eb18 0308 	adds.w	r3, r8, r8
 800f17a:	eb49 0409 	adc.w	r4, r9, r9
 800f17e:	4698      	mov	r8, r3
 800f180:	46a1      	mov	r9, r4
 800f182:	eb18 080a 	adds.w	r8, r8, sl
 800f186:	eb49 090b 	adc.w	r9, r9, fp
 800f18a:	f04f 0100 	mov.w	r1, #0
 800f18e:	f04f 0200 	mov.w	r2, #0
 800f192:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f196:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f19a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f19e:	4688      	mov	r8, r1
 800f1a0:	4691      	mov	r9, r2
 800f1a2:	eb1a 0508 	adds.w	r5, sl, r8
 800f1a6:	eb4b 0609 	adc.w	r6, fp, r9
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	f04f 0200 	mov.w	r2, #0
 800f1b4:	f04f 0300 	mov.w	r3, #0
 800f1b8:	f04f 0400 	mov.w	r4, #0
 800f1bc:	0094      	lsls	r4, r2, #2
 800f1be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f1c2:	008b      	lsls	r3, r1, #2
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	4623      	mov	r3, r4
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	4631      	mov	r1, r6
 800f1cc:	f7f1 fd5c 	bl	8000c88 <__aeabi_uldivmod>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	460c      	mov	r4, r1
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	4b50      	ldr	r3, [pc, #320]	; (800f318 <UART_SetConfig+0x6f4>)
 800f1d8:	fba3 2302 	umull	r2, r3, r3, r2
 800f1dc:	095b      	lsrs	r3, r3, #5
 800f1de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	469b      	mov	fp, r3
 800f1e6:	f04f 0c00 	mov.w	ip, #0
 800f1ea:	46d9      	mov	r9, fp
 800f1ec:	46e2      	mov	sl, ip
 800f1ee:	eb19 0309 	adds.w	r3, r9, r9
 800f1f2:	eb4a 040a 	adc.w	r4, sl, sl
 800f1f6:	4699      	mov	r9, r3
 800f1f8:	46a2      	mov	sl, r4
 800f1fa:	eb19 090b 	adds.w	r9, r9, fp
 800f1fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f202:	f04f 0100 	mov.w	r1, #0
 800f206:	f04f 0200 	mov.w	r2, #0
 800f20a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f20e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f212:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f216:	4689      	mov	r9, r1
 800f218:	4692      	mov	sl, r2
 800f21a:	eb1b 0509 	adds.w	r5, fp, r9
 800f21e:	eb4c 060a 	adc.w	r6, ip, sl
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	4619      	mov	r1, r3
 800f228:	f04f 0200 	mov.w	r2, #0
 800f22c:	f04f 0300 	mov.w	r3, #0
 800f230:	f04f 0400 	mov.w	r4, #0
 800f234:	0094      	lsls	r4, r2, #2
 800f236:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f23a:	008b      	lsls	r3, r1, #2
 800f23c:	461a      	mov	r2, r3
 800f23e:	4623      	mov	r3, r4
 800f240:	4628      	mov	r0, r5
 800f242:	4631      	mov	r1, r6
 800f244:	f7f1 fd20 	bl	8000c88 <__aeabi_uldivmod>
 800f248:	4603      	mov	r3, r0
 800f24a:	460c      	mov	r4, r1
 800f24c:	461a      	mov	r2, r3
 800f24e:	4b32      	ldr	r3, [pc, #200]	; (800f318 <UART_SetConfig+0x6f4>)
 800f250:	fba3 1302 	umull	r1, r3, r3, r2
 800f254:	095b      	lsrs	r3, r3, #5
 800f256:	2164      	movs	r1, #100	; 0x64
 800f258:	fb01 f303 	mul.w	r3, r1, r3
 800f25c:	1ad3      	subs	r3, r2, r3
 800f25e:	011b      	lsls	r3, r3, #4
 800f260:	3332      	adds	r3, #50	; 0x32
 800f262:	4a2d      	ldr	r2, [pc, #180]	; (800f318 <UART_SetConfig+0x6f4>)
 800f264:	fba2 2303 	umull	r2, r3, r2, r3
 800f268:	095b      	lsrs	r3, r3, #5
 800f26a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f26e:	4498      	add	r8, r3
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	469b      	mov	fp, r3
 800f274:	f04f 0c00 	mov.w	ip, #0
 800f278:	46d9      	mov	r9, fp
 800f27a:	46e2      	mov	sl, ip
 800f27c:	eb19 0309 	adds.w	r3, r9, r9
 800f280:	eb4a 040a 	adc.w	r4, sl, sl
 800f284:	4699      	mov	r9, r3
 800f286:	46a2      	mov	sl, r4
 800f288:	eb19 090b 	adds.w	r9, r9, fp
 800f28c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f290:	f04f 0100 	mov.w	r1, #0
 800f294:	f04f 0200 	mov.w	r2, #0
 800f298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f29c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f2a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f2a4:	4689      	mov	r9, r1
 800f2a6:	4692      	mov	sl, r2
 800f2a8:	eb1b 0509 	adds.w	r5, fp, r9
 800f2ac:	eb4c 060a 	adc.w	r6, ip, sl
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	f04f 0200 	mov.w	r2, #0
 800f2ba:	f04f 0300 	mov.w	r3, #0
 800f2be:	f04f 0400 	mov.w	r4, #0
 800f2c2:	0094      	lsls	r4, r2, #2
 800f2c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f2c8:	008b      	lsls	r3, r1, #2
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	4623      	mov	r3, r4
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	4631      	mov	r1, r6
 800f2d2:	f7f1 fcd9 	bl	8000c88 <__aeabi_uldivmod>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	460c      	mov	r4, r1
 800f2da:	461a      	mov	r2, r3
 800f2dc:	4b0e      	ldr	r3, [pc, #56]	; (800f318 <UART_SetConfig+0x6f4>)
 800f2de:	fba3 1302 	umull	r1, r3, r3, r2
 800f2e2:	095b      	lsrs	r3, r3, #5
 800f2e4:	2164      	movs	r1, #100	; 0x64
 800f2e6:	fb01 f303 	mul.w	r3, r1, r3
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	011b      	lsls	r3, r3, #4
 800f2ee:	3332      	adds	r3, #50	; 0x32
 800f2f0:	4a09      	ldr	r2, [pc, #36]	; (800f318 <UART_SetConfig+0x6f4>)
 800f2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2f6:	095b      	lsrs	r3, r3, #5
 800f2f8:	f003 020f 	and.w	r2, r3, #15
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4442      	add	r2, r8
 800f302:	609a      	str	r2, [r3, #8]
}
 800f304:	e7ff      	b.n	800f306 <UART_SetConfig+0x6e2>
 800f306:	bf00      	nop
 800f308:	3714      	adds	r7, #20
 800f30a:	46bd      	mov	sp, r7
 800f30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f310:	40011000 	.word	0x40011000
 800f314:	40011400 	.word	0x40011400
 800f318:	51eb851f 	.word	0x51eb851f

0800f31c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800f326:	2300      	movs	r3, #0
 800f328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	681a      	ldr	r2, [r3, #0]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f334:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800f336:	68fa      	ldr	r2, [r7, #12]
 800f338:	4b20      	ldr	r3, [pc, #128]	; (800f3bc <FSMC_NORSRAM_Init+0xa0>)
 800f33a:	4013      	ands	r3, r2
 800f33c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f346:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800f34c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800f352:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800f358:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800f35e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800f364:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800f36a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800f370:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800f376:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800f37c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800f382:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800f388:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800f38a:	68fa      	ldr	r2, [r7, #12]
 800f38c:	4313      	orrs	r3, r2
 800f38e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	2b08      	cmp	r3, #8
 800f396:	d103      	bne.n	800f3a0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f39e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	68f9      	ldr	r1, [r7, #12]
 800f3a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f3ac:	2300      	movs	r3, #0
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3714      	adds	r7, #20
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr
 800f3ba:	bf00      	nop
 800f3bc:	fff00080 	.word	0xfff00080

0800f3c0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b087      	sub	sp, #28
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	1c5a      	adds	r2, r3, #1
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3da:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f3e2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f3ee:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	689b      	ldr	r3, [r3, #8]
 800f3f4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f3f6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f3fe:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	691b      	ldr	r3, [r3, #16]
 800f404:	3b01      	subs	r3, #1
 800f406:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f408:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	695b      	ldr	r3, [r3, #20]
 800f40e:	3b02      	subs	r3, #2
 800f410:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f412:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f418:	4313      	orrs	r3, r2
 800f41a:	697a      	ldr	r2, [r7, #20]
 800f41c:	4313      	orrs	r3, r2
 800f41e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	1c5a      	adds	r2, r3, #1
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	6979      	ldr	r1, [r7, #20]
 800f428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	371c      	adds	r7, #28
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr
	...

0800f43c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b087      	sub	sp, #28
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
 800f448:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f44a:	2300      	movs	r3, #0
 800f44c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f454:	d122      	bne.n	800f49c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f45e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f460:	697a      	ldr	r2, [r7, #20]
 800f462:	4b15      	ldr	r3, [pc, #84]	; (800f4b8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f464:	4013      	ands	r3, r2
 800f466:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f472:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f47a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f482:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f488:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	4313      	orrs	r3, r2
 800f48e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	6979      	ldr	r1, [r7, #20]
 800f496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f49a:	e005      	b.n	800f4a8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f4a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f4a8:	2300      	movs	r3, #0
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	371c      	adds	r7, #28
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b4:	4770      	bx	lr
 800f4b6:	bf00      	nop
 800f4b8:	cff00000 	.word	0xcff00000

0800f4bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f4bc:	b084      	sub	sp, #16
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b084      	sub	sp, #16
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
 800f4c6:	f107 001c 	add.w	r0, r7, #28
 800f4ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d122      	bne.n	800f51a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f4e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d105      	bne.n	800f50e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f001 fac6 	bl	8010aa0 <USB_CoreReset>
 800f514:	4603      	mov	r3, r0
 800f516:	73fb      	strb	r3, [r7, #15]
 800f518:	e01a      	b.n	800f550 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f001 faba 	bl	8010aa0 <USB_CoreReset>
 800f52c:	4603      	mov	r3, r0
 800f52e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f532:	2b00      	cmp	r3, #0
 800f534:	d106      	bne.n	800f544 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f53a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	639a      	str	r2, [r3, #56]	; 0x38
 800f542:	e005      	b.n	800f550 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f552:	2b01      	cmp	r3, #1
 800f554:	d10b      	bne.n	800f56e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	f043 0206 	orr.w	r2, r3, #6
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	689b      	ldr	r3, [r3, #8]
 800f566:	f043 0220 	orr.w	r2, r3, #32
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f570:	4618      	mov	r0, r3
 800f572:	3710      	adds	r7, #16
 800f574:	46bd      	mov	sp, r7
 800f576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f57a:	b004      	add	sp, #16
 800f57c:	4770      	bx	lr
	...

0800f580 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f580:	b480      	push	{r7}
 800f582:	b087      	sub	sp, #28
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	4613      	mov	r3, r2
 800f58c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f58e:	79fb      	ldrb	r3, [r7, #7]
 800f590:	2b02      	cmp	r3, #2
 800f592:	d165      	bne.n	800f660 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	4a41      	ldr	r2, [pc, #260]	; (800f69c <USB_SetTurnaroundTime+0x11c>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d906      	bls.n	800f5aa <USB_SetTurnaroundTime+0x2a>
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	4a40      	ldr	r2, [pc, #256]	; (800f6a0 <USB_SetTurnaroundTime+0x120>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d802      	bhi.n	800f5aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f5a4:	230f      	movs	r3, #15
 800f5a6:	617b      	str	r3, [r7, #20]
 800f5a8:	e062      	b.n	800f670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	4a3c      	ldr	r2, [pc, #240]	; (800f6a0 <USB_SetTurnaroundTime+0x120>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d906      	bls.n	800f5c0 <USB_SetTurnaroundTime+0x40>
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	4a3b      	ldr	r2, [pc, #236]	; (800f6a4 <USB_SetTurnaroundTime+0x124>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d802      	bhi.n	800f5c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f5ba:	230e      	movs	r3, #14
 800f5bc:	617b      	str	r3, [r7, #20]
 800f5be:	e057      	b.n	800f670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	4a38      	ldr	r2, [pc, #224]	; (800f6a4 <USB_SetTurnaroundTime+0x124>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d906      	bls.n	800f5d6 <USB_SetTurnaroundTime+0x56>
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	4a37      	ldr	r2, [pc, #220]	; (800f6a8 <USB_SetTurnaroundTime+0x128>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d802      	bhi.n	800f5d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f5d0:	230d      	movs	r3, #13
 800f5d2:	617b      	str	r3, [r7, #20]
 800f5d4:	e04c      	b.n	800f670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	4a33      	ldr	r2, [pc, #204]	; (800f6a8 <USB_SetTurnaroundTime+0x128>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d906      	bls.n	800f5ec <USB_SetTurnaroundTime+0x6c>
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	4a32      	ldr	r2, [pc, #200]	; (800f6ac <USB_SetTurnaroundTime+0x12c>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d802      	bhi.n	800f5ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f5e6:	230c      	movs	r3, #12
 800f5e8:	617b      	str	r3, [r7, #20]
 800f5ea:	e041      	b.n	800f670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	4a2f      	ldr	r2, [pc, #188]	; (800f6ac <USB_SetTurnaroundTime+0x12c>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d906      	bls.n	800f602 <USB_SetTurnaroundTime+0x82>
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	4a2e      	ldr	r2, [pc, #184]	; (800f6b0 <USB_SetTurnaroundTime+0x130>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d802      	bhi.n	800f602 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f5fc:	230b      	movs	r3, #11
 800f5fe:	617b      	str	r3, [r7, #20]
 800f600:	e036      	b.n	800f670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	4a2a      	ldr	r2, [pc, #168]	; (800f6b0 <USB_SetTurnaroundTime+0x130>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d906      	bls.n	800f618 <USB_SetTurnaroundTime+0x98>
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	4a29      	ldr	r2, [pc, #164]	; (800f6b4 <USB_SetTurnaroundTime+0x134>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d802      	bhi.n	800f618 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f612:	230a      	movs	r3, #10
 800f614:	617b      	str	r3, [r7, #20]
 800f616:	e02b      	b.n	800f670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	4a26      	ldr	r2, [pc, #152]	; (800f6b4 <USB_SetTurnaroundTime+0x134>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d906      	bls.n	800f62e <USB_SetTurnaroundTime+0xae>
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	4a25      	ldr	r2, [pc, #148]	; (800f6b8 <USB_SetTurnaroundTime+0x138>)
 800f624:	4293      	cmp	r3, r2
 800f626:	d802      	bhi.n	800f62e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f628:	2309      	movs	r3, #9
 800f62a:	617b      	str	r3, [r7, #20]
 800f62c:	e020      	b.n	800f670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	4a21      	ldr	r2, [pc, #132]	; (800f6b8 <USB_SetTurnaroundTime+0x138>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d906      	bls.n	800f644 <USB_SetTurnaroundTime+0xc4>
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	4a20      	ldr	r2, [pc, #128]	; (800f6bc <USB_SetTurnaroundTime+0x13c>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d802      	bhi.n	800f644 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f63e:	2308      	movs	r3, #8
 800f640:	617b      	str	r3, [r7, #20]
 800f642:	e015      	b.n	800f670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	4a1d      	ldr	r2, [pc, #116]	; (800f6bc <USB_SetTurnaroundTime+0x13c>)
 800f648:	4293      	cmp	r3, r2
 800f64a:	d906      	bls.n	800f65a <USB_SetTurnaroundTime+0xda>
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	4a1c      	ldr	r2, [pc, #112]	; (800f6c0 <USB_SetTurnaroundTime+0x140>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d802      	bhi.n	800f65a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f654:	2307      	movs	r3, #7
 800f656:	617b      	str	r3, [r7, #20]
 800f658:	e00a      	b.n	800f670 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f65a:	2306      	movs	r3, #6
 800f65c:	617b      	str	r3, [r7, #20]
 800f65e:	e007      	b.n	800f670 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f660:	79fb      	ldrb	r3, [r7, #7]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d102      	bne.n	800f66c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f666:	2309      	movs	r3, #9
 800f668:	617b      	str	r3, [r7, #20]
 800f66a:	e001      	b.n	800f670 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f66c:	2309      	movs	r3, #9
 800f66e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	68db      	ldr	r3, [r3, #12]
 800f674:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	68da      	ldr	r2, [r3, #12]
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	029b      	lsls	r3, r3, #10
 800f684:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f688:	431a      	orrs	r2, r3
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f68e:	2300      	movs	r3, #0
}
 800f690:	4618      	mov	r0, r3
 800f692:	371c      	adds	r7, #28
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr
 800f69c:	00d8acbf 	.word	0x00d8acbf
 800f6a0:	00e4e1bf 	.word	0x00e4e1bf
 800f6a4:	00f423ff 	.word	0x00f423ff
 800f6a8:	0106737f 	.word	0x0106737f
 800f6ac:	011a499f 	.word	0x011a499f
 800f6b0:	01312cff 	.word	0x01312cff
 800f6b4:	014ca43f 	.word	0x014ca43f
 800f6b8:	016e35ff 	.word	0x016e35ff
 800f6bc:	01a6ab1f 	.word	0x01a6ab1f
 800f6c0:	01e847ff 	.word	0x01e847ff

0800f6c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	689b      	ldr	r3, [r3, #8]
 800f6d0:	f043 0201 	orr.w	r2, r3, #1
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	370c      	adds	r7, #12
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr

0800f6e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f6e6:	b480      	push	{r7}
 800f6e8:	b083      	sub	sp, #12
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	689b      	ldr	r3, [r3, #8]
 800f6f2:	f023 0201 	bic.w	r2, r3, #1
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f6fa:	2300      	movs	r3, #0
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	370c      	adds	r7, #12
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	460b      	mov	r3, r1
 800f712:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f720:	78fb      	ldrb	r3, [r7, #3]
 800f722:	2b01      	cmp	r3, #1
 800f724:	d106      	bne.n	800f734 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	60da      	str	r2, [r3, #12]
 800f732:	e00b      	b.n	800f74c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f734:	78fb      	ldrb	r3, [r7, #3]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d106      	bne.n	800f748 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	68db      	ldr	r3, [r3, #12]
 800f73e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	60da      	str	r2, [r3, #12]
 800f746:	e001      	b.n	800f74c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f748:	2301      	movs	r3, #1
 800f74a:	e003      	b.n	800f754 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f74c:	2032      	movs	r0, #50	; 0x32
 800f74e:	f7fb fe15 	bl	800b37c <HAL_Delay>

  return HAL_OK;
 800f752:	2300      	movs	r3, #0
}
 800f754:	4618      	mov	r0, r3
 800f756:	3708      	adds	r7, #8
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f75c:	b084      	sub	sp, #16
 800f75e:	b580      	push	{r7, lr}
 800f760:	b086      	sub	sp, #24
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
 800f766:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f76a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f76e:	2300      	movs	r3, #0
 800f770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f776:	2300      	movs	r3, #0
 800f778:	613b      	str	r3, [r7, #16]
 800f77a:	e009      	b.n	800f790 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	3340      	adds	r3, #64	; 0x40
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	4413      	add	r3, r2
 800f786:	2200      	movs	r2, #0
 800f788:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	3301      	adds	r3, #1
 800f78e:	613b      	str	r3, [r7, #16]
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	2b0e      	cmp	r3, #14
 800f794:	d9f2      	bls.n	800f77c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d11c      	bne.n	800f7d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	68fa      	ldr	r2, [r7, #12]
 800f7a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f7aa:	f043 0302 	orr.w	r3, r3, #2
 800f7ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	639a      	str	r2, [r3, #56]	; 0x38
 800f7d4:	e00b      	b.n	800f7ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f800:	4619      	mov	r1, r3
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f808:	461a      	mov	r2, r3
 800f80a:	680b      	ldr	r3, [r1, #0]
 800f80c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f810:	2b01      	cmp	r3, #1
 800f812:	d10c      	bne.n	800f82e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f816:	2b00      	cmp	r3, #0
 800f818:	d104      	bne.n	800f824 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f81a:	2100      	movs	r1, #0
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 f949 	bl	800fab4 <USB_SetDevSpeed>
 800f822:	e008      	b.n	800f836 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f824:	2101      	movs	r1, #1
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f000 f944 	bl	800fab4 <USB_SetDevSpeed>
 800f82c:	e003      	b.n	800f836 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f82e:	2103      	movs	r1, #3
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f000 f93f 	bl	800fab4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f836:	2110      	movs	r1, #16
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 f8f3 	bl	800fa24 <USB_FlushTxFifo>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d001      	beq.n	800f848 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f844:	2301      	movs	r3, #1
 800f846:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f000 f911 	bl	800fa70 <USB_FlushRxFifo>
 800f84e:	4603      	mov	r3, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	d001      	beq.n	800f858 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f854:	2301      	movs	r3, #1
 800f856:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f85e:	461a      	mov	r2, r3
 800f860:	2300      	movs	r3, #0
 800f862:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f86a:	461a      	mov	r2, r3
 800f86c:	2300      	movs	r3, #0
 800f86e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f876:	461a      	mov	r2, r3
 800f878:	2300      	movs	r3, #0
 800f87a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f87c:	2300      	movs	r3, #0
 800f87e:	613b      	str	r3, [r7, #16]
 800f880:	e043      	b.n	800f90a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	015a      	lsls	r2, r3, #5
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	4413      	add	r3, r2
 800f88a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f898:	d118      	bne.n	800f8cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d10a      	bne.n	800f8b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	015a      	lsls	r2, r3, #5
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f8b2:	6013      	str	r3, [r2, #0]
 800f8b4:	e013      	b.n	800f8de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	015a      	lsls	r2, r3, #5
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	4413      	add	r3, r2
 800f8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f8c8:	6013      	str	r3, [r2, #0]
 800f8ca:	e008      	b.n	800f8de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	015a      	lsls	r2, r3, #5
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8d8:	461a      	mov	r2, r3
 800f8da:	2300      	movs	r3, #0
 800f8dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	015a      	lsls	r2, r3, #5
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	015a      	lsls	r2, r3, #5
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f902:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	3301      	adds	r3, #1
 800f908:	613b      	str	r3, [r7, #16]
 800f90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90c:	693a      	ldr	r2, [r7, #16]
 800f90e:	429a      	cmp	r2, r3
 800f910:	d3b7      	bcc.n	800f882 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f912:	2300      	movs	r3, #0
 800f914:	613b      	str	r3, [r7, #16]
 800f916:	e043      	b.n	800f9a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	015a      	lsls	r2, r3, #5
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	4413      	add	r3, r2
 800f920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f92a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f92e:	d118      	bne.n	800f962 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d10a      	bne.n	800f94c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	015a      	lsls	r2, r3, #5
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	4413      	add	r3, r2
 800f93e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f942:	461a      	mov	r2, r3
 800f944:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f948:	6013      	str	r3, [r2, #0]
 800f94a:	e013      	b.n	800f974 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	015a      	lsls	r2, r3, #5
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	4413      	add	r3, r2
 800f954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f958:	461a      	mov	r2, r3
 800f95a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f95e:	6013      	str	r3, [r2, #0]
 800f960:	e008      	b.n	800f974 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	015a      	lsls	r2, r3, #5
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	4413      	add	r3, r2
 800f96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f96e:	461a      	mov	r2, r3
 800f970:	2300      	movs	r3, #0
 800f972:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	015a      	lsls	r2, r3, #5
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	4413      	add	r3, r2
 800f97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f980:	461a      	mov	r2, r3
 800f982:	2300      	movs	r3, #0
 800f984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	015a      	lsls	r2, r3, #5
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	4413      	add	r3, r2
 800f98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f992:	461a      	mov	r2, r3
 800f994:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f998:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	3301      	adds	r3, #1
 800f99e:	613b      	str	r3, [r7, #16]
 800f9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a2:	693a      	ldr	r2, [r7, #16]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d3b7      	bcc.n	800f918 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9ae:	691b      	ldr	r3, [r3, #16]
 800f9b0:	68fa      	ldr	r2, [r7, #12]
 800f9b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f9c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d105      	bne.n	800f9dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	699b      	ldr	r3, [r3, #24]
 800f9d4:	f043 0210 	orr.w	r2, r3, #16
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	699a      	ldr	r2, [r3, #24]
 800f9e0:	4b0f      	ldr	r3, [pc, #60]	; (800fa20 <USB_DevInit+0x2c4>)
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d005      	beq.n	800f9fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	699b      	ldr	r3, [r3, #24]
 800f9f2:	f043 0208 	orr.w	r2, r3, #8
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d107      	bne.n	800fa10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	699b      	ldr	r3, [r3, #24]
 800fa04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa08:	f043 0304 	orr.w	r3, r3, #4
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fa10:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3718      	adds	r7, #24
 800fa16:	46bd      	mov	sp, r7
 800fa18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa1c:	b004      	add	sp, #16
 800fa1e:	4770      	bx	lr
 800fa20:	803c3800 	.word	0x803c3800

0800fa24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	019b      	lsls	r3, r3, #6
 800fa36:	f043 0220 	orr.w	r2, r3, #32
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	3301      	adds	r3, #1
 800fa42:	60fb      	str	r3, [r7, #12]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	4a09      	ldr	r2, [pc, #36]	; (800fa6c <USB_FlushTxFifo+0x48>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d901      	bls.n	800fa50 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fa4c:	2303      	movs	r3, #3
 800fa4e:	e006      	b.n	800fa5e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	691b      	ldr	r3, [r3, #16]
 800fa54:	f003 0320 	and.w	r3, r3, #32
 800fa58:	2b20      	cmp	r3, #32
 800fa5a:	d0f0      	beq.n	800fa3e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fa5c:	2300      	movs	r3, #0
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3714      	adds	r7, #20
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr
 800fa6a:	bf00      	nop
 800fa6c:	00030d40 	.word	0x00030d40

0800fa70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b085      	sub	sp, #20
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2210      	movs	r2, #16
 800fa80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	3301      	adds	r3, #1
 800fa86:	60fb      	str	r3, [r7, #12]
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	4a09      	ldr	r2, [pc, #36]	; (800fab0 <USB_FlushRxFifo+0x40>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d901      	bls.n	800fa94 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fa90:	2303      	movs	r3, #3
 800fa92:	e006      	b.n	800faa2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	691b      	ldr	r3, [r3, #16]
 800fa98:	f003 0310 	and.w	r3, r3, #16
 800fa9c:	2b10      	cmp	r3, #16
 800fa9e:	d0f0      	beq.n	800fa82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800faa0:	2300      	movs	r3, #0
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3714      	adds	r7, #20
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	00030d40 	.word	0x00030d40

0800fab4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	460b      	mov	r3, r1
 800fabe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faca:	681a      	ldr	r2, [r3, #0]
 800facc:	78fb      	ldrb	r3, [r7, #3]
 800face:	68f9      	ldr	r1, [r7, #12]
 800fad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fad4:	4313      	orrs	r3, r2
 800fad6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fad8:	2300      	movs	r3, #0
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3714      	adds	r7, #20
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fae6:	b480      	push	{r7}
 800fae8:	b087      	sub	sp, #28
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faf8:	689b      	ldr	r3, [r3, #8]
 800fafa:	f003 0306 	and.w	r3, r3, #6
 800fafe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d102      	bne.n	800fb0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fb06:	2300      	movs	r3, #0
 800fb08:	75fb      	strb	r3, [r7, #23]
 800fb0a:	e00a      	b.n	800fb22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	2b02      	cmp	r3, #2
 800fb10:	d002      	beq.n	800fb18 <USB_GetDevSpeed+0x32>
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2b06      	cmp	r3, #6
 800fb16:	d102      	bne.n	800fb1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fb18:	2302      	movs	r3, #2
 800fb1a:	75fb      	strb	r3, [r7, #23]
 800fb1c:	e001      	b.n	800fb22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fb1e:	230f      	movs	r3, #15
 800fb20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	371c      	adds	r7, #28
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b085      	sub	sp, #20
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	785b      	ldrb	r3, [r3, #1]
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d13a      	bne.n	800fbc2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb52:	69da      	ldr	r2, [r3, #28]
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	f003 030f 	and.w	r3, r3, #15
 800fb5c:	2101      	movs	r1, #1
 800fb5e:	fa01 f303 	lsl.w	r3, r1, r3
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	68f9      	ldr	r1, [r7, #12]
 800fb66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	015a      	lsls	r2, r3, #5
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	4413      	add	r3, r2
 800fb76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d155      	bne.n	800fc30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	015a      	lsls	r2, r3, #5
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	4413      	add	r3, r2
 800fb8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	689b      	ldr	r3, [r3, #8]
 800fb96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	78db      	ldrb	r3, [r3, #3]
 800fb9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fba0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	059b      	lsls	r3, r3, #22
 800fba6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	68ba      	ldr	r2, [r7, #8]
 800fbac:	0151      	lsls	r1, r2, #5
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	440a      	add	r2, r1
 800fbb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbbe:	6013      	str	r3, [r2, #0]
 800fbc0:	e036      	b.n	800fc30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbc8:	69da      	ldr	r2, [r3, #28]
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	f003 030f 	and.w	r3, r3, #15
 800fbd2:	2101      	movs	r1, #1
 800fbd4:	fa01 f303 	lsl.w	r3, r1, r3
 800fbd8:	041b      	lsls	r3, r3, #16
 800fbda:	68f9      	ldr	r1, [r7, #12]
 800fbdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	015a      	lsls	r2, r3, #5
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	4413      	add	r3, r2
 800fbec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d11a      	bne.n	800fc30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	015a      	lsls	r2, r3, #5
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	4413      	add	r3, r2
 800fc02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	78db      	ldrb	r3, [r3, #3]
 800fc14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fc16:	430b      	orrs	r3, r1
 800fc18:	4313      	orrs	r3, r2
 800fc1a:	68ba      	ldr	r2, [r7, #8]
 800fc1c:	0151      	lsls	r1, r2, #5
 800fc1e:	68fa      	ldr	r2, [r7, #12]
 800fc20:	440a      	add	r2, r1
 800fc22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3714      	adds	r7, #20
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
	...

0800fc40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b085      	sub	sp, #20
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	785b      	ldrb	r3, [r3, #1]
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d161      	bne.n	800fd20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	015a      	lsls	r2, r3, #5
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	4413      	add	r3, r2
 800fc64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc72:	d11f      	bne.n	800fcb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	015a      	lsls	r2, r3, #5
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	4413      	add	r3, r2
 800fc7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	68ba      	ldr	r2, [r7, #8]
 800fc84:	0151      	lsls	r1, r2, #5
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	440a      	add	r2, r1
 800fc8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fc92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	015a      	lsls	r2, r3, #5
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	4413      	add	r3, r2
 800fc9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	68ba      	ldr	r2, [r7, #8]
 800fca4:	0151      	lsls	r1, r2, #5
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	440a      	add	r2, r1
 800fcaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fcb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	f003 030f 	and.w	r3, r3, #15
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	fa01 f303 	lsl.w	r3, r1, r3
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	43db      	mvns	r3, r3
 800fcce:	68f9      	ldr	r1, [r7, #12]
 800fcd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcd4:	4013      	ands	r3, r2
 800fcd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcde:	69da      	ldr	r2, [r3, #28]
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	f003 030f 	and.w	r3, r3, #15
 800fce8:	2101      	movs	r1, #1
 800fcea:	fa01 f303 	lsl.w	r3, r1, r3
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	43db      	mvns	r3, r3
 800fcf2:	68f9      	ldr	r1, [r7, #12]
 800fcf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcf8:	4013      	ands	r3, r2
 800fcfa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	015a      	lsls	r2, r3, #5
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	4413      	add	r3, r2
 800fd04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	0159      	lsls	r1, r3, #5
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	440b      	add	r3, r1
 800fd12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd16:	4619      	mov	r1, r3
 800fd18:	4b35      	ldr	r3, [pc, #212]	; (800fdf0 <USB_DeactivateEndpoint+0x1b0>)
 800fd1a:	4013      	ands	r3, r2
 800fd1c:	600b      	str	r3, [r1, #0]
 800fd1e:	e060      	b.n	800fde2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	015a      	lsls	r2, r3, #5
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	4413      	add	r3, r2
 800fd28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd36:	d11f      	bne.n	800fd78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	015a      	lsls	r2, r3, #5
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	4413      	add	r3, r2
 800fd40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	68ba      	ldr	r2, [r7, #8]
 800fd48:	0151      	lsls	r1, r2, #5
 800fd4a:	68fa      	ldr	r2, [r7, #12]
 800fd4c:	440a      	add	r2, r1
 800fd4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fd56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	015a      	lsls	r2, r3, #5
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	4413      	add	r3, r2
 800fd60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	68ba      	ldr	r2, [r7, #8]
 800fd68:	0151      	lsls	r1, r2, #5
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	440a      	add	r2, r1
 800fd6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	f003 030f 	and.w	r3, r3, #15
 800fd88:	2101      	movs	r1, #1
 800fd8a:	fa01 f303 	lsl.w	r3, r1, r3
 800fd8e:	041b      	lsls	r3, r3, #16
 800fd90:	43db      	mvns	r3, r3
 800fd92:	68f9      	ldr	r1, [r7, #12]
 800fd94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd98:	4013      	ands	r3, r2
 800fd9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fda2:	69da      	ldr	r2, [r3, #28]
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	f003 030f 	and.w	r3, r3, #15
 800fdac:	2101      	movs	r1, #1
 800fdae:	fa01 f303 	lsl.w	r3, r1, r3
 800fdb2:	041b      	lsls	r3, r3, #16
 800fdb4:	43db      	mvns	r3, r3
 800fdb6:	68f9      	ldr	r1, [r7, #12]
 800fdb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fdbc:	4013      	ands	r3, r2
 800fdbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	015a      	lsls	r2, r3, #5
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	0159      	lsls	r1, r3, #5
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	440b      	add	r3, r1
 800fdd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdda:	4619      	mov	r1, r3
 800fddc:	4b05      	ldr	r3, [pc, #20]	; (800fdf4 <USB_DeactivateEndpoint+0x1b4>)
 800fdde:	4013      	ands	r3, r2
 800fde0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fde2:	2300      	movs	r3, #0
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	3714      	adds	r7, #20
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	ec337800 	.word	0xec337800
 800fdf4:	eff37800 	.word	0xeff37800

0800fdf8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b08a      	sub	sp, #40	; 0x28
 800fdfc:	af02      	add	r7, sp, #8
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	4613      	mov	r3, r2
 800fe04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	785b      	ldrb	r3, [r3, #1]
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	f040 815c 	bne.w	80100d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	695b      	ldr	r3, [r3, #20]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d132      	bne.n	800fe88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	015a      	lsls	r2, r3, #5
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	4413      	add	r3, r2
 800fe2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe2e:	691b      	ldr	r3, [r3, #16]
 800fe30:	69ba      	ldr	r2, [r7, #24]
 800fe32:	0151      	lsls	r1, r2, #5
 800fe34:	69fa      	ldr	r2, [r7, #28]
 800fe36:	440a      	add	r2, r1
 800fe38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fe40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fe44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fe46:	69bb      	ldr	r3, [r7, #24]
 800fe48:	015a      	lsls	r2, r3, #5
 800fe4a:	69fb      	ldr	r3, [r7, #28]
 800fe4c:	4413      	add	r3, r2
 800fe4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe52:	691b      	ldr	r3, [r3, #16]
 800fe54:	69ba      	ldr	r2, [r7, #24]
 800fe56:	0151      	lsls	r1, r2, #5
 800fe58:	69fa      	ldr	r2, [r7, #28]
 800fe5a:	440a      	add	r2, r1
 800fe5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fe66:	69bb      	ldr	r3, [r7, #24]
 800fe68:	015a      	lsls	r2, r3, #5
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	4413      	add	r3, r2
 800fe6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe72:	691b      	ldr	r3, [r3, #16]
 800fe74:	69ba      	ldr	r2, [r7, #24]
 800fe76:	0151      	lsls	r1, r2, #5
 800fe78:	69fa      	ldr	r2, [r7, #28]
 800fe7a:	440a      	add	r2, r1
 800fe7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe80:	0cdb      	lsrs	r3, r3, #19
 800fe82:	04db      	lsls	r3, r3, #19
 800fe84:	6113      	str	r3, [r2, #16]
 800fe86:	e074      	b.n	800ff72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fe88:	69bb      	ldr	r3, [r7, #24]
 800fe8a:	015a      	lsls	r2, r3, #5
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	4413      	add	r3, r2
 800fe90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe94:	691b      	ldr	r3, [r3, #16]
 800fe96:	69ba      	ldr	r2, [r7, #24]
 800fe98:	0151      	lsls	r1, r2, #5
 800fe9a:	69fa      	ldr	r2, [r7, #28]
 800fe9c:	440a      	add	r2, r1
 800fe9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fea2:	0cdb      	lsrs	r3, r3, #19
 800fea4:	04db      	lsls	r3, r3, #19
 800fea6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	015a      	lsls	r2, r3, #5
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	4413      	add	r3, r2
 800feb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feb4:	691b      	ldr	r3, [r3, #16]
 800feb6:	69ba      	ldr	r2, [r7, #24]
 800feb8:	0151      	lsls	r1, r2, #5
 800feba:	69fa      	ldr	r2, [r7, #28]
 800febc:	440a      	add	r2, r1
 800febe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fec2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fec6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800feca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	015a      	lsls	r2, r3, #5
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	4413      	add	r3, r2
 800fed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fed8:	691a      	ldr	r2, [r3, #16]
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	6959      	ldr	r1, [r3, #20]
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	689b      	ldr	r3, [r3, #8]
 800fee2:	440b      	add	r3, r1
 800fee4:	1e59      	subs	r1, r3, #1
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	689b      	ldr	r3, [r3, #8]
 800feea:	fbb1 f3f3 	udiv	r3, r1, r3
 800feee:	04d9      	lsls	r1, r3, #19
 800fef0:	4b9d      	ldr	r3, [pc, #628]	; (8010168 <USB_EPStartXfer+0x370>)
 800fef2:	400b      	ands	r3, r1
 800fef4:	69b9      	ldr	r1, [r7, #24]
 800fef6:	0148      	lsls	r0, r1, #5
 800fef8:	69f9      	ldr	r1, [r7, #28]
 800fefa:	4401      	add	r1, r0
 800fefc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ff00:	4313      	orrs	r3, r2
 800ff02:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	015a      	lsls	r2, r3, #5
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff10:	691a      	ldr	r2, [r3, #16]
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	695b      	ldr	r3, [r3, #20]
 800ff16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff1a:	69b9      	ldr	r1, [r7, #24]
 800ff1c:	0148      	lsls	r0, r1, #5
 800ff1e:	69f9      	ldr	r1, [r7, #28]
 800ff20:	4401      	add	r1, r0
 800ff22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ff26:	4313      	orrs	r3, r2
 800ff28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	78db      	ldrb	r3, [r3, #3]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d11f      	bne.n	800ff72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ff32:	69bb      	ldr	r3, [r7, #24]
 800ff34:	015a      	lsls	r2, r3, #5
 800ff36:	69fb      	ldr	r3, [r7, #28]
 800ff38:	4413      	add	r3, r2
 800ff3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff3e:	691b      	ldr	r3, [r3, #16]
 800ff40:	69ba      	ldr	r2, [r7, #24]
 800ff42:	0151      	lsls	r1, r2, #5
 800ff44:	69fa      	ldr	r2, [r7, #28]
 800ff46:	440a      	add	r2, r1
 800ff48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ff50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	015a      	lsls	r2, r3, #5
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	4413      	add	r3, r2
 800ff5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	69ba      	ldr	r2, [r7, #24]
 800ff62:	0151      	lsls	r1, r2, #5
 800ff64:	69fa      	ldr	r2, [r7, #28]
 800ff66:	440a      	add	r2, r1
 800ff68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ff70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ff72:	79fb      	ldrb	r3, [r7, #7]
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d14b      	bne.n	8010010 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	691b      	ldr	r3, [r3, #16]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d009      	beq.n	800ff94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	015a      	lsls	r2, r3, #5
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	4413      	add	r3, r2
 800ff88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	691b      	ldr	r3, [r3, #16]
 800ff92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	78db      	ldrb	r3, [r3, #3]
 800ff98:	2b01      	cmp	r3, #1
 800ff9a:	d128      	bne.n	800ffee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffa2:	689b      	ldr	r3, [r3, #8]
 800ffa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d110      	bne.n	800ffce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ffac:	69bb      	ldr	r3, [r7, #24]
 800ffae:	015a      	lsls	r2, r3, #5
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	69ba      	ldr	r2, [r7, #24]
 800ffbc:	0151      	lsls	r1, r2, #5
 800ffbe:	69fa      	ldr	r2, [r7, #28]
 800ffc0:	440a      	add	r2, r1
 800ffc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ffca:	6013      	str	r3, [r2, #0]
 800ffcc:	e00f      	b.n	800ffee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	015a      	lsls	r2, r3, #5
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	69ba      	ldr	r2, [r7, #24]
 800ffde:	0151      	lsls	r1, r2, #5
 800ffe0:	69fa      	ldr	r2, [r7, #28]
 800ffe2:	440a      	add	r2, r1
 800ffe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ffec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ffee:	69bb      	ldr	r3, [r7, #24]
 800fff0:	015a      	lsls	r2, r3, #5
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	4413      	add	r3, r2
 800fff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	69ba      	ldr	r2, [r7, #24]
 800fffe:	0151      	lsls	r1, r2, #5
 8010000:	69fa      	ldr	r2, [r7, #28]
 8010002:	440a      	add	r2, r1
 8010004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010008:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801000c:	6013      	str	r3, [r2, #0]
 801000e:	e12f      	b.n	8010270 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010010:	69bb      	ldr	r3, [r7, #24]
 8010012:	015a      	lsls	r2, r3, #5
 8010014:	69fb      	ldr	r3, [r7, #28]
 8010016:	4413      	add	r3, r2
 8010018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	69ba      	ldr	r2, [r7, #24]
 8010020:	0151      	lsls	r1, r2, #5
 8010022:	69fa      	ldr	r2, [r7, #28]
 8010024:	440a      	add	r2, r1
 8010026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801002a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801002e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	78db      	ldrb	r3, [r3, #3]
 8010034:	2b01      	cmp	r3, #1
 8010036:	d015      	beq.n	8010064 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	695b      	ldr	r3, [r3, #20]
 801003c:	2b00      	cmp	r3, #0
 801003e:	f000 8117 	beq.w	8010270 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	f003 030f 	and.w	r3, r3, #15
 8010052:	2101      	movs	r1, #1
 8010054:	fa01 f303 	lsl.w	r3, r1, r3
 8010058:	69f9      	ldr	r1, [r7, #28]
 801005a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801005e:	4313      	orrs	r3, r2
 8010060:	634b      	str	r3, [r1, #52]	; 0x34
 8010062:	e105      	b.n	8010270 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010070:	2b00      	cmp	r3, #0
 8010072:	d110      	bne.n	8010096 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010074:	69bb      	ldr	r3, [r7, #24]
 8010076:	015a      	lsls	r2, r3, #5
 8010078:	69fb      	ldr	r3, [r7, #28]
 801007a:	4413      	add	r3, r2
 801007c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	69ba      	ldr	r2, [r7, #24]
 8010084:	0151      	lsls	r1, r2, #5
 8010086:	69fa      	ldr	r2, [r7, #28]
 8010088:	440a      	add	r2, r1
 801008a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801008e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010092:	6013      	str	r3, [r2, #0]
 8010094:	e00f      	b.n	80100b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010096:	69bb      	ldr	r3, [r7, #24]
 8010098:	015a      	lsls	r2, r3, #5
 801009a:	69fb      	ldr	r3, [r7, #28]
 801009c:	4413      	add	r3, r2
 801009e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	69ba      	ldr	r2, [r7, #24]
 80100a6:	0151      	lsls	r1, r2, #5
 80100a8:	69fa      	ldr	r2, [r7, #28]
 80100aa:	440a      	add	r2, r1
 80100ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	68d9      	ldr	r1, [r3, #12]
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	781a      	ldrb	r2, [r3, #0]
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	695b      	ldr	r3, [r3, #20]
 80100c2:	b298      	uxth	r0, r3
 80100c4:	79fb      	ldrb	r3, [r7, #7]
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	4603      	mov	r3, r0
 80100ca:	68f8      	ldr	r0, [r7, #12]
 80100cc:	f000 fa2b 	bl	8010526 <USB_WritePacket>
 80100d0:	e0ce      	b.n	8010270 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80100d2:	69bb      	ldr	r3, [r7, #24]
 80100d4:	015a      	lsls	r2, r3, #5
 80100d6:	69fb      	ldr	r3, [r7, #28]
 80100d8:	4413      	add	r3, r2
 80100da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100de:	691b      	ldr	r3, [r3, #16]
 80100e0:	69ba      	ldr	r2, [r7, #24]
 80100e2:	0151      	lsls	r1, r2, #5
 80100e4:	69fa      	ldr	r2, [r7, #28]
 80100e6:	440a      	add	r2, r1
 80100e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100ec:	0cdb      	lsrs	r3, r3, #19
 80100ee:	04db      	lsls	r3, r3, #19
 80100f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	015a      	lsls	r2, r3, #5
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	4413      	add	r3, r2
 80100fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100fe:	691b      	ldr	r3, [r3, #16]
 8010100:	69ba      	ldr	r2, [r7, #24]
 8010102:	0151      	lsls	r1, r2, #5
 8010104:	69fa      	ldr	r2, [r7, #28]
 8010106:	440a      	add	r2, r1
 8010108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801010c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010110:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010114:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	695b      	ldr	r3, [r3, #20]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d126      	bne.n	801016c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	015a      	lsls	r2, r3, #5
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	4413      	add	r3, r2
 8010126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801012a:	691a      	ldr	r2, [r3, #16]
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010134:	69b9      	ldr	r1, [r7, #24]
 8010136:	0148      	lsls	r0, r1, #5
 8010138:	69f9      	ldr	r1, [r7, #28]
 801013a:	4401      	add	r1, r0
 801013c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010140:	4313      	orrs	r3, r2
 8010142:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	015a      	lsls	r2, r3, #5
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	4413      	add	r3, r2
 801014c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010150:	691b      	ldr	r3, [r3, #16]
 8010152:	69ba      	ldr	r2, [r7, #24]
 8010154:	0151      	lsls	r1, r2, #5
 8010156:	69fa      	ldr	r2, [r7, #28]
 8010158:	440a      	add	r2, r1
 801015a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801015e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010162:	6113      	str	r3, [r2, #16]
 8010164:	e036      	b.n	80101d4 <USB_EPStartXfer+0x3dc>
 8010166:	bf00      	nop
 8010168:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	695a      	ldr	r2, [r3, #20]
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	689b      	ldr	r3, [r3, #8]
 8010174:	4413      	add	r3, r2
 8010176:	1e5a      	subs	r2, r3, #1
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	689b      	ldr	r3, [r3, #8]
 801017c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010180:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	015a      	lsls	r2, r3, #5
 8010186:	69fb      	ldr	r3, [r7, #28]
 8010188:	4413      	add	r3, r2
 801018a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801018e:	691a      	ldr	r2, [r3, #16]
 8010190:	8afb      	ldrh	r3, [r7, #22]
 8010192:	04d9      	lsls	r1, r3, #19
 8010194:	4b39      	ldr	r3, [pc, #228]	; (801027c <USB_EPStartXfer+0x484>)
 8010196:	400b      	ands	r3, r1
 8010198:	69b9      	ldr	r1, [r7, #24]
 801019a:	0148      	lsls	r0, r1, #5
 801019c:	69f9      	ldr	r1, [r7, #28]
 801019e:	4401      	add	r1, r0
 80101a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80101a4:	4313      	orrs	r3, r2
 80101a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80101a8:	69bb      	ldr	r3, [r7, #24]
 80101aa:	015a      	lsls	r2, r3, #5
 80101ac:	69fb      	ldr	r3, [r7, #28]
 80101ae:	4413      	add	r3, r2
 80101b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101b4:	691a      	ldr	r2, [r3, #16]
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	689b      	ldr	r3, [r3, #8]
 80101ba:	8af9      	ldrh	r1, [r7, #22]
 80101bc:	fb01 f303 	mul.w	r3, r1, r3
 80101c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101c4:	69b9      	ldr	r1, [r7, #24]
 80101c6:	0148      	lsls	r0, r1, #5
 80101c8:	69f9      	ldr	r1, [r7, #28]
 80101ca:	4401      	add	r1, r0
 80101cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80101d0:	4313      	orrs	r3, r2
 80101d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80101d4:	79fb      	ldrb	r3, [r7, #7]
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d10d      	bne.n	80101f6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d009      	beq.n	80101f6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	68d9      	ldr	r1, [r3, #12]
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	015a      	lsls	r2, r3, #5
 80101ea:	69fb      	ldr	r3, [r7, #28]
 80101ec:	4413      	add	r3, r2
 80101ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101f2:	460a      	mov	r2, r1
 80101f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	78db      	ldrb	r3, [r3, #3]
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d128      	bne.n	8010250 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010204:	689b      	ldr	r3, [r3, #8]
 8010206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801020a:	2b00      	cmp	r3, #0
 801020c:	d110      	bne.n	8010230 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	015a      	lsls	r2, r3, #5
 8010212:	69fb      	ldr	r3, [r7, #28]
 8010214:	4413      	add	r3, r2
 8010216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	69ba      	ldr	r2, [r7, #24]
 801021e:	0151      	lsls	r1, r2, #5
 8010220:	69fa      	ldr	r2, [r7, #28]
 8010222:	440a      	add	r2, r1
 8010224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801022c:	6013      	str	r3, [r2, #0]
 801022e:	e00f      	b.n	8010250 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010230:	69bb      	ldr	r3, [r7, #24]
 8010232:	015a      	lsls	r2, r3, #5
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	4413      	add	r3, r2
 8010238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	69ba      	ldr	r2, [r7, #24]
 8010240:	0151      	lsls	r1, r2, #5
 8010242:	69fa      	ldr	r2, [r7, #28]
 8010244:	440a      	add	r2, r1
 8010246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801024a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801024e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	015a      	lsls	r2, r3, #5
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	4413      	add	r3, r2
 8010258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	69ba      	ldr	r2, [r7, #24]
 8010260:	0151      	lsls	r1, r2, #5
 8010262:	69fa      	ldr	r2, [r7, #28]
 8010264:	440a      	add	r2, r1
 8010266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801026a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801026e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010270:	2300      	movs	r3, #0
}
 8010272:	4618      	mov	r0, r3
 8010274:	3720      	adds	r7, #32
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	1ff80000 	.word	0x1ff80000

08010280 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010280:	b480      	push	{r7}
 8010282:	b087      	sub	sp, #28
 8010284:	af00      	add	r7, sp, #0
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	60b9      	str	r1, [r7, #8]
 801028a:	4613      	mov	r3, r2
 801028c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	785b      	ldrb	r3, [r3, #1]
 801029c:	2b01      	cmp	r3, #1
 801029e:	f040 80cd 	bne.w	801043c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	695b      	ldr	r3, [r3, #20]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d132      	bne.n	8010310 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	015a      	lsls	r2, r3, #5
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	4413      	add	r3, r2
 80102b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102b6:	691b      	ldr	r3, [r3, #16]
 80102b8:	693a      	ldr	r2, [r7, #16]
 80102ba:	0151      	lsls	r1, r2, #5
 80102bc:	697a      	ldr	r2, [r7, #20]
 80102be:	440a      	add	r2, r1
 80102c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80102c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80102cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	015a      	lsls	r2, r3, #5
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	4413      	add	r3, r2
 80102d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102da:	691b      	ldr	r3, [r3, #16]
 80102dc:	693a      	ldr	r2, [r7, #16]
 80102de:	0151      	lsls	r1, r2, #5
 80102e0:	697a      	ldr	r2, [r7, #20]
 80102e2:	440a      	add	r2, r1
 80102e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80102ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	015a      	lsls	r2, r3, #5
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	4413      	add	r3, r2
 80102f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102fa:	691b      	ldr	r3, [r3, #16]
 80102fc:	693a      	ldr	r2, [r7, #16]
 80102fe:	0151      	lsls	r1, r2, #5
 8010300:	697a      	ldr	r2, [r7, #20]
 8010302:	440a      	add	r2, r1
 8010304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010308:	0cdb      	lsrs	r3, r3, #19
 801030a:	04db      	lsls	r3, r3, #19
 801030c:	6113      	str	r3, [r2, #16]
 801030e:	e04e      	b.n	80103ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	015a      	lsls	r2, r3, #5
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	4413      	add	r3, r2
 8010318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801031c:	691b      	ldr	r3, [r3, #16]
 801031e:	693a      	ldr	r2, [r7, #16]
 8010320:	0151      	lsls	r1, r2, #5
 8010322:	697a      	ldr	r2, [r7, #20]
 8010324:	440a      	add	r2, r1
 8010326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801032a:	0cdb      	lsrs	r3, r3, #19
 801032c:	04db      	lsls	r3, r3, #19
 801032e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	015a      	lsls	r2, r3, #5
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	4413      	add	r3, r2
 8010338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801033c:	691b      	ldr	r3, [r3, #16]
 801033e:	693a      	ldr	r2, [r7, #16]
 8010340:	0151      	lsls	r1, r2, #5
 8010342:	697a      	ldr	r2, [r7, #20]
 8010344:	440a      	add	r2, r1
 8010346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801034a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801034e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010352:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	695a      	ldr	r2, [r3, #20]
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	689b      	ldr	r3, [r3, #8]
 801035c:	429a      	cmp	r2, r3
 801035e:	d903      	bls.n	8010368 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	689a      	ldr	r2, [r3, #8]
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	015a      	lsls	r2, r3, #5
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	4413      	add	r3, r2
 8010370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010374:	691b      	ldr	r3, [r3, #16]
 8010376:	693a      	ldr	r2, [r7, #16]
 8010378:	0151      	lsls	r1, r2, #5
 801037a:	697a      	ldr	r2, [r7, #20]
 801037c:	440a      	add	r2, r1
 801037e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010382:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010386:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	015a      	lsls	r2, r3, #5
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	4413      	add	r3, r2
 8010390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010394:	691a      	ldr	r2, [r3, #16]
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	695b      	ldr	r3, [r3, #20]
 801039a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801039e:	6939      	ldr	r1, [r7, #16]
 80103a0:	0148      	lsls	r0, r1, #5
 80103a2:	6979      	ldr	r1, [r7, #20]
 80103a4:	4401      	add	r1, r0
 80103a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80103aa:	4313      	orrs	r3, r2
 80103ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80103ae:	79fb      	ldrb	r3, [r7, #7]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d11e      	bne.n	80103f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	691b      	ldr	r3, [r3, #16]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d009      	beq.n	80103d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	015a      	lsls	r2, r3, #5
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	4413      	add	r3, r2
 80103c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103c8:	461a      	mov	r2, r3
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	691b      	ldr	r3, [r3, #16]
 80103ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	015a      	lsls	r2, r3, #5
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	4413      	add	r3, r2
 80103d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	693a      	ldr	r2, [r7, #16]
 80103e0:	0151      	lsls	r1, r2, #5
 80103e2:	697a      	ldr	r2, [r7, #20]
 80103e4:	440a      	add	r2, r1
 80103e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80103ee:	6013      	str	r3, [r2, #0]
 80103f0:	e092      	b.n	8010518 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	015a      	lsls	r2, r3, #5
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	4413      	add	r3, r2
 80103fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	693a      	ldr	r2, [r7, #16]
 8010402:	0151      	lsls	r1, r2, #5
 8010404:	697a      	ldr	r2, [r7, #20]
 8010406:	440a      	add	r2, r1
 8010408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801040c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010410:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	695b      	ldr	r3, [r3, #20]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d07e      	beq.n	8010518 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	f003 030f 	and.w	r3, r3, #15
 801042a:	2101      	movs	r1, #1
 801042c:	fa01 f303 	lsl.w	r3, r1, r3
 8010430:	6979      	ldr	r1, [r7, #20]
 8010432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010436:	4313      	orrs	r3, r2
 8010438:	634b      	str	r3, [r1, #52]	; 0x34
 801043a:	e06d      	b.n	8010518 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	015a      	lsls	r2, r3, #5
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	4413      	add	r3, r2
 8010444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010448:	691b      	ldr	r3, [r3, #16]
 801044a:	693a      	ldr	r2, [r7, #16]
 801044c:	0151      	lsls	r1, r2, #5
 801044e:	697a      	ldr	r2, [r7, #20]
 8010450:	440a      	add	r2, r1
 8010452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010456:	0cdb      	lsrs	r3, r3, #19
 8010458:	04db      	lsls	r3, r3, #19
 801045a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	015a      	lsls	r2, r3, #5
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	4413      	add	r3, r2
 8010464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010468:	691b      	ldr	r3, [r3, #16]
 801046a:	693a      	ldr	r2, [r7, #16]
 801046c:	0151      	lsls	r1, r2, #5
 801046e:	697a      	ldr	r2, [r7, #20]
 8010470:	440a      	add	r2, r1
 8010472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010476:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801047a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801047e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	695b      	ldr	r3, [r3, #20]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d003      	beq.n	8010490 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	689a      	ldr	r2, [r3, #8]
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	015a      	lsls	r2, r3, #5
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	4413      	add	r3, r2
 8010498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801049c:	691b      	ldr	r3, [r3, #16]
 801049e:	693a      	ldr	r2, [r7, #16]
 80104a0:	0151      	lsls	r1, r2, #5
 80104a2:	697a      	ldr	r2, [r7, #20]
 80104a4:	440a      	add	r2, r1
 80104a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80104ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	015a      	lsls	r2, r3, #5
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	4413      	add	r3, r2
 80104b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104bc:	691a      	ldr	r2, [r3, #16]
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	689b      	ldr	r3, [r3, #8]
 80104c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104c6:	6939      	ldr	r1, [r7, #16]
 80104c8:	0148      	lsls	r0, r1, #5
 80104ca:	6979      	ldr	r1, [r7, #20]
 80104cc:	4401      	add	r1, r0
 80104ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80104d2:	4313      	orrs	r3, r2
 80104d4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80104d6:	79fb      	ldrb	r3, [r7, #7]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d10d      	bne.n	80104f8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d009      	beq.n	80104f8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	68d9      	ldr	r1, [r3, #12]
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	015a      	lsls	r2, r3, #5
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	4413      	add	r3, r2
 80104f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104f4:	460a      	mov	r2, r1
 80104f6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	015a      	lsls	r2, r3, #5
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	4413      	add	r3, r2
 8010500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	693a      	ldr	r2, [r7, #16]
 8010508:	0151      	lsls	r1, r2, #5
 801050a:	697a      	ldr	r2, [r7, #20]
 801050c:	440a      	add	r2, r1
 801050e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010516:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010518:	2300      	movs	r3, #0
}
 801051a:	4618      	mov	r0, r3
 801051c:	371c      	adds	r7, #28
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr

08010526 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010526:	b480      	push	{r7}
 8010528:	b089      	sub	sp, #36	; 0x24
 801052a:	af00      	add	r7, sp, #0
 801052c:	60f8      	str	r0, [r7, #12]
 801052e:	60b9      	str	r1, [r7, #8]
 8010530:	4611      	mov	r1, r2
 8010532:	461a      	mov	r2, r3
 8010534:	460b      	mov	r3, r1
 8010536:	71fb      	strb	r3, [r7, #7]
 8010538:	4613      	mov	r3, r2
 801053a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010544:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010548:	2b00      	cmp	r3, #0
 801054a:	d11a      	bne.n	8010582 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801054c:	88bb      	ldrh	r3, [r7, #4]
 801054e:	3303      	adds	r3, #3
 8010550:	089b      	lsrs	r3, r3, #2
 8010552:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010554:	2300      	movs	r3, #0
 8010556:	61bb      	str	r3, [r7, #24]
 8010558:	e00f      	b.n	801057a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801055a:	79fb      	ldrb	r3, [r7, #7]
 801055c:	031a      	lsls	r2, r3, #12
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	4413      	add	r3, r2
 8010562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010566:	461a      	mov	r2, r3
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	6013      	str	r3, [r2, #0]
      pSrc++;
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	3304      	adds	r3, #4
 8010572:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	3301      	adds	r3, #1
 8010578:	61bb      	str	r3, [r7, #24]
 801057a:	69ba      	ldr	r2, [r7, #24]
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	429a      	cmp	r2, r3
 8010580:	d3eb      	bcc.n	801055a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010582:	2300      	movs	r3, #0
}
 8010584:	4618      	mov	r0, r3
 8010586:	3724      	adds	r7, #36	; 0x24
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr

08010590 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010590:	b480      	push	{r7}
 8010592:	b089      	sub	sp, #36	; 0x24
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	4613      	mov	r3, r2
 801059c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80105a6:	88fb      	ldrh	r3, [r7, #6]
 80105a8:	3303      	adds	r3, #3
 80105aa:	089b      	lsrs	r3, r3, #2
 80105ac:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80105ae:	2300      	movs	r3, #0
 80105b0:	61bb      	str	r3, [r7, #24]
 80105b2:	e00b      	b.n	80105cc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	601a      	str	r2, [r3, #0]
    pDest++;
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	3304      	adds	r3, #4
 80105c4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	3301      	adds	r3, #1
 80105ca:	61bb      	str	r3, [r7, #24]
 80105cc:	69ba      	ldr	r2, [r7, #24]
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d3ef      	bcc.n	80105b4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80105d4:	69fb      	ldr	r3, [r7, #28]
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3724      	adds	r7, #36	; 0x24
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr

080105e2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80105e2:	b480      	push	{r7}
 80105e4:	b085      	sub	sp, #20
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
 80105ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	785b      	ldrb	r3, [r3, #1]
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d12c      	bne.n	8010658 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	015a      	lsls	r2, r3, #5
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	4413      	add	r3, r2
 8010606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	db12      	blt.n	8010636 <USB_EPSetStall+0x54>
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00f      	beq.n	8010636 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	015a      	lsls	r2, r3, #5
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	4413      	add	r3, r2
 801061e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	0151      	lsls	r1, r2, #5
 8010628:	68fa      	ldr	r2, [r7, #12]
 801062a:	440a      	add	r2, r1
 801062c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010630:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010634:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	015a      	lsls	r2, r3, #5
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	4413      	add	r3, r2
 801063e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	68ba      	ldr	r2, [r7, #8]
 8010646:	0151      	lsls	r1, r2, #5
 8010648:	68fa      	ldr	r2, [r7, #12]
 801064a:	440a      	add	r2, r1
 801064c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010650:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010654:	6013      	str	r3, [r2, #0]
 8010656:	e02b      	b.n	80106b0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	015a      	lsls	r2, r3, #5
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	4413      	add	r3, r2
 8010660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	2b00      	cmp	r3, #0
 8010668:	db12      	blt.n	8010690 <USB_EPSetStall+0xae>
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d00f      	beq.n	8010690 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	015a      	lsls	r2, r3, #5
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	4413      	add	r3, r2
 8010678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	68ba      	ldr	r2, [r7, #8]
 8010680:	0151      	lsls	r1, r2, #5
 8010682:	68fa      	ldr	r2, [r7, #12]
 8010684:	440a      	add	r2, r1
 8010686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801068a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801068e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	015a      	lsls	r2, r3, #5
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	4413      	add	r3, r2
 8010698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	68ba      	ldr	r2, [r7, #8]
 80106a0:	0151      	lsls	r1, r2, #5
 80106a2:	68fa      	ldr	r2, [r7, #12]
 80106a4:	440a      	add	r2, r1
 80106a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80106ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80106b0:	2300      	movs	r3, #0
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3714      	adds	r7, #20
 80106b6:	46bd      	mov	sp, r7
 80106b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106bc:	4770      	bx	lr

080106be <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80106be:	b480      	push	{r7}
 80106c0:	b085      	sub	sp, #20
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	6078      	str	r0, [r7, #4]
 80106c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	785b      	ldrb	r3, [r3, #1]
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d128      	bne.n	801072c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	015a      	lsls	r2, r3, #5
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	4413      	add	r3, r2
 80106e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	68ba      	ldr	r2, [r7, #8]
 80106ea:	0151      	lsls	r1, r2, #5
 80106ec:	68fa      	ldr	r2, [r7, #12]
 80106ee:	440a      	add	r2, r1
 80106f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80106f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	78db      	ldrb	r3, [r3, #3]
 80106fe:	2b03      	cmp	r3, #3
 8010700:	d003      	beq.n	801070a <USB_EPClearStall+0x4c>
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	78db      	ldrb	r3, [r3, #3]
 8010706:	2b02      	cmp	r3, #2
 8010708:	d138      	bne.n	801077c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	015a      	lsls	r2, r3, #5
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	4413      	add	r3, r2
 8010712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	68ba      	ldr	r2, [r7, #8]
 801071a:	0151      	lsls	r1, r2, #5
 801071c:	68fa      	ldr	r2, [r7, #12]
 801071e:	440a      	add	r2, r1
 8010720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010728:	6013      	str	r3, [r2, #0]
 801072a:	e027      	b.n	801077c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	015a      	lsls	r2, r3, #5
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	4413      	add	r3, r2
 8010734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	68ba      	ldr	r2, [r7, #8]
 801073c:	0151      	lsls	r1, r2, #5
 801073e:	68fa      	ldr	r2, [r7, #12]
 8010740:	440a      	add	r2, r1
 8010742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801074a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	78db      	ldrb	r3, [r3, #3]
 8010750:	2b03      	cmp	r3, #3
 8010752:	d003      	beq.n	801075c <USB_EPClearStall+0x9e>
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	78db      	ldrb	r3, [r3, #3]
 8010758:	2b02      	cmp	r3, #2
 801075a:	d10f      	bne.n	801077c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	015a      	lsls	r2, r3, #5
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	4413      	add	r3, r2
 8010764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	68ba      	ldr	r2, [r7, #8]
 801076c:	0151      	lsls	r1, r2, #5
 801076e:	68fa      	ldr	r2, [r7, #12]
 8010770:	440a      	add	r2, r1
 8010772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801077a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801077c:	2300      	movs	r3, #0
}
 801077e:	4618      	mov	r0, r3
 8010780:	3714      	adds	r7, #20
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr

0801078a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801078a:	b480      	push	{r7}
 801078c:	b085      	sub	sp, #20
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
 8010792:	460b      	mov	r3, r1
 8010794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	68fa      	ldr	r2, [r7, #12]
 80107a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80107a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80107ac:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107b4:	681a      	ldr	r2, [r3, #0]
 80107b6:	78fb      	ldrb	r3, [r7, #3]
 80107b8:	011b      	lsls	r3, r3, #4
 80107ba:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80107be:	68f9      	ldr	r1, [r7, #12]
 80107c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80107c4:	4313      	orrs	r3, r2
 80107c6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80107c8:	2300      	movs	r3, #0
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3714      	adds	r7, #20
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr

080107d6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80107d6:	b480      	push	{r7}
 80107d8:	b085      	sub	sp, #20
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	68fa      	ldr	r2, [r7, #12]
 80107ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80107f0:	f023 0303 	bic.w	r3, r3, #3
 80107f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010804:	f023 0302 	bic.w	r3, r3, #2
 8010808:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801080a:	2300      	movs	r3, #0
}
 801080c:	4618      	mov	r0, r3
 801080e:	3714      	adds	r7, #20
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010818:	b480      	push	{r7}
 801081a:	b085      	sub	sp, #20
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	68fa      	ldr	r2, [r7, #12]
 801082e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010832:	f023 0303 	bic.w	r3, r3, #3
 8010836:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	68fa      	ldr	r2, [r7, #12]
 8010842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010846:	f043 0302 	orr.w	r3, r3, #2
 801084a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801084c:	2300      	movs	r3, #0
}
 801084e:	4618      	mov	r0, r3
 8010850:	3714      	adds	r7, #20
 8010852:	46bd      	mov	sp, r7
 8010854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010858:	4770      	bx	lr

0801085a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801085a:	b480      	push	{r7}
 801085c:	b085      	sub	sp, #20
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	695b      	ldr	r3, [r3, #20]
 8010866:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	699b      	ldr	r3, [r3, #24]
 801086c:	68fa      	ldr	r2, [r7, #12]
 801086e:	4013      	ands	r3, r2
 8010870:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010872:	68fb      	ldr	r3, [r7, #12]
}
 8010874:	4618      	mov	r0, r3
 8010876:	3714      	adds	r7, #20
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010880:	b480      	push	{r7}
 8010882:	b085      	sub	sp, #20
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010892:	699b      	ldr	r3, [r3, #24]
 8010894:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801089c:	69db      	ldr	r3, [r3, #28]
 801089e:	68ba      	ldr	r2, [r7, #8]
 80108a0:	4013      	ands	r3, r2
 80108a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	0c1b      	lsrs	r3, r3, #16
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3714      	adds	r7, #20
 80108ac:	46bd      	mov	sp, r7
 80108ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b2:	4770      	bx	lr

080108b4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b085      	sub	sp, #20
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108c6:	699b      	ldr	r3, [r3, #24]
 80108c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108d0:	69db      	ldr	r3, [r3, #28]
 80108d2:	68ba      	ldr	r2, [r7, #8]
 80108d4:	4013      	ands	r3, r2
 80108d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	b29b      	uxth	r3, r3
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3714      	adds	r7, #20
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr

080108e8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b085      	sub	sp, #20
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	460b      	mov	r3, r1
 80108f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80108f8:	78fb      	ldrb	r3, [r7, #3]
 80108fa:	015a      	lsls	r2, r3, #5
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	4413      	add	r3, r2
 8010900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010904:	689b      	ldr	r3, [r3, #8]
 8010906:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801090e:	695b      	ldr	r3, [r3, #20]
 8010910:	68ba      	ldr	r2, [r7, #8]
 8010912:	4013      	ands	r3, r2
 8010914:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010916:	68bb      	ldr	r3, [r7, #8]
}
 8010918:	4618      	mov	r0, r3
 801091a:	3714      	adds	r7, #20
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010924:	b480      	push	{r7}
 8010926:	b087      	sub	sp, #28
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	460b      	mov	r3, r1
 801092e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801093a:	691b      	ldr	r3, [r3, #16]
 801093c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010946:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010948:	78fb      	ldrb	r3, [r7, #3]
 801094a:	f003 030f 	and.w	r3, r3, #15
 801094e:	68fa      	ldr	r2, [r7, #12]
 8010950:	fa22 f303 	lsr.w	r3, r2, r3
 8010954:	01db      	lsls	r3, r3, #7
 8010956:	b2db      	uxtb	r3, r3
 8010958:	693a      	ldr	r2, [r7, #16]
 801095a:	4313      	orrs	r3, r2
 801095c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801095e:	78fb      	ldrb	r3, [r7, #3]
 8010960:	015a      	lsls	r2, r3, #5
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	4413      	add	r3, r2
 8010966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	693a      	ldr	r2, [r7, #16]
 801096e:	4013      	ands	r3, r2
 8010970:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010972:	68bb      	ldr	r3, [r7, #8]
}
 8010974:	4618      	mov	r0, r3
 8010976:	371c      	adds	r7, #28
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010980:	b480      	push	{r7}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	695b      	ldr	r3, [r3, #20]
 801098c:	f003 0301 	and.w	r3, r3, #1
}
 8010990:	4618      	mov	r0, r3
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801099c:	b480      	push	{r7}
 801099e:	b085      	sub	sp, #20
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	68fa      	ldr	r2, [r7, #12]
 80109b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80109ba:	f023 0307 	bic.w	r3, r3, #7
 80109be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	68fa      	ldr	r2, [r7, #12]
 80109ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80109ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80109d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80109d4:	2300      	movs	r3, #0
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3714      	adds	r7, #20
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr
	...

080109e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b087      	sub	sp, #28
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	460b      	mov	r3, r1
 80109ee:	607a      	str	r2, [r7, #4]
 80109f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	333c      	adds	r3, #60	; 0x3c
 80109fa:	3304      	adds	r3, #4
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	4a26      	ldr	r2, [pc, #152]	; (8010a9c <USB_EP0_OutStart+0xb8>)
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d90a      	bls.n	8010a1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010a18:	d101      	bne.n	8010a1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	e037      	b.n	8010a8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a24:	461a      	mov	r2, r3
 8010a26:	2300      	movs	r3, #0
 8010a28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a30:	691b      	ldr	r3, [r3, #16]
 8010a32:	697a      	ldr	r2, [r7, #20]
 8010a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010a3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a44:	691b      	ldr	r3, [r3, #16]
 8010a46:	697a      	ldr	r2, [r7, #20]
 8010a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a4c:	f043 0318 	orr.w	r3, r3, #24
 8010a50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a58:	691b      	ldr	r3, [r3, #16]
 8010a5a:	697a      	ldr	r2, [r7, #20]
 8010a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010a64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010a66:	7afb      	ldrb	r3, [r7, #11]
 8010a68:	2b01      	cmp	r3, #1
 8010a6a:	d10f      	bne.n	8010a8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a72:	461a      	mov	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	697a      	ldr	r2, [r7, #20]
 8010a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010a8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010a8c:	2300      	movs	r3, #0
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	371c      	adds	r7, #28
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	4f54300a 	.word	0x4f54300a

08010aa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b085      	sub	sp, #20
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	60fb      	str	r3, [r7, #12]
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	4a13      	ldr	r2, [pc, #76]	; (8010b04 <USB_CoreReset+0x64>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d901      	bls.n	8010abe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010aba:	2303      	movs	r3, #3
 8010abc:	e01b      	b.n	8010af6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	691b      	ldr	r3, [r3, #16]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	daf2      	bge.n	8010aac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	691b      	ldr	r3, [r3, #16]
 8010ace:	f043 0201 	orr.w	r2, r3, #1
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	60fb      	str	r3, [r7, #12]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	4a09      	ldr	r2, [pc, #36]	; (8010b04 <USB_CoreReset+0x64>)
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	d901      	bls.n	8010ae8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010ae4:	2303      	movs	r3, #3
 8010ae6:	e006      	b.n	8010af6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	691b      	ldr	r3, [r3, #16]
 8010aec:	f003 0301 	and.w	r3, r3, #1
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d0f0      	beq.n	8010ad6 <USB_CoreReset+0x36>

  return HAL_OK;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3714      	adds	r7, #20
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr
 8010b02:	bf00      	nop
 8010b04:	00030d40 	.word	0x00030d40

08010b08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	460b      	mov	r3, r1
 8010b12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010b14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010b18:	f004 ffd8 	bl	8015acc <malloc>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d105      	bne.n	8010b32 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010b2e:	2302      	movs	r3, #2
 8010b30:	e066      	b.n	8010c00 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	68fa      	ldr	r2, [r7, #12]
 8010b36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	7c1b      	ldrb	r3, [r3, #16]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d119      	bne.n	8010b76 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b46:	2202      	movs	r2, #2
 8010b48:	2181      	movs	r1, #129	; 0x81
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f004 fe3d 	bl	80157ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2201      	movs	r2, #1
 8010b54:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b5a:	2202      	movs	r2, #2
 8010b5c:	2101      	movs	r1, #1
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f004 fe33 	bl	80157ca <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2201      	movs	r2, #1
 8010b68:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2210      	movs	r2, #16
 8010b70:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010b74:	e016      	b.n	8010ba4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010b76:	2340      	movs	r3, #64	; 0x40
 8010b78:	2202      	movs	r2, #2
 8010b7a:	2181      	movs	r1, #129	; 0x81
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f004 fe24 	bl	80157ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2201      	movs	r2, #1
 8010b86:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010b88:	2340      	movs	r3, #64	; 0x40
 8010b8a:	2202      	movs	r2, #2
 8010b8c:	2101      	movs	r1, #1
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f004 fe1b 	bl	80157ca <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2201      	movs	r2, #1
 8010b98:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2210      	movs	r2, #16
 8010ba0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010ba4:	2308      	movs	r3, #8
 8010ba6:	2203      	movs	r2, #3
 8010ba8:	2182      	movs	r1, #130	; 0x82
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f004 fe0d 	bl	80157ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	7c1b      	ldrb	r3, [r3, #16]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d109      	bne.n	8010bee <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010be4:	2101      	movs	r1, #1
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f004 fede 	bl	80159a8 <USBD_LL_PrepareReceive>
 8010bec:	e007      	b.n	8010bfe <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010bf4:	2340      	movs	r3, #64	; 0x40
 8010bf6:	2101      	movs	r1, #1
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f004 fed5 	bl	80159a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010bfe:	2300      	movs	r3, #0
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3710      	adds	r7, #16
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	460b      	mov	r3, r1
 8010c12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8010c14:	2300      	movs	r3, #0
 8010c16:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010c18:	2181      	movs	r1, #129	; 0x81
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f004 fdfb 	bl	8015816 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2200      	movs	r2, #0
 8010c24:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010c26:	2101      	movs	r1, #1
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f004 fdf4 	bl	8015816 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2200      	movs	r2, #0
 8010c32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010c36:	2182      	movs	r1, #130	; 0x82
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f004 fdec 	bl	8015816 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2200      	movs	r2, #0
 8010c42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d00e      	beq.n	8010c76 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f004 ff37 	bl	8015adc <free>
    pdev->pClassData = NULL;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2200      	movs	r2, #0
 8010c72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3710      	adds	r7, #16
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b086      	sub	sp, #24
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c90:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010c92:	2300      	movs	r3, #0
 8010c94:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010c96:	2300      	movs	r3, #0
 8010c98:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d03a      	beq.n	8010d20 <USBD_CDC_Setup+0xa0>
 8010caa:	2b20      	cmp	r3, #32
 8010cac:	f040 8097 	bne.w	8010dde <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	88db      	ldrh	r3, [r3, #6]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d029      	beq.n	8010d0c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	b25b      	sxtb	r3, r3
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	da11      	bge.n	8010ce6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010cc8:	689b      	ldr	r3, [r3, #8]
 8010cca:	683a      	ldr	r2, [r7, #0]
 8010ccc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010cce:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010cd0:	683a      	ldr	r2, [r7, #0]
 8010cd2:	88d2      	ldrh	r2, [r2, #6]
 8010cd4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010cd6:	6939      	ldr	r1, [r7, #16]
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	88db      	ldrh	r3, [r3, #6]
 8010cdc:	461a      	mov	r2, r3
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f001 fa9d 	bl	801221e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010ce4:	e082      	b.n	8010dec <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	785a      	ldrb	r2, [r3, #1]
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	88db      	ldrh	r3, [r3, #6]
 8010cf4:	b2da      	uxtb	r2, r3
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010cfc:	6939      	ldr	r1, [r7, #16]
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	88db      	ldrh	r3, [r3, #6]
 8010d02:	461a      	mov	r2, r3
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f001 fab6 	bl	8012276 <USBD_CtlPrepareRx>
    break;
 8010d0a:	e06f      	b.n	8010dec <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010d12:	689b      	ldr	r3, [r3, #8]
 8010d14:	683a      	ldr	r2, [r7, #0]
 8010d16:	7850      	ldrb	r0, [r2, #1]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	6839      	ldr	r1, [r7, #0]
 8010d1c:	4798      	blx	r3
    break;
 8010d1e:	e065      	b.n	8010dec <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	785b      	ldrb	r3, [r3, #1]
 8010d24:	2b0b      	cmp	r3, #11
 8010d26:	d84f      	bhi.n	8010dc8 <USBD_CDC_Setup+0x148>
 8010d28:	a201      	add	r2, pc, #4	; (adr r2, 8010d30 <USBD_CDC_Setup+0xb0>)
 8010d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d2e:	bf00      	nop
 8010d30:	08010d61 	.word	0x08010d61
 8010d34:	08010dd7 	.word	0x08010dd7
 8010d38:	08010dc9 	.word	0x08010dc9
 8010d3c:	08010dc9 	.word	0x08010dc9
 8010d40:	08010dc9 	.word	0x08010dc9
 8010d44:	08010dc9 	.word	0x08010dc9
 8010d48:	08010dc9 	.word	0x08010dc9
 8010d4c:	08010dc9 	.word	0x08010dc9
 8010d50:	08010dc9 	.word	0x08010dc9
 8010d54:	08010dc9 	.word	0x08010dc9
 8010d58:	08010d89 	.word	0x08010d89
 8010d5c:	08010db1 	.word	0x08010db1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d66:	2b03      	cmp	r3, #3
 8010d68:	d107      	bne.n	8010d7a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010d6a:	f107 030c 	add.w	r3, r7, #12
 8010d6e:	2202      	movs	r2, #2
 8010d70:	4619      	mov	r1, r3
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f001 fa53 	bl	801221e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010d78:	e030      	b.n	8010ddc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010d7a:	6839      	ldr	r1, [r7, #0]
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f001 f9dd 	bl	801213c <USBD_CtlError>
        ret = USBD_FAIL;
 8010d82:	2303      	movs	r3, #3
 8010d84:	75fb      	strb	r3, [r7, #23]
      break;
 8010d86:	e029      	b.n	8010ddc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d8e:	2b03      	cmp	r3, #3
 8010d90:	d107      	bne.n	8010da2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010d92:	f107 030f 	add.w	r3, r7, #15
 8010d96:	2201      	movs	r2, #1
 8010d98:	4619      	mov	r1, r3
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f001 fa3f 	bl	801221e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010da0:	e01c      	b.n	8010ddc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010da2:	6839      	ldr	r1, [r7, #0]
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f001 f9c9 	bl	801213c <USBD_CtlError>
        ret = USBD_FAIL;
 8010daa:	2303      	movs	r3, #3
 8010dac:	75fb      	strb	r3, [r7, #23]
      break;
 8010dae:	e015      	b.n	8010ddc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010db6:	2b03      	cmp	r3, #3
 8010db8:	d00f      	beq.n	8010dda <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8010dba:	6839      	ldr	r1, [r7, #0]
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f001 f9bd 	bl	801213c <USBD_CtlError>
        ret = USBD_FAIL;
 8010dc2:	2303      	movs	r3, #3
 8010dc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010dc6:	e008      	b.n	8010dda <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8010dc8:	6839      	ldr	r1, [r7, #0]
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f001 f9b6 	bl	801213c <USBD_CtlError>
      ret = USBD_FAIL;
 8010dd0:	2303      	movs	r3, #3
 8010dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8010dd4:	e002      	b.n	8010ddc <USBD_CDC_Setup+0x15c>
      break;
 8010dd6:	bf00      	nop
 8010dd8:	e008      	b.n	8010dec <USBD_CDC_Setup+0x16c>
      break;
 8010dda:	bf00      	nop
    }
    break;
 8010ddc:	e006      	b.n	8010dec <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8010dde:	6839      	ldr	r1, [r7, #0]
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f001 f9ab 	bl	801213c <USBD_CtlError>
    ret = USBD_FAIL;
 8010de6:	2303      	movs	r3, #3
 8010de8:	75fb      	strb	r3, [r7, #23]
    break;
 8010dea:	bf00      	nop
  }

  return (uint8_t)ret;
 8010dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3718      	adds	r7, #24
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}
 8010df6:	bf00      	nop

08010df8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	460b      	mov	r3, r1
 8010e02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010e0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d101      	bne.n	8010e1a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010e16:	2303      	movs	r3, #3
 8010e18:	e049      	b.n	8010eae <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010e22:	78fa      	ldrb	r2, [r7, #3]
 8010e24:	6879      	ldr	r1, [r7, #4]
 8010e26:	4613      	mov	r3, r2
 8010e28:	009b      	lsls	r3, r3, #2
 8010e2a:	4413      	add	r3, r2
 8010e2c:	009b      	lsls	r3, r3, #2
 8010e2e:	440b      	add	r3, r1
 8010e30:	3318      	adds	r3, #24
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d029      	beq.n	8010e8c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010e38:	78fa      	ldrb	r2, [r7, #3]
 8010e3a:	6879      	ldr	r1, [r7, #4]
 8010e3c:	4613      	mov	r3, r2
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	4413      	add	r3, r2
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	440b      	add	r3, r1
 8010e46:	3318      	adds	r3, #24
 8010e48:	681a      	ldr	r2, [r3, #0]
 8010e4a:	78f9      	ldrb	r1, [r7, #3]
 8010e4c:	68f8      	ldr	r0, [r7, #12]
 8010e4e:	460b      	mov	r3, r1
 8010e50:	00db      	lsls	r3, r3, #3
 8010e52:	1a5b      	subs	r3, r3, r1
 8010e54:	009b      	lsls	r3, r3, #2
 8010e56:	4403      	add	r3, r0
 8010e58:	3344      	adds	r3, #68	; 0x44
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010e60:	fb03 f301 	mul.w	r3, r3, r1
 8010e64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d110      	bne.n	8010e8c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010e6a:	78fa      	ldrb	r2, [r7, #3]
 8010e6c:	6879      	ldr	r1, [r7, #4]
 8010e6e:	4613      	mov	r3, r2
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	4413      	add	r3, r2
 8010e74:	009b      	lsls	r3, r3, #2
 8010e76:	440b      	add	r3, r1
 8010e78:	3318      	adds	r3, #24
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010e7e:	78f9      	ldrb	r1, [r7, #3]
 8010e80:	2300      	movs	r3, #0
 8010e82:	2200      	movs	r2, #0
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f004 fd6e 	bl	8015966 <USBD_LL_Transmit>
 8010e8a:	e00f      	b.n	8010eac <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e9a:	691b      	ldr	r3, [r3, #16]
 8010e9c:	68ba      	ldr	r2, [r7, #8]
 8010e9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010ea2:	68ba      	ldr	r2, [r7, #8]
 8010ea4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010ea8:	78fa      	ldrb	r2, [r7, #3]
 8010eaa:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8010eac:	2300      	movs	r3, #0
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3710      	adds	r7, #16
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}

08010eb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010eb6:	b580      	push	{r7, lr}
 8010eb8:	b084      	sub	sp, #16
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ec8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d101      	bne.n	8010ed8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010ed4:	2303      	movs	r3, #3
 8010ed6:	e015      	b.n	8010f04 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010ed8:	78fb      	ldrb	r3, [r7, #3]
 8010eda:	4619      	mov	r1, r3
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f004 fd84 	bl	80159ea <USBD_LL_GetRxDataSize>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	68fa      	ldr	r2, [r7, #12]
 8010ef4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010ef8:	68fa      	ldr	r2, [r7, #12]
 8010efa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010efe:	4611      	mov	r1, r2
 8010f00:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010f02:	2300      	movs	r3, #0
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3710      	adds	r7, #16
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b084      	sub	sp, #16
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f1a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d015      	beq.n	8010f52 <USBD_CDC_EP0_RxReady+0x46>
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010f2c:	2bff      	cmp	r3, #255	; 0xff
 8010f2e:	d010      	beq.n	8010f52 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f36:	689b      	ldr	r3, [r3, #8]
 8010f38:	68fa      	ldr	r2, [r7, #12]
 8010f3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010f3e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010f40:	68fa      	ldr	r2, [r7, #12]
 8010f42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010f46:	b292      	uxth	r2, r2
 8010f48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	22ff      	movs	r2, #255	; 0xff
 8010f4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8010f52:	2300      	movs	r3, #0
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3710      	adds	r7, #16
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b083      	sub	sp, #12
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2243      	movs	r2, #67	; 0x43
 8010f68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010f6a:	4b03      	ldr	r3, [pc, #12]	; (8010f78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	370c      	adds	r7, #12
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr
 8010f78:	200008b8 	.word	0x200008b8

08010f7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2243      	movs	r2, #67	; 0x43
 8010f88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010f8a:	4b03      	ldr	r3, [pc, #12]	; (8010f98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	370c      	adds	r7, #12
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr
 8010f98:	20000874 	.word	0x20000874

08010f9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b083      	sub	sp, #12
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2243      	movs	r2, #67	; 0x43
 8010fa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010faa:	4b03      	ldr	r3, [pc, #12]	; (8010fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	370c      	adds	r7, #12
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr
 8010fb8:	200008fc 	.word	0x200008fc

08010fbc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	220a      	movs	r2, #10
 8010fc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010fca:	4b03      	ldr	r3, [pc, #12]	; (8010fd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	370c      	adds	r7, #12
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr
 8010fd8:	20000830 	.word	0x20000830

08010fdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d101      	bne.n	8010ff0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010fec:	2303      	movs	r3, #3
 8010fee:	e004      	b.n	8010ffa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	683a      	ldr	r2, [r7, #0]
 8010ff4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010ff8:	2300      	movs	r3, #0
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	370c      	adds	r7, #12
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr

08011006 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011006:	b480      	push	{r7}
 8011008:	b087      	sub	sp, #28
 801100a:	af00      	add	r7, sp, #0
 801100c:	60f8      	str	r0, [r7, #12]
 801100e:	60b9      	str	r1, [r7, #8]
 8011010:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011018:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	687a      	ldr	r2, [r7, #4]
 8011026:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801102a:	2300      	movs	r3, #0
}
 801102c:	4618      	mov	r0, r3
 801102e:	371c      	adds	r7, #28
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011038:	b480      	push	{r7}
 801103a:	b085      	sub	sp, #20
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011048:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	683a      	ldr	r2, [r7, #0]
 801104e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011052:	2300      	movs	r3, #0
}
 8011054:	4618      	mov	r0, r3
 8011056:	3714      	adds	r7, #20
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b084      	sub	sp, #16
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801106e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011070:	2301      	movs	r3, #1
 8011072:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801107a:	2b00      	cmp	r3, #0
 801107c:	d101      	bne.n	8011082 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801107e:	2303      	movs	r3, #3
 8011080:	e01a      	b.n	80110b8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011088:	2b00      	cmp	r3, #0
 801108a:	d114      	bne.n	80110b6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	2201      	movs	r2, #1
 8011090:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80110aa:	2181      	movs	r1, #129	; 0x81
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f004 fc5a 	bl	8015966 <USBD_LL_Transmit>

    ret = USBD_OK;
 80110b2:	2300      	movs	r3, #0
 80110b4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80110b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3710      	adds	r7, #16
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b084      	sub	sp, #16
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d101      	bne.n	80110de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80110da:	2303      	movs	r3, #3
 80110dc:	e016      	b.n	801110c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	7c1b      	ldrb	r3, [r3, #16]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d109      	bne.n	80110fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80110ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110f0:	2101      	movs	r1, #1
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f004 fc58 	bl	80159a8 <USBD_LL_PrepareReceive>
 80110f8:	e007      	b.n	801110a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011100:	2340      	movs	r3, #64	; 0x40
 8011102:	2101      	movs	r1, #1
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f004 fc4f 	bl	80159a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801110a:	2300      	movs	r3, #0
}
 801110c:	4618      	mov	r0, r3
 801110e:	3710      	adds	r7, #16
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}

08011114 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b086      	sub	sp, #24
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	4613      	mov	r3, r2
 8011120:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d101      	bne.n	801112c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011128:	2303      	movs	r3, #3
 801112a:	e025      	b.n	8011178 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011132:	2b00      	cmp	r3, #0
 8011134:	d003      	beq.n	801113e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2200      	movs	r2, #0
 801113a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011144:	2b00      	cmp	r3, #0
 8011146:	d003      	beq.n	8011150 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2200      	movs	r2, #0
 801114c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d003      	beq.n	801115e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	68ba      	ldr	r2, [r7, #8]
 801115a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2201      	movs	r2, #1
 8011162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	79fa      	ldrb	r2, [r7, #7]
 801116a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801116c:	68f8      	ldr	r0, [r7, #12]
 801116e:	f004 fac5 	bl	80156fc <USBD_LL_Init>
 8011172:	4603      	mov	r3, r0
 8011174:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011176:	7dfb      	ldrb	r3, [r7, #23]
}
 8011178:	4618      	mov	r0, r3
 801117a:	3718      	adds	r7, #24
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}

08011180 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801118a:	2300      	movs	r3, #0
 801118c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d101      	bne.n	8011198 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011194:	2303      	movs	r3, #3
 8011196:	e010      	b.n	80111ba <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	683a      	ldr	r2, [r7, #0]
 801119c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a8:	f107 020e 	add.w	r2, r7, #14
 80111ac:	4610      	mov	r0, r2
 80111ae:	4798      	blx	r3
 80111b0:	4602      	mov	r2, r0
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80111b8:	2300      	movs	r3, #0
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3710      	adds	r7, #16
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}

080111c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80111c2:	b580      	push	{r7, lr}
 80111c4:	b082      	sub	sp, #8
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f004 fae2 	bl	8015794 <USBD_LL_Start>
 80111d0:	4603      	mov	r3, r0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3708      	adds	r7, #8
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}

080111da <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80111da:	b480      	push	{r7}
 80111dc:	b083      	sub	sp, #12
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80111e2:	2300      	movs	r3, #0
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	370c      	adds	r7, #12
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	4770      	bx	lr

080111f0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	460b      	mov	r3, r1
 80111fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80111fc:	2303      	movs	r3, #3
 80111fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011206:	2b00      	cmp	r3, #0
 8011208:	d009      	beq.n	801121e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	78fa      	ldrb	r2, [r7, #3]
 8011214:	4611      	mov	r1, r2
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	4798      	blx	r3
 801121a:	4603      	mov	r3, r0
 801121c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011220:	4618      	mov	r0, r3
 8011222:	3710      	adds	r7, #16
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	460b      	mov	r3, r1
 8011232:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801123a:	2b00      	cmp	r3, #0
 801123c:	d007      	beq.n	801124e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	78fa      	ldrb	r2, [r7, #3]
 8011248:	4611      	mov	r1, r2
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	4798      	blx	r3
  }

  return USBD_OK;
 801124e:	2300      	movs	r3, #0
}
 8011250:	4618      	mov	r0, r3
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011268:	6839      	ldr	r1, [r7, #0]
 801126a:	4618      	mov	r0, r3
 801126c:	f000 ff2c 	bl	80120c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2201      	movs	r2, #1
 8011274:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801127e:	461a      	mov	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801128c:	f003 031f 	and.w	r3, r3, #31
 8011290:	2b01      	cmp	r3, #1
 8011292:	d00e      	beq.n	80112b2 <USBD_LL_SetupStage+0x5a>
 8011294:	2b01      	cmp	r3, #1
 8011296:	d302      	bcc.n	801129e <USBD_LL_SetupStage+0x46>
 8011298:	2b02      	cmp	r3, #2
 801129a:	d014      	beq.n	80112c6 <USBD_LL_SetupStage+0x6e>
 801129c:	e01d      	b.n	80112da <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80112a4:	4619      	mov	r1, r3
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f000 fa18 	bl	80116dc <USBD_StdDevReq>
 80112ac:	4603      	mov	r3, r0
 80112ae:	73fb      	strb	r3, [r7, #15]
      break;
 80112b0:	e020      	b.n	80112f4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80112b8:	4619      	mov	r1, r3
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f000 fa7c 	bl	80117b8 <USBD_StdItfReq>
 80112c0:	4603      	mov	r3, r0
 80112c2:	73fb      	strb	r3, [r7, #15]
      break;
 80112c4:	e016      	b.n	80112f4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80112cc:	4619      	mov	r1, r3
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f000 fab8 	bl	8011844 <USBD_StdEPReq>
 80112d4:	4603      	mov	r3, r0
 80112d6:	73fb      	strb	r3, [r7, #15]
      break;
 80112d8:	e00c      	b.n	80112f4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80112e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	4619      	mov	r1, r3
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f004 fab3 	bl	8015854 <USBD_LL_StallEP>
 80112ee:	4603      	mov	r3, r0
 80112f0:	73fb      	strb	r3, [r7, #15]
      break;
 80112f2:	bf00      	nop
  }

  return ret;
 80112f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3710      	adds	r7, #16
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}

080112fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80112fe:	b580      	push	{r7, lr}
 8011300:	b086      	sub	sp, #24
 8011302:	af00      	add	r7, sp, #0
 8011304:	60f8      	str	r0, [r7, #12]
 8011306:	460b      	mov	r3, r1
 8011308:	607a      	str	r2, [r7, #4]
 801130a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801130c:	7afb      	ldrb	r3, [r7, #11]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d137      	bne.n	8011382 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011318:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011320:	2b03      	cmp	r3, #3
 8011322:	d14a      	bne.n	80113ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	689a      	ldr	r2, [r3, #8]
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	429a      	cmp	r2, r3
 801132e:	d913      	bls.n	8011358 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	689a      	ldr	r2, [r3, #8]
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	1ad2      	subs	r2, r2, r3
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	68da      	ldr	r2, [r3, #12]
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	689b      	ldr	r3, [r3, #8]
 8011346:	4293      	cmp	r3, r2
 8011348:	bf28      	it	cs
 801134a:	4613      	movcs	r3, r2
 801134c:	461a      	mov	r2, r3
 801134e:	6879      	ldr	r1, [r7, #4]
 8011350:	68f8      	ldr	r0, [r7, #12]
 8011352:	f000 ffad 	bl	80122b0 <USBD_CtlContinueRx>
 8011356:	e030      	b.n	80113ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801135e:	691b      	ldr	r3, [r3, #16]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d00a      	beq.n	801137a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801136a:	2b03      	cmp	r3, #3
 801136c:	d105      	bne.n	801137a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011374:	691b      	ldr	r3, [r3, #16]
 8011376:	68f8      	ldr	r0, [r7, #12]
 8011378:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 801137a:	68f8      	ldr	r0, [r7, #12]
 801137c:	f000 ffa9 	bl	80122d2 <USBD_CtlSendStatus>
 8011380:	e01b      	b.n	80113ba <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011388:	699b      	ldr	r3, [r3, #24]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d013      	beq.n	80113b6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011394:	2b03      	cmp	r3, #3
 8011396:	d10e      	bne.n	80113b6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801139e:	699b      	ldr	r3, [r3, #24]
 80113a0:	7afa      	ldrb	r2, [r7, #11]
 80113a2:	4611      	mov	r1, r2
 80113a4:	68f8      	ldr	r0, [r7, #12]
 80113a6:	4798      	blx	r3
 80113a8:	4603      	mov	r3, r0
 80113aa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80113ac:	7dfb      	ldrb	r3, [r7, #23]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d003      	beq.n	80113ba <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80113b2:	7dfb      	ldrb	r3, [r7, #23]
 80113b4:	e002      	b.n	80113bc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80113b6:	2303      	movs	r3, #3
 80113b8:	e000      	b.n	80113bc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80113ba:	2300      	movs	r3, #0
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3718      	adds	r7, #24
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b086      	sub	sp, #24
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	460b      	mov	r3, r1
 80113ce:	607a      	str	r2, [r7, #4]
 80113d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80113d2:	7afb      	ldrb	r3, [r7, #11]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d16a      	bne.n	80114ae <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	3314      	adds	r3, #20
 80113dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80113e4:	2b02      	cmp	r3, #2
 80113e6:	d155      	bne.n	8011494 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	689a      	ldr	r2, [r3, #8]
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	68db      	ldr	r3, [r3, #12]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d914      	bls.n	801141e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	689a      	ldr	r2, [r3, #8]
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	68db      	ldr	r3, [r3, #12]
 80113fc:	1ad2      	subs	r2, r2, r3
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	689b      	ldr	r3, [r3, #8]
 8011406:	461a      	mov	r2, r3
 8011408:	6879      	ldr	r1, [r7, #4]
 801140a:	68f8      	ldr	r0, [r7, #12]
 801140c:	f000 ff22 	bl	8012254 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011410:	2300      	movs	r3, #0
 8011412:	2200      	movs	r2, #0
 8011414:	2100      	movs	r1, #0
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	f004 fac6 	bl	80159a8 <USBD_LL_PrepareReceive>
 801141c:	e03a      	b.n	8011494 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	68da      	ldr	r2, [r3, #12]
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	689b      	ldr	r3, [r3, #8]
 8011426:	429a      	cmp	r2, r3
 8011428:	d11c      	bne.n	8011464 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	685a      	ldr	r2, [r3, #4]
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011432:	429a      	cmp	r2, r3
 8011434:	d316      	bcc.n	8011464 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	685a      	ldr	r2, [r3, #4]
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011440:	429a      	cmp	r2, r3
 8011442:	d20f      	bcs.n	8011464 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011444:	2200      	movs	r2, #0
 8011446:	2100      	movs	r1, #0
 8011448:	68f8      	ldr	r0, [r7, #12]
 801144a:	f000 ff03 	bl	8012254 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2200      	movs	r2, #0
 8011452:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011456:	2300      	movs	r3, #0
 8011458:	2200      	movs	r2, #0
 801145a:	2100      	movs	r1, #0
 801145c:	68f8      	ldr	r0, [r7, #12]
 801145e:	f004 faa3 	bl	80159a8 <USBD_LL_PrepareReceive>
 8011462:	e017      	b.n	8011494 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d00a      	beq.n	8011486 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011476:	2b03      	cmp	r3, #3
 8011478:	d105      	bne.n	8011486 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011480:	68db      	ldr	r3, [r3, #12]
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011486:	2180      	movs	r1, #128	; 0x80
 8011488:	68f8      	ldr	r0, [r7, #12]
 801148a:	f004 f9e3 	bl	8015854 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801148e:	68f8      	ldr	r0, [r7, #12]
 8011490:	f000 ff32 	bl	80122f8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801149a:	2b01      	cmp	r3, #1
 801149c:	d123      	bne.n	80114e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801149e:	68f8      	ldr	r0, [r7, #12]
 80114a0:	f7ff fe9b 	bl	80111da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2200      	movs	r2, #0
 80114a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80114ac:	e01b      	b.n	80114e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114b4:	695b      	ldr	r3, [r3, #20]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d013      	beq.n	80114e2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80114c0:	2b03      	cmp	r3, #3
 80114c2:	d10e      	bne.n	80114e2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114ca:	695b      	ldr	r3, [r3, #20]
 80114cc:	7afa      	ldrb	r2, [r7, #11]
 80114ce:	4611      	mov	r1, r2
 80114d0:	68f8      	ldr	r0, [r7, #12]
 80114d2:	4798      	blx	r3
 80114d4:	4603      	mov	r3, r0
 80114d6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80114d8:	7dfb      	ldrb	r3, [r7, #23]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d003      	beq.n	80114e6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80114de:	7dfb      	ldrb	r3, [r7, #23]
 80114e0:	e002      	b.n	80114e8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80114e2:	2303      	movs	r3, #3
 80114e4:	e000      	b.n	80114e8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80114e6:	2300      	movs	r3, #0
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3718      	adds	r7, #24
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2201      	movs	r2, #1
 80114fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2200      	movs	r2, #0
 8011504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2200      	movs	r2, #0
 801150c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2200      	movs	r2, #0
 8011512:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801151c:	2b00      	cmp	r3, #0
 801151e:	d009      	beq.n	8011534 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	6852      	ldr	r2, [r2, #4]
 801152c:	b2d2      	uxtb	r2, r2
 801152e:	4611      	mov	r1, r2
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011534:	2340      	movs	r3, #64	; 0x40
 8011536:	2200      	movs	r2, #0
 8011538:	2100      	movs	r1, #0
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f004 f945 	bl	80157ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2201      	movs	r2, #1
 8011544:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2240      	movs	r2, #64	; 0x40
 801154c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011550:	2340      	movs	r3, #64	; 0x40
 8011552:	2200      	movs	r2, #0
 8011554:	2180      	movs	r1, #128	; 0x80
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f004 f937 	bl	80157ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2201      	movs	r2, #1
 8011560:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2240      	movs	r2, #64	; 0x40
 8011566:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011568:	2300      	movs	r3, #0
}
 801156a:	4618      	mov	r0, r3
 801156c:	3708      	adds	r7, #8
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011572:	b480      	push	{r7}
 8011574:	b083      	sub	sp, #12
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
 801157a:	460b      	mov	r3, r1
 801157c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	78fa      	ldrb	r2, [r7, #3]
 8011582:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011584:	2300      	movs	r3, #0
}
 8011586:	4618      	mov	r0, r3
 8011588:	370c      	adds	r7, #12
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr

08011592 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011592:	b480      	push	{r7}
 8011594:	b083      	sub	sp, #12
 8011596:	af00      	add	r7, sp, #0
 8011598:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2204      	movs	r2, #4
 80115aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80115ae:	2300      	movs	r3, #0
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	370c      	adds	r7, #12
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr

080115bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115ca:	2b04      	cmp	r3, #4
 80115cc:	d105      	bne.n	80115da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	370c      	adds	r7, #12
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr

080115e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115f6:	2b03      	cmp	r3, #3
 80115f8:	d10b      	bne.n	8011612 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011600:	69db      	ldr	r3, [r3, #28]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d005      	beq.n	8011612 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801160c:	69db      	ldr	r3, [r3, #28]
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011612:	2300      	movs	r3, #0
}
 8011614:	4618      	mov	r0, r3
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801161c:	b480      	push	{r7}
 801161e:	b083      	sub	sp, #12
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	460b      	mov	r3, r1
 8011626:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011628:	2300      	movs	r3, #0
}
 801162a:	4618      	mov	r0, r3
 801162c:	370c      	adds	r7, #12
 801162e:	46bd      	mov	sp, r7
 8011630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011634:	4770      	bx	lr

08011636 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011636:	b480      	push	{r7}
 8011638:	b083      	sub	sp, #12
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
 801163e:	460b      	mov	r3, r1
 8011640:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011642:	2300      	movs	r3, #0
}
 8011644:	4618      	mov	r0, r3
 8011646:	370c      	adds	r7, #12
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011658:	2300      	movs	r3, #0
}
 801165a:	4618      	mov	r0, r3
 801165c:	370c      	adds	r7, #12
 801165e:	46bd      	mov	sp, r7
 8011660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011664:	4770      	bx	lr

08011666 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011666:	b580      	push	{r7, lr}
 8011668:	b082      	sub	sp, #8
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2201      	movs	r2, #1
 8011672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801167c:	2b00      	cmp	r3, #0
 801167e:	d009      	beq.n	8011694 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	687a      	ldr	r2, [r7, #4]
 801168a:	6852      	ldr	r2, [r2, #4]
 801168c:	b2d2      	uxtb	r2, r2
 801168e:	4611      	mov	r1, r2
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	4798      	blx	r3
  }

  return USBD_OK;
 8011694:	2300      	movs	r3, #0
}
 8011696:	4618      	mov	r0, r3
 8011698:	3708      	adds	r7, #8
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}

0801169e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801169e:	b480      	push	{r7}
 80116a0:	b087      	sub	sp, #28
 80116a2:	af00      	add	r7, sp, #0
 80116a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	3301      	adds	r3, #1
 80116b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	781b      	ldrb	r3, [r3, #0]
 80116ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80116bc:	8a3b      	ldrh	r3, [r7, #16]
 80116be:	021b      	lsls	r3, r3, #8
 80116c0:	b21a      	sxth	r2, r3
 80116c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80116c6:	4313      	orrs	r3, r2
 80116c8:	b21b      	sxth	r3, r3
 80116ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80116cc:	89fb      	ldrh	r3, [r7, #14]
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	371c      	adds	r7, #28
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr
	...

080116dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b084      	sub	sp, #16
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80116e6:	2300      	movs	r3, #0
 80116e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	781b      	ldrb	r3, [r3, #0]
 80116ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80116f2:	2b20      	cmp	r3, #32
 80116f4:	d004      	beq.n	8011700 <USBD_StdDevReq+0x24>
 80116f6:	2b40      	cmp	r3, #64	; 0x40
 80116f8:	d002      	beq.n	8011700 <USBD_StdDevReq+0x24>
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d00a      	beq.n	8011714 <USBD_StdDevReq+0x38>
 80116fe:	e050      	b.n	80117a2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011706:	689b      	ldr	r3, [r3, #8]
 8011708:	6839      	ldr	r1, [r7, #0]
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	4798      	blx	r3
 801170e:	4603      	mov	r3, r0
 8011710:	73fb      	strb	r3, [r7, #15]
    break;
 8011712:	e04b      	b.n	80117ac <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	785b      	ldrb	r3, [r3, #1]
 8011718:	2b09      	cmp	r3, #9
 801171a:	d83c      	bhi.n	8011796 <USBD_StdDevReq+0xba>
 801171c:	a201      	add	r2, pc, #4	; (adr r2, 8011724 <USBD_StdDevReq+0x48>)
 801171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011722:	bf00      	nop
 8011724:	08011779 	.word	0x08011779
 8011728:	0801178d 	.word	0x0801178d
 801172c:	08011797 	.word	0x08011797
 8011730:	08011783 	.word	0x08011783
 8011734:	08011797 	.word	0x08011797
 8011738:	08011757 	.word	0x08011757
 801173c:	0801174d 	.word	0x0801174d
 8011740:	08011797 	.word	0x08011797
 8011744:	0801176f 	.word	0x0801176f
 8011748:	08011761 	.word	0x08011761
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 801174c:	6839      	ldr	r1, [r7, #0]
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f000 f9ce 	bl	8011af0 <USBD_GetDescriptor>
      break;
 8011754:	e024      	b.n	80117a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011756:	6839      	ldr	r1, [r7, #0]
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f000 fb33 	bl	8011dc4 <USBD_SetAddress>
      break;
 801175e:	e01f      	b.n	80117a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011760:	6839      	ldr	r1, [r7, #0]
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f000 fb70 	bl	8011e48 <USBD_SetConfig>
 8011768:	4603      	mov	r3, r0
 801176a:	73fb      	strb	r3, [r7, #15]
      break;
 801176c:	e018      	b.n	80117a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801176e:	6839      	ldr	r1, [r7, #0]
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f000 fc0d 	bl	8011f90 <USBD_GetConfig>
      break;
 8011776:	e013      	b.n	80117a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011778:	6839      	ldr	r1, [r7, #0]
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f000 fc3c 	bl	8011ff8 <USBD_GetStatus>
      break;
 8011780:	e00e      	b.n	80117a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011782:	6839      	ldr	r1, [r7, #0]
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f000 fc6a 	bl	801205e <USBD_SetFeature>
      break;
 801178a:	e009      	b.n	80117a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801178c:	6839      	ldr	r1, [r7, #0]
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f000 fc79 	bl	8012086 <USBD_ClrFeature>
      break;
 8011794:	e004      	b.n	80117a0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011796:	6839      	ldr	r1, [r7, #0]
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 fccf 	bl	801213c <USBD_CtlError>
      break;
 801179e:	bf00      	nop
    }
    break;
 80117a0:	e004      	b.n	80117ac <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80117a2:	6839      	ldr	r1, [r7, #0]
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f000 fcc9 	bl	801213c <USBD_CtlError>
    break;
 80117aa:	bf00      	nop
  }

  return ret;
 80117ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3710      	adds	r7, #16
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}
 80117b6:	bf00      	nop

080117b8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b084      	sub	sp, #16
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80117c2:	2300      	movs	r3, #0
 80117c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	781b      	ldrb	r3, [r3, #0]
 80117ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80117ce:	2b20      	cmp	r3, #32
 80117d0:	d003      	beq.n	80117da <USBD_StdItfReq+0x22>
 80117d2:	2b40      	cmp	r3, #64	; 0x40
 80117d4:	d001      	beq.n	80117da <USBD_StdItfReq+0x22>
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d12a      	bne.n	8011830 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117e0:	3b01      	subs	r3, #1
 80117e2:	2b02      	cmp	r3, #2
 80117e4:	d81d      	bhi.n	8011822 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	889b      	ldrh	r3, [r3, #4]
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d813      	bhi.n	8011818 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117f6:	689b      	ldr	r3, [r3, #8]
 80117f8:	6839      	ldr	r1, [r7, #0]
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	4798      	blx	r3
 80117fe:	4603      	mov	r3, r0
 8011800:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	88db      	ldrh	r3, [r3, #6]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d110      	bne.n	801182c <USBD_StdItfReq+0x74>
 801180a:	7bfb      	ldrb	r3, [r7, #15]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d10d      	bne.n	801182c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f000 fd5e 	bl	80122d2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011816:	e009      	b.n	801182c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8011818:	6839      	ldr	r1, [r7, #0]
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f000 fc8e 	bl	801213c <USBD_CtlError>
      break;
 8011820:	e004      	b.n	801182c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8011822:	6839      	ldr	r1, [r7, #0]
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f000 fc89 	bl	801213c <USBD_CtlError>
      break;
 801182a:	e000      	b.n	801182e <USBD_StdItfReq+0x76>
      break;
 801182c:	bf00      	nop
    }
    break;
 801182e:	e004      	b.n	801183a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011830:	6839      	ldr	r1, [r7, #0]
 8011832:	6878      	ldr	r0, [r7, #4]
 8011834:	f000 fc82 	bl	801213c <USBD_CtlError>
    break;
 8011838:	bf00      	nop
  }

  return ret;
 801183a:	7bfb      	ldrb	r3, [r7, #15]
}
 801183c:	4618      	mov	r0, r3
 801183e:	3710      	adds	r7, #16
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}

08011844 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801184e:	2300      	movs	r3, #0
 8011850:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	889b      	ldrh	r3, [r3, #4]
 8011856:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	781b      	ldrb	r3, [r3, #0]
 801185c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011860:	2b20      	cmp	r3, #32
 8011862:	d004      	beq.n	801186e <USBD_StdEPReq+0x2a>
 8011864:	2b40      	cmp	r3, #64	; 0x40
 8011866:	d002      	beq.n	801186e <USBD_StdEPReq+0x2a>
 8011868:	2b00      	cmp	r3, #0
 801186a:	d00a      	beq.n	8011882 <USBD_StdEPReq+0x3e>
 801186c:	e135      	b.n	8011ada <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011874:	689b      	ldr	r3, [r3, #8]
 8011876:	6839      	ldr	r1, [r7, #0]
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	4798      	blx	r3
 801187c:	4603      	mov	r3, r0
 801187e:	73fb      	strb	r3, [r7, #15]
    break;
 8011880:	e130      	b.n	8011ae4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	785b      	ldrb	r3, [r3, #1]
 8011886:	2b01      	cmp	r3, #1
 8011888:	d03e      	beq.n	8011908 <USBD_StdEPReq+0xc4>
 801188a:	2b03      	cmp	r3, #3
 801188c:	d002      	beq.n	8011894 <USBD_StdEPReq+0x50>
 801188e:	2b00      	cmp	r3, #0
 8011890:	d077      	beq.n	8011982 <USBD_StdEPReq+0x13e>
 8011892:	e11c      	b.n	8011ace <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801189a:	2b02      	cmp	r3, #2
 801189c:	d002      	beq.n	80118a4 <USBD_StdEPReq+0x60>
 801189e:	2b03      	cmp	r3, #3
 80118a0:	d015      	beq.n	80118ce <USBD_StdEPReq+0x8a>
 80118a2:	e02b      	b.n	80118fc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80118a4:	7bbb      	ldrb	r3, [r7, #14]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d00c      	beq.n	80118c4 <USBD_StdEPReq+0x80>
 80118aa:	7bbb      	ldrb	r3, [r7, #14]
 80118ac:	2b80      	cmp	r3, #128	; 0x80
 80118ae:	d009      	beq.n	80118c4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80118b0:	7bbb      	ldrb	r3, [r7, #14]
 80118b2:	4619      	mov	r1, r3
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f003 ffcd 	bl	8015854 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80118ba:	2180      	movs	r1, #128	; 0x80
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f003 ffc9 	bl	8015854 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80118c2:	e020      	b.n	8011906 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80118c4:	6839      	ldr	r1, [r7, #0]
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f000 fc38 	bl	801213c <USBD_CtlError>
        break;
 80118cc:	e01b      	b.n	8011906 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	885b      	ldrh	r3, [r3, #2]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d10e      	bne.n	80118f4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80118d6:	7bbb      	ldrb	r3, [r7, #14]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d00b      	beq.n	80118f4 <USBD_StdEPReq+0xb0>
 80118dc:	7bbb      	ldrb	r3, [r7, #14]
 80118de:	2b80      	cmp	r3, #128	; 0x80
 80118e0:	d008      	beq.n	80118f4 <USBD_StdEPReq+0xb0>
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	88db      	ldrh	r3, [r3, #6]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d104      	bne.n	80118f4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80118ea:	7bbb      	ldrb	r3, [r7, #14]
 80118ec:	4619      	mov	r1, r3
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f003 ffb0 	bl	8015854 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f000 fcec 	bl	80122d2 <USBD_CtlSendStatus>

        break;
 80118fa:	e004      	b.n	8011906 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80118fc:	6839      	ldr	r1, [r7, #0]
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 fc1c 	bl	801213c <USBD_CtlError>
        break;
 8011904:	bf00      	nop
      }
      break;
 8011906:	e0e7      	b.n	8011ad8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801190e:	2b02      	cmp	r3, #2
 8011910:	d002      	beq.n	8011918 <USBD_StdEPReq+0xd4>
 8011912:	2b03      	cmp	r3, #3
 8011914:	d015      	beq.n	8011942 <USBD_StdEPReq+0xfe>
 8011916:	e02d      	b.n	8011974 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011918:	7bbb      	ldrb	r3, [r7, #14]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d00c      	beq.n	8011938 <USBD_StdEPReq+0xf4>
 801191e:	7bbb      	ldrb	r3, [r7, #14]
 8011920:	2b80      	cmp	r3, #128	; 0x80
 8011922:	d009      	beq.n	8011938 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011924:	7bbb      	ldrb	r3, [r7, #14]
 8011926:	4619      	mov	r1, r3
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f003 ff93 	bl	8015854 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801192e:	2180      	movs	r1, #128	; 0x80
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f003 ff8f 	bl	8015854 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011936:	e023      	b.n	8011980 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8011938:	6839      	ldr	r1, [r7, #0]
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f000 fbfe 	bl	801213c <USBD_CtlError>
        break;
 8011940:	e01e      	b.n	8011980 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	885b      	ldrh	r3, [r3, #2]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d119      	bne.n	801197e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801194a:	7bbb      	ldrb	r3, [r7, #14]
 801194c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011950:	2b00      	cmp	r3, #0
 8011952:	d004      	beq.n	801195e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011954:	7bbb      	ldrb	r3, [r7, #14]
 8011956:	4619      	mov	r1, r3
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f003 ff9a 	bl	8015892 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f000 fcb7 	bl	80122d2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801196a:	689b      	ldr	r3, [r3, #8]
 801196c:	6839      	ldr	r1, [r7, #0]
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	4798      	blx	r3
        }
        break;
 8011972:	e004      	b.n	801197e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8011974:	6839      	ldr	r1, [r7, #0]
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	f000 fbe0 	bl	801213c <USBD_CtlError>
        break;
 801197c:	e000      	b.n	8011980 <USBD_StdEPReq+0x13c>
        break;
 801197e:	bf00      	nop
      }
      break;
 8011980:	e0aa      	b.n	8011ad8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011988:	2b02      	cmp	r3, #2
 801198a:	d002      	beq.n	8011992 <USBD_StdEPReq+0x14e>
 801198c:	2b03      	cmp	r3, #3
 801198e:	d032      	beq.n	80119f6 <USBD_StdEPReq+0x1b2>
 8011990:	e097      	b.n	8011ac2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011992:	7bbb      	ldrb	r3, [r7, #14]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d007      	beq.n	80119a8 <USBD_StdEPReq+0x164>
 8011998:	7bbb      	ldrb	r3, [r7, #14]
 801199a:	2b80      	cmp	r3, #128	; 0x80
 801199c:	d004      	beq.n	80119a8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 801199e:	6839      	ldr	r1, [r7, #0]
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f000 fbcb 	bl	801213c <USBD_CtlError>
          break;
 80119a6:	e091      	b.n	8011acc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80119a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	da0b      	bge.n	80119c8 <USBD_StdEPReq+0x184>
 80119b0:	7bbb      	ldrb	r3, [r7, #14]
 80119b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80119b6:	4613      	mov	r3, r2
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	4413      	add	r3, r2
 80119bc:	009b      	lsls	r3, r3, #2
 80119be:	3310      	adds	r3, #16
 80119c0:	687a      	ldr	r2, [r7, #4]
 80119c2:	4413      	add	r3, r2
 80119c4:	3304      	adds	r3, #4
 80119c6:	e00b      	b.n	80119e0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80119c8:	7bbb      	ldrb	r3, [r7, #14]
 80119ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80119ce:	4613      	mov	r3, r2
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	4413      	add	r3, r2
 80119d4:	009b      	lsls	r3, r3, #2
 80119d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	4413      	add	r3, r2
 80119de:	3304      	adds	r3, #4
 80119e0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	2200      	movs	r2, #0
 80119e6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	2202      	movs	r2, #2
 80119ec:	4619      	mov	r1, r3
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 fc15 	bl	801221e <USBD_CtlSendData>
        break;
 80119f4:	e06a      	b.n	8011acc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80119f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	da11      	bge.n	8011a22 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80119fe:	7bbb      	ldrb	r3, [r7, #14]
 8011a00:	f003 020f 	and.w	r2, r3, #15
 8011a04:	6879      	ldr	r1, [r7, #4]
 8011a06:	4613      	mov	r3, r2
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	4413      	add	r3, r2
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	440b      	add	r3, r1
 8011a10:	3324      	adds	r3, #36	; 0x24
 8011a12:	881b      	ldrh	r3, [r3, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d117      	bne.n	8011a48 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011a18:	6839      	ldr	r1, [r7, #0]
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f000 fb8e 	bl	801213c <USBD_CtlError>
            break;
 8011a20:	e054      	b.n	8011acc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011a22:	7bbb      	ldrb	r3, [r7, #14]
 8011a24:	f003 020f 	and.w	r2, r3, #15
 8011a28:	6879      	ldr	r1, [r7, #4]
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	009b      	lsls	r3, r3, #2
 8011a2e:	4413      	add	r3, r2
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	440b      	add	r3, r1
 8011a34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011a38:	881b      	ldrh	r3, [r3, #0]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d104      	bne.n	8011a48 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011a3e:	6839      	ldr	r1, [r7, #0]
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f000 fb7b 	bl	801213c <USBD_CtlError>
            break;
 8011a46:	e041      	b.n	8011acc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	da0b      	bge.n	8011a68 <USBD_StdEPReq+0x224>
 8011a50:	7bbb      	ldrb	r3, [r7, #14]
 8011a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a56:	4613      	mov	r3, r2
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	4413      	add	r3, r2
 8011a5c:	009b      	lsls	r3, r3, #2
 8011a5e:	3310      	adds	r3, #16
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	4413      	add	r3, r2
 8011a64:	3304      	adds	r3, #4
 8011a66:	e00b      	b.n	8011a80 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011a68:	7bbb      	ldrb	r3, [r7, #14]
 8011a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a6e:	4613      	mov	r3, r2
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	4413      	add	r3, r2
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011a7a:	687a      	ldr	r2, [r7, #4]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	3304      	adds	r3, #4
 8011a80:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011a82:	7bbb      	ldrb	r3, [r7, #14]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d002      	beq.n	8011a8e <USBD_StdEPReq+0x24a>
 8011a88:	7bbb      	ldrb	r3, [r7, #14]
 8011a8a:	2b80      	cmp	r3, #128	; 0x80
 8011a8c:	d103      	bne.n	8011a96 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	2200      	movs	r2, #0
 8011a92:	601a      	str	r2, [r3, #0]
 8011a94:	e00e      	b.n	8011ab4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011a96:	7bbb      	ldrb	r3, [r7, #14]
 8011a98:	4619      	mov	r1, r3
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f003 ff18 	bl	80158d0 <USBD_LL_IsStallEP>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d003      	beq.n	8011aae <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	2201      	movs	r2, #1
 8011aaa:	601a      	str	r2, [r3, #0]
 8011aac:	e002      	b.n	8011ab4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	2202      	movs	r2, #2
 8011ab8:	4619      	mov	r1, r3
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f000 fbaf 	bl	801221e <USBD_CtlSendData>
          break;
 8011ac0:	e004      	b.n	8011acc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8011ac2:	6839      	ldr	r1, [r7, #0]
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f000 fb39 	bl	801213c <USBD_CtlError>
        break;
 8011aca:	bf00      	nop
      }
      break;
 8011acc:	e004      	b.n	8011ad8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 fb33 	bl	801213c <USBD_CtlError>
      break;
 8011ad6:	bf00      	nop
    }
    break;
 8011ad8:	e004      	b.n	8011ae4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8011ada:	6839      	ldr	r1, [r7, #0]
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f000 fb2d 	bl	801213c <USBD_CtlError>
    break;
 8011ae2:	bf00      	nop
  }

  return ret;
 8011ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
	...

08011af0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b084      	sub	sp, #16
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011afa:	2300      	movs	r3, #0
 8011afc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011afe:	2300      	movs	r3, #0
 8011b00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011b02:	2300      	movs	r3, #0
 8011b04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	885b      	ldrh	r3, [r3, #2]
 8011b0a:	0a1b      	lsrs	r3, r3, #8
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	3b01      	subs	r3, #1
 8011b10:	2b06      	cmp	r3, #6
 8011b12:	f200 8128 	bhi.w	8011d66 <USBD_GetDescriptor+0x276>
 8011b16:	a201      	add	r2, pc, #4	; (adr r2, 8011b1c <USBD_GetDescriptor+0x2c>)
 8011b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b1c:	08011b39 	.word	0x08011b39
 8011b20:	08011b51 	.word	0x08011b51
 8011b24:	08011b91 	.word	0x08011b91
 8011b28:	08011d67 	.word	0x08011d67
 8011b2c:	08011d67 	.word	0x08011d67
 8011b30:	08011d07 	.word	0x08011d07
 8011b34:	08011d33 	.word	0x08011d33
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	687a      	ldr	r2, [r7, #4]
 8011b42:	7c12      	ldrb	r2, [r2, #16]
 8011b44:	f107 0108 	add.w	r1, r7, #8
 8011b48:	4610      	mov	r0, r2
 8011b4a:	4798      	blx	r3
 8011b4c:	60f8      	str	r0, [r7, #12]
    break;
 8011b4e:	e112      	b.n	8011d76 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	7c1b      	ldrb	r3, [r3, #16]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d10d      	bne.n	8011b74 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b60:	f107 0208 	add.w	r2, r7, #8
 8011b64:	4610      	mov	r0, r2
 8011b66:	4798      	blx	r3
 8011b68:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	3301      	adds	r3, #1
 8011b6e:	2202      	movs	r2, #2
 8011b70:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011b72:	e100      	b.n	8011d76 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b7c:	f107 0208 	add.w	r2, r7, #8
 8011b80:	4610      	mov	r0, r2
 8011b82:	4798      	blx	r3
 8011b84:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	2202      	movs	r2, #2
 8011b8c:	701a      	strb	r2, [r3, #0]
    break;
 8011b8e:	e0f2      	b.n	8011d76 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	885b      	ldrh	r3, [r3, #2]
 8011b94:	b2db      	uxtb	r3, r3
 8011b96:	2b05      	cmp	r3, #5
 8011b98:	f200 80ac 	bhi.w	8011cf4 <USBD_GetDescriptor+0x204>
 8011b9c:	a201      	add	r2, pc, #4	; (adr r2, 8011ba4 <USBD_GetDescriptor+0xb4>)
 8011b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ba2:	bf00      	nop
 8011ba4:	08011bbd 	.word	0x08011bbd
 8011ba8:	08011bf1 	.word	0x08011bf1
 8011bac:	08011c25 	.word	0x08011c25
 8011bb0:	08011c59 	.word	0x08011c59
 8011bb4:	08011c8d 	.word	0x08011c8d
 8011bb8:	08011cc1 	.word	0x08011cc1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d00b      	beq.n	8011be0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bce:	685b      	ldr	r3, [r3, #4]
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	7c12      	ldrb	r2, [r2, #16]
 8011bd4:	f107 0108 	add.w	r1, r7, #8
 8011bd8:	4610      	mov	r0, r2
 8011bda:	4798      	blx	r3
 8011bdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011bde:	e091      	b.n	8011d04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011be0:	6839      	ldr	r1, [r7, #0]
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f000 faaa 	bl	801213c <USBD_CtlError>
        err++;
 8011be8:	7afb      	ldrb	r3, [r7, #11]
 8011bea:	3301      	adds	r3, #1
 8011bec:	72fb      	strb	r3, [r7, #11]
      break;
 8011bee:	e089      	b.n	8011d04 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bf6:	689b      	ldr	r3, [r3, #8]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d00b      	beq.n	8011c14 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c02:	689b      	ldr	r3, [r3, #8]
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	7c12      	ldrb	r2, [r2, #16]
 8011c08:	f107 0108 	add.w	r1, r7, #8
 8011c0c:	4610      	mov	r0, r2
 8011c0e:	4798      	blx	r3
 8011c10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c12:	e077      	b.n	8011d04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011c14:	6839      	ldr	r1, [r7, #0]
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f000 fa90 	bl	801213c <USBD_CtlError>
        err++;
 8011c1c:	7afb      	ldrb	r3, [r7, #11]
 8011c1e:	3301      	adds	r3, #1
 8011c20:	72fb      	strb	r3, [r7, #11]
      break;
 8011c22:	e06f      	b.n	8011d04 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d00b      	beq.n	8011c48 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	687a      	ldr	r2, [r7, #4]
 8011c3a:	7c12      	ldrb	r2, [r2, #16]
 8011c3c:	f107 0108 	add.w	r1, r7, #8
 8011c40:	4610      	mov	r0, r2
 8011c42:	4798      	blx	r3
 8011c44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c46:	e05d      	b.n	8011d04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011c48:	6839      	ldr	r1, [r7, #0]
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f000 fa76 	bl	801213c <USBD_CtlError>
        err++;
 8011c50:	7afb      	ldrb	r3, [r7, #11]
 8011c52:	3301      	adds	r3, #1
 8011c54:	72fb      	strb	r3, [r7, #11]
      break;
 8011c56:	e055      	b.n	8011d04 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c5e:	691b      	ldr	r3, [r3, #16]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d00b      	beq.n	8011c7c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c6a:	691b      	ldr	r3, [r3, #16]
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	7c12      	ldrb	r2, [r2, #16]
 8011c70:	f107 0108 	add.w	r1, r7, #8
 8011c74:	4610      	mov	r0, r2
 8011c76:	4798      	blx	r3
 8011c78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c7a:	e043      	b.n	8011d04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011c7c:	6839      	ldr	r1, [r7, #0]
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f000 fa5c 	bl	801213c <USBD_CtlError>
        err++;
 8011c84:	7afb      	ldrb	r3, [r7, #11]
 8011c86:	3301      	adds	r3, #1
 8011c88:	72fb      	strb	r3, [r7, #11]
      break;
 8011c8a:	e03b      	b.n	8011d04 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c92:	695b      	ldr	r3, [r3, #20]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d00b      	beq.n	8011cb0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c9e:	695b      	ldr	r3, [r3, #20]
 8011ca0:	687a      	ldr	r2, [r7, #4]
 8011ca2:	7c12      	ldrb	r2, [r2, #16]
 8011ca4:	f107 0108 	add.w	r1, r7, #8
 8011ca8:	4610      	mov	r0, r2
 8011caa:	4798      	blx	r3
 8011cac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011cae:	e029      	b.n	8011d04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011cb0:	6839      	ldr	r1, [r7, #0]
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f000 fa42 	bl	801213c <USBD_CtlError>
        err++;
 8011cb8:	7afb      	ldrb	r3, [r7, #11]
 8011cba:	3301      	adds	r3, #1
 8011cbc:	72fb      	strb	r3, [r7, #11]
      break;
 8011cbe:	e021      	b.n	8011d04 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cc6:	699b      	ldr	r3, [r3, #24]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d00b      	beq.n	8011ce4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cd2:	699b      	ldr	r3, [r3, #24]
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	7c12      	ldrb	r2, [r2, #16]
 8011cd8:	f107 0108 	add.w	r1, r7, #8
 8011cdc:	4610      	mov	r0, r2
 8011cde:	4798      	blx	r3
 8011ce0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ce2:	e00f      	b.n	8011d04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011ce4:	6839      	ldr	r1, [r7, #0]
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f000 fa28 	bl	801213c <USBD_CtlError>
        err++;
 8011cec:	7afb      	ldrb	r3, [r7, #11]
 8011cee:	3301      	adds	r3, #1
 8011cf0:	72fb      	strb	r3, [r7, #11]
      break;
 8011cf2:	e007      	b.n	8011d04 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011cf4:	6839      	ldr	r1, [r7, #0]
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f000 fa20 	bl	801213c <USBD_CtlError>
      err++;
 8011cfc:	7afb      	ldrb	r3, [r7, #11]
 8011cfe:	3301      	adds	r3, #1
 8011d00:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011d02:	bf00      	nop
    }
    break;
 8011d04:	e037      	b.n	8011d76 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	7c1b      	ldrb	r3, [r3, #16]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d109      	bne.n	8011d22 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d16:	f107 0208 	add.w	r2, r7, #8
 8011d1a:	4610      	mov	r0, r2
 8011d1c:	4798      	blx	r3
 8011d1e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011d20:	e029      	b.n	8011d76 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011d22:	6839      	ldr	r1, [r7, #0]
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f000 fa09 	bl	801213c <USBD_CtlError>
      err++;
 8011d2a:	7afb      	ldrb	r3, [r7, #11]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	72fb      	strb	r3, [r7, #11]
    break;
 8011d30:	e021      	b.n	8011d76 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	7c1b      	ldrb	r3, [r3, #16]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d10d      	bne.n	8011d56 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d42:	f107 0208 	add.w	r2, r7, #8
 8011d46:	4610      	mov	r0, r2
 8011d48:	4798      	blx	r3
 8011d4a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	3301      	adds	r3, #1
 8011d50:	2207      	movs	r2, #7
 8011d52:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011d54:	e00f      	b.n	8011d76 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011d56:	6839      	ldr	r1, [r7, #0]
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f000 f9ef 	bl	801213c <USBD_CtlError>
      err++;
 8011d5e:	7afb      	ldrb	r3, [r7, #11]
 8011d60:	3301      	adds	r3, #1
 8011d62:	72fb      	strb	r3, [r7, #11]
    break;
 8011d64:	e007      	b.n	8011d76 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011d66:	6839      	ldr	r1, [r7, #0]
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f000 f9e7 	bl	801213c <USBD_CtlError>
    err++;
 8011d6e:	7afb      	ldrb	r3, [r7, #11]
 8011d70:	3301      	adds	r3, #1
 8011d72:	72fb      	strb	r3, [r7, #11]
    break;
 8011d74:	bf00      	nop
  }

  if (err != 0U)
 8011d76:	7afb      	ldrb	r3, [r7, #11]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d11e      	bne.n	8011dba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011d7c:	683b      	ldr	r3, [r7, #0]
 8011d7e:	88db      	ldrh	r3, [r3, #6]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d016      	beq.n	8011db2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011d84:	893b      	ldrh	r3, [r7, #8]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d00e      	beq.n	8011da8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	88da      	ldrh	r2, [r3, #6]
 8011d8e:	893b      	ldrh	r3, [r7, #8]
 8011d90:	4293      	cmp	r3, r2
 8011d92:	bf28      	it	cs
 8011d94:	4613      	movcs	r3, r2
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011d9a:	893b      	ldrh	r3, [r7, #8]
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	68f9      	ldr	r1, [r7, #12]
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f000 fa3c 	bl	801221e <USBD_CtlSendData>
 8011da6:	e009      	b.n	8011dbc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011da8:	6839      	ldr	r1, [r7, #0]
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f000 f9c6 	bl	801213c <USBD_CtlError>
 8011db0:	e004      	b.n	8011dbc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f000 fa8d 	bl	80122d2 <USBD_CtlSendStatus>
 8011db8:	e000      	b.n	8011dbc <USBD_GetDescriptor+0x2cc>
    return;
 8011dba:	bf00      	nop
    }
  }
}
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
 8011dc2:	bf00      	nop

08011dc4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	889b      	ldrh	r3, [r3, #4]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d130      	bne.n	8011e38 <USBD_SetAddress+0x74>
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	88db      	ldrh	r3, [r3, #6]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d12c      	bne.n	8011e38 <USBD_SetAddress+0x74>
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	885b      	ldrh	r3, [r3, #2]
 8011de2:	2b7f      	cmp	r3, #127	; 0x7f
 8011de4:	d828      	bhi.n	8011e38 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	885b      	ldrh	r3, [r3, #2]
 8011dea:	b2db      	uxtb	r3, r3
 8011dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011df0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011df8:	2b03      	cmp	r3, #3
 8011dfa:	d104      	bne.n	8011e06 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011dfc:	6839      	ldr	r1, [r7, #0]
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f000 f99c 	bl	801213c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e04:	e01c      	b.n	8011e40 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	7bfa      	ldrb	r2, [r7, #15]
 8011e0a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011e0e:	7bfb      	ldrb	r3, [r7, #15]
 8011e10:	4619      	mov	r1, r3
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f003 fd88 	bl	8015928 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f000 fa5a 	bl	80122d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011e1e:	7bfb      	ldrb	r3, [r7, #15]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d004      	beq.n	8011e2e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2202      	movs	r2, #2
 8011e28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e2c:	e008      	b.n	8011e40 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	2201      	movs	r2, #1
 8011e32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e36:	e003      	b.n	8011e40 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011e38:	6839      	ldr	r1, [r7, #0]
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 f97e 	bl	801213c <USBD_CtlError>
  }
}
 8011e40:	bf00      	nop
 8011e42:	3710      	adds	r7, #16
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e52:	2300      	movs	r3, #0
 8011e54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	885b      	ldrh	r3, [r3, #2]
 8011e5a:	b2da      	uxtb	r2, r3
 8011e5c:	4b4b      	ldr	r3, [pc, #300]	; (8011f8c <USBD_SetConfig+0x144>)
 8011e5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011e60:	4b4a      	ldr	r3, [pc, #296]	; (8011f8c <USBD_SetConfig+0x144>)
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	d905      	bls.n	8011e74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011e68:	6839      	ldr	r1, [r7, #0]
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 f966 	bl	801213c <USBD_CtlError>
    return USBD_FAIL;
 8011e70:	2303      	movs	r3, #3
 8011e72:	e087      	b.n	8011f84 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e7a:	2b02      	cmp	r3, #2
 8011e7c:	d002      	beq.n	8011e84 <USBD_SetConfig+0x3c>
 8011e7e:	2b03      	cmp	r3, #3
 8011e80:	d025      	beq.n	8011ece <USBD_SetConfig+0x86>
 8011e82:	e071      	b.n	8011f68 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8011e84:	4b41      	ldr	r3, [pc, #260]	; (8011f8c <USBD_SetConfig+0x144>)
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d01c      	beq.n	8011ec6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8011e8c:	4b3f      	ldr	r3, [pc, #252]	; (8011f8c <USBD_SetConfig+0x144>)
 8011e8e:	781b      	ldrb	r3, [r3, #0]
 8011e90:	461a      	mov	r2, r3
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e96:	4b3d      	ldr	r3, [pc, #244]	; (8011f8c <USBD_SetConfig+0x144>)
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f7ff f9a7 	bl	80111f0 <USBD_SetClassConfig>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011ea6:	7bfb      	ldrb	r3, [r7, #15]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d004      	beq.n	8011eb6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8011eac:	6839      	ldr	r1, [r7, #0]
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f000 f944 	bl	801213c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011eb4:	e065      	b.n	8011f82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f000 fa0b 	bl	80122d2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2203      	movs	r2, #3
 8011ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011ec4:	e05d      	b.n	8011f82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f000 fa03 	bl	80122d2 <USBD_CtlSendStatus>
    break;
 8011ecc:	e059      	b.n	8011f82 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8011ece:	4b2f      	ldr	r3, [pc, #188]	; (8011f8c <USBD_SetConfig+0x144>)
 8011ed0:	781b      	ldrb	r3, [r3, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d112      	bne.n	8011efc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2202      	movs	r2, #2
 8011eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8011ede:	4b2b      	ldr	r3, [pc, #172]	; (8011f8c <USBD_SetConfig+0x144>)
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011ee8:	4b28      	ldr	r3, [pc, #160]	; (8011f8c <USBD_SetConfig+0x144>)
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	4619      	mov	r1, r3
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f7ff f99a 	bl	8011228 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f000 f9ec 	bl	80122d2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011efa:	e042      	b.n	8011f82 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8011efc:	4b23      	ldr	r3, [pc, #140]	; (8011f8c <USBD_SetConfig+0x144>)
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	461a      	mov	r2, r3
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d02a      	beq.n	8011f60 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	4619      	mov	r1, r3
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f7ff f988 	bl	8011228 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8011f18:	4b1c      	ldr	r3, [pc, #112]	; (8011f8c <USBD_SetConfig+0x144>)
 8011f1a:	781b      	ldrb	r3, [r3, #0]
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011f22:	4b1a      	ldr	r3, [pc, #104]	; (8011f8c <USBD_SetConfig+0x144>)
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	4619      	mov	r1, r3
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f7ff f961 	bl	80111f0 <USBD_SetClassConfig>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011f32:	7bfb      	ldrb	r3, [r7, #15]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00f      	beq.n	8011f58 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8011f38:	6839      	ldr	r1, [r7, #0]
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 f8fe 	bl	801213c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	b2db      	uxtb	r3, r3
 8011f46:	4619      	mov	r1, r3
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f7ff f96d 	bl	8011228 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2202      	movs	r2, #2
 8011f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011f56:	e014      	b.n	8011f82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f000 f9ba 	bl	80122d2 <USBD_CtlSendStatus>
    break;
 8011f5e:	e010      	b.n	8011f82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f000 f9b6 	bl	80122d2 <USBD_CtlSendStatus>
    break;
 8011f66:	e00c      	b.n	8011f82 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8011f68:	6839      	ldr	r1, [r7, #0]
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 f8e6 	bl	801213c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011f70:	4b06      	ldr	r3, [pc, #24]	; (8011f8c <USBD_SetConfig+0x144>)
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	4619      	mov	r1, r3
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f7ff f956 	bl	8011228 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8011f7c:	2303      	movs	r3, #3
 8011f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8011f80:	bf00      	nop
  }

  return ret;
 8011f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3710      	adds	r7, #16
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}
 8011f8c:	20001008 	.word	0x20001008

08011f90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	88db      	ldrh	r3, [r3, #6]
 8011f9e:	2b01      	cmp	r3, #1
 8011fa0:	d004      	beq.n	8011fac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011fa2:	6839      	ldr	r1, [r7, #0]
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f000 f8c9 	bl	801213c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8011faa:	e021      	b.n	8011ff0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fb2:	2b01      	cmp	r3, #1
 8011fb4:	db17      	blt.n	8011fe6 <USBD_GetConfig+0x56>
 8011fb6:	2b02      	cmp	r3, #2
 8011fb8:	dd02      	ble.n	8011fc0 <USBD_GetConfig+0x30>
 8011fba:	2b03      	cmp	r3, #3
 8011fbc:	d00b      	beq.n	8011fd6 <USBD_GetConfig+0x46>
 8011fbe:	e012      	b.n	8011fe6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	3308      	adds	r3, #8
 8011fca:	2201      	movs	r2, #1
 8011fcc:	4619      	mov	r1, r3
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f000 f925 	bl	801221e <USBD_CtlSendData>
      break;
 8011fd4:	e00c      	b.n	8011ff0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	3304      	adds	r3, #4
 8011fda:	2201      	movs	r2, #1
 8011fdc:	4619      	mov	r1, r3
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f000 f91d 	bl	801221e <USBD_CtlSendData>
      break;
 8011fe4:	e004      	b.n	8011ff0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8011fe6:	6839      	ldr	r1, [r7, #0]
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f000 f8a7 	bl	801213c <USBD_CtlError>
      break;
 8011fee:	bf00      	nop
}
 8011ff0:	bf00      	nop
 8011ff2:	3708      	adds	r7, #8
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}

08011ff8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012008:	3b01      	subs	r3, #1
 801200a:	2b02      	cmp	r3, #2
 801200c:	d81e      	bhi.n	801204c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	88db      	ldrh	r3, [r3, #6]
 8012012:	2b02      	cmp	r3, #2
 8012014:	d004      	beq.n	8012020 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8012016:	6839      	ldr	r1, [r7, #0]
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 f88f 	bl	801213c <USBD_CtlError>
      break;
 801201e:	e01a      	b.n	8012056 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2201      	movs	r2, #1
 8012024:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801202c:	2b00      	cmp	r3, #0
 801202e:	d005      	beq.n	801203c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	68db      	ldr	r3, [r3, #12]
 8012034:	f043 0202 	orr.w	r2, r3, #2
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	330c      	adds	r3, #12
 8012040:	2202      	movs	r2, #2
 8012042:	4619      	mov	r1, r3
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f000 f8ea 	bl	801221e <USBD_CtlSendData>
    break;
 801204a:	e004      	b.n	8012056 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801204c:	6839      	ldr	r1, [r7, #0]
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 f874 	bl	801213c <USBD_CtlError>
    break;
 8012054:	bf00      	nop
  }
}
 8012056:	bf00      	nop
 8012058:	3708      	adds	r7, #8
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}

0801205e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801205e:	b580      	push	{r7, lr}
 8012060:	b082      	sub	sp, #8
 8012062:	af00      	add	r7, sp, #0
 8012064:	6078      	str	r0, [r7, #4]
 8012066:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	885b      	ldrh	r3, [r3, #2]
 801206c:	2b01      	cmp	r3, #1
 801206e:	d106      	bne.n	801207e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2201      	movs	r2, #1
 8012074:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f000 f92a 	bl	80122d2 <USBD_CtlSendStatus>
  }
}
 801207e:	bf00      	nop
 8012080:	3708      	adds	r7, #8
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}

08012086 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012086:	b580      	push	{r7, lr}
 8012088:	b082      	sub	sp, #8
 801208a:	af00      	add	r7, sp, #0
 801208c:	6078      	str	r0, [r7, #4]
 801208e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012096:	3b01      	subs	r3, #1
 8012098:	2b02      	cmp	r3, #2
 801209a:	d80b      	bhi.n	80120b4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	885b      	ldrh	r3, [r3, #2]
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	d10c      	bne.n	80120be <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2200      	movs	r2, #0
 80120a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 f910 	bl	80122d2 <USBD_CtlSendStatus>
      }
      break;
 80120b2:	e004      	b.n	80120be <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80120b4:	6839      	ldr	r1, [r7, #0]
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f000 f840 	bl	801213c <USBD_CtlError>
      break;
 80120bc:	e000      	b.n	80120c0 <USBD_ClrFeature+0x3a>
      break;
 80120be:	bf00      	nop
  }
}
 80120c0:	bf00      	nop
 80120c2:	3708      	adds	r7, #8
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b084      	sub	sp, #16
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	781a      	ldrb	r2, [r3, #0]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	3301      	adds	r3, #1
 80120e2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	781a      	ldrb	r2, [r3, #0]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	3301      	adds	r3, #1
 80120f0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f7ff fad3 	bl	801169e <SWAPBYTE>
 80120f8:	4603      	mov	r3, r0
 80120fa:	461a      	mov	r2, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	3301      	adds	r3, #1
 8012104:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	3301      	adds	r3, #1
 801210a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801210c:	68f8      	ldr	r0, [r7, #12]
 801210e:	f7ff fac6 	bl	801169e <SWAPBYTE>
 8012112:	4603      	mov	r3, r0
 8012114:	461a      	mov	r2, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	3301      	adds	r3, #1
 801211e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	3301      	adds	r3, #1
 8012124:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012126:	68f8      	ldr	r0, [r7, #12]
 8012128:	f7ff fab9 	bl	801169e <SWAPBYTE>
 801212c:	4603      	mov	r3, r0
 801212e:	461a      	mov	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	80da      	strh	r2, [r3, #6]
}
 8012134:	bf00      	nop
 8012136:	3710      	adds	r7, #16
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}

0801213c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012146:	2180      	movs	r1, #128	; 0x80
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f003 fb83 	bl	8015854 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801214e:	2100      	movs	r1, #0
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f003 fb7f 	bl	8015854 <USBD_LL_StallEP>
}
 8012156:	bf00      	nop
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801215e:	b580      	push	{r7, lr}
 8012160:	b086      	sub	sp, #24
 8012162:	af00      	add	r7, sp, #0
 8012164:	60f8      	str	r0, [r7, #12]
 8012166:	60b9      	str	r1, [r7, #8]
 8012168:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801216a:	2300      	movs	r3, #0
 801216c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d036      	beq.n	80121e2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012178:	6938      	ldr	r0, [r7, #16]
 801217a:	f000 f836 	bl	80121ea <USBD_GetLen>
 801217e:	4603      	mov	r3, r0
 8012180:	3301      	adds	r3, #1
 8012182:	b29b      	uxth	r3, r3
 8012184:	005b      	lsls	r3, r3, #1
 8012186:	b29a      	uxth	r2, r3
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801218c:	7dfb      	ldrb	r3, [r7, #23]
 801218e:	68ba      	ldr	r2, [r7, #8]
 8012190:	4413      	add	r3, r2
 8012192:	687a      	ldr	r2, [r7, #4]
 8012194:	7812      	ldrb	r2, [r2, #0]
 8012196:	701a      	strb	r2, [r3, #0]
  idx++;
 8012198:	7dfb      	ldrb	r3, [r7, #23]
 801219a:	3301      	adds	r3, #1
 801219c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801219e:	7dfb      	ldrb	r3, [r7, #23]
 80121a0:	68ba      	ldr	r2, [r7, #8]
 80121a2:	4413      	add	r3, r2
 80121a4:	2203      	movs	r2, #3
 80121a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80121a8:	7dfb      	ldrb	r3, [r7, #23]
 80121aa:	3301      	adds	r3, #1
 80121ac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80121ae:	e013      	b.n	80121d8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80121b0:	7dfb      	ldrb	r3, [r7, #23]
 80121b2:	68ba      	ldr	r2, [r7, #8]
 80121b4:	4413      	add	r3, r2
 80121b6:	693a      	ldr	r2, [r7, #16]
 80121b8:	7812      	ldrb	r2, [r2, #0]
 80121ba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	3301      	adds	r3, #1
 80121c0:	613b      	str	r3, [r7, #16]
    idx++;
 80121c2:	7dfb      	ldrb	r3, [r7, #23]
 80121c4:	3301      	adds	r3, #1
 80121c6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80121c8:	7dfb      	ldrb	r3, [r7, #23]
 80121ca:	68ba      	ldr	r2, [r7, #8]
 80121cc:	4413      	add	r3, r2
 80121ce:	2200      	movs	r2, #0
 80121d0:	701a      	strb	r2, [r3, #0]
    idx++;
 80121d2:	7dfb      	ldrb	r3, [r7, #23]
 80121d4:	3301      	adds	r3, #1
 80121d6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	781b      	ldrb	r3, [r3, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d1e7      	bne.n	80121b0 <USBD_GetString+0x52>
 80121e0:	e000      	b.n	80121e4 <USBD_GetString+0x86>
    return;
 80121e2:	bf00      	nop
  }
}
 80121e4:	3718      	adds	r7, #24
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80121ea:	b480      	push	{r7}
 80121ec:	b085      	sub	sp, #20
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80121f2:	2300      	movs	r3, #0
 80121f4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80121fa:	e005      	b.n	8012208 <USBD_GetLen+0x1e>
  {
    len++;
 80121fc:	7bfb      	ldrb	r3, [r7, #15]
 80121fe:	3301      	adds	r3, #1
 8012200:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	3301      	adds	r3, #1
 8012206:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	781b      	ldrb	r3, [r3, #0]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d1f5      	bne.n	80121fc <USBD_GetLen+0x12>
  }

  return len;
 8012210:	7bfb      	ldrb	r3, [r7, #15]
}
 8012212:	4618      	mov	r0, r3
 8012214:	3714      	adds	r7, #20
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr

0801221e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801221e:	b580      	push	{r7, lr}
 8012220:	b084      	sub	sp, #16
 8012222:	af00      	add	r7, sp, #0
 8012224:	60f8      	str	r0, [r7, #12]
 8012226:	60b9      	str	r1, [r7, #8]
 8012228:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2202      	movs	r2, #2
 801222e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	687a      	ldr	r2, [r7, #4]
 801223c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	68ba      	ldr	r2, [r7, #8]
 8012242:	2100      	movs	r1, #0
 8012244:	68f8      	ldr	r0, [r7, #12]
 8012246:	f003 fb8e 	bl	8015966 <USBD_LL_Transmit>

  return USBD_OK;
 801224a:	2300      	movs	r3, #0
}
 801224c:	4618      	mov	r0, r3
 801224e:	3710      	adds	r7, #16
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}

08012254 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b084      	sub	sp, #16
 8012258:	af00      	add	r7, sp, #0
 801225a:	60f8      	str	r0, [r7, #12]
 801225c:	60b9      	str	r1, [r7, #8]
 801225e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	68ba      	ldr	r2, [r7, #8]
 8012264:	2100      	movs	r1, #0
 8012266:	68f8      	ldr	r0, [r7, #12]
 8012268:	f003 fb7d 	bl	8015966 <USBD_LL_Transmit>

  return USBD_OK;
 801226c:	2300      	movs	r3, #0
}
 801226e:	4618      	mov	r0, r3
 8012270:	3710      	adds	r7, #16
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}

08012276 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012276:	b580      	push	{r7, lr}
 8012278:	b084      	sub	sp, #16
 801227a:	af00      	add	r7, sp, #0
 801227c:	60f8      	str	r0, [r7, #12]
 801227e:	60b9      	str	r1, [r7, #8]
 8012280:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2203      	movs	r2, #3
 8012286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	687a      	ldr	r2, [r7, #4]
 8012296:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	68ba      	ldr	r2, [r7, #8]
 801229e:	2100      	movs	r1, #0
 80122a0:	68f8      	ldr	r0, [r7, #12]
 80122a2:	f003 fb81 	bl	80159a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80122a6:	2300      	movs	r3, #0
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3710      	adds	r7, #16
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b084      	sub	sp, #16
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	60f8      	str	r0, [r7, #12]
 80122b8:	60b9      	str	r1, [r7, #8]
 80122ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	68ba      	ldr	r2, [r7, #8]
 80122c0:	2100      	movs	r1, #0
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	f003 fb70 	bl	80159a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80122c8:	2300      	movs	r3, #0
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	3710      	adds	r7, #16
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}

080122d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80122d2:	b580      	push	{r7, lr}
 80122d4:	b082      	sub	sp, #8
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2204      	movs	r2, #4
 80122de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80122e2:	2300      	movs	r3, #0
 80122e4:	2200      	movs	r2, #0
 80122e6:	2100      	movs	r1, #0
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f003 fb3c 	bl	8015966 <USBD_LL_Transmit>

  return USBD_OK;
 80122ee:	2300      	movs	r3, #0
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3708      	adds	r7, #8
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}

080122f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2205      	movs	r2, #5
 8012304:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012308:	2300      	movs	r3, #0
 801230a:	2200      	movs	r2, #0
 801230c:	2100      	movs	r1, #0
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f003 fb4a 	bl	80159a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012314:	2300      	movs	r3, #0
}
 8012316:	4618      	mov	r0, r3
 8012318:	3708      	adds	r7, #8
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}

0801231e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801231e:	b480      	push	{r7}
 8012320:	b085      	sub	sp, #20
 8012322:	af00      	add	r7, sp, #0
 8012324:	4603      	mov	r3, r0
 8012326:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012328:	2300      	movs	r3, #0
 801232a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801232c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012330:	2b84      	cmp	r3, #132	; 0x84
 8012332:	d005      	beq.n	8012340 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012334:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	4413      	add	r3, r2
 801233c:	3303      	adds	r3, #3
 801233e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012340:	68fb      	ldr	r3, [r7, #12]
}
 8012342:	4618      	mov	r0, r3
 8012344:	3714      	adds	r7, #20
 8012346:	46bd      	mov	sp, r7
 8012348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234c:	4770      	bx	lr

0801234e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801234e:	b480      	push	{r7}
 8012350:	b083      	sub	sp, #12
 8012352:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012354:	f3ef 8305 	mrs	r3, IPSR
 8012358:	607b      	str	r3, [r7, #4]
  return(result);
 801235a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801235c:	2b00      	cmp	r3, #0
 801235e:	bf14      	ite	ne
 8012360:	2301      	movne	r3, #1
 8012362:	2300      	moveq	r3, #0
 8012364:	b2db      	uxtb	r3, r3
}
 8012366:	4618      	mov	r0, r3
 8012368:	370c      	adds	r7, #12
 801236a:	46bd      	mov	sp, r7
 801236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012370:	4770      	bx	lr

08012372 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012372:	b580      	push	{r7, lr}
 8012374:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012376:	f001 fb31 	bl	80139dc <vTaskStartScheduler>
  
  return osOK;
 801237a:	2300      	movs	r3, #0
}
 801237c:	4618      	mov	r0, r3
 801237e:	bd80      	pop	{r7, pc}

08012380 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012382:	b089      	sub	sp, #36	; 0x24
 8012384:	af04      	add	r7, sp, #16
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	695b      	ldr	r3, [r3, #20]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d020      	beq.n	80123d4 <osThreadCreate+0x54>
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	699b      	ldr	r3, [r3, #24]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d01c      	beq.n	80123d4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	685c      	ldr	r4, [r3, #4]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681d      	ldr	r5, [r3, #0]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	691e      	ldr	r6, [r3, #16]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80123ac:	4618      	mov	r0, r3
 80123ae:	f7ff ffb6 	bl	801231e <makeFreeRtosPriority>
 80123b2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	695b      	ldr	r3, [r3, #20]
 80123b8:	687a      	ldr	r2, [r7, #4]
 80123ba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80123bc:	9202      	str	r2, [sp, #8]
 80123be:	9301      	str	r3, [sp, #4]
 80123c0:	9100      	str	r1, [sp, #0]
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	4632      	mov	r2, r6
 80123c6:	4629      	mov	r1, r5
 80123c8:	4620      	mov	r0, r4
 80123ca:	f001 f944 	bl	8013656 <xTaskCreateStatic>
 80123ce:	4603      	mov	r3, r0
 80123d0:	60fb      	str	r3, [r7, #12]
 80123d2:	e01c      	b.n	801240e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	685c      	ldr	r4, [r3, #4]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80123e0:	b29e      	uxth	r6, r3
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7ff ff98 	bl	801231e <makeFreeRtosPriority>
 80123ee:	4602      	mov	r2, r0
 80123f0:	f107 030c 	add.w	r3, r7, #12
 80123f4:	9301      	str	r3, [sp, #4]
 80123f6:	9200      	str	r2, [sp, #0]
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	4632      	mov	r2, r6
 80123fc:	4629      	mov	r1, r5
 80123fe:	4620      	mov	r0, r4
 8012400:	f001 f983 	bl	801370a <xTaskCreate>
 8012404:	4603      	mov	r3, r0
 8012406:	2b01      	cmp	r3, #1
 8012408:	d001      	beq.n	801240e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801240a:	2300      	movs	r3, #0
 801240c:	e000      	b.n	8012410 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801240e:	68fb      	ldr	r3, [r7, #12]
}
 8012410:	4618      	mov	r0, r3
 8012412:	3714      	adds	r7, #20
 8012414:	46bd      	mov	sp, r7
 8012416:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012418 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b084      	sub	sp, #16
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d001      	beq.n	801242e <osDelay+0x16>
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	e000      	b.n	8012430 <osDelay+0x18>
 801242e:	2301      	movs	r3, #1
 8012430:	4618      	mov	r0, r3
 8012432:	f001 fa9f 	bl	8013974 <vTaskDelay>
  
  return osOK;
 8012436:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012438:	4618      	mov	r0, r3
 801243a:	3710      	adds	r7, #16
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b086      	sub	sp, #24
 8012444:	af02      	add	r7, sp, #8
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801244a:	2300      	movs	r3, #0
 801244c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 801244e:	2300      	movs	r3, #0
 8012450:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8012452:	f7ff ff7c 	bl	801234e <inHandlerMode>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	d01c      	beq.n	8012496 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 801245c:	6839      	ldr	r1, [r7, #0]
 801245e:	f107 0208 	add.w	r2, r7, #8
 8012462:	f107 030c 	add.w	r3, r7, #12
 8012466:	9300      	str	r3, [sp, #0]
 8012468:	4613      	mov	r3, r2
 801246a:	2201      	movs	r2, #1
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f002 f857 	bl	8014520 <xTaskGenericNotifyFromISR>
 8012472:	4603      	mov	r3, r0
 8012474:	2b01      	cmp	r3, #1
 8012476:	d002      	beq.n	801247e <osSignalSet+0x3e>
      return 0x80000000;
 8012478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801247c:	e019      	b.n	80124b2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d015      	beq.n	80124b0 <osSignalSet+0x70>
 8012484:	4b0d      	ldr	r3, [pc, #52]	; (80124bc <osSignalSet+0x7c>)
 8012486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801248a:	601a      	str	r2, [r3, #0]
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	f3bf 8f6f 	isb	sy
 8012494:	e00c      	b.n	80124b0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8012496:	6839      	ldr	r1, [r7, #0]
 8012498:	f107 0308 	add.w	r3, r7, #8
 801249c:	2201      	movs	r2, #1
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f001 ff8c 	bl	80143bc <xTaskGenericNotify>
 80124a4:	4603      	mov	r3, r0
 80124a6:	2b01      	cmp	r3, #1
 80124a8:	d002      	beq.n	80124b0 <osSignalSet+0x70>
    return 0x80000000;
 80124aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80124ae:	e000      	b.n	80124b2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80124b0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3710      	adds	r7, #16
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	e000ed04 	.word	0xe000ed04

080124c0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80124c0:	b590      	push	{r4, r7, lr}
 80124c2:	b089      	sub	sp, #36	; 0x24
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	60b9      	str	r1, [r7, #8]
 80124ca:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80124cc:	2300      	movs	r3, #0
 80124ce:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80124d0:	2300      	movs	r3, #0
 80124d2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124da:	d103      	bne.n	80124e4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80124dc:	f04f 33ff 	mov.w	r3, #4294967295
 80124e0:	61fb      	str	r3, [r7, #28]
 80124e2:	e009      	b.n	80124f8 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d006      	beq.n	80124f8 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d101      	bne.n	80124f8 <osSignalWait+0x38>
      ticks = 1;
 80124f4:	2301      	movs	r3, #1
 80124f6:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80124f8:	f7ff ff29 	bl	801234e <inHandlerMode>
 80124fc:	4603      	mov	r3, r0
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d002      	beq.n	8012508 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8012502:	2382      	movs	r3, #130	; 0x82
 8012504:	613b      	str	r3, [r7, #16]
 8012506:	e01b      	b.n	8012540 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8012508:	68b9      	ldr	r1, [r7, #8]
 801250a:	f107 0310 	add.w	r3, r7, #16
 801250e:	1d1a      	adds	r2, r3, #4
 8012510:	69fb      	ldr	r3, [r7, #28]
 8012512:	2000      	movs	r0, #0
 8012514:	f001 fef8 	bl	8014308 <xTaskNotifyWait>
 8012518:	4603      	mov	r3, r0
 801251a:	2b01      	cmp	r3, #1
 801251c:	d008      	beq.n	8012530 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d102      	bne.n	801252a <osSignalWait+0x6a>
 8012524:	2300      	movs	r3, #0
 8012526:	613b      	str	r3, [r7, #16]
 8012528:	e00a      	b.n	8012540 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 801252a:	2340      	movs	r3, #64	; 0x40
 801252c:	613b      	str	r3, [r7, #16]
 801252e:	e007      	b.n	8012540 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8012530:	697b      	ldr	r3, [r7, #20]
 8012532:	2b00      	cmp	r3, #0
 8012534:	da02      	bge.n	801253c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8012536:	2386      	movs	r3, #134	; 0x86
 8012538:	613b      	str	r3, [r7, #16]
 801253a:	e001      	b.n	8012540 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 801253c:	2308      	movs	r3, #8
 801253e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	461c      	mov	r4, r3
 8012544:	f107 0310 	add.w	r3, r7, #16
 8012548:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801254c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012550:	68f8      	ldr	r0, [r7, #12]
 8012552:	3724      	adds	r7, #36	; 0x24
 8012554:	46bd      	mov	sp, r7
 8012556:	bd90      	pop	{r4, r7, pc}

08012558 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b082      	sub	sp, #8
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d007      	beq.n	8012578 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	4619      	mov	r1, r3
 801256e:	2001      	movs	r0, #1
 8012570:	f000 fc5f 	bl	8012e32 <xQueueCreateMutexStatic>
 8012574:	4603      	mov	r3, r0
 8012576:	e003      	b.n	8012580 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012578:	2001      	movs	r0, #1
 801257a:	f000 fc42 	bl	8012e02 <xQueueCreateMutex>
 801257e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012580:	4618      	mov	r0, r3
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b086      	sub	sp, #24
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	3303      	adds	r3, #3
 8012596:	f023 0303 	bic.w	r3, r3, #3
 801259a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 801259c:	2014      	movs	r0, #20
 801259e:	f002 fb3f 	bl	8014c20 <pvPortMalloc>
 80125a2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d046      	beq.n	8012638 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80125b2:	68fa      	ldr	r2, [r7, #12]
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	2200      	movs	r2, #0
 80125bc:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	4618      	mov	r0, r3
 80125c4:	f002 fb2c 	bl	8014c20 <pvPortMalloc>
 80125c8:	4602      	mov	r2, r0
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d02b      	beq.n	801262e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	68fa      	ldr	r2, [r7, #12]
 80125dc:	fb02 f303 	mul.w	r3, r2, r3
 80125e0:	4618      	mov	r0, r3
 80125e2:	f002 fb1d 	bl	8014c20 <pvPortMalloc>
 80125e6:	4602      	mov	r2, r0
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d011      	beq.n	8012618 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80125f4:	2300      	movs	r3, #0
 80125f6:	613b      	str	r3, [r7, #16]
 80125f8:	e008      	b.n	801260c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	685a      	ldr	r2, [r3, #4]
 80125fe:	693b      	ldr	r3, [r7, #16]
 8012600:	4413      	add	r3, r2
 8012602:	2200      	movs	r2, #0
 8012604:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	3301      	adds	r3, #1
 801260a:	613b      	str	r3, [r7, #16]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	693a      	ldr	r2, [r7, #16]
 8012612:	429a      	cmp	r2, r3
 8012614:	d3f1      	bcc.n	80125fa <osPoolCreate+0x72>
 8012616:	e00f      	b.n	8012638 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	4618      	mov	r0, r3
 801261e:	f002 fbc1 	bl	8014da4 <vPortFree>
        vPortFree(thePool);
 8012622:	6978      	ldr	r0, [r7, #20]
 8012624:	f002 fbbe 	bl	8014da4 <vPortFree>
        thePool = NULL;
 8012628:	2300      	movs	r3, #0
 801262a:	617b      	str	r3, [r7, #20]
 801262c:	e004      	b.n	8012638 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 801262e:	6978      	ldr	r0, [r7, #20]
 8012630:	f002 fbb8 	bl	8014da4 <vPortFree>
      thePool = NULL;
 8012634:	2300      	movs	r3, #0
 8012636:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8012638:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 801263a:	4618      	mov	r0, r3
 801263c:	3718      	adds	r7, #24
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}

08012642 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8012642:	b580      	push	{r7, lr}
 8012644:	b08a      	sub	sp, #40	; 0x28
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 801264a:	2300      	movs	r3, #0
 801264c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 801264e:	2300      	movs	r3, #0
 8012650:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8012652:	f7ff fe7c 	bl	801234e <inHandlerMode>
 8012656:	4603      	mov	r3, r0
 8012658:	2b00      	cmp	r3, #0
 801265a:	d00e      	beq.n	801267a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801265c:	f3ef 8211 	mrs	r2, BASEPRI
 8012660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012664:	f383 8811 	msr	BASEPRI, r3
 8012668:	f3bf 8f6f 	isb	sy
 801266c:	f3bf 8f4f 	dsb	sy
 8012670:	617a      	str	r2, [r7, #20]
 8012672:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012674:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012676:	627b      	str	r3, [r7, #36]	; 0x24
 8012678:	e001      	b.n	801267e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 801267a:	f002 f9b7 	bl	80149ec <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 801267e:	2300      	movs	r3, #0
 8012680:	61fb      	str	r3, [r7, #28]
 8012682:	e029      	b.n	80126d8 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	691a      	ldr	r2, [r3, #16]
 8012688:	69fb      	ldr	r3, [r7, #28]
 801268a:	4413      	add	r3, r2
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	6892      	ldr	r2, [r2, #8]
 8012690:	fbb3 f1f2 	udiv	r1, r3, r2
 8012694:	fb02 f201 	mul.w	r2, r2, r1
 8012698:	1a9b      	subs	r3, r3, r2
 801269a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	685a      	ldr	r2, [r3, #4]
 80126a0:	69bb      	ldr	r3, [r7, #24]
 80126a2:	4413      	add	r3, r2
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d113      	bne.n	80126d2 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	685a      	ldr	r2, [r3, #4]
 80126ae:	69bb      	ldr	r3, [r7, #24]
 80126b0:	4413      	add	r3, r2
 80126b2:	2201      	movs	r2, #1
 80126b4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	4619      	mov	r1, r3
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	69ba      	ldr	r2, [r7, #24]
 80126c2:	fb02 f303 	mul.w	r3, r2, r3
 80126c6:	440b      	add	r3, r1
 80126c8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	69ba      	ldr	r2, [r7, #24]
 80126ce:	611a      	str	r2, [r3, #16]
      break;
 80126d0:	e007      	b.n	80126e2 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80126d2:	69fb      	ldr	r3, [r7, #28]
 80126d4:	3301      	adds	r3, #1
 80126d6:	61fb      	str	r3, [r7, #28]
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	689b      	ldr	r3, [r3, #8]
 80126dc:	69fa      	ldr	r2, [r7, #28]
 80126de:	429a      	cmp	r2, r3
 80126e0:	d3d0      	bcc.n	8012684 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80126e2:	f7ff fe34 	bl	801234e <inHandlerMode>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d005      	beq.n	80126f8 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80126ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ee:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	f383 8811 	msr	BASEPRI, r3
 80126f6:	e001      	b.n	80126fc <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80126f8:	f002 f9a6 	bl	8014a48 <vPortExitCritical>
  }
  
  return p;
 80126fc:	6a3b      	ldr	r3, [r7, #32]
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3728      	adds	r7, #40	; 0x28
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}

08012706 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012706:	b480      	push	{r7}
 8012708:	b085      	sub	sp, #20
 801270a:	af00      	add	r7, sp, #0
 801270c:	6078      	str	r0, [r7, #4]
 801270e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d101      	bne.n	801271a <osPoolFree+0x14>
    return osErrorParameter;
 8012716:	2380      	movs	r3, #128	; 0x80
 8012718:	e030      	b.n	801277c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d101      	bne.n	8012724 <osPoolFree+0x1e>
    return osErrorParameter;
 8012720:	2380      	movs	r3, #128	; 0x80
 8012722:	e02b      	b.n	801277c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	683a      	ldr	r2, [r7, #0]
 801272a:	429a      	cmp	r2, r3
 801272c:	d201      	bcs.n	8012732 <osPoolFree+0x2c>
    return osErrorParameter;
 801272e:	2380      	movs	r3, #128	; 0x80
 8012730:	e024      	b.n	801277c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	6812      	ldr	r2, [r2, #0]
 8012738:	1a9b      	subs	r3, r3, r2
 801273a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	68da      	ldr	r2, [r3, #12]
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	fbb3 f1f2 	udiv	r1, r3, r2
 8012746:	fb02 f201 	mul.w	r2, r2, r1
 801274a:	1a9b      	subs	r3, r3, r2
 801274c:	2b00      	cmp	r3, #0
 801274e:	d001      	beq.n	8012754 <osPoolFree+0x4e>
    return osErrorParameter;
 8012750:	2380      	movs	r3, #128	; 0x80
 8012752:	e013      	b.n	801277c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	68db      	ldr	r3, [r3, #12]
 8012758:	68fa      	ldr	r2, [r7, #12]
 801275a:	fbb2 f3f3 	udiv	r3, r2, r3
 801275e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	689b      	ldr	r3, [r3, #8]
 8012764:	68fa      	ldr	r2, [r7, #12]
 8012766:	429a      	cmp	r2, r3
 8012768:	d301      	bcc.n	801276e <osPoolFree+0x68>
    return osErrorParameter;
 801276a:	2380      	movs	r3, #128	; 0x80
 801276c:	e006      	b.n	801277c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	685a      	ldr	r2, [r3, #4]
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	4413      	add	r3, r2
 8012776:	2200      	movs	r2, #0
 8012778:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 801277a:	2300      	movs	r3, #0
}
 801277c:	4618      	mov	r0, r3
 801277e:	3714      	adds	r7, #20
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr

08012788 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012788:	b590      	push	{r4, r7, lr}
 801278a:	b087      	sub	sp, #28
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
 8012790:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	60fb      	str	r3, [r7, #12]
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	685b      	ldr	r3, [r3, #4]
 801279c:	613b      	str	r3, [r7, #16]
 801279e:	2300      	movs	r3, #0
 80127a0:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	689c      	ldr	r4, [r3, #8]
 80127a6:	200c      	movs	r0, #12
 80127a8:	f002 fa3a 	bl	8014c20 <pvPortMalloc>
 80127ac:	4603      	mov	r3, r0
 80127ae:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	689b      	ldr	r3, [r3, #8]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d101      	bne.n	80127be <osMailCreate+0x36>
    return NULL;
 80127ba:	2300      	movs	r3, #0
 80127bc:	e038      	b.n	8012830 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	689b      	ldr	r3, [r3, #8]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6818      	ldr	r0, [r3, #0]
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	681c      	ldr	r4, [r3, #0]
 80127d2:	2200      	movs	r2, #0
 80127d4:	2104      	movs	r1, #4
 80127d6:	f000 fa9c 	bl	8012d12 <xQueueGenericCreate>
 80127da:	4603      	mov	r3, r0
 80127dc:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	689b      	ldr	r3, [r3, #8]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d107      	bne.n	80127fa <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	689b      	ldr	r3, [r3, #8]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4618      	mov	r0, r3
 80127f2:	f002 fad7 	bl	8014da4 <vPortFree>
    return NULL;
 80127f6:	2300      	movs	r3, #0
 80127f8:	e01a      	b.n	8012830 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	689b      	ldr	r3, [r3, #8]
 80127fe:	681c      	ldr	r4, [r3, #0]
 8012800:	f107 030c 	add.w	r3, r7, #12
 8012804:	4618      	mov	r0, r3
 8012806:	f7ff febf 	bl	8012588 <osPoolCreate>
 801280a:	4603      	mov	r3, r0
 801280c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	689b      	ldr	r3, [r3, #8]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	689b      	ldr	r3, [r3, #8]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d107      	bne.n	801282a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	689b      	ldr	r3, [r3, #8]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4618      	mov	r0, r3
 8012822:	f002 fabf 	bl	8014da4 <vPortFree>
    return NULL;
 8012826:	2300      	movs	r3, #0
 8012828:	e002      	b.n	8012830 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	689b      	ldr	r3, [r3, #8]
 801282e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012830:	4618      	mov	r0, r3
 8012832:	371c      	adds	r7, #28
 8012834:	46bd      	mov	sp, r7
 8012836:	bd90      	pop	{r4, r7, pc}

08012838 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b084      	sub	sp, #16
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d101      	bne.n	801284c <osMailAlloc+0x14>
    return NULL;
 8012848:	2300      	movs	r3, #0
 801284a:	e006      	b.n	801285a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	689b      	ldr	r3, [r3, #8]
 8012850:	4618      	mov	r0, r3
 8012852:	f7ff fef6 	bl	8012642 <osPoolAlloc>
 8012856:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012858:	68fb      	ldr	r3, [r7, #12]
}
 801285a:	4618      	mov	r0, r3
 801285c:	3710      	adds	r7, #16
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
	...

08012864 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d101      	bne.n	8012878 <osMailPut+0x14>
    return osErrorParameter;
 8012874:	2380      	movs	r3, #128	; 0x80
 8012876:	e02c      	b.n	80128d2 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012878:	2300      	movs	r3, #0
 801287a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 801287c:	f7ff fd67 	bl	801234e <inHandlerMode>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d018      	beq.n	80128b8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6858      	ldr	r0, [r3, #4]
 801288a:	f107 020c 	add.w	r2, r7, #12
 801288e:	4639      	mov	r1, r7
 8012890:	2300      	movs	r3, #0
 8012892:	f000 fbe3 	bl	801305c <xQueueGenericSendFromISR>
 8012896:	4603      	mov	r3, r0
 8012898:	2b01      	cmp	r3, #1
 801289a:	d001      	beq.n	80128a0 <osMailPut+0x3c>
      return osErrorOS;
 801289c:	23ff      	movs	r3, #255	; 0xff
 801289e:	e018      	b.n	80128d2 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d014      	beq.n	80128d0 <osMailPut+0x6c>
 80128a6:	4b0d      	ldr	r3, [pc, #52]	; (80128dc <osMailPut+0x78>)
 80128a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128ac:	601a      	str	r2, [r3, #0]
 80128ae:	f3bf 8f4f 	dsb	sy
 80128b2:	f3bf 8f6f 	isb	sy
 80128b6:	e00b      	b.n	80128d0 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6858      	ldr	r0, [r3, #4]
 80128bc:	4639      	mov	r1, r7
 80128be:	2300      	movs	r3, #0
 80128c0:	2200      	movs	r2, #0
 80128c2:	f000 fad1 	bl	8012e68 <xQueueGenericSend>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d001      	beq.n	80128d0 <osMailPut+0x6c>
      return osErrorOS;
 80128cc:	23ff      	movs	r3, #255	; 0xff
 80128ce:	e000      	b.n	80128d2 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80128d0:	2300      	movs	r3, #0
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3710      	adds	r7, #16
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}
 80128da:	bf00      	nop
 80128dc:	e000ed04 	.word	0xe000ed04

080128e0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80128e0:	b590      	push	{r4, r7, lr}
 80128e2:	b08b      	sub	sp, #44	; 0x2c
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	60f8      	str	r0, [r7, #12]
 80128e8:	60b9      	str	r1, [r7, #8]
 80128ea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d10a      	bne.n	801290c <osMailGet+0x2c>
    event.status = osErrorParameter;
 80128f6:	2380      	movs	r3, #128	; 0x80
 80128f8:	617b      	str	r3, [r7, #20]
    return event;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	461c      	mov	r4, r3
 80128fe:	f107 0314 	add.w	r3, r7, #20
 8012902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801290a:	e056      	b.n	80129ba <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801290c:	2300      	movs	r3, #0
 801290e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012910:	2300      	movs	r3, #0
 8012912:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801291a:	d103      	bne.n	8012924 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 801291c:	f04f 33ff 	mov.w	r3, #4294967295
 8012920:	627b      	str	r3, [r7, #36]	; 0x24
 8012922:	e009      	b.n	8012938 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d006      	beq.n	8012938 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012930:	2b00      	cmp	r3, #0
 8012932:	d101      	bne.n	8012938 <osMailGet+0x58>
      ticks = 1;
 8012934:	2301      	movs	r3, #1
 8012936:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012938:	f7ff fd09 	bl	801234e <inHandlerMode>
 801293c:	4603      	mov	r3, r0
 801293e:	2b00      	cmp	r3, #0
 8012940:	d01d      	beq.n	801297e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	6858      	ldr	r0, [r3, #4]
 8012946:	f107 0220 	add.w	r2, r7, #32
 801294a:	f107 0314 	add.w	r3, r7, #20
 801294e:	3304      	adds	r3, #4
 8012950:	4619      	mov	r1, r3
 8012952:	f000 fcf3 	bl	801333c <xQueueReceiveFromISR>
 8012956:	4603      	mov	r3, r0
 8012958:	2b01      	cmp	r3, #1
 801295a:	d102      	bne.n	8012962 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 801295c:	2320      	movs	r3, #32
 801295e:	617b      	str	r3, [r7, #20]
 8012960:	e001      	b.n	8012966 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012962:	2300      	movs	r3, #0
 8012964:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012966:	6a3b      	ldr	r3, [r7, #32]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d01e      	beq.n	80129aa <osMailGet+0xca>
 801296c:	4b15      	ldr	r3, [pc, #84]	; (80129c4 <osMailGet+0xe4>)
 801296e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012972:	601a      	str	r2, [r3, #0]
 8012974:	f3bf 8f4f 	dsb	sy
 8012978:	f3bf 8f6f 	isb	sy
 801297c:	e015      	b.n	80129aa <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	6858      	ldr	r0, [r3, #4]
 8012982:	f107 0314 	add.w	r3, r7, #20
 8012986:	3304      	adds	r3, #4
 8012988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801298a:	4619      	mov	r1, r3
 801298c:	f000 fbfa 	bl	8013184 <xQueueReceive>
 8012990:	4603      	mov	r3, r0
 8012992:	2b01      	cmp	r3, #1
 8012994:	d102      	bne.n	801299c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012996:	2320      	movs	r3, #32
 8012998:	617b      	str	r3, [r7, #20]
 801299a:	e006      	b.n	80129aa <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d101      	bne.n	80129a6 <osMailGet+0xc6>
 80129a2:	2300      	movs	r3, #0
 80129a4:	e000      	b.n	80129a8 <osMailGet+0xc8>
 80129a6:	2340      	movs	r3, #64	; 0x40
 80129a8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	461c      	mov	r4, r3
 80129ae:	f107 0314 	add.w	r3, r7, #20
 80129b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80129b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80129ba:	68f8      	ldr	r0, [r7, #12]
 80129bc:	372c      	adds	r7, #44	; 0x2c
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd90      	pop	{r4, r7, pc}
 80129c2:	bf00      	nop
 80129c4:	e000ed04 	.word	0xe000ed04

080129c8 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d101      	bne.n	80129dc <osMailFree+0x14>
    return osErrorParameter;
 80129d8:	2380      	movs	r3, #128	; 0x80
 80129da:	e006      	b.n	80129ea <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	689b      	ldr	r3, [r3, #8]
 80129e0:	6839      	ldr	r1, [r7, #0]
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7ff fe8f 	bl	8012706 <osPoolFree>
 80129e8:	4603      	mov	r3, r0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}

080129f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80129f2:	b480      	push	{r7}
 80129f4:	b083      	sub	sp, #12
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f103 0208 	add.w	r2, r3, #8
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f04f 32ff 	mov.w	r2, #4294967295
 8012a0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f103 0208 	add.w	r2, r3, #8
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f103 0208 	add.w	r2, r3, #8
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2200      	movs	r2, #0
 8012a24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012a26:	bf00      	nop
 8012a28:	370c      	adds	r7, #12
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a30:	4770      	bx	lr

08012a32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012a32:	b480      	push	{r7}
 8012a34:	b083      	sub	sp, #12
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012a40:	bf00      	nop
 8012a42:	370c      	adds	r7, #12
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr

08012a4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b085      	sub	sp, #20
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	68fa      	ldr	r2, [r7, #12]
 8012a60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	689a      	ldr	r2, [r3, #8]
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	689b      	ldr	r3, [r3, #8]
 8012a6e:	683a      	ldr	r2, [r7, #0]
 8012a70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	683a      	ldr	r2, [r7, #0]
 8012a76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	687a      	ldr	r2, [r7, #4]
 8012a7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	1c5a      	adds	r2, r3, #1
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	601a      	str	r2, [r3, #0]
}
 8012a88:	bf00      	nop
 8012a8a:	3714      	adds	r7, #20
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr

08012a94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012a94:	b480      	push	{r7}
 8012a96:	b085      	sub	sp, #20
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012aaa:	d103      	bne.n	8012ab4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	691b      	ldr	r3, [r3, #16]
 8012ab0:	60fb      	str	r3, [r7, #12]
 8012ab2:	e00c      	b.n	8012ace <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	3308      	adds	r3, #8
 8012ab8:	60fb      	str	r3, [r7, #12]
 8012aba:	e002      	b.n	8012ac2 <vListInsert+0x2e>
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	60fb      	str	r3, [r7, #12]
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	68ba      	ldr	r2, [r7, #8]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d2f6      	bcs.n	8012abc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	685a      	ldr	r2, [r3, #4]
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	683a      	ldr	r2, [r7, #0]
 8012adc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	68fa      	ldr	r2, [r7, #12]
 8012ae2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	683a      	ldr	r2, [r7, #0]
 8012ae8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	1c5a      	adds	r2, r3, #1
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	601a      	str	r2, [r3, #0]
}
 8012afa:	bf00      	nop
 8012afc:	3714      	adds	r7, #20
 8012afe:	46bd      	mov	sp, r7
 8012b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b04:	4770      	bx	lr

08012b06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012b06:	b480      	push	{r7}
 8012b08:	b085      	sub	sp, #20
 8012b0a:	af00      	add	r7, sp, #0
 8012b0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	691b      	ldr	r3, [r3, #16]
 8012b12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	687a      	ldr	r2, [r7, #4]
 8012b1a:	6892      	ldr	r2, [r2, #8]
 8012b1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	689b      	ldr	r3, [r3, #8]
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	6852      	ldr	r2, [r2, #4]
 8012b26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d103      	bne.n	8012b3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	689a      	ldr	r2, [r3, #8]
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	1e5a      	subs	r2, r3, #1
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681b      	ldr	r3, [r3, #0]
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3714      	adds	r7, #20
 8012b52:	46bd      	mov	sp, r7
 8012b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b58:	4770      	bx	lr
	...

08012b5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b084      	sub	sp, #16
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d109      	bne.n	8012b84 <xQueueGenericReset+0x28>
	__asm volatile
 8012b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b74:	f383 8811 	msr	BASEPRI, r3
 8012b78:	f3bf 8f6f 	isb	sy
 8012b7c:	f3bf 8f4f 	dsb	sy
 8012b80:	60bb      	str	r3, [r7, #8]
 8012b82:	e7fe      	b.n	8012b82 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012b84:	f001 ff32 	bl	80149ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b90:	68f9      	ldr	r1, [r7, #12]
 8012b92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012b94:	fb01 f303 	mul.w	r3, r1, r3
 8012b98:	441a      	add	r2, r3
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	681a      	ldr	r2, [r3, #0]
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bb4:	3b01      	subs	r3, #1
 8012bb6:	68f9      	ldr	r1, [r7, #12]
 8012bb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012bba:	fb01 f303 	mul.w	r3, r1, r3
 8012bbe:	441a      	add	r2, r3
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	22ff      	movs	r2, #255	; 0xff
 8012bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	22ff      	movs	r2, #255	; 0xff
 8012bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d114      	bne.n	8012c04 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	691b      	ldr	r3, [r3, #16]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d01a      	beq.n	8012c18 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	3310      	adds	r3, #16
 8012be6:	4618      	mov	r0, r3
 8012be8:	f001 f936 	bl	8013e58 <xTaskRemoveFromEventList>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d012      	beq.n	8012c18 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012bf2:	4b0d      	ldr	r3, [pc, #52]	; (8012c28 <xQueueGenericReset+0xcc>)
 8012bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bf8:	601a      	str	r2, [r3, #0]
 8012bfa:	f3bf 8f4f 	dsb	sy
 8012bfe:	f3bf 8f6f 	isb	sy
 8012c02:	e009      	b.n	8012c18 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	3310      	adds	r3, #16
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7ff fef2 	bl	80129f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	3324      	adds	r3, #36	; 0x24
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7ff feed 	bl	80129f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012c18:	f001 ff16 	bl	8014a48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012c1c:	2301      	movs	r3, #1
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	e000ed04 	.word	0xe000ed04

08012c2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b08e      	sub	sp, #56	; 0x38
 8012c30:	af02      	add	r7, sp, #8
 8012c32:	60f8      	str	r0, [r7, #12]
 8012c34:	60b9      	str	r1, [r7, #8]
 8012c36:	607a      	str	r2, [r7, #4]
 8012c38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d109      	bne.n	8012c54 <xQueueGenericCreateStatic+0x28>
 8012c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c44:	f383 8811 	msr	BASEPRI, r3
 8012c48:	f3bf 8f6f 	isb	sy
 8012c4c:	f3bf 8f4f 	dsb	sy
 8012c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c52:	e7fe      	b.n	8012c52 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d109      	bne.n	8012c6e <xQueueGenericCreateStatic+0x42>
 8012c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c5e:	f383 8811 	msr	BASEPRI, r3
 8012c62:	f3bf 8f6f 	isb	sy
 8012c66:	f3bf 8f4f 	dsb	sy
 8012c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8012c6c:	e7fe      	b.n	8012c6c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d002      	beq.n	8012c7a <xQueueGenericCreateStatic+0x4e>
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d001      	beq.n	8012c7e <xQueueGenericCreateStatic+0x52>
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	e000      	b.n	8012c80 <xQueueGenericCreateStatic+0x54>
 8012c7e:	2300      	movs	r3, #0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d109      	bne.n	8012c98 <xQueueGenericCreateStatic+0x6c>
 8012c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c88:	f383 8811 	msr	BASEPRI, r3
 8012c8c:	f3bf 8f6f 	isb	sy
 8012c90:	f3bf 8f4f 	dsb	sy
 8012c94:	623b      	str	r3, [r7, #32]
 8012c96:	e7fe      	b.n	8012c96 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d102      	bne.n	8012ca4 <xQueueGenericCreateStatic+0x78>
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d101      	bne.n	8012ca8 <xQueueGenericCreateStatic+0x7c>
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	e000      	b.n	8012caa <xQueueGenericCreateStatic+0x7e>
 8012ca8:	2300      	movs	r3, #0
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d109      	bne.n	8012cc2 <xQueueGenericCreateStatic+0x96>
 8012cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cb2:	f383 8811 	msr	BASEPRI, r3
 8012cb6:	f3bf 8f6f 	isb	sy
 8012cba:	f3bf 8f4f 	dsb	sy
 8012cbe:	61fb      	str	r3, [r7, #28]
 8012cc0:	e7fe      	b.n	8012cc0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012cc2:	2348      	movs	r3, #72	; 0x48
 8012cc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	2b48      	cmp	r3, #72	; 0x48
 8012cca:	d009      	beq.n	8012ce0 <xQueueGenericCreateStatic+0xb4>
 8012ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd0:	f383 8811 	msr	BASEPRI, r3
 8012cd4:	f3bf 8f6f 	isb	sy
 8012cd8:	f3bf 8f4f 	dsb	sy
 8012cdc:	61bb      	str	r3, [r7, #24]
 8012cde:	e7fe      	b.n	8012cde <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012ce0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d00d      	beq.n	8012d08 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cee:	2201      	movs	r2, #1
 8012cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012cf4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfa:	9300      	str	r3, [sp, #0]
 8012cfc:	4613      	mov	r3, r2
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	68b9      	ldr	r1, [r7, #8]
 8012d02:	68f8      	ldr	r0, [r7, #12]
 8012d04:	f000 f844 	bl	8012d90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3730      	adds	r7, #48	; 0x30
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}

08012d12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012d12:	b580      	push	{r7, lr}
 8012d14:	b08a      	sub	sp, #40	; 0x28
 8012d16:	af02      	add	r7, sp, #8
 8012d18:	60f8      	str	r0, [r7, #12]
 8012d1a:	60b9      	str	r1, [r7, #8]
 8012d1c:	4613      	mov	r3, r2
 8012d1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d109      	bne.n	8012d3a <xQueueGenericCreate+0x28>
 8012d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2a:	f383 8811 	msr	BASEPRI, r3
 8012d2e:	f3bf 8f6f 	isb	sy
 8012d32:	f3bf 8f4f 	dsb	sy
 8012d36:	613b      	str	r3, [r7, #16]
 8012d38:	e7fe      	b.n	8012d38 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d102      	bne.n	8012d46 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012d40:	2300      	movs	r3, #0
 8012d42:	61fb      	str	r3, [r7, #28]
 8012d44:	e004      	b.n	8012d50 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	68ba      	ldr	r2, [r7, #8]
 8012d4a:	fb02 f303 	mul.w	r3, r2, r3
 8012d4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	3348      	adds	r3, #72	; 0x48
 8012d54:	4618      	mov	r0, r3
 8012d56:	f001 ff63 	bl	8014c20 <pvPortMalloc>
 8012d5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012d5c:	69bb      	ldr	r3, [r7, #24]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d011      	beq.n	8012d86 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012d62:	69bb      	ldr	r3, [r7, #24]
 8012d64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	3348      	adds	r3, #72	; 0x48
 8012d6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012d6c:	69bb      	ldr	r3, [r7, #24]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012d74:	79fa      	ldrb	r2, [r7, #7]
 8012d76:	69bb      	ldr	r3, [r7, #24]
 8012d78:	9300      	str	r3, [sp, #0]
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	697a      	ldr	r2, [r7, #20]
 8012d7e:	68b9      	ldr	r1, [r7, #8]
 8012d80:	68f8      	ldr	r0, [r7, #12]
 8012d82:	f000 f805 	bl	8012d90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012d86:	69bb      	ldr	r3, [r7, #24]
	}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3720      	adds	r7, #32
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b084      	sub	sp, #16
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	607a      	str	r2, [r7, #4]
 8012d9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d103      	bne.n	8012dac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	69ba      	ldr	r2, [r7, #24]
 8012da8:	601a      	str	r2, [r3, #0]
 8012daa:	e002      	b.n	8012db2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012db2:	69bb      	ldr	r3, [r7, #24]
 8012db4:	68fa      	ldr	r2, [r7, #12]
 8012db6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012db8:	69bb      	ldr	r3, [r7, #24]
 8012dba:	68ba      	ldr	r2, [r7, #8]
 8012dbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012dbe:	2101      	movs	r1, #1
 8012dc0:	69b8      	ldr	r0, [r7, #24]
 8012dc2:	f7ff fecb 	bl	8012b5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012dc6:	bf00      	nop
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}

08012dce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012dce:	b580      	push	{r7, lr}
 8012dd0:	b082      	sub	sp, #8
 8012dd2:	af00      	add	r7, sp, #0
 8012dd4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d00e      	beq.n	8012dfa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2200      	movs	r2, #0
 8012de0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2200      	movs	r2, #0
 8012de6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2200      	movs	r2, #0
 8012dec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012dee:	2300      	movs	r3, #0
 8012df0:	2200      	movs	r2, #0
 8012df2:	2100      	movs	r1, #0
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f000 f837 	bl	8012e68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012dfa:	bf00      	nop
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}

08012e02 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b086      	sub	sp, #24
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	4603      	mov	r3, r0
 8012e0a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	617b      	str	r3, [r7, #20]
 8012e10:	2300      	movs	r3, #0
 8012e12:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012e14:	79fb      	ldrb	r3, [r7, #7]
 8012e16:	461a      	mov	r2, r3
 8012e18:	6939      	ldr	r1, [r7, #16]
 8012e1a:	6978      	ldr	r0, [r7, #20]
 8012e1c:	f7ff ff79 	bl	8012d12 <xQueueGenericCreate>
 8012e20:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012e22:	68f8      	ldr	r0, [r7, #12]
 8012e24:	f7ff ffd3 	bl	8012dce <prvInitialiseMutex>

		return xNewQueue;
 8012e28:	68fb      	ldr	r3, [r7, #12]
	}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3718      	adds	r7, #24
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}

08012e32 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012e32:	b580      	push	{r7, lr}
 8012e34:	b088      	sub	sp, #32
 8012e36:	af02      	add	r7, sp, #8
 8012e38:	4603      	mov	r3, r0
 8012e3a:	6039      	str	r1, [r7, #0]
 8012e3c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012e3e:	2301      	movs	r3, #1
 8012e40:	617b      	str	r3, [r7, #20]
 8012e42:	2300      	movs	r3, #0
 8012e44:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012e46:	79fb      	ldrb	r3, [r7, #7]
 8012e48:	9300      	str	r3, [sp, #0]
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	6939      	ldr	r1, [r7, #16]
 8012e50:	6978      	ldr	r0, [r7, #20]
 8012e52:	f7ff feeb 	bl	8012c2c <xQueueGenericCreateStatic>
 8012e56:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012e58:	68f8      	ldr	r0, [r7, #12]
 8012e5a:	f7ff ffb8 	bl	8012dce <prvInitialiseMutex>

		return xNewQueue;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
	}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3718      	adds	r7, #24
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}

08012e68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b08e      	sub	sp, #56	; 0x38
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
 8012e74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012e76:	2300      	movs	r3, #0
 8012e78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d109      	bne.n	8012e98 <xQueueGenericSend+0x30>
 8012e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e88:	f383 8811 	msr	BASEPRI, r3
 8012e8c:	f3bf 8f6f 	isb	sy
 8012e90:	f3bf 8f4f 	dsb	sy
 8012e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e96:	e7fe      	b.n	8012e96 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d103      	bne.n	8012ea6 <xQueueGenericSend+0x3e>
 8012e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d101      	bne.n	8012eaa <xQueueGenericSend+0x42>
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e000      	b.n	8012eac <xQueueGenericSend+0x44>
 8012eaa:	2300      	movs	r3, #0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d109      	bne.n	8012ec4 <xQueueGenericSend+0x5c>
 8012eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb4:	f383 8811 	msr	BASEPRI, r3
 8012eb8:	f3bf 8f6f 	isb	sy
 8012ebc:	f3bf 8f4f 	dsb	sy
 8012ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8012ec2:	e7fe      	b.n	8012ec2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	2b02      	cmp	r3, #2
 8012ec8:	d103      	bne.n	8012ed2 <xQueueGenericSend+0x6a>
 8012eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ece:	2b01      	cmp	r3, #1
 8012ed0:	d101      	bne.n	8012ed6 <xQueueGenericSend+0x6e>
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	e000      	b.n	8012ed8 <xQueueGenericSend+0x70>
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d109      	bne.n	8012ef0 <xQueueGenericSend+0x88>
 8012edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee0:	f383 8811 	msr	BASEPRI, r3
 8012ee4:	f3bf 8f6f 	isb	sy
 8012ee8:	f3bf 8f4f 	dsb	sy
 8012eec:	623b      	str	r3, [r7, #32]
 8012eee:	e7fe      	b.n	8012eee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ef0:	f001 f968 	bl	80141c4 <xTaskGetSchedulerState>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d102      	bne.n	8012f00 <xQueueGenericSend+0x98>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d101      	bne.n	8012f04 <xQueueGenericSend+0x9c>
 8012f00:	2301      	movs	r3, #1
 8012f02:	e000      	b.n	8012f06 <xQueueGenericSend+0x9e>
 8012f04:	2300      	movs	r3, #0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d109      	bne.n	8012f1e <xQueueGenericSend+0xb6>
 8012f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f0e:	f383 8811 	msr	BASEPRI, r3
 8012f12:	f3bf 8f6f 	isb	sy
 8012f16:	f3bf 8f4f 	dsb	sy
 8012f1a:	61fb      	str	r3, [r7, #28]
 8012f1c:	e7fe      	b.n	8012f1c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012f1e:	f001 fd65 	bl	80149ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d302      	bcc.n	8012f34 <xQueueGenericSend+0xcc>
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	2b02      	cmp	r3, #2
 8012f32:	d129      	bne.n	8012f88 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012f34:	683a      	ldr	r2, [r7, #0]
 8012f36:	68b9      	ldr	r1, [r7, #8]
 8012f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f3a:	f000 fa7c 	bl	8013436 <prvCopyDataToQueue>
 8012f3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d010      	beq.n	8012f6a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4a:	3324      	adds	r3, #36	; 0x24
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f000 ff83 	bl	8013e58 <xTaskRemoveFromEventList>
 8012f52:	4603      	mov	r3, r0
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d013      	beq.n	8012f80 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012f58:	4b3f      	ldr	r3, [pc, #252]	; (8013058 <xQueueGenericSend+0x1f0>)
 8012f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f5e:	601a      	str	r2, [r3, #0]
 8012f60:	f3bf 8f4f 	dsb	sy
 8012f64:	f3bf 8f6f 	isb	sy
 8012f68:	e00a      	b.n	8012f80 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d007      	beq.n	8012f80 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012f70:	4b39      	ldr	r3, [pc, #228]	; (8013058 <xQueueGenericSend+0x1f0>)
 8012f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f76:	601a      	str	r2, [r3, #0]
 8012f78:	f3bf 8f4f 	dsb	sy
 8012f7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012f80:	f001 fd62 	bl	8014a48 <vPortExitCritical>
				return pdPASS;
 8012f84:	2301      	movs	r3, #1
 8012f86:	e063      	b.n	8013050 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d103      	bne.n	8012f96 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012f8e:	f001 fd5b 	bl	8014a48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012f92:	2300      	movs	r3, #0
 8012f94:	e05c      	b.n	8013050 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d106      	bne.n	8012faa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012f9c:	f107 0314 	add.w	r3, r7, #20
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f000 ffbb 	bl	8013f1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012faa:	f001 fd4d 	bl	8014a48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012fae:	f000 fd73 	bl	8013a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012fb2:	f001 fd1b 	bl	80149ec <vPortEnterCritical>
 8012fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012fbc:	b25b      	sxtb	r3, r3
 8012fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fc2:	d103      	bne.n	8012fcc <xQueueGenericSend+0x164>
 8012fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fd2:	b25b      	sxtb	r3, r3
 8012fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fd8:	d103      	bne.n	8012fe2 <xQueueGenericSend+0x17a>
 8012fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fdc:	2200      	movs	r2, #0
 8012fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012fe2:	f001 fd31 	bl	8014a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012fe6:	1d3a      	adds	r2, r7, #4
 8012fe8:	f107 0314 	add.w	r3, r7, #20
 8012fec:	4611      	mov	r1, r2
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f000 ffaa 	bl	8013f48 <xTaskCheckForTimeOut>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d124      	bne.n	8013044 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ffc:	f000 fb13 	bl	8013626 <prvIsQueueFull>
 8013000:	4603      	mov	r3, r0
 8013002:	2b00      	cmp	r3, #0
 8013004:	d018      	beq.n	8013038 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013008:	3310      	adds	r3, #16
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	4611      	mov	r1, r2
 801300e:	4618      	mov	r0, r3
 8013010:	f000 fefe 	bl	8013e10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013016:	f000 fa9e 	bl	8013556 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801301a:	f000 fd4b 	bl	8013ab4 <xTaskResumeAll>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	f47f af7c 	bne.w	8012f1e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8013026:	4b0c      	ldr	r3, [pc, #48]	; (8013058 <xQueueGenericSend+0x1f0>)
 8013028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801302c:	601a      	str	r2, [r3, #0]
 801302e:	f3bf 8f4f 	dsb	sy
 8013032:	f3bf 8f6f 	isb	sy
 8013036:	e772      	b.n	8012f1e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801303a:	f000 fa8c 	bl	8013556 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801303e:	f000 fd39 	bl	8013ab4 <xTaskResumeAll>
 8013042:	e76c      	b.n	8012f1e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013046:	f000 fa86 	bl	8013556 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801304a:	f000 fd33 	bl	8013ab4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801304e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013050:	4618      	mov	r0, r3
 8013052:	3738      	adds	r7, #56	; 0x38
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	e000ed04 	.word	0xe000ed04

0801305c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b08e      	sub	sp, #56	; 0x38
 8013060:	af00      	add	r7, sp, #0
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	60b9      	str	r1, [r7, #8]
 8013066:	607a      	str	r2, [r7, #4]
 8013068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013070:	2b00      	cmp	r3, #0
 8013072:	d109      	bne.n	8013088 <xQueueGenericSendFromISR+0x2c>
 8013074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013078:	f383 8811 	msr	BASEPRI, r3
 801307c:	f3bf 8f6f 	isb	sy
 8013080:	f3bf 8f4f 	dsb	sy
 8013084:	627b      	str	r3, [r7, #36]	; 0x24
 8013086:	e7fe      	b.n	8013086 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d103      	bne.n	8013096 <xQueueGenericSendFromISR+0x3a>
 801308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013092:	2b00      	cmp	r3, #0
 8013094:	d101      	bne.n	801309a <xQueueGenericSendFromISR+0x3e>
 8013096:	2301      	movs	r3, #1
 8013098:	e000      	b.n	801309c <xQueueGenericSendFromISR+0x40>
 801309a:	2300      	movs	r3, #0
 801309c:	2b00      	cmp	r3, #0
 801309e:	d109      	bne.n	80130b4 <xQueueGenericSendFromISR+0x58>
 80130a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130a4:	f383 8811 	msr	BASEPRI, r3
 80130a8:	f3bf 8f6f 	isb	sy
 80130ac:	f3bf 8f4f 	dsb	sy
 80130b0:	623b      	str	r3, [r7, #32]
 80130b2:	e7fe      	b.n	80130b2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	2b02      	cmp	r3, #2
 80130b8:	d103      	bne.n	80130c2 <xQueueGenericSendFromISR+0x66>
 80130ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130be:	2b01      	cmp	r3, #1
 80130c0:	d101      	bne.n	80130c6 <xQueueGenericSendFromISR+0x6a>
 80130c2:	2301      	movs	r3, #1
 80130c4:	e000      	b.n	80130c8 <xQueueGenericSendFromISR+0x6c>
 80130c6:	2300      	movs	r3, #0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d109      	bne.n	80130e0 <xQueueGenericSendFromISR+0x84>
 80130cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d0:	f383 8811 	msr	BASEPRI, r3
 80130d4:	f3bf 8f6f 	isb	sy
 80130d8:	f3bf 8f4f 	dsb	sy
 80130dc:	61fb      	str	r3, [r7, #28]
 80130de:	e7fe      	b.n	80130de <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80130e0:	f001 fd60 	bl	8014ba4 <vPortValidateInterruptPriority>
	__asm volatile
 80130e4:	f3ef 8211 	mrs	r2, BASEPRI
 80130e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ec:	f383 8811 	msr	BASEPRI, r3
 80130f0:	f3bf 8f6f 	isb	sy
 80130f4:	f3bf 8f4f 	dsb	sy
 80130f8:	61ba      	str	r2, [r7, #24]
 80130fa:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80130fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80130fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013108:	429a      	cmp	r2, r3
 801310a:	d302      	bcc.n	8013112 <xQueueGenericSendFromISR+0xb6>
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	2b02      	cmp	r3, #2
 8013110:	d12c      	bne.n	801316c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801311c:	683a      	ldr	r2, [r7, #0]
 801311e:	68b9      	ldr	r1, [r7, #8]
 8013120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013122:	f000 f988 	bl	8013436 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013126:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801312e:	d112      	bne.n	8013156 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013134:	2b00      	cmp	r3, #0
 8013136:	d016      	beq.n	8013166 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313a:	3324      	adds	r3, #36	; 0x24
 801313c:	4618      	mov	r0, r3
 801313e:	f000 fe8b 	bl	8013e58 <xTaskRemoveFromEventList>
 8013142:	4603      	mov	r3, r0
 8013144:	2b00      	cmp	r3, #0
 8013146:	d00e      	beq.n	8013166 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d00b      	beq.n	8013166 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2201      	movs	r2, #1
 8013152:	601a      	str	r2, [r3, #0]
 8013154:	e007      	b.n	8013166 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013156:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801315a:	3301      	adds	r3, #1
 801315c:	b2db      	uxtb	r3, r3
 801315e:	b25a      	sxtb	r2, r3
 8013160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013166:	2301      	movs	r3, #1
 8013168:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801316a:	e001      	b.n	8013170 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801316c:	2300      	movs	r3, #0
 801316e:	637b      	str	r3, [r7, #52]	; 0x34
 8013170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013172:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801317a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801317c:	4618      	mov	r0, r3
 801317e:	3738      	adds	r7, #56	; 0x38
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}

08013184 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b08c      	sub	sp, #48	; 0x30
 8013188:	af00      	add	r7, sp, #0
 801318a:	60f8      	str	r0, [r7, #12]
 801318c:	60b9      	str	r1, [r7, #8]
 801318e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013190:	2300      	movs	r3, #0
 8013192:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319a:	2b00      	cmp	r3, #0
 801319c:	d109      	bne.n	80131b2 <xQueueReceive+0x2e>
	__asm volatile
 801319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a2:	f383 8811 	msr	BASEPRI, r3
 80131a6:	f3bf 8f6f 	isb	sy
 80131aa:	f3bf 8f4f 	dsb	sy
 80131ae:	623b      	str	r3, [r7, #32]
 80131b0:	e7fe      	b.n	80131b0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d103      	bne.n	80131c0 <xQueueReceive+0x3c>
 80131b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d101      	bne.n	80131c4 <xQueueReceive+0x40>
 80131c0:	2301      	movs	r3, #1
 80131c2:	e000      	b.n	80131c6 <xQueueReceive+0x42>
 80131c4:	2300      	movs	r3, #0
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d109      	bne.n	80131de <xQueueReceive+0x5a>
 80131ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ce:	f383 8811 	msr	BASEPRI, r3
 80131d2:	f3bf 8f6f 	isb	sy
 80131d6:	f3bf 8f4f 	dsb	sy
 80131da:	61fb      	str	r3, [r7, #28]
 80131dc:	e7fe      	b.n	80131dc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80131de:	f000 fff1 	bl	80141c4 <xTaskGetSchedulerState>
 80131e2:	4603      	mov	r3, r0
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d102      	bne.n	80131ee <xQueueReceive+0x6a>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d101      	bne.n	80131f2 <xQueueReceive+0x6e>
 80131ee:	2301      	movs	r3, #1
 80131f0:	e000      	b.n	80131f4 <xQueueReceive+0x70>
 80131f2:	2300      	movs	r3, #0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d109      	bne.n	801320c <xQueueReceive+0x88>
 80131f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fc:	f383 8811 	msr	BASEPRI, r3
 8013200:	f3bf 8f6f 	isb	sy
 8013204:	f3bf 8f4f 	dsb	sy
 8013208:	61bb      	str	r3, [r7, #24]
 801320a:	e7fe      	b.n	801320a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801320c:	f001 fbee 	bl	80149ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013214:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013218:	2b00      	cmp	r3, #0
 801321a:	d01f      	beq.n	801325c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801321c:	68b9      	ldr	r1, [r7, #8]
 801321e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013220:	f000 f973 	bl	801350a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013226:	1e5a      	subs	r2, r3, #1
 8013228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801322a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801322e:	691b      	ldr	r3, [r3, #16]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d00f      	beq.n	8013254 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013236:	3310      	adds	r3, #16
 8013238:	4618      	mov	r0, r3
 801323a:	f000 fe0d 	bl	8013e58 <xTaskRemoveFromEventList>
 801323e:	4603      	mov	r3, r0
 8013240:	2b00      	cmp	r3, #0
 8013242:	d007      	beq.n	8013254 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013244:	4b3c      	ldr	r3, [pc, #240]	; (8013338 <xQueueReceive+0x1b4>)
 8013246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801324a:	601a      	str	r2, [r3, #0]
 801324c:	f3bf 8f4f 	dsb	sy
 8013250:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013254:	f001 fbf8 	bl	8014a48 <vPortExitCritical>
				return pdPASS;
 8013258:	2301      	movs	r3, #1
 801325a:	e069      	b.n	8013330 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d103      	bne.n	801326a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013262:	f001 fbf1 	bl	8014a48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013266:	2300      	movs	r3, #0
 8013268:	e062      	b.n	8013330 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801326c:	2b00      	cmp	r3, #0
 801326e:	d106      	bne.n	801327e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013270:	f107 0310 	add.w	r3, r7, #16
 8013274:	4618      	mov	r0, r3
 8013276:	f000 fe51 	bl	8013f1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801327a:	2301      	movs	r3, #1
 801327c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801327e:	f001 fbe3 	bl	8014a48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013282:	f000 fc09 	bl	8013a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013286:	f001 fbb1 	bl	80149ec <vPortEnterCritical>
 801328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801328c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013290:	b25b      	sxtb	r3, r3
 8013292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013296:	d103      	bne.n	80132a0 <xQueueReceive+0x11c>
 8013298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801329a:	2200      	movs	r2, #0
 801329c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80132a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132a6:	b25b      	sxtb	r3, r3
 80132a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ac:	d103      	bne.n	80132b6 <xQueueReceive+0x132>
 80132ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b0:	2200      	movs	r2, #0
 80132b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80132b6:	f001 fbc7 	bl	8014a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80132ba:	1d3a      	adds	r2, r7, #4
 80132bc:	f107 0310 	add.w	r3, r7, #16
 80132c0:	4611      	mov	r1, r2
 80132c2:	4618      	mov	r0, r3
 80132c4:	f000 fe40 	bl	8013f48 <xTaskCheckForTimeOut>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d123      	bne.n	8013316 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80132ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132d0:	f000 f993 	bl	80135fa <prvIsQueueEmpty>
 80132d4:	4603      	mov	r3, r0
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d017      	beq.n	801330a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80132da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132dc:	3324      	adds	r3, #36	; 0x24
 80132de:	687a      	ldr	r2, [r7, #4]
 80132e0:	4611      	mov	r1, r2
 80132e2:	4618      	mov	r0, r3
 80132e4:	f000 fd94 	bl	8013e10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80132e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132ea:	f000 f934 	bl	8013556 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80132ee:	f000 fbe1 	bl	8013ab4 <xTaskResumeAll>
 80132f2:	4603      	mov	r3, r0
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d189      	bne.n	801320c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80132f8:	4b0f      	ldr	r3, [pc, #60]	; (8013338 <xQueueReceive+0x1b4>)
 80132fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132fe:	601a      	str	r2, [r3, #0]
 8013300:	f3bf 8f4f 	dsb	sy
 8013304:	f3bf 8f6f 	isb	sy
 8013308:	e780      	b.n	801320c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801330a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801330c:	f000 f923 	bl	8013556 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013310:	f000 fbd0 	bl	8013ab4 <xTaskResumeAll>
 8013314:	e77a      	b.n	801320c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013318:	f000 f91d 	bl	8013556 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801331c:	f000 fbca 	bl	8013ab4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013322:	f000 f96a 	bl	80135fa <prvIsQueueEmpty>
 8013326:	4603      	mov	r3, r0
 8013328:	2b00      	cmp	r3, #0
 801332a:	f43f af6f 	beq.w	801320c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801332e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013330:	4618      	mov	r0, r3
 8013332:	3730      	adds	r7, #48	; 0x30
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}
 8013338:	e000ed04 	.word	0xe000ed04

0801333c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b08e      	sub	sp, #56	; 0x38
 8013340:	af00      	add	r7, sp, #0
 8013342:	60f8      	str	r0, [r7, #12]
 8013344:	60b9      	str	r1, [r7, #8]
 8013346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801334e:	2b00      	cmp	r3, #0
 8013350:	d109      	bne.n	8013366 <xQueueReceiveFromISR+0x2a>
 8013352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013356:	f383 8811 	msr	BASEPRI, r3
 801335a:	f3bf 8f6f 	isb	sy
 801335e:	f3bf 8f4f 	dsb	sy
 8013362:	623b      	str	r3, [r7, #32]
 8013364:	e7fe      	b.n	8013364 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d103      	bne.n	8013374 <xQueueReceiveFromISR+0x38>
 801336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013370:	2b00      	cmp	r3, #0
 8013372:	d101      	bne.n	8013378 <xQueueReceiveFromISR+0x3c>
 8013374:	2301      	movs	r3, #1
 8013376:	e000      	b.n	801337a <xQueueReceiveFromISR+0x3e>
 8013378:	2300      	movs	r3, #0
 801337a:	2b00      	cmp	r3, #0
 801337c:	d109      	bne.n	8013392 <xQueueReceiveFromISR+0x56>
 801337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013382:	f383 8811 	msr	BASEPRI, r3
 8013386:	f3bf 8f6f 	isb	sy
 801338a:	f3bf 8f4f 	dsb	sy
 801338e:	61fb      	str	r3, [r7, #28]
 8013390:	e7fe      	b.n	8013390 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013392:	f001 fc07 	bl	8014ba4 <vPortValidateInterruptPriority>
	__asm volatile
 8013396:	f3ef 8211 	mrs	r2, BASEPRI
 801339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801339e:	f383 8811 	msr	BASEPRI, r3
 80133a2:	f3bf 8f6f 	isb	sy
 80133a6:	f3bf 8f4f 	dsb	sy
 80133aa:	61ba      	str	r2, [r7, #24]
 80133ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80133ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d02f      	beq.n	801341e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80133be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133c8:	68b9      	ldr	r1, [r7, #8]
 80133ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133cc:	f000 f89d 	bl	801350a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d2:	1e5a      	subs	r2, r3, #1
 80133d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80133d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80133dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133e0:	d112      	bne.n	8013408 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e4:	691b      	ldr	r3, [r3, #16]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d016      	beq.n	8013418 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ec:	3310      	adds	r3, #16
 80133ee:	4618      	mov	r0, r3
 80133f0:	f000 fd32 	bl	8013e58 <xTaskRemoveFromEventList>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d00e      	beq.n	8013418 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d00b      	beq.n	8013418 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2201      	movs	r2, #1
 8013404:	601a      	str	r2, [r3, #0]
 8013406:	e007      	b.n	8013418 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801340c:	3301      	adds	r3, #1
 801340e:	b2db      	uxtb	r3, r3
 8013410:	b25a      	sxtb	r2, r3
 8013412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013418:	2301      	movs	r3, #1
 801341a:	637b      	str	r3, [r7, #52]	; 0x34
 801341c:	e001      	b.n	8013422 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801341e:	2300      	movs	r3, #0
 8013420:	637b      	str	r3, [r7, #52]	; 0x34
 8013422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013424:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801342c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801342e:	4618      	mov	r0, r3
 8013430:	3738      	adds	r7, #56	; 0x38
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}

08013436 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013436:	b580      	push	{r7, lr}
 8013438:	b086      	sub	sp, #24
 801343a:	af00      	add	r7, sp, #0
 801343c:	60f8      	str	r0, [r7, #12]
 801343e:	60b9      	str	r1, [r7, #8]
 8013440:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013442:	2300      	movs	r3, #0
 8013444:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801344a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013450:	2b00      	cmp	r3, #0
 8013452:	d10d      	bne.n	8013470 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d14d      	bne.n	80134f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	689b      	ldr	r3, [r3, #8]
 8013460:	4618      	mov	r0, r3
 8013462:	f000 fecd 	bl	8014200 <xTaskPriorityDisinherit>
 8013466:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	2200      	movs	r2, #0
 801346c:	609a      	str	r2, [r3, #8]
 801346e:	e043      	b.n	80134f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d119      	bne.n	80134aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	6858      	ldr	r0, [r3, #4]
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801347e:	461a      	mov	r2, r3
 8013480:	68b9      	ldr	r1, [r7, #8]
 8013482:	f002 fb33 	bl	8015aec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	685a      	ldr	r2, [r3, #4]
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801348e:	441a      	add	r2, r3
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	685a      	ldr	r2, [r3, #4]
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	689b      	ldr	r3, [r3, #8]
 801349c:	429a      	cmp	r2, r3
 801349e:	d32b      	bcc.n	80134f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	681a      	ldr	r2, [r3, #0]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	605a      	str	r2, [r3, #4]
 80134a8:	e026      	b.n	80134f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	68d8      	ldr	r0, [r3, #12]
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134b2:	461a      	mov	r2, r3
 80134b4:	68b9      	ldr	r1, [r7, #8]
 80134b6:	f002 fb19 	bl	8015aec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	68da      	ldr	r2, [r3, #12]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134c2:	425b      	negs	r3, r3
 80134c4:	441a      	add	r2, r3
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	68da      	ldr	r2, [r3, #12]
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d207      	bcs.n	80134e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	689a      	ldr	r2, [r3, #8]
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134de:	425b      	negs	r3, r3
 80134e0:	441a      	add	r2, r3
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	2b02      	cmp	r3, #2
 80134ea:	d105      	bne.n	80134f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d002      	beq.n	80134f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	3b01      	subs	r3, #1
 80134f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	1c5a      	adds	r2, r3, #1
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013500:	697b      	ldr	r3, [r7, #20]
}
 8013502:	4618      	mov	r0, r3
 8013504:	3718      	adds	r7, #24
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801350a:	b580      	push	{r7, lr}
 801350c:	b082      	sub	sp, #8
 801350e:	af00      	add	r7, sp, #0
 8013510:	6078      	str	r0, [r7, #4]
 8013512:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013518:	2b00      	cmp	r3, #0
 801351a:	d018      	beq.n	801354e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	68da      	ldr	r2, [r3, #12]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013524:	441a      	add	r2, r3
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	68da      	ldr	r2, [r3, #12]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	689b      	ldr	r3, [r3, #8]
 8013532:	429a      	cmp	r2, r3
 8013534:	d303      	bcc.n	801353e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	68d9      	ldr	r1, [r3, #12]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013546:	461a      	mov	r2, r3
 8013548:	6838      	ldr	r0, [r7, #0]
 801354a:	f002 facf 	bl	8015aec <memcpy>
	}
}
 801354e:	bf00      	nop
 8013550:	3708      	adds	r7, #8
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}

08013556 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013556:	b580      	push	{r7, lr}
 8013558:	b084      	sub	sp, #16
 801355a:	af00      	add	r7, sp, #0
 801355c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801355e:	f001 fa45 	bl	80149ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013568:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801356a:	e011      	b.n	8013590 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013570:	2b00      	cmp	r3, #0
 8013572:	d012      	beq.n	801359a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	3324      	adds	r3, #36	; 0x24
 8013578:	4618      	mov	r0, r3
 801357a:	f000 fc6d 	bl	8013e58 <xTaskRemoveFromEventList>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d001      	beq.n	8013588 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013584:	f000 fd40 	bl	8014008 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013588:	7bfb      	ldrb	r3, [r7, #15]
 801358a:	3b01      	subs	r3, #1
 801358c:	b2db      	uxtb	r3, r3
 801358e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013594:	2b00      	cmp	r3, #0
 8013596:	dce9      	bgt.n	801356c <prvUnlockQueue+0x16>
 8013598:	e000      	b.n	801359c <prvUnlockQueue+0x46>
					break;
 801359a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	22ff      	movs	r2, #255	; 0xff
 80135a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80135a4:	f001 fa50 	bl	8014a48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80135a8:	f001 fa20 	bl	80149ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80135b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80135b4:	e011      	b.n	80135da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	691b      	ldr	r3, [r3, #16]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d012      	beq.n	80135e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	3310      	adds	r3, #16
 80135c2:	4618      	mov	r0, r3
 80135c4:	f000 fc48 	bl	8013e58 <xTaskRemoveFromEventList>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d001      	beq.n	80135d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80135ce:	f000 fd1b 	bl	8014008 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80135d2:	7bbb      	ldrb	r3, [r7, #14]
 80135d4:	3b01      	subs	r3, #1
 80135d6:	b2db      	uxtb	r3, r3
 80135d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80135da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	dce9      	bgt.n	80135b6 <prvUnlockQueue+0x60>
 80135e2:	e000      	b.n	80135e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80135e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	22ff      	movs	r2, #255	; 0xff
 80135ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80135ee:	f001 fa2b 	bl	8014a48 <vPortExitCritical>
}
 80135f2:	bf00      	nop
 80135f4:	3710      	adds	r7, #16
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}

080135fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80135fa:	b580      	push	{r7, lr}
 80135fc:	b084      	sub	sp, #16
 80135fe:	af00      	add	r7, sp, #0
 8013600:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013602:	f001 f9f3 	bl	80149ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801360a:	2b00      	cmp	r3, #0
 801360c:	d102      	bne.n	8013614 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801360e:	2301      	movs	r3, #1
 8013610:	60fb      	str	r3, [r7, #12]
 8013612:	e001      	b.n	8013618 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013614:	2300      	movs	r3, #0
 8013616:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013618:	f001 fa16 	bl	8014a48 <vPortExitCritical>

	return xReturn;
 801361c:	68fb      	ldr	r3, [r7, #12]
}
 801361e:	4618      	mov	r0, r3
 8013620:	3710      	adds	r7, #16
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}

08013626 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013626:	b580      	push	{r7, lr}
 8013628:	b084      	sub	sp, #16
 801362a:	af00      	add	r7, sp, #0
 801362c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801362e:	f001 f9dd 	bl	80149ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801363a:	429a      	cmp	r2, r3
 801363c:	d102      	bne.n	8013644 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801363e:	2301      	movs	r3, #1
 8013640:	60fb      	str	r3, [r7, #12]
 8013642:	e001      	b.n	8013648 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013644:	2300      	movs	r3, #0
 8013646:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013648:	f001 f9fe 	bl	8014a48 <vPortExitCritical>

	return xReturn;
 801364c:	68fb      	ldr	r3, [r7, #12]
}
 801364e:	4618      	mov	r0, r3
 8013650:	3710      	adds	r7, #16
 8013652:	46bd      	mov	sp, r7
 8013654:	bd80      	pop	{r7, pc}

08013656 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013656:	b580      	push	{r7, lr}
 8013658:	b08e      	sub	sp, #56	; 0x38
 801365a:	af04      	add	r7, sp, #16
 801365c:	60f8      	str	r0, [r7, #12]
 801365e:	60b9      	str	r1, [r7, #8]
 8013660:	607a      	str	r2, [r7, #4]
 8013662:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013666:	2b00      	cmp	r3, #0
 8013668:	d109      	bne.n	801367e <xTaskCreateStatic+0x28>
	__asm volatile
 801366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801366e:	f383 8811 	msr	BASEPRI, r3
 8013672:	f3bf 8f6f 	isb	sy
 8013676:	f3bf 8f4f 	dsb	sy
 801367a:	623b      	str	r3, [r7, #32]
 801367c:	e7fe      	b.n	801367c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 801367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013680:	2b00      	cmp	r3, #0
 8013682:	d109      	bne.n	8013698 <xTaskCreateStatic+0x42>
 8013684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013688:	f383 8811 	msr	BASEPRI, r3
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	61fb      	str	r3, [r7, #28]
 8013696:	e7fe      	b.n	8013696 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013698:	2354      	movs	r3, #84	; 0x54
 801369a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	2b54      	cmp	r3, #84	; 0x54
 80136a0:	d009      	beq.n	80136b6 <xTaskCreateStatic+0x60>
 80136a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a6:	f383 8811 	msr	BASEPRI, r3
 80136aa:	f3bf 8f6f 	isb	sy
 80136ae:	f3bf 8f4f 	dsb	sy
 80136b2:	61bb      	str	r3, [r7, #24]
 80136b4:	e7fe      	b.n	80136b4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80136b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80136b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d01e      	beq.n	80136fc <xTaskCreateStatic+0xa6>
 80136be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d01b      	beq.n	80136fc <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80136c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80136c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80136ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d0:	2202      	movs	r2, #2
 80136d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80136d6:	2300      	movs	r3, #0
 80136d8:	9303      	str	r3, [sp, #12]
 80136da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136dc:	9302      	str	r3, [sp, #8]
 80136de:	f107 0314 	add.w	r3, r7, #20
 80136e2:	9301      	str	r3, [sp, #4]
 80136e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e6:	9300      	str	r3, [sp, #0]
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	687a      	ldr	r2, [r7, #4]
 80136ec:	68b9      	ldr	r1, [r7, #8]
 80136ee:	68f8      	ldr	r0, [r7, #12]
 80136f0:	f000 f850 	bl	8013794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80136f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136f6:	f000 f8d3 	bl	80138a0 <prvAddNewTaskToReadyList>
 80136fa:	e001      	b.n	8013700 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80136fc:	2300      	movs	r3, #0
 80136fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013700:	697b      	ldr	r3, [r7, #20]
	}
 8013702:	4618      	mov	r0, r3
 8013704:	3728      	adds	r7, #40	; 0x28
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}

0801370a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801370a:	b580      	push	{r7, lr}
 801370c:	b08c      	sub	sp, #48	; 0x30
 801370e:	af04      	add	r7, sp, #16
 8013710:	60f8      	str	r0, [r7, #12]
 8013712:	60b9      	str	r1, [r7, #8]
 8013714:	603b      	str	r3, [r7, #0]
 8013716:	4613      	mov	r3, r2
 8013718:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801371a:	88fb      	ldrh	r3, [r7, #6]
 801371c:	009b      	lsls	r3, r3, #2
 801371e:	4618      	mov	r0, r3
 8013720:	f001 fa7e 	bl	8014c20 <pvPortMalloc>
 8013724:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d00e      	beq.n	801374a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801372c:	2054      	movs	r0, #84	; 0x54
 801372e:	f001 fa77 	bl	8014c20 <pvPortMalloc>
 8013732:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013734:	69fb      	ldr	r3, [r7, #28]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d003      	beq.n	8013742 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801373a:	69fb      	ldr	r3, [r7, #28]
 801373c:	697a      	ldr	r2, [r7, #20]
 801373e:	631a      	str	r2, [r3, #48]	; 0x30
 8013740:	e005      	b.n	801374e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013742:	6978      	ldr	r0, [r7, #20]
 8013744:	f001 fb2e 	bl	8014da4 <vPortFree>
 8013748:	e001      	b.n	801374e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801374a:	2300      	movs	r3, #0
 801374c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801374e:	69fb      	ldr	r3, [r7, #28]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d017      	beq.n	8013784 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013754:	69fb      	ldr	r3, [r7, #28]
 8013756:	2200      	movs	r2, #0
 8013758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801375c:	88fa      	ldrh	r2, [r7, #6]
 801375e:	2300      	movs	r3, #0
 8013760:	9303      	str	r3, [sp, #12]
 8013762:	69fb      	ldr	r3, [r7, #28]
 8013764:	9302      	str	r3, [sp, #8]
 8013766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013768:	9301      	str	r3, [sp, #4]
 801376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801376c:	9300      	str	r3, [sp, #0]
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	68b9      	ldr	r1, [r7, #8]
 8013772:	68f8      	ldr	r0, [r7, #12]
 8013774:	f000 f80e 	bl	8013794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013778:	69f8      	ldr	r0, [r7, #28]
 801377a:	f000 f891 	bl	80138a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801377e:	2301      	movs	r3, #1
 8013780:	61bb      	str	r3, [r7, #24]
 8013782:	e002      	b.n	801378a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013784:	f04f 33ff 	mov.w	r3, #4294967295
 8013788:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801378a:	69bb      	ldr	r3, [r7, #24]
	}
 801378c:	4618      	mov	r0, r3
 801378e:	3720      	adds	r7, #32
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}

08013794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b088      	sub	sp, #32
 8013798:	af00      	add	r7, sp, #0
 801379a:	60f8      	str	r0, [r7, #12]
 801379c:	60b9      	str	r1, [r7, #8]
 801379e:	607a      	str	r2, [r7, #4]
 80137a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80137a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80137ac:	3b01      	subs	r3, #1
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	4413      	add	r3, r2
 80137b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80137b4:	69bb      	ldr	r3, [r7, #24]
 80137b6:	f023 0307 	bic.w	r3, r3, #7
 80137ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80137bc:	69bb      	ldr	r3, [r7, #24]
 80137be:	f003 0307 	and.w	r3, r3, #7
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d009      	beq.n	80137da <prvInitialiseNewTask+0x46>
 80137c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ca:	f383 8811 	msr	BASEPRI, r3
 80137ce:	f3bf 8f6f 	isb	sy
 80137d2:	f3bf 8f4f 	dsb	sy
 80137d6:	617b      	str	r3, [r7, #20]
 80137d8:	e7fe      	b.n	80137d8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d01f      	beq.n	8013820 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80137e0:	2300      	movs	r3, #0
 80137e2:	61fb      	str	r3, [r7, #28]
 80137e4:	e012      	b.n	801380c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80137e6:	68ba      	ldr	r2, [r7, #8]
 80137e8:	69fb      	ldr	r3, [r7, #28]
 80137ea:	4413      	add	r3, r2
 80137ec:	7819      	ldrb	r1, [r3, #0]
 80137ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	4413      	add	r3, r2
 80137f4:	3334      	adds	r3, #52	; 0x34
 80137f6:	460a      	mov	r2, r1
 80137f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80137fa:	68ba      	ldr	r2, [r7, #8]
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	4413      	add	r3, r2
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d006      	beq.n	8013814 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013806:	69fb      	ldr	r3, [r7, #28]
 8013808:	3301      	adds	r3, #1
 801380a:	61fb      	str	r3, [r7, #28]
 801380c:	69fb      	ldr	r3, [r7, #28]
 801380e:	2b0f      	cmp	r3, #15
 8013810:	d9e9      	bls.n	80137e6 <prvInitialiseNewTask+0x52>
 8013812:	e000      	b.n	8013816 <prvInitialiseNewTask+0x82>
			{
				break;
 8013814:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013818:	2200      	movs	r2, #0
 801381a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801381e:	e003      	b.n	8013828 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013822:	2200      	movs	r2, #0
 8013824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801382a:	2b06      	cmp	r3, #6
 801382c:	d901      	bls.n	8013832 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801382e:	2306      	movs	r3, #6
 8013830:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013836:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801383c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013840:	2200      	movs	r2, #0
 8013842:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013846:	3304      	adds	r3, #4
 8013848:	4618      	mov	r0, r3
 801384a:	f7ff f8f2 	bl	8012a32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013850:	3318      	adds	r3, #24
 8013852:	4618      	mov	r0, r3
 8013854:	f7ff f8ed 	bl	8012a32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801385a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801385c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013860:	f1c3 0207 	rsb	r2, r3, #7
 8013864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013866:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801386a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801386c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013870:	2200      	movs	r2, #0
 8013872:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013876:	2200      	movs	r2, #0
 8013878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801387c:	683a      	ldr	r2, [r7, #0]
 801387e:	68f9      	ldr	r1, [r7, #12]
 8013880:	69b8      	ldr	r0, [r7, #24]
 8013882:	f000 ff8b 	bl	801479c <pxPortInitialiseStack>
 8013886:	4602      	mov	r2, r0
 8013888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388e:	2b00      	cmp	r3, #0
 8013890:	d002      	beq.n	8013898 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013896:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013898:	bf00      	nop
 801389a:	3720      	adds	r7, #32
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}

080138a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b082      	sub	sp, #8
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80138a8:	f001 f8a0 	bl	80149ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80138ac:	4b2a      	ldr	r3, [pc, #168]	; (8013958 <prvAddNewTaskToReadyList+0xb8>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	3301      	adds	r3, #1
 80138b2:	4a29      	ldr	r2, [pc, #164]	; (8013958 <prvAddNewTaskToReadyList+0xb8>)
 80138b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80138b6:	4b29      	ldr	r3, [pc, #164]	; (801395c <prvAddNewTaskToReadyList+0xbc>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d109      	bne.n	80138d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80138be:	4a27      	ldr	r2, [pc, #156]	; (801395c <prvAddNewTaskToReadyList+0xbc>)
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80138c4:	4b24      	ldr	r3, [pc, #144]	; (8013958 <prvAddNewTaskToReadyList+0xb8>)
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d110      	bne.n	80138ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80138cc:	f000 fbc0 	bl	8014050 <prvInitialiseTaskLists>
 80138d0:	e00d      	b.n	80138ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80138d2:	4b23      	ldr	r3, [pc, #140]	; (8013960 <prvAddNewTaskToReadyList+0xc0>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d109      	bne.n	80138ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80138da:	4b20      	ldr	r3, [pc, #128]	; (801395c <prvAddNewTaskToReadyList+0xbc>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138e4:	429a      	cmp	r2, r3
 80138e6:	d802      	bhi.n	80138ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80138e8:	4a1c      	ldr	r2, [pc, #112]	; (801395c <prvAddNewTaskToReadyList+0xbc>)
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80138ee:	4b1d      	ldr	r3, [pc, #116]	; (8013964 <prvAddNewTaskToReadyList+0xc4>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	3301      	adds	r3, #1
 80138f4:	4a1b      	ldr	r2, [pc, #108]	; (8013964 <prvAddNewTaskToReadyList+0xc4>)
 80138f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138fc:	2201      	movs	r2, #1
 80138fe:	409a      	lsls	r2, r3
 8013900:	4b19      	ldr	r3, [pc, #100]	; (8013968 <prvAddNewTaskToReadyList+0xc8>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	4313      	orrs	r3, r2
 8013906:	4a18      	ldr	r2, [pc, #96]	; (8013968 <prvAddNewTaskToReadyList+0xc8>)
 8013908:	6013      	str	r3, [r2, #0]
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801390e:	4613      	mov	r3, r2
 8013910:	009b      	lsls	r3, r3, #2
 8013912:	4413      	add	r3, r2
 8013914:	009b      	lsls	r3, r3, #2
 8013916:	4a15      	ldr	r2, [pc, #84]	; (801396c <prvAddNewTaskToReadyList+0xcc>)
 8013918:	441a      	add	r2, r3
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	3304      	adds	r3, #4
 801391e:	4619      	mov	r1, r3
 8013920:	4610      	mov	r0, r2
 8013922:	f7ff f893 	bl	8012a4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013926:	f001 f88f 	bl	8014a48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801392a:	4b0d      	ldr	r3, [pc, #52]	; (8013960 <prvAddNewTaskToReadyList+0xc0>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d00e      	beq.n	8013950 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013932:	4b0a      	ldr	r3, [pc, #40]	; (801395c <prvAddNewTaskToReadyList+0xbc>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801393c:	429a      	cmp	r2, r3
 801393e:	d207      	bcs.n	8013950 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013940:	4b0b      	ldr	r3, [pc, #44]	; (8013970 <prvAddNewTaskToReadyList+0xd0>)
 8013942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013946:	601a      	str	r2, [r3, #0]
 8013948:	f3bf 8f4f 	dsb	sy
 801394c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013950:	bf00      	nop
 8013952:	3708      	adds	r7, #8
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}
 8013958:	2000110c 	.word	0x2000110c
 801395c:	2000100c 	.word	0x2000100c
 8013960:	20001118 	.word	0x20001118
 8013964:	20001128 	.word	0x20001128
 8013968:	20001114 	.word	0x20001114
 801396c:	20001010 	.word	0x20001010
 8013970:	e000ed04 	.word	0xe000ed04

08013974 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013974:	b580      	push	{r7, lr}
 8013976:	b084      	sub	sp, #16
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801397c:	2300      	movs	r3, #0
 801397e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d016      	beq.n	80139b4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013986:	4b13      	ldr	r3, [pc, #76]	; (80139d4 <vTaskDelay+0x60>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d009      	beq.n	80139a2 <vTaskDelay+0x2e>
 801398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013992:	f383 8811 	msr	BASEPRI, r3
 8013996:	f3bf 8f6f 	isb	sy
 801399a:	f3bf 8f4f 	dsb	sy
 801399e:	60bb      	str	r3, [r7, #8]
 80139a0:	e7fe      	b.n	80139a0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80139a2:	f000 f879 	bl	8013a98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80139a6:	2100      	movs	r1, #0
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f000 fe91 	bl	80146d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80139ae:	f000 f881 	bl	8013ab4 <xTaskResumeAll>
 80139b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d107      	bne.n	80139ca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80139ba:	4b07      	ldr	r3, [pc, #28]	; (80139d8 <vTaskDelay+0x64>)
 80139bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139c0:	601a      	str	r2, [r3, #0]
 80139c2:	f3bf 8f4f 	dsb	sy
 80139c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80139ca:	bf00      	nop
 80139cc:	3710      	adds	r7, #16
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}
 80139d2:	bf00      	nop
 80139d4:	20001134 	.word	0x20001134
 80139d8:	e000ed04 	.word	0xe000ed04

080139dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b08a      	sub	sp, #40	; 0x28
 80139e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80139e2:	2300      	movs	r3, #0
 80139e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80139e6:	2300      	movs	r3, #0
 80139e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80139ea:	463a      	mov	r2, r7
 80139ec:	1d39      	adds	r1, r7, #4
 80139ee:	f107 0308 	add.w	r3, r7, #8
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7ee f8fe 	bl	8001bf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80139f8:	6839      	ldr	r1, [r7, #0]
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	68ba      	ldr	r2, [r7, #8]
 80139fe:	9202      	str	r2, [sp, #8]
 8013a00:	9301      	str	r3, [sp, #4]
 8013a02:	2300      	movs	r3, #0
 8013a04:	9300      	str	r3, [sp, #0]
 8013a06:	2300      	movs	r3, #0
 8013a08:	460a      	mov	r2, r1
 8013a0a:	491d      	ldr	r1, [pc, #116]	; (8013a80 <vTaskStartScheduler+0xa4>)
 8013a0c:	481d      	ldr	r0, [pc, #116]	; (8013a84 <vTaskStartScheduler+0xa8>)
 8013a0e:	f7ff fe22 	bl	8013656 <xTaskCreateStatic>
 8013a12:	4602      	mov	r2, r0
 8013a14:	4b1c      	ldr	r3, [pc, #112]	; (8013a88 <vTaskStartScheduler+0xac>)
 8013a16:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013a18:	4b1b      	ldr	r3, [pc, #108]	; (8013a88 <vTaskStartScheduler+0xac>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d002      	beq.n	8013a26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013a20:	2301      	movs	r3, #1
 8013a22:	617b      	str	r3, [r7, #20]
 8013a24:	e001      	b.n	8013a2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013a26:	2300      	movs	r3, #0
 8013a28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	d115      	bne.n	8013a5c <vTaskStartScheduler+0x80>
 8013a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a34:	f383 8811 	msr	BASEPRI, r3
 8013a38:	f3bf 8f6f 	isb	sy
 8013a3c:	f3bf 8f4f 	dsb	sy
 8013a40:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013a42:	4b12      	ldr	r3, [pc, #72]	; (8013a8c <vTaskStartScheduler+0xb0>)
 8013a44:	f04f 32ff 	mov.w	r2, #4294967295
 8013a48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013a4a:	4b11      	ldr	r3, [pc, #68]	; (8013a90 <vTaskStartScheduler+0xb4>)
 8013a4c:	2201      	movs	r2, #1
 8013a4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013a50:	4b10      	ldr	r3, [pc, #64]	; (8013a94 <vTaskStartScheduler+0xb8>)
 8013a52:	2200      	movs	r2, #0
 8013a54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013a56:	f000 ff2b 	bl	80148b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013a5a:	e00d      	b.n	8013a78 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a62:	d109      	bne.n	8013a78 <vTaskStartScheduler+0x9c>
 8013a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a68:	f383 8811 	msr	BASEPRI, r3
 8013a6c:	f3bf 8f6f 	isb	sy
 8013a70:	f3bf 8f4f 	dsb	sy
 8013a74:	60fb      	str	r3, [r7, #12]
 8013a76:	e7fe      	b.n	8013a76 <vTaskStartScheduler+0x9a>
}
 8013a78:	bf00      	nop
 8013a7a:	3718      	adds	r7, #24
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	0801b20c 	.word	0x0801b20c
 8013a84:	08014021 	.word	0x08014021
 8013a88:	20001130 	.word	0x20001130
 8013a8c:	2000112c 	.word	0x2000112c
 8013a90:	20001118 	.word	0x20001118
 8013a94:	20001110 	.word	0x20001110

08013a98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013a98:	b480      	push	{r7}
 8013a9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013a9c:	4b04      	ldr	r3, [pc, #16]	; (8013ab0 <vTaskSuspendAll+0x18>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	3301      	adds	r3, #1
 8013aa2:	4a03      	ldr	r2, [pc, #12]	; (8013ab0 <vTaskSuspendAll+0x18>)
 8013aa4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013aa6:	bf00      	nop
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr
 8013ab0:	20001134 	.word	0x20001134

08013ab4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b084      	sub	sp, #16
 8013ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013aba:	2300      	movs	r3, #0
 8013abc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013ac2:	4b41      	ldr	r3, [pc, #260]	; (8013bc8 <xTaskResumeAll+0x114>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d109      	bne.n	8013ade <xTaskResumeAll+0x2a>
 8013aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ace:	f383 8811 	msr	BASEPRI, r3
 8013ad2:	f3bf 8f6f 	isb	sy
 8013ad6:	f3bf 8f4f 	dsb	sy
 8013ada:	603b      	str	r3, [r7, #0]
 8013adc:	e7fe      	b.n	8013adc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013ade:	f000 ff85 	bl	80149ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013ae2:	4b39      	ldr	r3, [pc, #228]	; (8013bc8 <xTaskResumeAll+0x114>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	3b01      	subs	r3, #1
 8013ae8:	4a37      	ldr	r2, [pc, #220]	; (8013bc8 <xTaskResumeAll+0x114>)
 8013aea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013aec:	4b36      	ldr	r3, [pc, #216]	; (8013bc8 <xTaskResumeAll+0x114>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d161      	bne.n	8013bb8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013af4:	4b35      	ldr	r3, [pc, #212]	; (8013bcc <xTaskResumeAll+0x118>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d05d      	beq.n	8013bb8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013afc:	e02e      	b.n	8013b5c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013afe:	4b34      	ldr	r3, [pc, #208]	; (8013bd0 <xTaskResumeAll+0x11c>)
 8013b00:	68db      	ldr	r3, [r3, #12]
 8013b02:	68db      	ldr	r3, [r3, #12]
 8013b04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	3318      	adds	r3, #24
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f7fe fffb 	bl	8012b06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	3304      	adds	r3, #4
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7fe fff6 	bl	8012b06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b1e:	2201      	movs	r2, #1
 8013b20:	409a      	lsls	r2, r3
 8013b22:	4b2c      	ldr	r3, [pc, #176]	; (8013bd4 <xTaskResumeAll+0x120>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	4313      	orrs	r3, r2
 8013b28:	4a2a      	ldr	r2, [pc, #168]	; (8013bd4 <xTaskResumeAll+0x120>)
 8013b2a:	6013      	str	r3, [r2, #0]
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b30:	4613      	mov	r3, r2
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	4413      	add	r3, r2
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	4a27      	ldr	r2, [pc, #156]	; (8013bd8 <xTaskResumeAll+0x124>)
 8013b3a:	441a      	add	r2, r3
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	3304      	adds	r3, #4
 8013b40:	4619      	mov	r1, r3
 8013b42:	4610      	mov	r0, r2
 8013b44:	f7fe ff82 	bl	8012a4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b4c:	4b23      	ldr	r3, [pc, #140]	; (8013bdc <xTaskResumeAll+0x128>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d302      	bcc.n	8013b5c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013b56:	4b22      	ldr	r3, [pc, #136]	; (8013be0 <xTaskResumeAll+0x12c>)
 8013b58:	2201      	movs	r2, #1
 8013b5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b5c:	4b1c      	ldr	r3, [pc, #112]	; (8013bd0 <xTaskResumeAll+0x11c>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d1cc      	bne.n	8013afe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d001      	beq.n	8013b6e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013b6a:	f000 fb0b 	bl	8014184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013b6e:	4b1d      	ldr	r3, [pc, #116]	; (8013be4 <xTaskResumeAll+0x130>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d010      	beq.n	8013b9c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013b7a:	f000 f837 	bl	8013bec <xTaskIncrementTick>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d002      	beq.n	8013b8a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8013b84:	4b16      	ldr	r3, [pc, #88]	; (8013be0 <xTaskResumeAll+0x12c>)
 8013b86:	2201      	movs	r2, #1
 8013b88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	3b01      	subs	r3, #1
 8013b8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d1f1      	bne.n	8013b7a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8013b96:	4b13      	ldr	r3, [pc, #76]	; (8013be4 <xTaskResumeAll+0x130>)
 8013b98:	2200      	movs	r2, #0
 8013b9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013b9c:	4b10      	ldr	r3, [pc, #64]	; (8013be0 <xTaskResumeAll+0x12c>)
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d009      	beq.n	8013bb8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013ba8:	4b0f      	ldr	r3, [pc, #60]	; (8013be8 <xTaskResumeAll+0x134>)
 8013baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bae:	601a      	str	r2, [r3, #0]
 8013bb0:	f3bf 8f4f 	dsb	sy
 8013bb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013bb8:	f000 ff46 	bl	8014a48 <vPortExitCritical>

	return xAlreadyYielded;
 8013bbc:	68bb      	ldr	r3, [r7, #8]
}
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3710      	adds	r7, #16
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}
 8013bc6:	bf00      	nop
 8013bc8:	20001134 	.word	0x20001134
 8013bcc:	2000110c 	.word	0x2000110c
 8013bd0:	200010cc 	.word	0x200010cc
 8013bd4:	20001114 	.word	0x20001114
 8013bd8:	20001010 	.word	0x20001010
 8013bdc:	2000100c 	.word	0x2000100c
 8013be0:	20001120 	.word	0x20001120
 8013be4:	2000111c 	.word	0x2000111c
 8013be8:	e000ed04 	.word	0xe000ed04

08013bec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b086      	sub	sp, #24
 8013bf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013bf6:	4b4e      	ldr	r3, [pc, #312]	; (8013d30 <xTaskIncrementTick+0x144>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	f040 8087 	bne.w	8013d0e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013c00:	4b4c      	ldr	r3, [pc, #304]	; (8013d34 <xTaskIncrementTick+0x148>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	3301      	adds	r3, #1
 8013c06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013c08:	4a4a      	ldr	r2, [pc, #296]	; (8013d34 <xTaskIncrementTick+0x148>)
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d11f      	bne.n	8013c54 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013c14:	4b48      	ldr	r3, [pc, #288]	; (8013d38 <xTaskIncrementTick+0x14c>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d009      	beq.n	8013c32 <xTaskIncrementTick+0x46>
 8013c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c22:	f383 8811 	msr	BASEPRI, r3
 8013c26:	f3bf 8f6f 	isb	sy
 8013c2a:	f3bf 8f4f 	dsb	sy
 8013c2e:	603b      	str	r3, [r7, #0]
 8013c30:	e7fe      	b.n	8013c30 <xTaskIncrementTick+0x44>
 8013c32:	4b41      	ldr	r3, [pc, #260]	; (8013d38 <xTaskIncrementTick+0x14c>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	60fb      	str	r3, [r7, #12]
 8013c38:	4b40      	ldr	r3, [pc, #256]	; (8013d3c <xTaskIncrementTick+0x150>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	4a3e      	ldr	r2, [pc, #248]	; (8013d38 <xTaskIncrementTick+0x14c>)
 8013c3e:	6013      	str	r3, [r2, #0]
 8013c40:	4a3e      	ldr	r2, [pc, #248]	; (8013d3c <xTaskIncrementTick+0x150>)
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	6013      	str	r3, [r2, #0]
 8013c46:	4b3e      	ldr	r3, [pc, #248]	; (8013d40 <xTaskIncrementTick+0x154>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	3301      	adds	r3, #1
 8013c4c:	4a3c      	ldr	r2, [pc, #240]	; (8013d40 <xTaskIncrementTick+0x154>)
 8013c4e:	6013      	str	r3, [r2, #0]
 8013c50:	f000 fa98 	bl	8014184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013c54:	4b3b      	ldr	r3, [pc, #236]	; (8013d44 <xTaskIncrementTick+0x158>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	693a      	ldr	r2, [r7, #16]
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d348      	bcc.n	8013cf0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c5e:	4b36      	ldr	r3, [pc, #216]	; (8013d38 <xTaskIncrementTick+0x14c>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d104      	bne.n	8013c72 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c68:	4b36      	ldr	r3, [pc, #216]	; (8013d44 <xTaskIncrementTick+0x158>)
 8013c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c6e:	601a      	str	r2, [r3, #0]
					break;
 8013c70:	e03e      	b.n	8013cf0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c72:	4b31      	ldr	r3, [pc, #196]	; (8013d38 <xTaskIncrementTick+0x14c>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	68db      	ldr	r3, [r3, #12]
 8013c78:	68db      	ldr	r3, [r3, #12]
 8013c7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013c82:	693a      	ldr	r2, [r7, #16]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d203      	bcs.n	8013c92 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013c8a:	4a2e      	ldr	r2, [pc, #184]	; (8013d44 <xTaskIncrementTick+0x158>)
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013c90:	e02e      	b.n	8013cf0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	3304      	adds	r3, #4
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fe ff35 	bl	8012b06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013c9c:	68bb      	ldr	r3, [r7, #8]
 8013c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d004      	beq.n	8013cae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	3318      	adds	r3, #24
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7fe ff2c 	bl	8012b06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013cae:	68bb      	ldr	r3, [r7, #8]
 8013cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cb2:	2201      	movs	r2, #1
 8013cb4:	409a      	lsls	r2, r3
 8013cb6:	4b24      	ldr	r3, [pc, #144]	; (8013d48 <xTaskIncrementTick+0x15c>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	4a22      	ldr	r2, [pc, #136]	; (8013d48 <xTaskIncrementTick+0x15c>)
 8013cbe:	6013      	str	r3, [r2, #0]
 8013cc0:	68bb      	ldr	r3, [r7, #8]
 8013cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cc4:	4613      	mov	r3, r2
 8013cc6:	009b      	lsls	r3, r3, #2
 8013cc8:	4413      	add	r3, r2
 8013cca:	009b      	lsls	r3, r3, #2
 8013ccc:	4a1f      	ldr	r2, [pc, #124]	; (8013d4c <xTaskIncrementTick+0x160>)
 8013cce:	441a      	add	r2, r3
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	3304      	adds	r3, #4
 8013cd4:	4619      	mov	r1, r3
 8013cd6:	4610      	mov	r0, r2
 8013cd8:	f7fe feb8 	bl	8012a4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ce0:	4b1b      	ldr	r3, [pc, #108]	; (8013d50 <xTaskIncrementTick+0x164>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d3b9      	bcc.n	8013c5e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013cea:	2301      	movs	r3, #1
 8013cec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013cee:	e7b6      	b.n	8013c5e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013cf0:	4b17      	ldr	r3, [pc, #92]	; (8013d50 <xTaskIncrementTick+0x164>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cf6:	4915      	ldr	r1, [pc, #84]	; (8013d4c <xTaskIncrementTick+0x160>)
 8013cf8:	4613      	mov	r3, r2
 8013cfa:	009b      	lsls	r3, r3, #2
 8013cfc:	4413      	add	r3, r2
 8013cfe:	009b      	lsls	r3, r3, #2
 8013d00:	440b      	add	r3, r1
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	2b01      	cmp	r3, #1
 8013d06:	d907      	bls.n	8013d18 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8013d08:	2301      	movs	r3, #1
 8013d0a:	617b      	str	r3, [r7, #20]
 8013d0c:	e004      	b.n	8013d18 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013d0e:	4b11      	ldr	r3, [pc, #68]	; (8013d54 <xTaskIncrementTick+0x168>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	3301      	adds	r3, #1
 8013d14:	4a0f      	ldr	r2, [pc, #60]	; (8013d54 <xTaskIncrementTick+0x168>)
 8013d16:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013d18:	4b0f      	ldr	r3, [pc, #60]	; (8013d58 <xTaskIncrementTick+0x16c>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d001      	beq.n	8013d24 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8013d20:	2301      	movs	r3, #1
 8013d22:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013d24:	697b      	ldr	r3, [r7, #20]
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3718      	adds	r7, #24
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
 8013d2e:	bf00      	nop
 8013d30:	20001134 	.word	0x20001134
 8013d34:	20001110 	.word	0x20001110
 8013d38:	200010c4 	.word	0x200010c4
 8013d3c:	200010c8 	.word	0x200010c8
 8013d40:	20001124 	.word	0x20001124
 8013d44:	2000112c 	.word	0x2000112c
 8013d48:	20001114 	.word	0x20001114
 8013d4c:	20001010 	.word	0x20001010
 8013d50:	2000100c 	.word	0x2000100c
 8013d54:	2000111c 	.word	0x2000111c
 8013d58:	20001120 	.word	0x20001120

08013d5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b087      	sub	sp, #28
 8013d60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013d62:	4b26      	ldr	r3, [pc, #152]	; (8013dfc <vTaskSwitchContext+0xa0>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d003      	beq.n	8013d72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013d6a:	4b25      	ldr	r3, [pc, #148]	; (8013e00 <vTaskSwitchContext+0xa4>)
 8013d6c:	2201      	movs	r2, #1
 8013d6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013d70:	e03e      	b.n	8013df0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8013d72:	4b23      	ldr	r3, [pc, #140]	; (8013e00 <vTaskSwitchContext+0xa4>)
 8013d74:	2200      	movs	r2, #0
 8013d76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d78:	4b22      	ldr	r3, [pc, #136]	; (8013e04 <vTaskSwitchContext+0xa8>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	fab3 f383 	clz	r3, r3
 8013d84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013d86:	7afb      	ldrb	r3, [r7, #11]
 8013d88:	f1c3 031f 	rsb	r3, r3, #31
 8013d8c:	617b      	str	r3, [r7, #20]
 8013d8e:	491e      	ldr	r1, [pc, #120]	; (8013e08 <vTaskSwitchContext+0xac>)
 8013d90:	697a      	ldr	r2, [r7, #20]
 8013d92:	4613      	mov	r3, r2
 8013d94:	009b      	lsls	r3, r3, #2
 8013d96:	4413      	add	r3, r2
 8013d98:	009b      	lsls	r3, r3, #2
 8013d9a:	440b      	add	r3, r1
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d109      	bne.n	8013db6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8013da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da6:	f383 8811 	msr	BASEPRI, r3
 8013daa:	f3bf 8f6f 	isb	sy
 8013dae:	f3bf 8f4f 	dsb	sy
 8013db2:	607b      	str	r3, [r7, #4]
 8013db4:	e7fe      	b.n	8013db4 <vTaskSwitchContext+0x58>
 8013db6:	697a      	ldr	r2, [r7, #20]
 8013db8:	4613      	mov	r3, r2
 8013dba:	009b      	lsls	r3, r3, #2
 8013dbc:	4413      	add	r3, r2
 8013dbe:	009b      	lsls	r3, r3, #2
 8013dc0:	4a11      	ldr	r2, [pc, #68]	; (8013e08 <vTaskSwitchContext+0xac>)
 8013dc2:	4413      	add	r3, r2
 8013dc4:	613b      	str	r3, [r7, #16]
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	685b      	ldr	r3, [r3, #4]
 8013dca:	685a      	ldr	r2, [r3, #4]
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	605a      	str	r2, [r3, #4]
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	685a      	ldr	r2, [r3, #4]
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	3308      	adds	r3, #8
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d104      	bne.n	8013de6 <vTaskSwitchContext+0x8a>
 8013ddc:	693b      	ldr	r3, [r7, #16]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	685a      	ldr	r2, [r3, #4]
 8013de2:	693b      	ldr	r3, [r7, #16]
 8013de4:	605a      	str	r2, [r3, #4]
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	685b      	ldr	r3, [r3, #4]
 8013dea:	68db      	ldr	r3, [r3, #12]
 8013dec:	4a07      	ldr	r2, [pc, #28]	; (8013e0c <vTaskSwitchContext+0xb0>)
 8013dee:	6013      	str	r3, [r2, #0]
}
 8013df0:	bf00      	nop
 8013df2:	371c      	adds	r7, #28
 8013df4:	46bd      	mov	sp, r7
 8013df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfa:	4770      	bx	lr
 8013dfc:	20001134 	.word	0x20001134
 8013e00:	20001120 	.word	0x20001120
 8013e04:	20001114 	.word	0x20001114
 8013e08:	20001010 	.word	0x20001010
 8013e0c:	2000100c 	.word	0x2000100c

08013e10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b084      	sub	sp, #16
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d109      	bne.n	8013e34 <vTaskPlaceOnEventList+0x24>
 8013e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e24:	f383 8811 	msr	BASEPRI, r3
 8013e28:	f3bf 8f6f 	isb	sy
 8013e2c:	f3bf 8f4f 	dsb	sy
 8013e30:	60fb      	str	r3, [r7, #12]
 8013e32:	e7fe      	b.n	8013e32 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013e34:	4b07      	ldr	r3, [pc, #28]	; (8013e54 <vTaskPlaceOnEventList+0x44>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	3318      	adds	r3, #24
 8013e3a:	4619      	mov	r1, r3
 8013e3c:	6878      	ldr	r0, [r7, #4]
 8013e3e:	f7fe fe29 	bl	8012a94 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013e42:	2101      	movs	r1, #1
 8013e44:	6838      	ldr	r0, [r7, #0]
 8013e46:	f000 fc43 	bl	80146d0 <prvAddCurrentTaskToDelayedList>
}
 8013e4a:	bf00      	nop
 8013e4c:	3710      	adds	r7, #16
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}
 8013e52:	bf00      	nop
 8013e54:	2000100c 	.word	0x2000100c

08013e58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b086      	sub	sp, #24
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	68db      	ldr	r3, [r3, #12]
 8013e66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d109      	bne.n	8013e82 <xTaskRemoveFromEventList+0x2a>
 8013e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e72:	f383 8811 	msr	BASEPRI, r3
 8013e76:	f3bf 8f6f 	isb	sy
 8013e7a:	f3bf 8f4f 	dsb	sy
 8013e7e:	60fb      	str	r3, [r7, #12]
 8013e80:	e7fe      	b.n	8013e80 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	3318      	adds	r3, #24
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7fe fe3d 	bl	8012b06 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e8c:	4b1d      	ldr	r3, [pc, #116]	; (8013f04 <xTaskRemoveFromEventList+0xac>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d11c      	bne.n	8013ece <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	3304      	adds	r3, #4
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7fe fe34 	bl	8012b06 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ea2:	2201      	movs	r2, #1
 8013ea4:	409a      	lsls	r2, r3
 8013ea6:	4b18      	ldr	r3, [pc, #96]	; (8013f08 <xTaskRemoveFromEventList+0xb0>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	4313      	orrs	r3, r2
 8013eac:	4a16      	ldr	r2, [pc, #88]	; (8013f08 <xTaskRemoveFromEventList+0xb0>)
 8013eae:	6013      	str	r3, [r2, #0]
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eb4:	4613      	mov	r3, r2
 8013eb6:	009b      	lsls	r3, r3, #2
 8013eb8:	4413      	add	r3, r2
 8013eba:	009b      	lsls	r3, r3, #2
 8013ebc:	4a13      	ldr	r2, [pc, #76]	; (8013f0c <xTaskRemoveFromEventList+0xb4>)
 8013ebe:	441a      	add	r2, r3
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	3304      	adds	r3, #4
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	4610      	mov	r0, r2
 8013ec8:	f7fe fdc0 	bl	8012a4c <vListInsertEnd>
 8013ecc:	e005      	b.n	8013eda <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	3318      	adds	r3, #24
 8013ed2:	4619      	mov	r1, r3
 8013ed4:	480e      	ldr	r0, [pc, #56]	; (8013f10 <xTaskRemoveFromEventList+0xb8>)
 8013ed6:	f7fe fdb9 	bl	8012a4c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ede:	4b0d      	ldr	r3, [pc, #52]	; (8013f14 <xTaskRemoveFromEventList+0xbc>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d905      	bls.n	8013ef4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013ee8:	2301      	movs	r3, #1
 8013eea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013eec:	4b0a      	ldr	r3, [pc, #40]	; (8013f18 <xTaskRemoveFromEventList+0xc0>)
 8013eee:	2201      	movs	r2, #1
 8013ef0:	601a      	str	r2, [r3, #0]
 8013ef2:	e001      	b.n	8013ef8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013ef8:	697b      	ldr	r3, [r7, #20]
}
 8013efa:	4618      	mov	r0, r3
 8013efc:	3718      	adds	r7, #24
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}
 8013f02:	bf00      	nop
 8013f04:	20001134 	.word	0x20001134
 8013f08:	20001114 	.word	0x20001114
 8013f0c:	20001010 	.word	0x20001010
 8013f10:	200010cc 	.word	0x200010cc
 8013f14:	2000100c 	.word	0x2000100c
 8013f18:	20001120 	.word	0x20001120

08013f1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013f24:	4b06      	ldr	r3, [pc, #24]	; (8013f40 <vTaskInternalSetTimeOutState+0x24>)
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013f2c:	4b05      	ldr	r3, [pc, #20]	; (8013f44 <vTaskInternalSetTimeOutState+0x28>)
 8013f2e:	681a      	ldr	r2, [r3, #0]
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	605a      	str	r2, [r3, #4]
}
 8013f34:	bf00      	nop
 8013f36:	370c      	adds	r7, #12
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3e:	4770      	bx	lr
 8013f40:	20001124 	.word	0x20001124
 8013f44:	20001110 	.word	0x20001110

08013f48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b088      	sub	sp, #32
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d109      	bne.n	8013f6c <xTaskCheckForTimeOut+0x24>
 8013f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f5c:	f383 8811 	msr	BASEPRI, r3
 8013f60:	f3bf 8f6f 	isb	sy
 8013f64:	f3bf 8f4f 	dsb	sy
 8013f68:	613b      	str	r3, [r7, #16]
 8013f6a:	e7fe      	b.n	8013f6a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d109      	bne.n	8013f86 <xTaskCheckForTimeOut+0x3e>
 8013f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f76:	f383 8811 	msr	BASEPRI, r3
 8013f7a:	f3bf 8f6f 	isb	sy
 8013f7e:	f3bf 8f4f 	dsb	sy
 8013f82:	60fb      	str	r3, [r7, #12]
 8013f84:	e7fe      	b.n	8013f84 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013f86:	f000 fd31 	bl	80149ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013f8a:	4b1d      	ldr	r3, [pc, #116]	; (8014000 <xTaskCheckForTimeOut+0xb8>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	685b      	ldr	r3, [r3, #4]
 8013f94:	69ba      	ldr	r2, [r7, #24]
 8013f96:	1ad3      	subs	r3, r2, r3
 8013f98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fa2:	d102      	bne.n	8013faa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	61fb      	str	r3, [r7, #28]
 8013fa8:	e023      	b.n	8013ff2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681a      	ldr	r2, [r3, #0]
 8013fae:	4b15      	ldr	r3, [pc, #84]	; (8014004 <xTaskCheckForTimeOut+0xbc>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d007      	beq.n	8013fc6 <xTaskCheckForTimeOut+0x7e>
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	69ba      	ldr	r2, [r7, #24]
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d302      	bcc.n	8013fc6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	61fb      	str	r3, [r7, #28]
 8013fc4:	e015      	b.n	8013ff2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	697a      	ldr	r2, [r7, #20]
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d20b      	bcs.n	8013fe8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	681a      	ldr	r2, [r3, #0]
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	1ad2      	subs	r2, r2, r3
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f7ff ff9d 	bl	8013f1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	61fb      	str	r3, [r7, #28]
 8013fe6:	e004      	b.n	8013ff2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	2200      	movs	r2, #0
 8013fec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013fee:	2301      	movs	r3, #1
 8013ff0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013ff2:	f000 fd29 	bl	8014a48 <vPortExitCritical>

	return xReturn;
 8013ff6:	69fb      	ldr	r3, [r7, #28]
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3720      	adds	r7, #32
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}
 8014000:	20001110 	.word	0x20001110
 8014004:	20001124 	.word	0x20001124

08014008 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014008:	b480      	push	{r7}
 801400a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801400c:	4b03      	ldr	r3, [pc, #12]	; (801401c <vTaskMissedYield+0x14>)
 801400e:	2201      	movs	r2, #1
 8014010:	601a      	str	r2, [r3, #0]
}
 8014012:	bf00      	nop
 8014014:	46bd      	mov	sp, r7
 8014016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401a:	4770      	bx	lr
 801401c:	20001120 	.word	0x20001120

08014020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014028:	f000 f852 	bl	80140d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801402c:	4b06      	ldr	r3, [pc, #24]	; (8014048 <prvIdleTask+0x28>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	2b01      	cmp	r3, #1
 8014032:	d9f9      	bls.n	8014028 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014034:	4b05      	ldr	r3, [pc, #20]	; (801404c <prvIdleTask+0x2c>)
 8014036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801403a:	601a      	str	r2, [r3, #0]
 801403c:	f3bf 8f4f 	dsb	sy
 8014040:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014044:	e7f0      	b.n	8014028 <prvIdleTask+0x8>
 8014046:	bf00      	nop
 8014048:	20001010 	.word	0x20001010
 801404c:	e000ed04 	.word	0xe000ed04

08014050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014056:	2300      	movs	r3, #0
 8014058:	607b      	str	r3, [r7, #4]
 801405a:	e00c      	b.n	8014076 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801405c:	687a      	ldr	r2, [r7, #4]
 801405e:	4613      	mov	r3, r2
 8014060:	009b      	lsls	r3, r3, #2
 8014062:	4413      	add	r3, r2
 8014064:	009b      	lsls	r3, r3, #2
 8014066:	4a12      	ldr	r2, [pc, #72]	; (80140b0 <prvInitialiseTaskLists+0x60>)
 8014068:	4413      	add	r3, r2
 801406a:	4618      	mov	r0, r3
 801406c:	f7fe fcc1 	bl	80129f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	3301      	adds	r3, #1
 8014074:	607b      	str	r3, [r7, #4]
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2b06      	cmp	r3, #6
 801407a:	d9ef      	bls.n	801405c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801407c:	480d      	ldr	r0, [pc, #52]	; (80140b4 <prvInitialiseTaskLists+0x64>)
 801407e:	f7fe fcb8 	bl	80129f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014082:	480d      	ldr	r0, [pc, #52]	; (80140b8 <prvInitialiseTaskLists+0x68>)
 8014084:	f7fe fcb5 	bl	80129f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014088:	480c      	ldr	r0, [pc, #48]	; (80140bc <prvInitialiseTaskLists+0x6c>)
 801408a:	f7fe fcb2 	bl	80129f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801408e:	480c      	ldr	r0, [pc, #48]	; (80140c0 <prvInitialiseTaskLists+0x70>)
 8014090:	f7fe fcaf 	bl	80129f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014094:	480b      	ldr	r0, [pc, #44]	; (80140c4 <prvInitialiseTaskLists+0x74>)
 8014096:	f7fe fcac 	bl	80129f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801409a:	4b0b      	ldr	r3, [pc, #44]	; (80140c8 <prvInitialiseTaskLists+0x78>)
 801409c:	4a05      	ldr	r2, [pc, #20]	; (80140b4 <prvInitialiseTaskLists+0x64>)
 801409e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80140a0:	4b0a      	ldr	r3, [pc, #40]	; (80140cc <prvInitialiseTaskLists+0x7c>)
 80140a2:	4a05      	ldr	r2, [pc, #20]	; (80140b8 <prvInitialiseTaskLists+0x68>)
 80140a4:	601a      	str	r2, [r3, #0]
}
 80140a6:	bf00      	nop
 80140a8:	3708      	adds	r7, #8
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	20001010 	.word	0x20001010
 80140b4:	2000109c 	.word	0x2000109c
 80140b8:	200010b0 	.word	0x200010b0
 80140bc:	200010cc 	.word	0x200010cc
 80140c0:	200010e0 	.word	0x200010e0
 80140c4:	200010f8 	.word	0x200010f8
 80140c8:	200010c4 	.word	0x200010c4
 80140cc:	200010c8 	.word	0x200010c8

080140d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80140d6:	e019      	b.n	801410c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80140d8:	f000 fc88 	bl	80149ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140dc:	4b0f      	ldr	r3, [pc, #60]	; (801411c <prvCheckTasksWaitingTermination+0x4c>)
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	68db      	ldr	r3, [r3, #12]
 80140e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	3304      	adds	r3, #4
 80140e8:	4618      	mov	r0, r3
 80140ea:	f7fe fd0c 	bl	8012b06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80140ee:	4b0c      	ldr	r3, [pc, #48]	; (8014120 <prvCheckTasksWaitingTermination+0x50>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	3b01      	subs	r3, #1
 80140f4:	4a0a      	ldr	r2, [pc, #40]	; (8014120 <prvCheckTasksWaitingTermination+0x50>)
 80140f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80140f8:	4b0a      	ldr	r3, [pc, #40]	; (8014124 <prvCheckTasksWaitingTermination+0x54>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	3b01      	subs	r3, #1
 80140fe:	4a09      	ldr	r2, [pc, #36]	; (8014124 <prvCheckTasksWaitingTermination+0x54>)
 8014100:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014102:	f000 fca1 	bl	8014a48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f000 f80e 	bl	8014128 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801410c:	4b05      	ldr	r3, [pc, #20]	; (8014124 <prvCheckTasksWaitingTermination+0x54>)
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d1e1      	bne.n	80140d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014114:	bf00      	nop
 8014116:	3708      	adds	r7, #8
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}
 801411c:	200010e0 	.word	0x200010e0
 8014120:	2000110c 	.word	0x2000110c
 8014124:	200010f4 	.word	0x200010f4

08014128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014128:	b580      	push	{r7, lr}
 801412a:	b084      	sub	sp, #16
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014136:	2b00      	cmp	r3, #0
 8014138:	d108      	bne.n	801414c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801413e:	4618      	mov	r0, r3
 8014140:	f000 fe30 	bl	8014da4 <vPortFree>
				vPortFree( pxTCB );
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f000 fe2d 	bl	8014da4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801414a:	e017      	b.n	801417c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014152:	2b01      	cmp	r3, #1
 8014154:	d103      	bne.n	801415e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f000 fe24 	bl	8014da4 <vPortFree>
	}
 801415c:	e00e      	b.n	801417c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014164:	2b02      	cmp	r3, #2
 8014166:	d009      	beq.n	801417c <prvDeleteTCB+0x54>
 8014168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801416c:	f383 8811 	msr	BASEPRI, r3
 8014170:	f3bf 8f6f 	isb	sy
 8014174:	f3bf 8f4f 	dsb	sy
 8014178:	60fb      	str	r3, [r7, #12]
 801417a:	e7fe      	b.n	801417a <prvDeleteTCB+0x52>
	}
 801417c:	bf00      	nop
 801417e:	3710      	adds	r7, #16
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014184:	b480      	push	{r7}
 8014186:	b083      	sub	sp, #12
 8014188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801418a:	4b0c      	ldr	r3, [pc, #48]	; (80141bc <prvResetNextTaskUnblockTime+0x38>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d104      	bne.n	801419e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014194:	4b0a      	ldr	r3, [pc, #40]	; (80141c0 <prvResetNextTaskUnblockTime+0x3c>)
 8014196:	f04f 32ff 	mov.w	r2, #4294967295
 801419a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801419c:	e008      	b.n	80141b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801419e:	4b07      	ldr	r3, [pc, #28]	; (80141bc <prvResetNextTaskUnblockTime+0x38>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	68db      	ldr	r3, [r3, #12]
 80141a4:	68db      	ldr	r3, [r3, #12]
 80141a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	4a04      	ldr	r2, [pc, #16]	; (80141c0 <prvResetNextTaskUnblockTime+0x3c>)
 80141ae:	6013      	str	r3, [r2, #0]
}
 80141b0:	bf00      	nop
 80141b2:	370c      	adds	r7, #12
 80141b4:	46bd      	mov	sp, r7
 80141b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ba:	4770      	bx	lr
 80141bc:	200010c4 	.word	0x200010c4
 80141c0:	2000112c 	.word	0x2000112c

080141c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80141c4:	b480      	push	{r7}
 80141c6:	b083      	sub	sp, #12
 80141c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80141ca:	4b0b      	ldr	r3, [pc, #44]	; (80141f8 <xTaskGetSchedulerState+0x34>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d102      	bne.n	80141d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80141d2:	2301      	movs	r3, #1
 80141d4:	607b      	str	r3, [r7, #4]
 80141d6:	e008      	b.n	80141ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80141d8:	4b08      	ldr	r3, [pc, #32]	; (80141fc <xTaskGetSchedulerState+0x38>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d102      	bne.n	80141e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80141e0:	2302      	movs	r3, #2
 80141e2:	607b      	str	r3, [r7, #4]
 80141e4:	e001      	b.n	80141ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80141e6:	2300      	movs	r3, #0
 80141e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80141ea:	687b      	ldr	r3, [r7, #4]
	}
 80141ec:	4618      	mov	r0, r3
 80141ee:	370c      	adds	r7, #12
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr
 80141f8:	20001118 	.word	0x20001118
 80141fc:	20001134 	.word	0x20001134

08014200 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014200:	b580      	push	{r7, lr}
 8014202:	b086      	sub	sp, #24
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801420c:	2300      	movs	r3, #0
 801420e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d06c      	beq.n	80142f0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014216:	4b39      	ldr	r3, [pc, #228]	; (80142fc <xTaskPriorityDisinherit+0xfc>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	693a      	ldr	r2, [r7, #16]
 801421c:	429a      	cmp	r2, r3
 801421e:	d009      	beq.n	8014234 <xTaskPriorityDisinherit+0x34>
 8014220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014224:	f383 8811 	msr	BASEPRI, r3
 8014228:	f3bf 8f6f 	isb	sy
 801422c:	f3bf 8f4f 	dsb	sy
 8014230:	60fb      	str	r3, [r7, #12]
 8014232:	e7fe      	b.n	8014232 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8014234:	693b      	ldr	r3, [r7, #16]
 8014236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014238:	2b00      	cmp	r3, #0
 801423a:	d109      	bne.n	8014250 <xTaskPriorityDisinherit+0x50>
 801423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014240:	f383 8811 	msr	BASEPRI, r3
 8014244:	f3bf 8f6f 	isb	sy
 8014248:	f3bf 8f4f 	dsb	sy
 801424c:	60bb      	str	r3, [r7, #8]
 801424e:	e7fe      	b.n	801424e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014254:	1e5a      	subs	r2, r3, #1
 8014256:	693b      	ldr	r3, [r7, #16]
 8014258:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801425a:	693b      	ldr	r3, [r7, #16]
 801425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014262:	429a      	cmp	r2, r3
 8014264:	d044      	beq.n	80142f0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801426a:	2b00      	cmp	r3, #0
 801426c:	d140      	bne.n	80142f0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	3304      	adds	r3, #4
 8014272:	4618      	mov	r0, r3
 8014274:	f7fe fc47 	bl	8012b06 <uxListRemove>
 8014278:	4603      	mov	r3, r0
 801427a:	2b00      	cmp	r3, #0
 801427c:	d115      	bne.n	80142aa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801427e:	693b      	ldr	r3, [r7, #16]
 8014280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014282:	491f      	ldr	r1, [pc, #124]	; (8014300 <xTaskPriorityDisinherit+0x100>)
 8014284:	4613      	mov	r3, r2
 8014286:	009b      	lsls	r3, r3, #2
 8014288:	4413      	add	r3, r2
 801428a:	009b      	lsls	r3, r3, #2
 801428c:	440b      	add	r3, r1
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d10a      	bne.n	80142aa <xTaskPriorityDisinherit+0xaa>
 8014294:	693b      	ldr	r3, [r7, #16]
 8014296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014298:	2201      	movs	r2, #1
 801429a:	fa02 f303 	lsl.w	r3, r2, r3
 801429e:	43da      	mvns	r2, r3
 80142a0:	4b18      	ldr	r3, [pc, #96]	; (8014304 <xTaskPriorityDisinherit+0x104>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	4013      	ands	r3, r2
 80142a6:	4a17      	ldr	r2, [pc, #92]	; (8014304 <xTaskPriorityDisinherit+0x104>)
 80142a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80142aa:	693b      	ldr	r3, [r7, #16]
 80142ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80142ae:	693b      	ldr	r3, [r7, #16]
 80142b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80142b2:	693b      	ldr	r3, [r7, #16]
 80142b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142b6:	f1c3 0207 	rsb	r2, r3, #7
 80142ba:	693b      	ldr	r3, [r7, #16]
 80142bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c2:	2201      	movs	r2, #1
 80142c4:	409a      	lsls	r2, r3
 80142c6:	4b0f      	ldr	r3, [pc, #60]	; (8014304 <xTaskPriorityDisinherit+0x104>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	4313      	orrs	r3, r2
 80142cc:	4a0d      	ldr	r2, [pc, #52]	; (8014304 <xTaskPriorityDisinherit+0x104>)
 80142ce:	6013      	str	r3, [r2, #0]
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142d4:	4613      	mov	r3, r2
 80142d6:	009b      	lsls	r3, r3, #2
 80142d8:	4413      	add	r3, r2
 80142da:	009b      	lsls	r3, r3, #2
 80142dc:	4a08      	ldr	r2, [pc, #32]	; (8014300 <xTaskPriorityDisinherit+0x100>)
 80142de:	441a      	add	r2, r3
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	3304      	adds	r3, #4
 80142e4:	4619      	mov	r1, r3
 80142e6:	4610      	mov	r0, r2
 80142e8:	f7fe fbb0 	bl	8012a4c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80142ec:	2301      	movs	r3, #1
 80142ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80142f0:	697b      	ldr	r3, [r7, #20]
	}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3718      	adds	r7, #24
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	2000100c 	.word	0x2000100c
 8014300:	20001010 	.word	0x20001010
 8014304:	20001114 	.word	0x20001114

08014308 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014308:	b580      	push	{r7, lr}
 801430a:	b086      	sub	sp, #24
 801430c:	af00      	add	r7, sp, #0
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	607a      	str	r2, [r7, #4]
 8014314:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8014316:	f000 fb69 	bl	80149ec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801431a:	4b26      	ldr	r3, [pc, #152]	; (80143b4 <xTaskNotifyWait+0xac>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014322:	b2db      	uxtb	r3, r3
 8014324:	2b02      	cmp	r3, #2
 8014326:	d01a      	beq.n	801435e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014328:	4b22      	ldr	r3, [pc, #136]	; (80143b4 <xTaskNotifyWait+0xac>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801432e:	68fa      	ldr	r2, [r7, #12]
 8014330:	43d2      	mvns	r2, r2
 8014332:	400a      	ands	r2, r1
 8014334:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014336:	4b1f      	ldr	r3, [pc, #124]	; (80143b4 <xTaskNotifyWait+0xac>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	2201      	movs	r2, #1
 801433c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d00b      	beq.n	801435e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014346:	2101      	movs	r1, #1
 8014348:	6838      	ldr	r0, [r7, #0]
 801434a:	f000 f9c1 	bl	80146d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801434e:	4b1a      	ldr	r3, [pc, #104]	; (80143b8 <xTaskNotifyWait+0xb0>)
 8014350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014354:	601a      	str	r2, [r3, #0]
 8014356:	f3bf 8f4f 	dsb	sy
 801435a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801435e:	f000 fb73 	bl	8014a48 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014362:	f000 fb43 	bl	80149ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d004      	beq.n	8014376 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801436c:	4b11      	ldr	r3, [pc, #68]	; (80143b4 <xTaskNotifyWait+0xac>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014376:	4b0f      	ldr	r3, [pc, #60]	; (80143b4 <xTaskNotifyWait+0xac>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801437e:	b2db      	uxtb	r3, r3
 8014380:	2b02      	cmp	r3, #2
 8014382:	d002      	beq.n	801438a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014384:	2300      	movs	r3, #0
 8014386:	617b      	str	r3, [r7, #20]
 8014388:	e008      	b.n	801439c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801438a:	4b0a      	ldr	r3, [pc, #40]	; (80143b4 <xTaskNotifyWait+0xac>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014390:	68ba      	ldr	r2, [r7, #8]
 8014392:	43d2      	mvns	r2, r2
 8014394:	400a      	ands	r2, r1
 8014396:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8014398:	2301      	movs	r3, #1
 801439a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801439c:	4b05      	ldr	r3, [pc, #20]	; (80143b4 <xTaskNotifyWait+0xac>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	2200      	movs	r2, #0
 80143a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80143a6:	f000 fb4f 	bl	8014a48 <vPortExitCritical>

		return xReturn;
 80143aa:	697b      	ldr	r3, [r7, #20]
	}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3718      	adds	r7, #24
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}
 80143b4:	2000100c 	.word	0x2000100c
 80143b8:	e000ed04 	.word	0xe000ed04

080143bc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b08a      	sub	sp, #40	; 0x28
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	60f8      	str	r0, [r7, #12]
 80143c4:	60b9      	str	r1, [r7, #8]
 80143c6:	603b      	str	r3, [r7, #0]
 80143c8:	4613      	mov	r3, r2
 80143ca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80143cc:	2301      	movs	r3, #1
 80143ce:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d109      	bne.n	80143ea <xTaskGenericNotify+0x2e>
 80143d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143da:	f383 8811 	msr	BASEPRI, r3
 80143de:	f3bf 8f6f 	isb	sy
 80143e2:	f3bf 8f4f 	dsb	sy
 80143e6:	61bb      	str	r3, [r7, #24]
 80143e8:	e7fe      	b.n	80143e8 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80143ee:	f000 fafd 	bl	80149ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d003      	beq.n	8014400 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80143f8:	6a3b      	ldr	r3, [r7, #32]
 80143fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014400:	6a3b      	ldr	r3, [r7, #32]
 8014402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014406:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014408:	6a3b      	ldr	r3, [r7, #32]
 801440a:	2202      	movs	r2, #2
 801440c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014410:	79fb      	ldrb	r3, [r7, #7]
 8014412:	2b04      	cmp	r3, #4
 8014414:	d827      	bhi.n	8014466 <xTaskGenericNotify+0xaa>
 8014416:	a201      	add	r2, pc, #4	; (adr r2, 801441c <xTaskGenericNotify+0x60>)
 8014418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801441c:	08014485 	.word	0x08014485
 8014420:	08014431 	.word	0x08014431
 8014424:	0801443f 	.word	0x0801443f
 8014428:	0801444b 	.word	0x0801444b
 801442c:	08014453 	.word	0x08014453
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014430:	6a3b      	ldr	r3, [r7, #32]
 8014432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	431a      	orrs	r2, r3
 8014438:	6a3b      	ldr	r3, [r7, #32]
 801443a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801443c:	e025      	b.n	801448a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801443e:	6a3b      	ldr	r3, [r7, #32]
 8014440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014442:	1c5a      	adds	r2, r3, #1
 8014444:	6a3b      	ldr	r3, [r7, #32]
 8014446:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014448:	e01f      	b.n	801448a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801444a:	6a3b      	ldr	r3, [r7, #32]
 801444c:	68ba      	ldr	r2, [r7, #8]
 801444e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014450:	e01b      	b.n	801448a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014452:	7ffb      	ldrb	r3, [r7, #31]
 8014454:	2b02      	cmp	r3, #2
 8014456:	d003      	beq.n	8014460 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014458:	6a3b      	ldr	r3, [r7, #32]
 801445a:	68ba      	ldr	r2, [r7, #8]
 801445c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801445e:	e014      	b.n	801448a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8014460:	2300      	movs	r3, #0
 8014462:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014464:	e011      	b.n	801448a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014466:	6a3b      	ldr	r3, [r7, #32]
 8014468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801446a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801446e:	d00b      	beq.n	8014488 <xTaskGenericNotify+0xcc>
 8014470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014474:	f383 8811 	msr	BASEPRI, r3
 8014478:	f3bf 8f6f 	isb	sy
 801447c:	f3bf 8f4f 	dsb	sy
 8014480:	617b      	str	r3, [r7, #20]
 8014482:	e7fe      	b.n	8014482 <xTaskGenericNotify+0xc6>
					break;
 8014484:	bf00      	nop
 8014486:	e000      	b.n	801448a <xTaskGenericNotify+0xce>

					break;
 8014488:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801448a:	7ffb      	ldrb	r3, [r7, #31]
 801448c:	2b01      	cmp	r3, #1
 801448e:	d138      	bne.n	8014502 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014490:	6a3b      	ldr	r3, [r7, #32]
 8014492:	3304      	adds	r3, #4
 8014494:	4618      	mov	r0, r3
 8014496:	f7fe fb36 	bl	8012b06 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801449a:	6a3b      	ldr	r3, [r7, #32]
 801449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801449e:	2201      	movs	r2, #1
 80144a0:	409a      	lsls	r2, r3
 80144a2:	4b1b      	ldr	r3, [pc, #108]	; (8014510 <xTaskGenericNotify+0x154>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	4313      	orrs	r3, r2
 80144a8:	4a19      	ldr	r2, [pc, #100]	; (8014510 <xTaskGenericNotify+0x154>)
 80144aa:	6013      	str	r3, [r2, #0]
 80144ac:	6a3b      	ldr	r3, [r7, #32]
 80144ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144b0:	4613      	mov	r3, r2
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	4413      	add	r3, r2
 80144b6:	009b      	lsls	r3, r3, #2
 80144b8:	4a16      	ldr	r2, [pc, #88]	; (8014514 <xTaskGenericNotify+0x158>)
 80144ba:	441a      	add	r2, r3
 80144bc:	6a3b      	ldr	r3, [r7, #32]
 80144be:	3304      	adds	r3, #4
 80144c0:	4619      	mov	r1, r3
 80144c2:	4610      	mov	r0, r2
 80144c4:	f7fe fac2 	bl	8012a4c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80144c8:	6a3b      	ldr	r3, [r7, #32]
 80144ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d009      	beq.n	80144e4 <xTaskGenericNotify+0x128>
 80144d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d4:	f383 8811 	msr	BASEPRI, r3
 80144d8:	f3bf 8f6f 	isb	sy
 80144dc:	f3bf 8f4f 	dsb	sy
 80144e0:	613b      	str	r3, [r7, #16]
 80144e2:	e7fe      	b.n	80144e2 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80144e4:	6a3b      	ldr	r3, [r7, #32]
 80144e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144e8:	4b0b      	ldr	r3, [pc, #44]	; (8014518 <xTaskGenericNotify+0x15c>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d907      	bls.n	8014502 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80144f2:	4b0a      	ldr	r3, [pc, #40]	; (801451c <xTaskGenericNotify+0x160>)
 80144f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144f8:	601a      	str	r2, [r3, #0]
 80144fa:	f3bf 8f4f 	dsb	sy
 80144fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014502:	f000 faa1 	bl	8014a48 <vPortExitCritical>

		return xReturn;
 8014506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014508:	4618      	mov	r0, r3
 801450a:	3728      	adds	r7, #40	; 0x28
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}
 8014510:	20001114 	.word	0x20001114
 8014514:	20001010 	.word	0x20001010
 8014518:	2000100c 	.word	0x2000100c
 801451c:	e000ed04 	.word	0xe000ed04

08014520 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014520:	b580      	push	{r7, lr}
 8014522:	b08e      	sub	sp, #56	; 0x38
 8014524:	af00      	add	r7, sp, #0
 8014526:	60f8      	str	r0, [r7, #12]
 8014528:	60b9      	str	r1, [r7, #8]
 801452a:	603b      	str	r3, [r7, #0]
 801452c:	4613      	mov	r3, r2
 801452e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014530:	2301      	movs	r3, #1
 8014532:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d109      	bne.n	801454e <xTaskGenericNotifyFromISR+0x2e>
 801453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801453e:	f383 8811 	msr	BASEPRI, r3
 8014542:	f3bf 8f6f 	isb	sy
 8014546:	f3bf 8f4f 	dsb	sy
 801454a:	627b      	str	r3, [r7, #36]	; 0x24
 801454c:	e7fe      	b.n	801454c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801454e:	f000 fb29 	bl	8014ba4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014556:	f3ef 8211 	mrs	r2, BASEPRI
 801455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801455e:	f383 8811 	msr	BASEPRI, r3
 8014562:	f3bf 8f6f 	isb	sy
 8014566:	f3bf 8f4f 	dsb	sy
 801456a:	623a      	str	r2, [r7, #32]
 801456c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801456e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014570:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d003      	beq.n	8014580 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801457a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014582:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801458c:	2202      	movs	r2, #2
 801458e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014592:	79fb      	ldrb	r3, [r7, #7]
 8014594:	2b04      	cmp	r3, #4
 8014596:	d829      	bhi.n	80145ec <xTaskGenericNotifyFromISR+0xcc>
 8014598:	a201      	add	r2, pc, #4	; (adr r2, 80145a0 <xTaskGenericNotifyFromISR+0x80>)
 801459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801459e:	bf00      	nop
 80145a0:	0801460b 	.word	0x0801460b
 80145a4:	080145b5 	.word	0x080145b5
 80145a8:	080145c3 	.word	0x080145c3
 80145ac:	080145cf 	.word	0x080145cf
 80145b0:	080145d7 	.word	0x080145d7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80145b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	431a      	orrs	r2, r3
 80145bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145be:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80145c0:	e026      	b.n	8014610 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80145c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145c6:	1c5a      	adds	r2, r3, #1
 80145c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ca:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80145cc:	e020      	b.n	8014610 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80145ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d0:	68ba      	ldr	r2, [r7, #8]
 80145d2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80145d4:	e01c      	b.n	8014610 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80145d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80145da:	2b02      	cmp	r3, #2
 80145dc:	d003      	beq.n	80145e6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80145de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e0:	68ba      	ldr	r2, [r7, #8]
 80145e2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80145e4:	e014      	b.n	8014610 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 80145e6:	2300      	movs	r3, #0
 80145e8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80145ea:	e011      	b.n	8014610 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80145ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145f4:	d00b      	beq.n	801460e <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 80145f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145fa:	f383 8811 	msr	BASEPRI, r3
 80145fe:	f3bf 8f6f 	isb	sy
 8014602:	f3bf 8f4f 	dsb	sy
 8014606:	61bb      	str	r3, [r7, #24]
 8014608:	e7fe      	b.n	8014608 <xTaskGenericNotifyFromISR+0xe8>
					break;
 801460a:	bf00      	nop
 801460c:	e000      	b.n	8014610 <xTaskGenericNotifyFromISR+0xf0>
					break;
 801460e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014610:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014614:	2b01      	cmp	r3, #1
 8014616:	d144      	bne.n	80146a2 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801461c:	2b00      	cmp	r3, #0
 801461e:	d009      	beq.n	8014634 <xTaskGenericNotifyFromISR+0x114>
 8014620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014624:	f383 8811 	msr	BASEPRI, r3
 8014628:	f3bf 8f6f 	isb	sy
 801462c:	f3bf 8f4f 	dsb	sy
 8014630:	617b      	str	r3, [r7, #20]
 8014632:	e7fe      	b.n	8014632 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014634:	4b20      	ldr	r3, [pc, #128]	; (80146b8 <xTaskGenericNotifyFromISR+0x198>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d11c      	bne.n	8014676 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801463e:	3304      	adds	r3, #4
 8014640:	4618      	mov	r0, r3
 8014642:	f7fe fa60 	bl	8012b06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801464a:	2201      	movs	r2, #1
 801464c:	409a      	lsls	r2, r3
 801464e:	4b1b      	ldr	r3, [pc, #108]	; (80146bc <xTaskGenericNotifyFromISR+0x19c>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	4313      	orrs	r3, r2
 8014654:	4a19      	ldr	r2, [pc, #100]	; (80146bc <xTaskGenericNotifyFromISR+0x19c>)
 8014656:	6013      	str	r3, [r2, #0]
 8014658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801465c:	4613      	mov	r3, r2
 801465e:	009b      	lsls	r3, r3, #2
 8014660:	4413      	add	r3, r2
 8014662:	009b      	lsls	r3, r3, #2
 8014664:	4a16      	ldr	r2, [pc, #88]	; (80146c0 <xTaskGenericNotifyFromISR+0x1a0>)
 8014666:	441a      	add	r2, r3
 8014668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801466a:	3304      	adds	r3, #4
 801466c:	4619      	mov	r1, r3
 801466e:	4610      	mov	r0, r2
 8014670:	f7fe f9ec 	bl	8012a4c <vListInsertEnd>
 8014674:	e005      	b.n	8014682 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014678:	3318      	adds	r3, #24
 801467a:	4619      	mov	r1, r3
 801467c:	4811      	ldr	r0, [pc, #68]	; (80146c4 <xTaskGenericNotifyFromISR+0x1a4>)
 801467e:	f7fe f9e5 	bl	8012a4c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014686:	4b10      	ldr	r3, [pc, #64]	; (80146c8 <xTaskGenericNotifyFromISR+0x1a8>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801468c:	429a      	cmp	r2, r3
 801468e:	d908      	bls.n	80146a2 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014692:	2b00      	cmp	r3, #0
 8014694:	d002      	beq.n	801469c <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014698:	2201      	movs	r2, #1
 801469a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801469c:	4b0b      	ldr	r3, [pc, #44]	; (80146cc <xTaskGenericNotifyFromISR+0x1ac>)
 801469e:	2201      	movs	r2, #1
 80146a0:	601a      	str	r2, [r3, #0]
 80146a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80146a6:	693b      	ldr	r3, [r7, #16]
 80146a8:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80146ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3738      	adds	r7, #56	; 0x38
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}
 80146b6:	bf00      	nop
 80146b8:	20001134 	.word	0x20001134
 80146bc:	20001114 	.word	0x20001114
 80146c0:	20001010 	.word	0x20001010
 80146c4:	200010cc 	.word	0x200010cc
 80146c8:	2000100c 	.word	0x2000100c
 80146cc:	20001120 	.word	0x20001120

080146d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b084      	sub	sp, #16
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
 80146d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80146da:	4b29      	ldr	r3, [pc, #164]	; (8014780 <prvAddCurrentTaskToDelayedList+0xb0>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146e0:	4b28      	ldr	r3, [pc, #160]	; (8014784 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	3304      	adds	r3, #4
 80146e6:	4618      	mov	r0, r3
 80146e8:	f7fe fa0d 	bl	8012b06 <uxListRemove>
 80146ec:	4603      	mov	r3, r0
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d10b      	bne.n	801470a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80146f2:	4b24      	ldr	r3, [pc, #144]	; (8014784 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146f8:	2201      	movs	r2, #1
 80146fa:	fa02 f303 	lsl.w	r3, r2, r3
 80146fe:	43da      	mvns	r2, r3
 8014700:	4b21      	ldr	r3, [pc, #132]	; (8014788 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	4013      	ands	r3, r2
 8014706:	4a20      	ldr	r2, [pc, #128]	; (8014788 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014708:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014710:	d10a      	bne.n	8014728 <prvAddCurrentTaskToDelayedList+0x58>
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d007      	beq.n	8014728 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014718:	4b1a      	ldr	r3, [pc, #104]	; (8014784 <prvAddCurrentTaskToDelayedList+0xb4>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	3304      	adds	r3, #4
 801471e:	4619      	mov	r1, r3
 8014720:	481a      	ldr	r0, [pc, #104]	; (801478c <prvAddCurrentTaskToDelayedList+0xbc>)
 8014722:	f7fe f993 	bl	8012a4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014726:	e026      	b.n	8014776 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014728:	68fa      	ldr	r2, [r7, #12]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	4413      	add	r3, r2
 801472e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014730:	4b14      	ldr	r3, [pc, #80]	; (8014784 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	68ba      	ldr	r2, [r7, #8]
 8014736:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014738:	68ba      	ldr	r2, [r7, #8]
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	429a      	cmp	r2, r3
 801473e:	d209      	bcs.n	8014754 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014740:	4b13      	ldr	r3, [pc, #76]	; (8014790 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014742:	681a      	ldr	r2, [r3, #0]
 8014744:	4b0f      	ldr	r3, [pc, #60]	; (8014784 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	3304      	adds	r3, #4
 801474a:	4619      	mov	r1, r3
 801474c:	4610      	mov	r0, r2
 801474e:	f7fe f9a1 	bl	8012a94 <vListInsert>
}
 8014752:	e010      	b.n	8014776 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014754:	4b0f      	ldr	r3, [pc, #60]	; (8014794 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014756:	681a      	ldr	r2, [r3, #0]
 8014758:	4b0a      	ldr	r3, [pc, #40]	; (8014784 <prvAddCurrentTaskToDelayedList+0xb4>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	3304      	adds	r3, #4
 801475e:	4619      	mov	r1, r3
 8014760:	4610      	mov	r0, r2
 8014762:	f7fe f997 	bl	8012a94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014766:	4b0c      	ldr	r3, [pc, #48]	; (8014798 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	68ba      	ldr	r2, [r7, #8]
 801476c:	429a      	cmp	r2, r3
 801476e:	d202      	bcs.n	8014776 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014770:	4a09      	ldr	r2, [pc, #36]	; (8014798 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	6013      	str	r3, [r2, #0]
}
 8014776:	bf00      	nop
 8014778:	3710      	adds	r7, #16
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}
 801477e:	bf00      	nop
 8014780:	20001110 	.word	0x20001110
 8014784:	2000100c 	.word	0x2000100c
 8014788:	20001114 	.word	0x20001114
 801478c:	200010f8 	.word	0x200010f8
 8014790:	200010c8 	.word	0x200010c8
 8014794:	200010c4 	.word	0x200010c4
 8014798:	2000112c 	.word	0x2000112c

0801479c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801479c:	b480      	push	{r7}
 801479e:	b085      	sub	sp, #20
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	60f8      	str	r0, [r7, #12]
 80147a4:	60b9      	str	r1, [r7, #8]
 80147a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	3b04      	subs	r3, #4
 80147ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80147b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	3b04      	subs	r3, #4
 80147ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	f023 0201 	bic.w	r2, r3, #1
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	3b04      	subs	r3, #4
 80147ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80147cc:	4a0c      	ldr	r2, [pc, #48]	; (8014800 <pxPortInitialiseStack+0x64>)
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	3b14      	subs	r3, #20
 80147d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80147d8:	687a      	ldr	r2, [r7, #4]
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	3b04      	subs	r3, #4
 80147e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	f06f 0202 	mvn.w	r2, #2
 80147ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	3b20      	subs	r3, #32
 80147f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80147f2:	68fb      	ldr	r3, [r7, #12]
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	3714      	adds	r7, #20
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr
 8014800:	08014805 	.word	0x08014805

08014804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014804:	b480      	push	{r7}
 8014806:	b085      	sub	sp, #20
 8014808:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801480a:	2300      	movs	r3, #0
 801480c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801480e:	4b11      	ldr	r3, [pc, #68]	; (8014854 <prvTaskExitError+0x50>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014816:	d009      	beq.n	801482c <prvTaskExitError+0x28>
	__asm volatile
 8014818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801481c:	f383 8811 	msr	BASEPRI, r3
 8014820:	f3bf 8f6f 	isb	sy
 8014824:	f3bf 8f4f 	dsb	sy
 8014828:	60fb      	str	r3, [r7, #12]
 801482a:	e7fe      	b.n	801482a <prvTaskExitError+0x26>
 801482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014830:	f383 8811 	msr	BASEPRI, r3
 8014834:	f3bf 8f6f 	isb	sy
 8014838:	f3bf 8f4f 	dsb	sy
 801483c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801483e:	bf00      	nop
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d0fc      	beq.n	8014840 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014846:	bf00      	nop
 8014848:	3714      	adds	r7, #20
 801484a:	46bd      	mov	sp, r7
 801484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014850:	4770      	bx	lr
 8014852:	bf00      	nop
 8014854:	20000940 	.word	0x20000940
	...

08014860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014860:	4b07      	ldr	r3, [pc, #28]	; (8014880 <pxCurrentTCBConst2>)
 8014862:	6819      	ldr	r1, [r3, #0]
 8014864:	6808      	ldr	r0, [r1, #0]
 8014866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801486a:	f380 8809 	msr	PSP, r0
 801486e:	f3bf 8f6f 	isb	sy
 8014872:	f04f 0000 	mov.w	r0, #0
 8014876:	f380 8811 	msr	BASEPRI, r0
 801487a:	4770      	bx	lr
 801487c:	f3af 8000 	nop.w

08014880 <pxCurrentTCBConst2>:
 8014880:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014884:	bf00      	nop
 8014886:	bf00      	nop

08014888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014888:	4808      	ldr	r0, [pc, #32]	; (80148ac <prvPortStartFirstTask+0x24>)
 801488a:	6800      	ldr	r0, [r0, #0]
 801488c:	6800      	ldr	r0, [r0, #0]
 801488e:	f380 8808 	msr	MSP, r0
 8014892:	f04f 0000 	mov.w	r0, #0
 8014896:	f380 8814 	msr	CONTROL, r0
 801489a:	b662      	cpsie	i
 801489c:	b661      	cpsie	f
 801489e:	f3bf 8f4f 	dsb	sy
 80148a2:	f3bf 8f6f 	isb	sy
 80148a6:	df00      	svc	0
 80148a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80148aa:	bf00      	nop
 80148ac:	e000ed08 	.word	0xe000ed08

080148b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b086      	sub	sp, #24
 80148b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80148b6:	4b44      	ldr	r3, [pc, #272]	; (80149c8 <xPortStartScheduler+0x118>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	4a44      	ldr	r2, [pc, #272]	; (80149cc <xPortStartScheduler+0x11c>)
 80148bc:	4293      	cmp	r3, r2
 80148be:	d109      	bne.n	80148d4 <xPortStartScheduler+0x24>
 80148c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148c4:	f383 8811 	msr	BASEPRI, r3
 80148c8:	f3bf 8f6f 	isb	sy
 80148cc:	f3bf 8f4f 	dsb	sy
 80148d0:	613b      	str	r3, [r7, #16]
 80148d2:	e7fe      	b.n	80148d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80148d4:	4b3c      	ldr	r3, [pc, #240]	; (80149c8 <xPortStartScheduler+0x118>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	4a3d      	ldr	r2, [pc, #244]	; (80149d0 <xPortStartScheduler+0x120>)
 80148da:	4293      	cmp	r3, r2
 80148dc:	d109      	bne.n	80148f2 <xPortStartScheduler+0x42>
 80148de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e2:	f383 8811 	msr	BASEPRI, r3
 80148e6:	f3bf 8f6f 	isb	sy
 80148ea:	f3bf 8f4f 	dsb	sy
 80148ee:	60fb      	str	r3, [r7, #12]
 80148f0:	e7fe      	b.n	80148f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80148f2:	4b38      	ldr	r3, [pc, #224]	; (80149d4 <xPortStartScheduler+0x124>)
 80148f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	781b      	ldrb	r3, [r3, #0]
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80148fe:	697b      	ldr	r3, [r7, #20]
 8014900:	22ff      	movs	r2, #255	; 0xff
 8014902:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014904:	697b      	ldr	r3, [r7, #20]
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	b2db      	uxtb	r3, r3
 801490a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801490c:	78fb      	ldrb	r3, [r7, #3]
 801490e:	b2db      	uxtb	r3, r3
 8014910:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014914:	b2da      	uxtb	r2, r3
 8014916:	4b30      	ldr	r3, [pc, #192]	; (80149d8 <xPortStartScheduler+0x128>)
 8014918:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801491a:	4b30      	ldr	r3, [pc, #192]	; (80149dc <xPortStartScheduler+0x12c>)
 801491c:	2207      	movs	r2, #7
 801491e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014920:	e009      	b.n	8014936 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014922:	4b2e      	ldr	r3, [pc, #184]	; (80149dc <xPortStartScheduler+0x12c>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	3b01      	subs	r3, #1
 8014928:	4a2c      	ldr	r2, [pc, #176]	; (80149dc <xPortStartScheduler+0x12c>)
 801492a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801492c:	78fb      	ldrb	r3, [r7, #3]
 801492e:	b2db      	uxtb	r3, r3
 8014930:	005b      	lsls	r3, r3, #1
 8014932:	b2db      	uxtb	r3, r3
 8014934:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014936:	78fb      	ldrb	r3, [r7, #3]
 8014938:	b2db      	uxtb	r3, r3
 801493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801493e:	2b80      	cmp	r3, #128	; 0x80
 8014940:	d0ef      	beq.n	8014922 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014942:	4b26      	ldr	r3, [pc, #152]	; (80149dc <xPortStartScheduler+0x12c>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	f1c3 0307 	rsb	r3, r3, #7
 801494a:	2b04      	cmp	r3, #4
 801494c:	d009      	beq.n	8014962 <xPortStartScheduler+0xb2>
 801494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014952:	f383 8811 	msr	BASEPRI, r3
 8014956:	f3bf 8f6f 	isb	sy
 801495a:	f3bf 8f4f 	dsb	sy
 801495e:	60bb      	str	r3, [r7, #8]
 8014960:	e7fe      	b.n	8014960 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014962:	4b1e      	ldr	r3, [pc, #120]	; (80149dc <xPortStartScheduler+0x12c>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	021b      	lsls	r3, r3, #8
 8014968:	4a1c      	ldr	r2, [pc, #112]	; (80149dc <xPortStartScheduler+0x12c>)
 801496a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801496c:	4b1b      	ldr	r3, [pc, #108]	; (80149dc <xPortStartScheduler+0x12c>)
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014974:	4a19      	ldr	r2, [pc, #100]	; (80149dc <xPortStartScheduler+0x12c>)
 8014976:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	b2da      	uxtb	r2, r3
 801497c:	697b      	ldr	r3, [r7, #20]
 801497e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014980:	4b17      	ldr	r3, [pc, #92]	; (80149e0 <xPortStartScheduler+0x130>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	4a16      	ldr	r2, [pc, #88]	; (80149e0 <xPortStartScheduler+0x130>)
 8014986:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801498a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801498c:	4b14      	ldr	r3, [pc, #80]	; (80149e0 <xPortStartScheduler+0x130>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	4a13      	ldr	r2, [pc, #76]	; (80149e0 <xPortStartScheduler+0x130>)
 8014992:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014996:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014998:	f000 f8d6 	bl	8014b48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801499c:	4b11      	ldr	r3, [pc, #68]	; (80149e4 <xPortStartScheduler+0x134>)
 801499e:	2200      	movs	r2, #0
 80149a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80149a2:	f000 f8f5 	bl	8014b90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80149a6:	4b10      	ldr	r3, [pc, #64]	; (80149e8 <xPortStartScheduler+0x138>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	4a0f      	ldr	r2, [pc, #60]	; (80149e8 <xPortStartScheduler+0x138>)
 80149ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80149b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80149b2:	f7ff ff69 	bl	8014888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80149b6:	f7ff f9d1 	bl	8013d5c <vTaskSwitchContext>
	prvTaskExitError();
 80149ba:	f7ff ff23 	bl	8014804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80149be:	2300      	movs	r3, #0
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	3718      	adds	r7, #24
 80149c4:	46bd      	mov	sp, r7
 80149c6:	bd80      	pop	{r7, pc}
 80149c8:	e000ed00 	.word	0xe000ed00
 80149cc:	410fc271 	.word	0x410fc271
 80149d0:	410fc270 	.word	0x410fc270
 80149d4:	e000e400 	.word	0xe000e400
 80149d8:	20001138 	.word	0x20001138
 80149dc:	2000113c 	.word	0x2000113c
 80149e0:	e000ed20 	.word	0xe000ed20
 80149e4:	20000940 	.word	0x20000940
 80149e8:	e000ef34 	.word	0xe000ef34

080149ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80149ec:	b480      	push	{r7}
 80149ee:	b083      	sub	sp, #12
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149f6:	f383 8811 	msr	BASEPRI, r3
 80149fa:	f3bf 8f6f 	isb	sy
 80149fe:	f3bf 8f4f 	dsb	sy
 8014a02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014a04:	4b0e      	ldr	r3, [pc, #56]	; (8014a40 <vPortEnterCritical+0x54>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	4a0d      	ldr	r2, [pc, #52]	; (8014a40 <vPortEnterCritical+0x54>)
 8014a0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014a0e:	4b0c      	ldr	r3, [pc, #48]	; (8014a40 <vPortEnterCritical+0x54>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2b01      	cmp	r3, #1
 8014a14:	d10e      	bne.n	8014a34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014a16:	4b0b      	ldr	r3, [pc, #44]	; (8014a44 <vPortEnterCritical+0x58>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d009      	beq.n	8014a34 <vPortEnterCritical+0x48>
 8014a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a24:	f383 8811 	msr	BASEPRI, r3
 8014a28:	f3bf 8f6f 	isb	sy
 8014a2c:	f3bf 8f4f 	dsb	sy
 8014a30:	603b      	str	r3, [r7, #0]
 8014a32:	e7fe      	b.n	8014a32 <vPortEnterCritical+0x46>
	}
}
 8014a34:	bf00      	nop
 8014a36:	370c      	adds	r7, #12
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3e:	4770      	bx	lr
 8014a40:	20000940 	.word	0x20000940
 8014a44:	e000ed04 	.word	0xe000ed04

08014a48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014a48:	b480      	push	{r7}
 8014a4a:	b083      	sub	sp, #12
 8014a4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014a4e:	4b11      	ldr	r3, [pc, #68]	; (8014a94 <vPortExitCritical+0x4c>)
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d109      	bne.n	8014a6a <vPortExitCritical+0x22>
 8014a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a5a:	f383 8811 	msr	BASEPRI, r3
 8014a5e:	f3bf 8f6f 	isb	sy
 8014a62:	f3bf 8f4f 	dsb	sy
 8014a66:	607b      	str	r3, [r7, #4]
 8014a68:	e7fe      	b.n	8014a68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014a6a:	4b0a      	ldr	r3, [pc, #40]	; (8014a94 <vPortExitCritical+0x4c>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	3b01      	subs	r3, #1
 8014a70:	4a08      	ldr	r2, [pc, #32]	; (8014a94 <vPortExitCritical+0x4c>)
 8014a72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014a74:	4b07      	ldr	r3, [pc, #28]	; (8014a94 <vPortExitCritical+0x4c>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d104      	bne.n	8014a86 <vPortExitCritical+0x3e>
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014a86:	bf00      	nop
 8014a88:	370c      	adds	r7, #12
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a90:	4770      	bx	lr
 8014a92:	bf00      	nop
 8014a94:	20000940 	.word	0x20000940
	...

08014aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014aa0:	f3ef 8009 	mrs	r0, PSP
 8014aa4:	f3bf 8f6f 	isb	sy
 8014aa8:	4b15      	ldr	r3, [pc, #84]	; (8014b00 <pxCurrentTCBConst>)
 8014aaa:	681a      	ldr	r2, [r3, #0]
 8014aac:	f01e 0f10 	tst.w	lr, #16
 8014ab0:	bf08      	it	eq
 8014ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aba:	6010      	str	r0, [r2, #0]
 8014abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014ac4:	f380 8811 	msr	BASEPRI, r0
 8014ac8:	f3bf 8f4f 	dsb	sy
 8014acc:	f3bf 8f6f 	isb	sy
 8014ad0:	f7ff f944 	bl	8013d5c <vTaskSwitchContext>
 8014ad4:	f04f 0000 	mov.w	r0, #0
 8014ad8:	f380 8811 	msr	BASEPRI, r0
 8014adc:	bc09      	pop	{r0, r3}
 8014ade:	6819      	ldr	r1, [r3, #0]
 8014ae0:	6808      	ldr	r0, [r1, #0]
 8014ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae6:	f01e 0f10 	tst.w	lr, #16
 8014aea:	bf08      	it	eq
 8014aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014af0:	f380 8809 	msr	PSP, r0
 8014af4:	f3bf 8f6f 	isb	sy
 8014af8:	4770      	bx	lr
 8014afa:	bf00      	nop
 8014afc:	f3af 8000 	nop.w

08014b00 <pxCurrentTCBConst>:
 8014b00:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014b04:	bf00      	nop
 8014b06:	bf00      	nop

08014b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b082      	sub	sp, #8
 8014b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8014b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b12:	f383 8811 	msr	BASEPRI, r3
 8014b16:	f3bf 8f6f 	isb	sy
 8014b1a:	f3bf 8f4f 	dsb	sy
 8014b1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014b20:	f7ff f864 	bl	8013bec <xTaskIncrementTick>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d003      	beq.n	8014b32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014b2a:	4b06      	ldr	r3, [pc, #24]	; (8014b44 <SysTick_Handler+0x3c>)
 8014b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b30:	601a      	str	r2, [r3, #0]
 8014b32:	2300      	movs	r3, #0
 8014b34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014b3c:	bf00      	nop
 8014b3e:	3708      	adds	r7, #8
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}
 8014b44:	e000ed04 	.word	0xe000ed04

08014b48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014b48:	b480      	push	{r7}
 8014b4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014b4c:	4b0b      	ldr	r3, [pc, #44]	; (8014b7c <vPortSetupTimerInterrupt+0x34>)
 8014b4e:	2200      	movs	r2, #0
 8014b50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014b52:	4b0b      	ldr	r3, [pc, #44]	; (8014b80 <vPortSetupTimerInterrupt+0x38>)
 8014b54:	2200      	movs	r2, #0
 8014b56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014b58:	4b0a      	ldr	r3, [pc, #40]	; (8014b84 <vPortSetupTimerInterrupt+0x3c>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	4a0a      	ldr	r2, [pc, #40]	; (8014b88 <vPortSetupTimerInterrupt+0x40>)
 8014b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8014b62:	099b      	lsrs	r3, r3, #6
 8014b64:	4a09      	ldr	r2, [pc, #36]	; (8014b8c <vPortSetupTimerInterrupt+0x44>)
 8014b66:	3b01      	subs	r3, #1
 8014b68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014b6a:	4b04      	ldr	r3, [pc, #16]	; (8014b7c <vPortSetupTimerInterrupt+0x34>)
 8014b6c:	2207      	movs	r2, #7
 8014b6e:	601a      	str	r2, [r3, #0]
}
 8014b70:	bf00      	nop
 8014b72:	46bd      	mov	sp, r7
 8014b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b78:	4770      	bx	lr
 8014b7a:	bf00      	nop
 8014b7c:	e000e010 	.word	0xe000e010
 8014b80:	e000e018 	.word	0xe000e018
 8014b84:	20000824 	.word	0x20000824
 8014b88:	10624dd3 	.word	0x10624dd3
 8014b8c:	e000e014 	.word	0xe000e014

08014b90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014b90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014ba0 <vPortEnableVFP+0x10>
 8014b94:	6801      	ldr	r1, [r0, #0]
 8014b96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014b9a:	6001      	str	r1, [r0, #0]
 8014b9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014b9e:	bf00      	nop
 8014ba0:	e000ed88 	.word	0xe000ed88

08014ba4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014ba4:	b480      	push	{r7}
 8014ba6:	b085      	sub	sp, #20
 8014ba8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014baa:	f3ef 8305 	mrs	r3, IPSR
 8014bae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2b0f      	cmp	r3, #15
 8014bb4:	d913      	bls.n	8014bde <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014bb6:	4a16      	ldr	r2, [pc, #88]	; (8014c10 <vPortValidateInterruptPriority+0x6c>)
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	4413      	add	r3, r2
 8014bbc:	781b      	ldrb	r3, [r3, #0]
 8014bbe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014bc0:	4b14      	ldr	r3, [pc, #80]	; (8014c14 <vPortValidateInterruptPriority+0x70>)
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	7afa      	ldrb	r2, [r7, #11]
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	d209      	bcs.n	8014bde <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8014bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bce:	f383 8811 	msr	BASEPRI, r3
 8014bd2:	f3bf 8f6f 	isb	sy
 8014bd6:	f3bf 8f4f 	dsb	sy
 8014bda:	607b      	str	r3, [r7, #4]
 8014bdc:	e7fe      	b.n	8014bdc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014bde:	4b0e      	ldr	r3, [pc, #56]	; (8014c18 <vPortValidateInterruptPriority+0x74>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014be6:	4b0d      	ldr	r3, [pc, #52]	; (8014c1c <vPortValidateInterruptPriority+0x78>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	429a      	cmp	r2, r3
 8014bec:	d909      	bls.n	8014c02 <vPortValidateInterruptPriority+0x5e>
 8014bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf2:	f383 8811 	msr	BASEPRI, r3
 8014bf6:	f3bf 8f6f 	isb	sy
 8014bfa:	f3bf 8f4f 	dsb	sy
 8014bfe:	603b      	str	r3, [r7, #0]
 8014c00:	e7fe      	b.n	8014c00 <vPortValidateInterruptPriority+0x5c>
	}
 8014c02:	bf00      	nop
 8014c04:	3714      	adds	r7, #20
 8014c06:	46bd      	mov	sp, r7
 8014c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0c:	4770      	bx	lr
 8014c0e:	bf00      	nop
 8014c10:	e000e3f0 	.word	0xe000e3f0
 8014c14:	20001138 	.word	0x20001138
 8014c18:	e000ed0c 	.word	0xe000ed0c
 8014c1c:	2000113c 	.word	0x2000113c

08014c20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b08a      	sub	sp, #40	; 0x28
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014c28:	2300      	movs	r3, #0
 8014c2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014c2c:	f7fe ff34 	bl	8013a98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014c30:	4b57      	ldr	r3, [pc, #348]	; (8014d90 <pvPortMalloc+0x170>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d101      	bne.n	8014c3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014c38:	f000 f90c 	bl	8014e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014c3c:	4b55      	ldr	r3, [pc, #340]	; (8014d94 <pvPortMalloc+0x174>)
 8014c3e:	681a      	ldr	r2, [r3, #0]
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	4013      	ands	r3, r2
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	f040 808c 	bne.w	8014d62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d01c      	beq.n	8014c8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014c50:	2208      	movs	r2, #8
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	4413      	add	r3, r2
 8014c56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f003 0307 	and.w	r3, r3, #7
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d013      	beq.n	8014c8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	f023 0307 	bic.w	r3, r3, #7
 8014c68:	3308      	adds	r3, #8
 8014c6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f003 0307 	and.w	r3, r3, #7
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d009      	beq.n	8014c8a <pvPortMalloc+0x6a>
 8014c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c7a:	f383 8811 	msr	BASEPRI, r3
 8014c7e:	f3bf 8f6f 	isb	sy
 8014c82:	f3bf 8f4f 	dsb	sy
 8014c86:	617b      	str	r3, [r7, #20]
 8014c88:	e7fe      	b.n	8014c88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d068      	beq.n	8014d62 <pvPortMalloc+0x142>
 8014c90:	4b41      	ldr	r3, [pc, #260]	; (8014d98 <pvPortMalloc+0x178>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	687a      	ldr	r2, [r7, #4]
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d863      	bhi.n	8014d62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014c9a:	4b40      	ldr	r3, [pc, #256]	; (8014d9c <pvPortMalloc+0x17c>)
 8014c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014c9e:	4b3f      	ldr	r3, [pc, #252]	; (8014d9c <pvPortMalloc+0x17c>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014ca4:	e004      	b.n	8014cb0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb2:	685b      	ldr	r3, [r3, #4]
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	d903      	bls.n	8014cc2 <pvPortMalloc+0xa2>
 8014cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d1f1      	bne.n	8014ca6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014cc2:	4b33      	ldr	r3, [pc, #204]	; (8014d90 <pvPortMalloc+0x170>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d04a      	beq.n	8014d62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014ccc:	6a3b      	ldr	r3, [r7, #32]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	2208      	movs	r2, #8
 8014cd2:	4413      	add	r3, r2
 8014cd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd8:	681a      	ldr	r2, [r3, #0]
 8014cda:	6a3b      	ldr	r3, [r7, #32]
 8014cdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce0:	685a      	ldr	r2, [r3, #4]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	1ad2      	subs	r2, r2, r3
 8014ce6:	2308      	movs	r3, #8
 8014ce8:	005b      	lsls	r3, r3, #1
 8014cea:	429a      	cmp	r2, r3
 8014cec:	d91e      	bls.n	8014d2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	4413      	add	r3, r2
 8014cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014cf6:	69bb      	ldr	r3, [r7, #24]
 8014cf8:	f003 0307 	and.w	r3, r3, #7
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d009      	beq.n	8014d14 <pvPortMalloc+0xf4>
 8014d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d04:	f383 8811 	msr	BASEPRI, r3
 8014d08:	f3bf 8f6f 	isb	sy
 8014d0c:	f3bf 8f4f 	dsb	sy
 8014d10:	613b      	str	r3, [r7, #16]
 8014d12:	e7fe      	b.n	8014d12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d16:	685a      	ldr	r2, [r3, #4]
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	1ad2      	subs	r2, r2, r3
 8014d1c:	69bb      	ldr	r3, [r7, #24]
 8014d1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d22:	687a      	ldr	r2, [r7, #4]
 8014d24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014d26:	69b8      	ldr	r0, [r7, #24]
 8014d28:	f000 f8f6 	bl	8014f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014d2c:	4b1a      	ldr	r3, [pc, #104]	; (8014d98 <pvPortMalloc+0x178>)
 8014d2e:	681a      	ldr	r2, [r3, #0]
 8014d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d32:	685b      	ldr	r3, [r3, #4]
 8014d34:	1ad3      	subs	r3, r2, r3
 8014d36:	4a18      	ldr	r2, [pc, #96]	; (8014d98 <pvPortMalloc+0x178>)
 8014d38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014d3a:	4b17      	ldr	r3, [pc, #92]	; (8014d98 <pvPortMalloc+0x178>)
 8014d3c:	681a      	ldr	r2, [r3, #0]
 8014d3e:	4b18      	ldr	r3, [pc, #96]	; (8014da0 <pvPortMalloc+0x180>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	429a      	cmp	r2, r3
 8014d44:	d203      	bcs.n	8014d4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014d46:	4b14      	ldr	r3, [pc, #80]	; (8014d98 <pvPortMalloc+0x178>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	4a15      	ldr	r2, [pc, #84]	; (8014da0 <pvPortMalloc+0x180>)
 8014d4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d50:	685a      	ldr	r2, [r3, #4]
 8014d52:	4b10      	ldr	r3, [pc, #64]	; (8014d94 <pvPortMalloc+0x174>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	431a      	orrs	r2, r3
 8014d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d5e:	2200      	movs	r2, #0
 8014d60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014d62:	f7fe fea7 	bl	8013ab4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d66:	69fb      	ldr	r3, [r7, #28]
 8014d68:	f003 0307 	and.w	r3, r3, #7
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d009      	beq.n	8014d84 <pvPortMalloc+0x164>
 8014d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d74:	f383 8811 	msr	BASEPRI, r3
 8014d78:	f3bf 8f6f 	isb	sy
 8014d7c:	f3bf 8f4f 	dsb	sy
 8014d80:	60fb      	str	r3, [r7, #12]
 8014d82:	e7fe      	b.n	8014d82 <pvPortMalloc+0x162>
	return pvReturn;
 8014d84:	69fb      	ldr	r3, [r7, #28]
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3728      	adds	r7, #40	; 0x28
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	20004d48 	.word	0x20004d48
 8014d94:	20004d54 	.word	0x20004d54
 8014d98:	20004d4c 	.word	0x20004d4c
 8014d9c:	20004d40 	.word	0x20004d40
 8014da0:	20004d50 	.word	0x20004d50

08014da4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b086      	sub	sp, #24
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d046      	beq.n	8014e44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014db6:	2308      	movs	r3, #8
 8014db8:	425b      	negs	r3, r3
 8014dba:	697a      	ldr	r2, [r7, #20]
 8014dbc:	4413      	add	r3, r2
 8014dbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014dc4:	693b      	ldr	r3, [r7, #16]
 8014dc6:	685a      	ldr	r2, [r3, #4]
 8014dc8:	4b20      	ldr	r3, [pc, #128]	; (8014e4c <vPortFree+0xa8>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	4013      	ands	r3, r2
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d109      	bne.n	8014de6 <vPortFree+0x42>
 8014dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd6:	f383 8811 	msr	BASEPRI, r3
 8014dda:	f3bf 8f6f 	isb	sy
 8014dde:	f3bf 8f4f 	dsb	sy
 8014de2:	60fb      	str	r3, [r7, #12]
 8014de4:	e7fe      	b.n	8014de4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d009      	beq.n	8014e02 <vPortFree+0x5e>
 8014dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014df2:	f383 8811 	msr	BASEPRI, r3
 8014df6:	f3bf 8f6f 	isb	sy
 8014dfa:	f3bf 8f4f 	dsb	sy
 8014dfe:	60bb      	str	r3, [r7, #8]
 8014e00:	e7fe      	b.n	8014e00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014e02:	693b      	ldr	r3, [r7, #16]
 8014e04:	685a      	ldr	r2, [r3, #4]
 8014e06:	4b11      	ldr	r3, [pc, #68]	; (8014e4c <vPortFree+0xa8>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	4013      	ands	r3, r2
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d019      	beq.n	8014e44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d115      	bne.n	8014e44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	685a      	ldr	r2, [r3, #4]
 8014e1c:	4b0b      	ldr	r3, [pc, #44]	; (8014e4c <vPortFree+0xa8>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	43db      	mvns	r3, r3
 8014e22:	401a      	ands	r2, r3
 8014e24:	693b      	ldr	r3, [r7, #16]
 8014e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014e28:	f7fe fe36 	bl	8013a98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	685a      	ldr	r2, [r3, #4]
 8014e30:	4b07      	ldr	r3, [pc, #28]	; (8014e50 <vPortFree+0xac>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	4413      	add	r3, r2
 8014e36:	4a06      	ldr	r2, [pc, #24]	; (8014e50 <vPortFree+0xac>)
 8014e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014e3a:	6938      	ldr	r0, [r7, #16]
 8014e3c:	f000 f86c 	bl	8014f18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014e40:	f7fe fe38 	bl	8013ab4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014e44:	bf00      	nop
 8014e46:	3718      	adds	r7, #24
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	bd80      	pop	{r7, pc}
 8014e4c:	20004d54 	.word	0x20004d54
 8014e50:	20004d4c 	.word	0x20004d4c

08014e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014e54:	b480      	push	{r7}
 8014e56:	b085      	sub	sp, #20
 8014e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014e5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014e60:	4b27      	ldr	r3, [pc, #156]	; (8014f00 <prvHeapInit+0xac>)
 8014e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	f003 0307 	and.w	r3, r3, #7
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d00c      	beq.n	8014e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	3307      	adds	r3, #7
 8014e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	f023 0307 	bic.w	r3, r3, #7
 8014e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014e7c:	68ba      	ldr	r2, [r7, #8]
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	1ad3      	subs	r3, r2, r3
 8014e82:	4a1f      	ldr	r2, [pc, #124]	; (8014f00 <prvHeapInit+0xac>)
 8014e84:	4413      	add	r3, r2
 8014e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014e8c:	4a1d      	ldr	r2, [pc, #116]	; (8014f04 <prvHeapInit+0xb0>)
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014e92:	4b1c      	ldr	r3, [pc, #112]	; (8014f04 <prvHeapInit+0xb0>)
 8014e94:	2200      	movs	r2, #0
 8014e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	68ba      	ldr	r2, [r7, #8]
 8014e9c:	4413      	add	r3, r2
 8014e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014ea0:	2208      	movs	r2, #8
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	1a9b      	subs	r3, r3, r2
 8014ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	f023 0307 	bic.w	r3, r3, #7
 8014eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	4a15      	ldr	r2, [pc, #84]	; (8014f08 <prvHeapInit+0xb4>)
 8014eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014eb6:	4b14      	ldr	r3, [pc, #80]	; (8014f08 <prvHeapInit+0xb4>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014ebe:	4b12      	ldr	r3, [pc, #72]	; (8014f08 <prvHeapInit+0xb4>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	68fa      	ldr	r2, [r7, #12]
 8014ece:	1ad2      	subs	r2, r2, r3
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014ed4:	4b0c      	ldr	r3, [pc, #48]	; (8014f08 <prvHeapInit+0xb4>)
 8014ed6:	681a      	ldr	r2, [r3, #0]
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	685b      	ldr	r3, [r3, #4]
 8014ee0:	4a0a      	ldr	r2, [pc, #40]	; (8014f0c <prvHeapInit+0xb8>)
 8014ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	4a09      	ldr	r2, [pc, #36]	; (8014f10 <prvHeapInit+0xbc>)
 8014eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014eec:	4b09      	ldr	r3, [pc, #36]	; (8014f14 <prvHeapInit+0xc0>)
 8014eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014ef2:	601a      	str	r2, [r3, #0]
}
 8014ef4:	bf00      	nop
 8014ef6:	3714      	adds	r7, #20
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efe:	4770      	bx	lr
 8014f00:	20001140 	.word	0x20001140
 8014f04:	20004d40 	.word	0x20004d40
 8014f08:	20004d48 	.word	0x20004d48
 8014f0c:	20004d50 	.word	0x20004d50
 8014f10:	20004d4c 	.word	0x20004d4c
 8014f14:	20004d54 	.word	0x20004d54

08014f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b085      	sub	sp, #20
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014f20:	4b28      	ldr	r3, [pc, #160]	; (8014fc4 <prvInsertBlockIntoFreeList+0xac>)
 8014f22:	60fb      	str	r3, [r7, #12]
 8014f24:	e002      	b.n	8014f2c <prvInsertBlockIntoFreeList+0x14>
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	60fb      	str	r3, [r7, #12]
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	687a      	ldr	r2, [r7, #4]
 8014f32:	429a      	cmp	r2, r3
 8014f34:	d8f7      	bhi.n	8014f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	68ba      	ldr	r2, [r7, #8]
 8014f40:	4413      	add	r3, r2
 8014f42:	687a      	ldr	r2, [r7, #4]
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d108      	bne.n	8014f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	685a      	ldr	r2, [r3, #4]
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	685b      	ldr	r3, [r3, #4]
 8014f50:	441a      	add	r2, r3
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	68ba      	ldr	r2, [r7, #8]
 8014f64:	441a      	add	r2, r3
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d118      	bne.n	8014fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	681a      	ldr	r2, [r3, #0]
 8014f72:	4b15      	ldr	r3, [pc, #84]	; (8014fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	429a      	cmp	r2, r3
 8014f78:	d00d      	beq.n	8014f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	685b      	ldr	r3, [r3, #4]
 8014f84:	441a      	add	r2, r3
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	601a      	str	r2, [r3, #0]
 8014f94:	e008      	b.n	8014fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014f96:	4b0c      	ldr	r3, [pc, #48]	; (8014fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8014f98:	681a      	ldr	r2, [r3, #0]
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	601a      	str	r2, [r3, #0]
 8014f9e:	e003      	b.n	8014fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	681a      	ldr	r2, [r3, #0]
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014fa8:	68fa      	ldr	r2, [r7, #12]
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	429a      	cmp	r2, r3
 8014fae:	d002      	beq.n	8014fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	687a      	ldr	r2, [r7, #4]
 8014fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014fb6:	bf00      	nop
 8014fb8:	3714      	adds	r7, #20
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc0:	4770      	bx	lr
 8014fc2:	bf00      	nop
 8014fc4:	20004d40 	.word	0x20004d40
 8014fc8:	20004d48 	.word	0x20004d48

08014fcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	4912      	ldr	r1, [pc, #72]	; (801501c <MX_USB_DEVICE_Init+0x50>)
 8014fd4:	4812      	ldr	r0, [pc, #72]	; (8015020 <MX_USB_DEVICE_Init+0x54>)
 8014fd6:	f7fc f89d 	bl	8011114 <USBD_Init>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d001      	beq.n	8014fe4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014fe0:	f7ee ff5c 	bl	8003e9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014fe4:	490f      	ldr	r1, [pc, #60]	; (8015024 <MX_USB_DEVICE_Init+0x58>)
 8014fe6:	480e      	ldr	r0, [pc, #56]	; (8015020 <MX_USB_DEVICE_Init+0x54>)
 8014fe8:	f7fc f8ca 	bl	8011180 <USBD_RegisterClass>
 8014fec:	4603      	mov	r3, r0
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d001      	beq.n	8014ff6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014ff2:	f7ee ff53 	bl	8003e9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014ff6:	490c      	ldr	r1, [pc, #48]	; (8015028 <MX_USB_DEVICE_Init+0x5c>)
 8014ff8:	4809      	ldr	r0, [pc, #36]	; (8015020 <MX_USB_DEVICE_Init+0x54>)
 8014ffa:	f7fb ffef 	bl	8010fdc <USBD_CDC_RegisterInterface>
 8014ffe:	4603      	mov	r3, r0
 8015000:	2b00      	cmp	r3, #0
 8015002:	d001      	beq.n	8015008 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015004:	f7ee ff4a 	bl	8003e9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015008:	4805      	ldr	r0, [pc, #20]	; (8015020 <MX_USB_DEVICE_Init+0x54>)
 801500a:	f7fc f8da 	bl	80111c2 <USBD_Start>
 801500e:	4603      	mov	r3, r0
 8015010:	2b00      	cmp	r3, #0
 8015012:	d001      	beq.n	8015018 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015014:	f7ee ff42 	bl	8003e9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015018:	bf00      	nop
 801501a:	bd80      	pop	{r7, pc}
 801501c:	20000958 	.word	0x20000958
 8015020:	20005e8c 	.word	0x20005e8c
 8015024:	2000083c 	.word	0x2000083c
 8015028:	20000944 	.word	0x20000944

0801502c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015030:	2200      	movs	r2, #0
 8015032:	4905      	ldr	r1, [pc, #20]	; (8015048 <CDC_Init_FS+0x1c>)
 8015034:	4805      	ldr	r0, [pc, #20]	; (801504c <CDC_Init_FS+0x20>)
 8015036:	f7fb ffe6 	bl	8011006 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801503a:	4905      	ldr	r1, [pc, #20]	; (8015050 <CDC_Init_FS+0x24>)
 801503c:	4803      	ldr	r0, [pc, #12]	; (801504c <CDC_Init_FS+0x20>)
 801503e:	f7fb fffb 	bl	8011038 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015042:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015044:	4618      	mov	r0, r3
 8015046:	bd80      	pop	{r7, pc}
 8015048:	2000635c 	.word	0x2000635c
 801504c:	20005e8c 	.word	0x20005e8c
 8015050:	2000615c 	.word	0x2000615c

08015054 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015054:	b480      	push	{r7}
 8015056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015058:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801505a:	4618      	mov	r0, r3
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr

08015064 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015064:	b480      	push	{r7}
 8015066:	b083      	sub	sp, #12
 8015068:	af00      	add	r7, sp, #0
 801506a:	4603      	mov	r3, r0
 801506c:	6039      	str	r1, [r7, #0]
 801506e:	71fb      	strb	r3, [r7, #7]
 8015070:	4613      	mov	r3, r2
 8015072:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015074:	79fb      	ldrb	r3, [r7, #7]
 8015076:	2b23      	cmp	r3, #35	; 0x23
 8015078:	f200 808c 	bhi.w	8015194 <CDC_Control_FS+0x130>
 801507c:	a201      	add	r2, pc, #4	; (adr r2, 8015084 <CDC_Control_FS+0x20>)
 801507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015082:	bf00      	nop
 8015084:	08015195 	.word	0x08015195
 8015088:	08015195 	.word	0x08015195
 801508c:	08015195 	.word	0x08015195
 8015090:	08015195 	.word	0x08015195
 8015094:	08015195 	.word	0x08015195
 8015098:	08015195 	.word	0x08015195
 801509c:	08015195 	.word	0x08015195
 80150a0:	08015195 	.word	0x08015195
 80150a4:	08015195 	.word	0x08015195
 80150a8:	08015195 	.word	0x08015195
 80150ac:	08015195 	.word	0x08015195
 80150b0:	08015195 	.word	0x08015195
 80150b4:	08015195 	.word	0x08015195
 80150b8:	08015195 	.word	0x08015195
 80150bc:	08015195 	.word	0x08015195
 80150c0:	08015195 	.word	0x08015195
 80150c4:	08015195 	.word	0x08015195
 80150c8:	08015195 	.word	0x08015195
 80150cc:	08015195 	.word	0x08015195
 80150d0:	08015195 	.word	0x08015195
 80150d4:	08015195 	.word	0x08015195
 80150d8:	08015195 	.word	0x08015195
 80150dc:	08015195 	.word	0x08015195
 80150e0:	08015195 	.word	0x08015195
 80150e4:	08015195 	.word	0x08015195
 80150e8:	08015195 	.word	0x08015195
 80150ec:	08015195 	.word	0x08015195
 80150f0:	08015195 	.word	0x08015195
 80150f4:	08015195 	.word	0x08015195
 80150f8:	08015195 	.word	0x08015195
 80150fc:	08015195 	.word	0x08015195
 8015100:	08015195 	.word	0x08015195
 8015104:	08015115 	.word	0x08015115
 8015108:	0801514f 	.word	0x0801514f
 801510c:	08015195 	.word	0x08015195
 8015110:	08015195 	.word	0x08015195
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	781a      	ldrb	r2, [r3, #0]
 8015118:	4b22      	ldr	r3, [pc, #136]	; (80151a4 <CDC_Control_FS+0x140>)
 801511a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	785a      	ldrb	r2, [r3, #1]
 8015120:	4b20      	ldr	r3, [pc, #128]	; (80151a4 <CDC_Control_FS+0x140>)
 8015122:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	789a      	ldrb	r2, [r3, #2]
 8015128:	4b1e      	ldr	r3, [pc, #120]	; (80151a4 <CDC_Control_FS+0x140>)
 801512a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801512c:	683b      	ldr	r3, [r7, #0]
 801512e:	78da      	ldrb	r2, [r3, #3]
 8015130:	4b1c      	ldr	r3, [pc, #112]	; (80151a4 <CDC_Control_FS+0x140>)
 8015132:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	791a      	ldrb	r2, [r3, #4]
 8015138:	4b1a      	ldr	r3, [pc, #104]	; (80151a4 <CDC_Control_FS+0x140>)
 801513a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801513c:	683b      	ldr	r3, [r7, #0]
 801513e:	795a      	ldrb	r2, [r3, #5]
 8015140:	4b18      	ldr	r3, [pc, #96]	; (80151a4 <CDC_Control_FS+0x140>)
 8015142:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8015144:	683b      	ldr	r3, [r7, #0]
 8015146:	799a      	ldrb	r2, [r3, #6]
 8015148:	4b16      	ldr	r3, [pc, #88]	; (80151a4 <CDC_Control_FS+0x140>)
 801514a:	719a      	strb	r2, [r3, #6]
    	break;
 801514c:	e023      	b.n	8015196 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801514e:	4b15      	ldr	r3, [pc, #84]	; (80151a4 <CDC_Control_FS+0x140>)
 8015150:	781a      	ldrb	r2, [r3, #0]
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8015156:	683b      	ldr	r3, [r7, #0]
 8015158:	3301      	adds	r3, #1
 801515a:	4a12      	ldr	r2, [pc, #72]	; (80151a4 <CDC_Control_FS+0x140>)
 801515c:	7852      	ldrb	r2, [r2, #1]
 801515e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	3302      	adds	r3, #2
 8015164:	4a0f      	ldr	r2, [pc, #60]	; (80151a4 <CDC_Control_FS+0x140>)
 8015166:	7892      	ldrb	r2, [r2, #2]
 8015168:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	3303      	adds	r3, #3
 801516e:	4a0d      	ldr	r2, [pc, #52]	; (80151a4 <CDC_Control_FS+0x140>)
 8015170:	78d2      	ldrb	r2, [r2, #3]
 8015172:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	3304      	adds	r3, #4
 8015178:	4a0a      	ldr	r2, [pc, #40]	; (80151a4 <CDC_Control_FS+0x140>)
 801517a:	7912      	ldrb	r2, [r2, #4]
 801517c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	3305      	adds	r3, #5
 8015182:	4a08      	ldr	r2, [pc, #32]	; (80151a4 <CDC_Control_FS+0x140>)
 8015184:	7952      	ldrb	r2, [r2, #5]
 8015186:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	3306      	adds	r3, #6
 801518c:	4a05      	ldr	r2, [pc, #20]	; (80151a4 <CDC_Control_FS+0x140>)
 801518e:	7992      	ldrb	r2, [r2, #6]
 8015190:	701a      	strb	r2, [r3, #0]
    break;
 8015192:	e000      	b.n	8015196 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015194:	bf00      	nop
  }

  return (USBD_OK);
 8015196:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015198:	4618      	mov	r0, r3
 801519a:	370c      	adds	r7, #12
 801519c:	46bd      	mov	sp, r7
 801519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a2:	4770      	bx	lr
 80151a4:	2000655c 	.word	0x2000655c

080151a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
 80151b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	461a      	mov	r2, r3
 80151ba:	6879      	ldr	r1, [r7, #4]
 80151bc:	4807      	ldr	r0, [pc, #28]	; (80151dc <CDC_Receive_FS+0x34>)
 80151be:	f7ee fee4 	bl	8003f8a <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80151c2:	6879      	ldr	r1, [r7, #4]
 80151c4:	4806      	ldr	r0, [pc, #24]	; (80151e0 <CDC_Receive_FS+0x38>)
 80151c6:	f7fb ff37 	bl	8011038 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80151ca:	4805      	ldr	r0, [pc, #20]	; (80151e0 <CDC_Receive_FS+0x38>)
 80151cc:	f7fb ff78 	bl	80110c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80151d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	3708      	adds	r7, #8
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}
 80151da:	bf00      	nop
 80151dc:	20000000 	.word	0x20000000
 80151e0:	20005e8c 	.word	0x20005e8c

080151e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b084      	sub	sp, #16
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	460b      	mov	r3, r1
 80151ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80151f0:	2300      	movs	r3, #0
 80151f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80151f4:	4b0d      	ldr	r3, [pc, #52]	; (801522c <CDC_Transmit_FS+0x48>)
 80151f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80151fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015202:	2b00      	cmp	r3, #0
 8015204:	d001      	beq.n	801520a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015206:	2301      	movs	r3, #1
 8015208:	e00b      	b.n	8015222 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801520a:	887b      	ldrh	r3, [r7, #2]
 801520c:	461a      	mov	r2, r3
 801520e:	6879      	ldr	r1, [r7, #4]
 8015210:	4806      	ldr	r0, [pc, #24]	; (801522c <CDC_Transmit_FS+0x48>)
 8015212:	f7fb fef8 	bl	8011006 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015216:	4805      	ldr	r0, [pc, #20]	; (801522c <CDC_Transmit_FS+0x48>)
 8015218:	f7fb ff22 	bl	8011060 <USBD_CDC_TransmitPacket>
 801521c:	4603      	mov	r3, r0
 801521e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015220:	7bfb      	ldrb	r3, [r7, #15]
}
 8015222:	4618      	mov	r0, r3
 8015224:	3710      	adds	r7, #16
 8015226:	46bd      	mov	sp, r7
 8015228:	bd80      	pop	{r7, pc}
 801522a:	bf00      	nop
 801522c:	20005e8c 	.word	0x20005e8c

08015230 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015230:	b480      	push	{r7}
 8015232:	b087      	sub	sp, #28
 8015234:	af00      	add	r7, sp, #0
 8015236:	60f8      	str	r0, [r7, #12]
 8015238:	60b9      	str	r1, [r7, #8]
 801523a:	4613      	mov	r3, r2
 801523c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801523e:	2300      	movs	r3, #0
 8015240:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015242:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015246:	4618      	mov	r0, r3
 8015248:	371c      	adds	r7, #28
 801524a:	46bd      	mov	sp, r7
 801524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015250:	4770      	bx	lr
	...

08015254 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015254:	b480      	push	{r7}
 8015256:	b083      	sub	sp, #12
 8015258:	af00      	add	r7, sp, #0
 801525a:	4603      	mov	r3, r0
 801525c:	6039      	str	r1, [r7, #0]
 801525e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	2212      	movs	r2, #18
 8015264:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015266:	4b03      	ldr	r3, [pc, #12]	; (8015274 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015268:	4618      	mov	r0, r3
 801526a:	370c      	adds	r7, #12
 801526c:	46bd      	mov	sp, r7
 801526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015272:	4770      	bx	lr
 8015274:	20000974 	.word	0x20000974

08015278 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015278:	b480      	push	{r7}
 801527a:	b083      	sub	sp, #12
 801527c:	af00      	add	r7, sp, #0
 801527e:	4603      	mov	r3, r0
 8015280:	6039      	str	r1, [r7, #0]
 8015282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	2204      	movs	r2, #4
 8015288:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801528a:	4b03      	ldr	r3, [pc, #12]	; (8015298 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801528c:	4618      	mov	r0, r3
 801528e:	370c      	adds	r7, #12
 8015290:	46bd      	mov	sp, r7
 8015292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015296:	4770      	bx	lr
 8015298:	20000988 	.word	0x20000988

0801529c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	4603      	mov	r3, r0
 80152a4:	6039      	str	r1, [r7, #0]
 80152a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80152a8:	79fb      	ldrb	r3, [r7, #7]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d105      	bne.n	80152ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80152ae:	683a      	ldr	r2, [r7, #0]
 80152b0:	4907      	ldr	r1, [pc, #28]	; (80152d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80152b2:	4808      	ldr	r0, [pc, #32]	; (80152d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80152b4:	f7fc ff53 	bl	801215e <USBD_GetString>
 80152b8:	e004      	b.n	80152c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80152ba:	683a      	ldr	r2, [r7, #0]
 80152bc:	4904      	ldr	r1, [pc, #16]	; (80152d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80152be:	4805      	ldr	r0, [pc, #20]	; (80152d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80152c0:	f7fc ff4d 	bl	801215e <USBD_GetString>
  }
  return USBD_StrDesc;
 80152c4:	4b02      	ldr	r3, [pc, #8]	; (80152d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	3708      	adds	r7, #8
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}
 80152ce:	bf00      	nop
 80152d0:	20006564 	.word	0x20006564
 80152d4:	0801b214 	.word	0x0801b214

080152d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b082      	sub	sp, #8
 80152dc:	af00      	add	r7, sp, #0
 80152de:	4603      	mov	r3, r0
 80152e0:	6039      	str	r1, [r7, #0]
 80152e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80152e4:	683a      	ldr	r2, [r7, #0]
 80152e6:	4904      	ldr	r1, [pc, #16]	; (80152f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80152e8:	4804      	ldr	r0, [pc, #16]	; (80152fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80152ea:	f7fc ff38 	bl	801215e <USBD_GetString>
  return USBD_StrDesc;
 80152ee:	4b02      	ldr	r3, [pc, #8]	; (80152f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	20006564 	.word	0x20006564
 80152fc:	0801b22c 	.word	0x0801b22c

08015300 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b082      	sub	sp, #8
 8015304:	af00      	add	r7, sp, #0
 8015306:	4603      	mov	r3, r0
 8015308:	6039      	str	r1, [r7, #0]
 801530a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	221a      	movs	r2, #26
 8015310:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015312:	f000 f843 	bl	801539c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015316:	4b02      	ldr	r3, [pc, #8]	; (8015320 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015318:	4618      	mov	r0, r3
 801531a:	3708      	adds	r7, #8
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	2000098c 	.word	0x2000098c

08015324 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b082      	sub	sp, #8
 8015328:	af00      	add	r7, sp, #0
 801532a:	4603      	mov	r3, r0
 801532c:	6039      	str	r1, [r7, #0]
 801532e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015330:	79fb      	ldrb	r3, [r7, #7]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d105      	bne.n	8015342 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015336:	683a      	ldr	r2, [r7, #0]
 8015338:	4907      	ldr	r1, [pc, #28]	; (8015358 <USBD_FS_ConfigStrDescriptor+0x34>)
 801533a:	4808      	ldr	r0, [pc, #32]	; (801535c <USBD_FS_ConfigStrDescriptor+0x38>)
 801533c:	f7fc ff0f 	bl	801215e <USBD_GetString>
 8015340:	e004      	b.n	801534c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015342:	683a      	ldr	r2, [r7, #0]
 8015344:	4904      	ldr	r1, [pc, #16]	; (8015358 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015346:	4805      	ldr	r0, [pc, #20]	; (801535c <USBD_FS_ConfigStrDescriptor+0x38>)
 8015348:	f7fc ff09 	bl	801215e <USBD_GetString>
  }
  return USBD_StrDesc;
 801534c:	4b02      	ldr	r3, [pc, #8]	; (8015358 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801534e:	4618      	mov	r0, r3
 8015350:	3708      	adds	r7, #8
 8015352:	46bd      	mov	sp, r7
 8015354:	bd80      	pop	{r7, pc}
 8015356:	bf00      	nop
 8015358:	20006564 	.word	0x20006564
 801535c:	0801b240 	.word	0x0801b240

08015360 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b082      	sub	sp, #8
 8015364:	af00      	add	r7, sp, #0
 8015366:	4603      	mov	r3, r0
 8015368:	6039      	str	r1, [r7, #0]
 801536a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801536c:	79fb      	ldrb	r3, [r7, #7]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d105      	bne.n	801537e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015372:	683a      	ldr	r2, [r7, #0]
 8015374:	4907      	ldr	r1, [pc, #28]	; (8015394 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015376:	4808      	ldr	r0, [pc, #32]	; (8015398 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015378:	f7fc fef1 	bl	801215e <USBD_GetString>
 801537c:	e004      	b.n	8015388 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801537e:	683a      	ldr	r2, [r7, #0]
 8015380:	4904      	ldr	r1, [pc, #16]	; (8015394 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015382:	4805      	ldr	r0, [pc, #20]	; (8015398 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015384:	f7fc feeb 	bl	801215e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015388:	4b02      	ldr	r3, [pc, #8]	; (8015394 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801538a:	4618      	mov	r0, r3
 801538c:	3708      	adds	r7, #8
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	20006564 	.word	0x20006564
 8015398:	0801b24c 	.word	0x0801b24c

0801539c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80153a2:	4b0f      	ldr	r3, [pc, #60]	; (80153e0 <Get_SerialNum+0x44>)
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80153a8:	4b0e      	ldr	r3, [pc, #56]	; (80153e4 <Get_SerialNum+0x48>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80153ae:	4b0e      	ldr	r3, [pc, #56]	; (80153e8 <Get_SerialNum+0x4c>)
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80153b4:	68fa      	ldr	r2, [r7, #12]
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	4413      	add	r3, r2
 80153ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d009      	beq.n	80153d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80153c2:	2208      	movs	r2, #8
 80153c4:	4909      	ldr	r1, [pc, #36]	; (80153ec <Get_SerialNum+0x50>)
 80153c6:	68f8      	ldr	r0, [r7, #12]
 80153c8:	f000 f814 	bl	80153f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80153cc:	2204      	movs	r2, #4
 80153ce:	4908      	ldr	r1, [pc, #32]	; (80153f0 <Get_SerialNum+0x54>)
 80153d0:	68b8      	ldr	r0, [r7, #8]
 80153d2:	f000 f80f 	bl	80153f4 <IntToUnicode>
  }
}
 80153d6:	bf00      	nop
 80153d8:	3710      	adds	r7, #16
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}
 80153de:	bf00      	nop
 80153e0:	1fff7a10 	.word	0x1fff7a10
 80153e4:	1fff7a14 	.word	0x1fff7a14
 80153e8:	1fff7a18 	.word	0x1fff7a18
 80153ec:	2000098e 	.word	0x2000098e
 80153f0:	2000099e 	.word	0x2000099e

080153f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80153f4:	b480      	push	{r7}
 80153f6:	b087      	sub	sp, #28
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	4613      	mov	r3, r2
 8015400:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015402:	2300      	movs	r3, #0
 8015404:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015406:	2300      	movs	r3, #0
 8015408:	75fb      	strb	r3, [r7, #23]
 801540a:	e027      	b.n	801545c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	0f1b      	lsrs	r3, r3, #28
 8015410:	2b09      	cmp	r3, #9
 8015412:	d80b      	bhi.n	801542c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	0f1b      	lsrs	r3, r3, #28
 8015418:	b2da      	uxtb	r2, r3
 801541a:	7dfb      	ldrb	r3, [r7, #23]
 801541c:	005b      	lsls	r3, r3, #1
 801541e:	4619      	mov	r1, r3
 8015420:	68bb      	ldr	r3, [r7, #8]
 8015422:	440b      	add	r3, r1
 8015424:	3230      	adds	r2, #48	; 0x30
 8015426:	b2d2      	uxtb	r2, r2
 8015428:	701a      	strb	r2, [r3, #0]
 801542a:	e00a      	b.n	8015442 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	0f1b      	lsrs	r3, r3, #28
 8015430:	b2da      	uxtb	r2, r3
 8015432:	7dfb      	ldrb	r3, [r7, #23]
 8015434:	005b      	lsls	r3, r3, #1
 8015436:	4619      	mov	r1, r3
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	440b      	add	r3, r1
 801543c:	3237      	adds	r2, #55	; 0x37
 801543e:	b2d2      	uxtb	r2, r2
 8015440:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	011b      	lsls	r3, r3, #4
 8015446:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015448:	7dfb      	ldrb	r3, [r7, #23]
 801544a:	005b      	lsls	r3, r3, #1
 801544c:	3301      	adds	r3, #1
 801544e:	68ba      	ldr	r2, [r7, #8]
 8015450:	4413      	add	r3, r2
 8015452:	2200      	movs	r2, #0
 8015454:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015456:	7dfb      	ldrb	r3, [r7, #23]
 8015458:	3301      	adds	r3, #1
 801545a:	75fb      	strb	r3, [r7, #23]
 801545c:	7dfa      	ldrb	r2, [r7, #23]
 801545e:	79fb      	ldrb	r3, [r7, #7]
 8015460:	429a      	cmp	r2, r3
 8015462:	d3d3      	bcc.n	801540c <IntToUnicode+0x18>
  }
}
 8015464:	bf00      	nop
 8015466:	371c      	adds	r7, #28
 8015468:	46bd      	mov	sp, r7
 801546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546e:	4770      	bx	lr

08015470 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b08a      	sub	sp, #40	; 0x28
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015478:	f107 0314 	add.w	r3, r7, #20
 801547c:	2200      	movs	r2, #0
 801547e:	601a      	str	r2, [r3, #0]
 8015480:	605a      	str	r2, [r3, #4]
 8015482:	609a      	str	r2, [r3, #8]
 8015484:	60da      	str	r2, [r3, #12]
 8015486:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015490:	d13a      	bne.n	8015508 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015492:	2300      	movs	r3, #0
 8015494:	613b      	str	r3, [r7, #16]
 8015496:	4b1e      	ldr	r3, [pc, #120]	; (8015510 <HAL_PCD_MspInit+0xa0>)
 8015498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801549a:	4a1d      	ldr	r2, [pc, #116]	; (8015510 <HAL_PCD_MspInit+0xa0>)
 801549c:	f043 0301 	orr.w	r3, r3, #1
 80154a0:	6313      	str	r3, [r2, #48]	; 0x30
 80154a2:	4b1b      	ldr	r3, [pc, #108]	; (8015510 <HAL_PCD_MspInit+0xa0>)
 80154a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154a6:	f003 0301 	and.w	r3, r3, #1
 80154aa:	613b      	str	r3, [r7, #16]
 80154ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80154ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80154b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154b4:	2302      	movs	r3, #2
 80154b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154b8:	2300      	movs	r3, #0
 80154ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80154bc:	2303      	movs	r3, #3
 80154be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80154c0:	230a      	movs	r3, #10
 80154c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80154c4:	f107 0314 	add.w	r3, r7, #20
 80154c8:	4619      	mov	r1, r3
 80154ca:	4812      	ldr	r0, [pc, #72]	; (8015514 <HAL_PCD_MspInit+0xa4>)
 80154cc:	f7f6 fbf8 	bl	800bcc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80154d0:	4b0f      	ldr	r3, [pc, #60]	; (8015510 <HAL_PCD_MspInit+0xa0>)
 80154d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154d4:	4a0e      	ldr	r2, [pc, #56]	; (8015510 <HAL_PCD_MspInit+0xa0>)
 80154d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154da:	6353      	str	r3, [r2, #52]	; 0x34
 80154dc:	2300      	movs	r3, #0
 80154de:	60fb      	str	r3, [r7, #12]
 80154e0:	4b0b      	ldr	r3, [pc, #44]	; (8015510 <HAL_PCD_MspInit+0xa0>)
 80154e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154e4:	4a0a      	ldr	r2, [pc, #40]	; (8015510 <HAL_PCD_MspInit+0xa0>)
 80154e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80154ea:	6453      	str	r3, [r2, #68]	; 0x44
 80154ec:	4b08      	ldr	r3, [pc, #32]	; (8015510 <HAL_PCD_MspInit+0xa0>)
 80154ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80154f4:	60fb      	str	r3, [r7, #12]
 80154f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80154f8:	2200      	movs	r2, #0
 80154fa:	2105      	movs	r1, #5
 80154fc:	2043      	movs	r0, #67	; 0x43
 80154fe:	f7f6 f817 	bl	800b530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015502:	2043      	movs	r0, #67	; 0x43
 8015504:	f7f6 f830 	bl	800b568 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015508:	bf00      	nop
 801550a:	3728      	adds	r7, #40	; 0x28
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}
 8015510:	40023800 	.word	0x40023800
 8015514:	40020000 	.word	0x40020000

08015518 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801552c:	4619      	mov	r1, r3
 801552e:	4610      	mov	r0, r2
 8015530:	f7fb fe92 	bl	8011258 <USBD_LL_SetupStage>
}
 8015534:	bf00      	nop
 8015536:	3708      	adds	r7, #8
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}

0801553c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b082      	sub	sp, #8
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
 8015544:	460b      	mov	r3, r1
 8015546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801554e:	78fa      	ldrb	r2, [r7, #3]
 8015550:	6879      	ldr	r1, [r7, #4]
 8015552:	4613      	mov	r3, r2
 8015554:	00db      	lsls	r3, r3, #3
 8015556:	1a9b      	subs	r3, r3, r2
 8015558:	009b      	lsls	r3, r3, #2
 801555a:	440b      	add	r3, r1
 801555c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015560:	681a      	ldr	r2, [r3, #0]
 8015562:	78fb      	ldrb	r3, [r7, #3]
 8015564:	4619      	mov	r1, r3
 8015566:	f7fb feca 	bl	80112fe <USBD_LL_DataOutStage>
}
 801556a:	bf00      	nop
 801556c:	3708      	adds	r7, #8
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}

08015572 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015572:	b580      	push	{r7, lr}
 8015574:	b082      	sub	sp, #8
 8015576:	af00      	add	r7, sp, #0
 8015578:	6078      	str	r0, [r7, #4]
 801557a:	460b      	mov	r3, r1
 801557c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015584:	78fa      	ldrb	r2, [r7, #3]
 8015586:	6879      	ldr	r1, [r7, #4]
 8015588:	4613      	mov	r3, r2
 801558a:	00db      	lsls	r3, r3, #3
 801558c:	1a9b      	subs	r3, r3, r2
 801558e:	009b      	lsls	r3, r3, #2
 8015590:	440b      	add	r3, r1
 8015592:	3348      	adds	r3, #72	; 0x48
 8015594:	681a      	ldr	r2, [r3, #0]
 8015596:	78fb      	ldrb	r3, [r7, #3]
 8015598:	4619      	mov	r1, r3
 801559a:	f7fb ff13 	bl	80113c4 <USBD_LL_DataInStage>
}
 801559e:	bf00      	nop
 80155a0:	3708      	adds	r7, #8
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}

080155a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155a6:	b580      	push	{r7, lr}
 80155a8:	b082      	sub	sp, #8
 80155aa:	af00      	add	r7, sp, #0
 80155ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80155b4:	4618      	mov	r0, r3
 80155b6:	f7fc f817 	bl	80115e8 <USBD_LL_SOF>
}
 80155ba:	bf00      	nop
 80155bc:	3708      	adds	r7, #8
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155c2:	b580      	push	{r7, lr}
 80155c4:	b084      	sub	sp, #16
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80155ca:	2301      	movs	r3, #1
 80155cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d102      	bne.n	80155dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80155d6:	2300      	movs	r3, #0
 80155d8:	73fb      	strb	r3, [r7, #15]
 80155da:	e008      	b.n	80155ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	68db      	ldr	r3, [r3, #12]
 80155e0:	2b02      	cmp	r3, #2
 80155e2:	d102      	bne.n	80155ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80155e4:	2301      	movs	r3, #1
 80155e6:	73fb      	strb	r3, [r7, #15]
 80155e8:	e001      	b.n	80155ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80155ea:	f7ee fc57 	bl	8003e9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80155f4:	7bfa      	ldrb	r2, [r7, #15]
 80155f6:	4611      	mov	r1, r2
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7fb ffba 	bl	8011572 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015604:	4618      	mov	r0, r3
 8015606:	f7fb ff73 	bl	80114f0 <USBD_LL_Reset>
}
 801560a:	bf00      	nop
 801560c:	3710      	adds	r7, #16
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
	...

08015614 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b082      	sub	sp, #8
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015622:	4618      	mov	r0, r3
 8015624:	f7fb ffb5 	bl	8011592 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	6812      	ldr	r2, [r2, #0]
 8015636:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801563a:	f043 0301 	orr.w	r3, r3, #1
 801563e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	6a1b      	ldr	r3, [r3, #32]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d005      	beq.n	8015654 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015648:	4b04      	ldr	r3, [pc, #16]	; (801565c <HAL_PCD_SuspendCallback+0x48>)
 801564a:	691b      	ldr	r3, [r3, #16]
 801564c:	4a03      	ldr	r2, [pc, #12]	; (801565c <HAL_PCD_SuspendCallback+0x48>)
 801564e:	f043 0306 	orr.w	r3, r3, #6
 8015652:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015654:	bf00      	nop
 8015656:	3708      	adds	r7, #8
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}
 801565c:	e000ed00 	.word	0xe000ed00

08015660 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b082      	sub	sp, #8
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801566e:	4618      	mov	r0, r3
 8015670:	f7fb ffa4 	bl	80115bc <USBD_LL_Resume>
}
 8015674:	bf00      	nop
 8015676:	3708      	adds	r7, #8
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b082      	sub	sp, #8
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	460b      	mov	r3, r1
 8015686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801568e:	78fa      	ldrb	r2, [r7, #3]
 8015690:	4611      	mov	r1, r2
 8015692:	4618      	mov	r0, r3
 8015694:	f7fb ffcf 	bl	8011636 <USBD_LL_IsoOUTIncomplete>
}
 8015698:	bf00      	nop
 801569a:	3708      	adds	r7, #8
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}

080156a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b082      	sub	sp, #8
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	460b      	mov	r3, r1
 80156aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156b2:	78fa      	ldrb	r2, [r7, #3]
 80156b4:	4611      	mov	r1, r2
 80156b6:	4618      	mov	r0, r3
 80156b8:	f7fb ffb0 	bl	801161c <USBD_LL_IsoINIncomplete>
}
 80156bc:	bf00      	nop
 80156be:	3708      	adds	r7, #8
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}

080156c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b082      	sub	sp, #8
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156d2:	4618      	mov	r0, r3
 80156d4:	f7fb ffbc 	bl	8011650 <USBD_LL_DevConnected>
}
 80156d8:	bf00      	nop
 80156da:	3708      	adds	r7, #8
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}

080156e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b082      	sub	sp, #8
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7fb ffb9 	bl	8011666 <USBD_LL_DevDisconnected>
}
 80156f4:	bf00      	nop
 80156f6:	3708      	adds	r7, #8
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}

080156fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d13c      	bne.n	8015786 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801570c:	4a20      	ldr	r2, [pc, #128]	; (8015790 <USBD_LL_Init+0x94>)
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	4a1e      	ldr	r2, [pc, #120]	; (8015790 <USBD_LL_Init+0x94>)
 8015718:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801571c:	4b1c      	ldr	r3, [pc, #112]	; (8015790 <USBD_LL_Init+0x94>)
 801571e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015722:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015724:	4b1a      	ldr	r3, [pc, #104]	; (8015790 <USBD_LL_Init+0x94>)
 8015726:	2204      	movs	r2, #4
 8015728:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801572a:	4b19      	ldr	r3, [pc, #100]	; (8015790 <USBD_LL_Init+0x94>)
 801572c:	2202      	movs	r2, #2
 801572e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015730:	4b17      	ldr	r3, [pc, #92]	; (8015790 <USBD_LL_Init+0x94>)
 8015732:	2200      	movs	r2, #0
 8015734:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015736:	4b16      	ldr	r3, [pc, #88]	; (8015790 <USBD_LL_Init+0x94>)
 8015738:	2202      	movs	r2, #2
 801573a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801573c:	4b14      	ldr	r3, [pc, #80]	; (8015790 <USBD_LL_Init+0x94>)
 801573e:	2200      	movs	r2, #0
 8015740:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015742:	4b13      	ldr	r3, [pc, #76]	; (8015790 <USBD_LL_Init+0x94>)
 8015744:	2200      	movs	r2, #0
 8015746:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015748:	4b11      	ldr	r3, [pc, #68]	; (8015790 <USBD_LL_Init+0x94>)
 801574a:	2200      	movs	r2, #0
 801574c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801574e:	4b10      	ldr	r3, [pc, #64]	; (8015790 <USBD_LL_Init+0x94>)
 8015750:	2200      	movs	r2, #0
 8015752:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015754:	4b0e      	ldr	r3, [pc, #56]	; (8015790 <USBD_LL_Init+0x94>)
 8015756:	2200      	movs	r2, #0
 8015758:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801575a:	480d      	ldr	r0, [pc, #52]	; (8015790 <USBD_LL_Init+0x94>)
 801575c:	f7f6 fcba 	bl	800c0d4 <HAL_PCD_Init>
 8015760:	4603      	mov	r3, r0
 8015762:	2b00      	cmp	r3, #0
 8015764:	d001      	beq.n	801576a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015766:	f7ee fb99 	bl	8003e9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801576a:	2180      	movs	r1, #128	; 0x80
 801576c:	4808      	ldr	r0, [pc, #32]	; (8015790 <USBD_LL_Init+0x94>)
 801576e:	f7f7 fe18 	bl	800d3a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015772:	2240      	movs	r2, #64	; 0x40
 8015774:	2100      	movs	r1, #0
 8015776:	4806      	ldr	r0, [pc, #24]	; (8015790 <USBD_LL_Init+0x94>)
 8015778:	f7f7 fdcc 	bl	800d314 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801577c:	2280      	movs	r2, #128	; 0x80
 801577e:	2101      	movs	r1, #1
 8015780:	4803      	ldr	r0, [pc, #12]	; (8015790 <USBD_LL_Init+0x94>)
 8015782:	f7f7 fdc7 	bl	800d314 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015786:	2300      	movs	r3, #0
}
 8015788:	4618      	mov	r0, r3
 801578a:	3708      	adds	r7, #8
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}
 8015790:	20006764 	.word	0x20006764

08015794 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b084      	sub	sp, #16
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801579c:	2300      	movs	r3, #0
 801579e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157a0:	2300      	movs	r3, #0
 80157a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7f6 fdaf 	bl	800c30e <HAL_PCD_Start>
 80157b0:	4603      	mov	r3, r0
 80157b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157b4:	7bfb      	ldrb	r3, [r7, #15]
 80157b6:	4618      	mov	r0, r3
 80157b8:	f000 f92a 	bl	8015a10 <USBD_Get_USB_Status>
 80157bc:	4603      	mov	r3, r0
 80157be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3710      	adds	r7, #16
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}

080157ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80157ca:	b580      	push	{r7, lr}
 80157cc:	b084      	sub	sp, #16
 80157ce:	af00      	add	r7, sp, #0
 80157d0:	6078      	str	r0, [r7, #4]
 80157d2:	4608      	mov	r0, r1
 80157d4:	4611      	mov	r1, r2
 80157d6:	461a      	mov	r2, r3
 80157d8:	4603      	mov	r3, r0
 80157da:	70fb      	strb	r3, [r7, #3]
 80157dc:	460b      	mov	r3, r1
 80157de:	70bb      	strb	r3, [r7, #2]
 80157e0:	4613      	mov	r3, r2
 80157e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157e4:	2300      	movs	r3, #0
 80157e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157e8:	2300      	movs	r3, #0
 80157ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80157f2:	78bb      	ldrb	r3, [r7, #2]
 80157f4:	883a      	ldrh	r2, [r7, #0]
 80157f6:	78f9      	ldrb	r1, [r7, #3]
 80157f8:	f7f7 f993 	bl	800cb22 <HAL_PCD_EP_Open>
 80157fc:	4603      	mov	r3, r0
 80157fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015800:	7bfb      	ldrb	r3, [r7, #15]
 8015802:	4618      	mov	r0, r3
 8015804:	f000 f904 	bl	8015a10 <USBD_Get_USB_Status>
 8015808:	4603      	mov	r3, r0
 801580a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801580c:	7bbb      	ldrb	r3, [r7, #14]
}
 801580e:	4618      	mov	r0, r3
 8015810:	3710      	adds	r7, #16
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}

08015816 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015816:	b580      	push	{r7, lr}
 8015818:	b084      	sub	sp, #16
 801581a:	af00      	add	r7, sp, #0
 801581c:	6078      	str	r0, [r7, #4]
 801581e:	460b      	mov	r3, r1
 8015820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015822:	2300      	movs	r3, #0
 8015824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015826:	2300      	movs	r3, #0
 8015828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015830:	78fa      	ldrb	r2, [r7, #3]
 8015832:	4611      	mov	r1, r2
 8015834:	4618      	mov	r0, r3
 8015836:	f7f7 f9dc 	bl	800cbf2 <HAL_PCD_EP_Close>
 801583a:	4603      	mov	r3, r0
 801583c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801583e:	7bfb      	ldrb	r3, [r7, #15]
 8015840:	4618      	mov	r0, r3
 8015842:	f000 f8e5 	bl	8015a10 <USBD_Get_USB_Status>
 8015846:	4603      	mov	r3, r0
 8015848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801584a:	7bbb      	ldrb	r3, [r7, #14]
}
 801584c:	4618      	mov	r0, r3
 801584e:	3710      	adds	r7, #16
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}

08015854 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b084      	sub	sp, #16
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	460b      	mov	r3, r1
 801585e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015860:	2300      	movs	r3, #0
 8015862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015864:	2300      	movs	r3, #0
 8015866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801586e:	78fa      	ldrb	r2, [r7, #3]
 8015870:	4611      	mov	r1, r2
 8015872:	4618      	mov	r0, r3
 8015874:	f7f7 fab4 	bl	800cde0 <HAL_PCD_EP_SetStall>
 8015878:	4603      	mov	r3, r0
 801587a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801587c:	7bfb      	ldrb	r3, [r7, #15]
 801587e:	4618      	mov	r0, r3
 8015880:	f000 f8c6 	bl	8015a10 <USBD_Get_USB_Status>
 8015884:	4603      	mov	r3, r0
 8015886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015888:	7bbb      	ldrb	r3, [r7, #14]
}
 801588a:	4618      	mov	r0, r3
 801588c:	3710      	adds	r7, #16
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}

08015892 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015892:	b580      	push	{r7, lr}
 8015894:	b084      	sub	sp, #16
 8015896:	af00      	add	r7, sp, #0
 8015898:	6078      	str	r0, [r7, #4]
 801589a:	460b      	mov	r3, r1
 801589c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801589e:	2300      	movs	r3, #0
 80158a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158a2:	2300      	movs	r3, #0
 80158a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80158ac:	78fa      	ldrb	r2, [r7, #3]
 80158ae:	4611      	mov	r1, r2
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7f7 faf9 	bl	800cea8 <HAL_PCD_EP_ClrStall>
 80158b6:	4603      	mov	r3, r0
 80158b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158ba:	7bfb      	ldrb	r3, [r7, #15]
 80158bc:	4618      	mov	r0, r3
 80158be:	f000 f8a7 	bl	8015a10 <USBD_Get_USB_Status>
 80158c2:	4603      	mov	r3, r0
 80158c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80158c8:	4618      	mov	r0, r3
 80158ca:	3710      	adds	r7, #16
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd80      	pop	{r7, pc}

080158d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158d0:	b480      	push	{r7}
 80158d2:	b085      	sub	sp, #20
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
 80158d8:	460b      	mov	r3, r1
 80158da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80158e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80158e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	da0b      	bge.n	8015904 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80158ec:	78fb      	ldrb	r3, [r7, #3]
 80158ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80158f2:	68f9      	ldr	r1, [r7, #12]
 80158f4:	4613      	mov	r3, r2
 80158f6:	00db      	lsls	r3, r3, #3
 80158f8:	1a9b      	subs	r3, r3, r2
 80158fa:	009b      	lsls	r3, r3, #2
 80158fc:	440b      	add	r3, r1
 80158fe:	333e      	adds	r3, #62	; 0x3e
 8015900:	781b      	ldrb	r3, [r3, #0]
 8015902:	e00b      	b.n	801591c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015904:	78fb      	ldrb	r3, [r7, #3]
 8015906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801590a:	68f9      	ldr	r1, [r7, #12]
 801590c:	4613      	mov	r3, r2
 801590e:	00db      	lsls	r3, r3, #3
 8015910:	1a9b      	subs	r3, r3, r2
 8015912:	009b      	lsls	r3, r3, #2
 8015914:	440b      	add	r3, r1
 8015916:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801591a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801591c:	4618      	mov	r0, r3
 801591e:	3714      	adds	r7, #20
 8015920:	46bd      	mov	sp, r7
 8015922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015926:	4770      	bx	lr

08015928 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b084      	sub	sp, #16
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	460b      	mov	r3, r1
 8015932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015934:	2300      	movs	r3, #0
 8015936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015938:	2300      	movs	r3, #0
 801593a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015942:	78fa      	ldrb	r2, [r7, #3]
 8015944:	4611      	mov	r1, r2
 8015946:	4618      	mov	r0, r3
 8015948:	f7f7 f8c6 	bl	800cad8 <HAL_PCD_SetAddress>
 801594c:	4603      	mov	r3, r0
 801594e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015950:	7bfb      	ldrb	r3, [r7, #15]
 8015952:	4618      	mov	r0, r3
 8015954:	f000 f85c 	bl	8015a10 <USBD_Get_USB_Status>
 8015958:	4603      	mov	r3, r0
 801595a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801595c:	7bbb      	ldrb	r3, [r7, #14]
}
 801595e:	4618      	mov	r0, r3
 8015960:	3710      	adds	r7, #16
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}

08015966 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015966:	b580      	push	{r7, lr}
 8015968:	b086      	sub	sp, #24
 801596a:	af00      	add	r7, sp, #0
 801596c:	60f8      	str	r0, [r7, #12]
 801596e:	607a      	str	r2, [r7, #4]
 8015970:	603b      	str	r3, [r7, #0]
 8015972:	460b      	mov	r3, r1
 8015974:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015976:	2300      	movs	r3, #0
 8015978:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801597a:	2300      	movs	r3, #0
 801597c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015984:	7af9      	ldrb	r1, [r7, #11]
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	687a      	ldr	r2, [r7, #4]
 801598a:	f7f7 f9df 	bl	800cd4c <HAL_PCD_EP_Transmit>
 801598e:	4603      	mov	r3, r0
 8015990:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015992:	7dfb      	ldrb	r3, [r7, #23]
 8015994:	4618      	mov	r0, r3
 8015996:	f000 f83b 	bl	8015a10 <USBD_Get_USB_Status>
 801599a:	4603      	mov	r3, r0
 801599c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801599e:	7dbb      	ldrb	r3, [r7, #22]
}
 80159a0:	4618      	mov	r0, r3
 80159a2:	3718      	adds	r7, #24
 80159a4:	46bd      	mov	sp, r7
 80159a6:	bd80      	pop	{r7, pc}

080159a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b086      	sub	sp, #24
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	60f8      	str	r0, [r7, #12]
 80159b0:	607a      	str	r2, [r7, #4]
 80159b2:	603b      	str	r3, [r7, #0]
 80159b4:	460b      	mov	r3, r1
 80159b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159b8:	2300      	movs	r3, #0
 80159ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159bc:	2300      	movs	r3, #0
 80159be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80159c6:	7af9      	ldrb	r1, [r7, #11]
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	687a      	ldr	r2, [r7, #4]
 80159cc:	f7f7 f95b 	bl	800cc86 <HAL_PCD_EP_Receive>
 80159d0:	4603      	mov	r3, r0
 80159d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159d4:	7dfb      	ldrb	r3, [r7, #23]
 80159d6:	4618      	mov	r0, r3
 80159d8:	f000 f81a 	bl	8015a10 <USBD_Get_USB_Status>
 80159dc:	4603      	mov	r3, r0
 80159de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80159e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	3718      	adds	r7, #24
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}

080159ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159ea:	b580      	push	{r7, lr}
 80159ec:	b082      	sub	sp, #8
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
 80159f2:	460b      	mov	r3, r1
 80159f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159fc:	78fa      	ldrb	r2, [r7, #3]
 80159fe:	4611      	mov	r1, r2
 8015a00:	4618      	mov	r0, r3
 8015a02:	f7f7 f98b 	bl	800cd1c <HAL_PCD_EP_GetRxCount>
 8015a06:	4603      	mov	r3, r0
}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	3708      	adds	r7, #8
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}

08015a10 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015a10:	b480      	push	{r7}
 8015a12:	b085      	sub	sp, #20
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	4603      	mov	r3, r0
 8015a18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015a1e:	79fb      	ldrb	r3, [r7, #7]
 8015a20:	2b03      	cmp	r3, #3
 8015a22:	d817      	bhi.n	8015a54 <USBD_Get_USB_Status+0x44>
 8015a24:	a201      	add	r2, pc, #4	; (adr r2, 8015a2c <USBD_Get_USB_Status+0x1c>)
 8015a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a2a:	bf00      	nop
 8015a2c:	08015a3d 	.word	0x08015a3d
 8015a30:	08015a43 	.word	0x08015a43
 8015a34:	08015a49 	.word	0x08015a49
 8015a38:	08015a4f 	.word	0x08015a4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8015a40:	e00b      	b.n	8015a5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015a42:	2303      	movs	r3, #3
 8015a44:	73fb      	strb	r3, [r7, #15]
    break;
 8015a46:	e008      	b.n	8015a5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015a48:	2301      	movs	r3, #1
 8015a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8015a4c:	e005      	b.n	8015a5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015a4e:	2303      	movs	r3, #3
 8015a50:	73fb      	strb	r3, [r7, #15]
    break;
 8015a52:	e002      	b.n	8015a5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015a54:	2303      	movs	r3, #3
 8015a56:	73fb      	strb	r3, [r7, #15]
    break;
 8015a58:	bf00      	nop
  }
  return usb_status;
 8015a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	3714      	adds	r7, #20
 8015a60:	46bd      	mov	sp, r7
 8015a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a66:	4770      	bx	lr

08015a68 <calloc>:
 8015a68:	4b02      	ldr	r3, [pc, #8]	; (8015a74 <calloc+0xc>)
 8015a6a:	460a      	mov	r2, r1
 8015a6c:	4601      	mov	r1, r0
 8015a6e:	6818      	ldr	r0, [r3, #0]
 8015a70:	f000 b868 	b.w	8015b44 <_calloc_r>
 8015a74:	200009a8 	.word	0x200009a8

08015a78 <__errno>:
 8015a78:	4b01      	ldr	r3, [pc, #4]	; (8015a80 <__errno+0x8>)
 8015a7a:	6818      	ldr	r0, [r3, #0]
 8015a7c:	4770      	bx	lr
 8015a7e:	bf00      	nop
 8015a80:	200009a8 	.word	0x200009a8

08015a84 <__libc_init_array>:
 8015a84:	b570      	push	{r4, r5, r6, lr}
 8015a86:	4e0d      	ldr	r6, [pc, #52]	; (8015abc <__libc_init_array+0x38>)
 8015a88:	4c0d      	ldr	r4, [pc, #52]	; (8015ac0 <__libc_init_array+0x3c>)
 8015a8a:	1ba4      	subs	r4, r4, r6
 8015a8c:	10a4      	asrs	r4, r4, #2
 8015a8e:	2500      	movs	r5, #0
 8015a90:	42a5      	cmp	r5, r4
 8015a92:	d109      	bne.n	8015aa8 <__libc_init_array+0x24>
 8015a94:	4e0b      	ldr	r6, [pc, #44]	; (8015ac4 <__libc_init_array+0x40>)
 8015a96:	4c0c      	ldr	r4, [pc, #48]	; (8015ac8 <__libc_init_array+0x44>)
 8015a98:	f005 fa8c 	bl	801afb4 <_init>
 8015a9c:	1ba4      	subs	r4, r4, r6
 8015a9e:	10a4      	asrs	r4, r4, #2
 8015aa0:	2500      	movs	r5, #0
 8015aa2:	42a5      	cmp	r5, r4
 8015aa4:	d105      	bne.n	8015ab2 <__libc_init_array+0x2e>
 8015aa6:	bd70      	pop	{r4, r5, r6, pc}
 8015aa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015aac:	4798      	blx	r3
 8015aae:	3501      	adds	r5, #1
 8015ab0:	e7ee      	b.n	8015a90 <__libc_init_array+0xc>
 8015ab2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015ab6:	4798      	blx	r3
 8015ab8:	3501      	adds	r5, #1
 8015aba:	e7f2      	b.n	8015aa2 <__libc_init_array+0x1e>
 8015abc:	0801b760 	.word	0x0801b760
 8015ac0:	0801b760 	.word	0x0801b760
 8015ac4:	0801b760 	.word	0x0801b760
 8015ac8:	0801b764 	.word	0x0801b764

08015acc <malloc>:
 8015acc:	4b02      	ldr	r3, [pc, #8]	; (8015ad8 <malloc+0xc>)
 8015ace:	4601      	mov	r1, r0
 8015ad0:	6818      	ldr	r0, [r3, #0]
 8015ad2:	f000 b893 	b.w	8015bfc <_malloc_r>
 8015ad6:	bf00      	nop
 8015ad8:	200009a8 	.word	0x200009a8

08015adc <free>:
 8015adc:	4b02      	ldr	r3, [pc, #8]	; (8015ae8 <free+0xc>)
 8015ade:	4601      	mov	r1, r0
 8015ae0:	6818      	ldr	r0, [r3, #0]
 8015ae2:	f000 b83d 	b.w	8015b60 <_free_r>
 8015ae6:	bf00      	nop
 8015ae8:	200009a8 	.word	0x200009a8

08015aec <memcpy>:
 8015aec:	b510      	push	{r4, lr}
 8015aee:	1e43      	subs	r3, r0, #1
 8015af0:	440a      	add	r2, r1
 8015af2:	4291      	cmp	r1, r2
 8015af4:	d100      	bne.n	8015af8 <memcpy+0xc>
 8015af6:	bd10      	pop	{r4, pc}
 8015af8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015afc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b00:	e7f7      	b.n	8015af2 <memcpy+0x6>

08015b02 <memmove>:
 8015b02:	4288      	cmp	r0, r1
 8015b04:	b510      	push	{r4, lr}
 8015b06:	eb01 0302 	add.w	r3, r1, r2
 8015b0a:	d807      	bhi.n	8015b1c <memmove+0x1a>
 8015b0c:	1e42      	subs	r2, r0, #1
 8015b0e:	4299      	cmp	r1, r3
 8015b10:	d00a      	beq.n	8015b28 <memmove+0x26>
 8015b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015b1a:	e7f8      	b.n	8015b0e <memmove+0xc>
 8015b1c:	4283      	cmp	r3, r0
 8015b1e:	d9f5      	bls.n	8015b0c <memmove+0xa>
 8015b20:	1881      	adds	r1, r0, r2
 8015b22:	1ad2      	subs	r2, r2, r3
 8015b24:	42d3      	cmn	r3, r2
 8015b26:	d100      	bne.n	8015b2a <memmove+0x28>
 8015b28:	bd10      	pop	{r4, pc}
 8015b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015b32:	e7f7      	b.n	8015b24 <memmove+0x22>

08015b34 <memset>:
 8015b34:	4402      	add	r2, r0
 8015b36:	4603      	mov	r3, r0
 8015b38:	4293      	cmp	r3, r2
 8015b3a:	d100      	bne.n	8015b3e <memset+0xa>
 8015b3c:	4770      	bx	lr
 8015b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8015b42:	e7f9      	b.n	8015b38 <memset+0x4>

08015b44 <_calloc_r>:
 8015b44:	b538      	push	{r3, r4, r5, lr}
 8015b46:	fb02 f401 	mul.w	r4, r2, r1
 8015b4a:	4621      	mov	r1, r4
 8015b4c:	f000 f856 	bl	8015bfc <_malloc_r>
 8015b50:	4605      	mov	r5, r0
 8015b52:	b118      	cbz	r0, 8015b5c <_calloc_r+0x18>
 8015b54:	4622      	mov	r2, r4
 8015b56:	2100      	movs	r1, #0
 8015b58:	f7ff ffec 	bl	8015b34 <memset>
 8015b5c:	4628      	mov	r0, r5
 8015b5e:	bd38      	pop	{r3, r4, r5, pc}

08015b60 <_free_r>:
 8015b60:	b538      	push	{r3, r4, r5, lr}
 8015b62:	4605      	mov	r5, r0
 8015b64:	2900      	cmp	r1, #0
 8015b66:	d045      	beq.n	8015bf4 <_free_r+0x94>
 8015b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b6c:	1f0c      	subs	r4, r1, #4
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	bfb8      	it	lt
 8015b72:	18e4      	addlt	r4, r4, r3
 8015b74:	f002 ff84 	bl	8018a80 <__malloc_lock>
 8015b78:	4a1f      	ldr	r2, [pc, #124]	; (8015bf8 <_free_r+0x98>)
 8015b7a:	6813      	ldr	r3, [r2, #0]
 8015b7c:	4610      	mov	r0, r2
 8015b7e:	b933      	cbnz	r3, 8015b8e <_free_r+0x2e>
 8015b80:	6063      	str	r3, [r4, #4]
 8015b82:	6014      	str	r4, [r2, #0]
 8015b84:	4628      	mov	r0, r5
 8015b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b8a:	f002 bf7a 	b.w	8018a82 <__malloc_unlock>
 8015b8e:	42a3      	cmp	r3, r4
 8015b90:	d90c      	bls.n	8015bac <_free_r+0x4c>
 8015b92:	6821      	ldr	r1, [r4, #0]
 8015b94:	1862      	adds	r2, r4, r1
 8015b96:	4293      	cmp	r3, r2
 8015b98:	bf04      	itt	eq
 8015b9a:	681a      	ldreq	r2, [r3, #0]
 8015b9c:	685b      	ldreq	r3, [r3, #4]
 8015b9e:	6063      	str	r3, [r4, #4]
 8015ba0:	bf04      	itt	eq
 8015ba2:	1852      	addeq	r2, r2, r1
 8015ba4:	6022      	streq	r2, [r4, #0]
 8015ba6:	6004      	str	r4, [r0, #0]
 8015ba8:	e7ec      	b.n	8015b84 <_free_r+0x24>
 8015baa:	4613      	mov	r3, r2
 8015bac:	685a      	ldr	r2, [r3, #4]
 8015bae:	b10a      	cbz	r2, 8015bb4 <_free_r+0x54>
 8015bb0:	42a2      	cmp	r2, r4
 8015bb2:	d9fa      	bls.n	8015baa <_free_r+0x4a>
 8015bb4:	6819      	ldr	r1, [r3, #0]
 8015bb6:	1858      	adds	r0, r3, r1
 8015bb8:	42a0      	cmp	r0, r4
 8015bba:	d10b      	bne.n	8015bd4 <_free_r+0x74>
 8015bbc:	6820      	ldr	r0, [r4, #0]
 8015bbe:	4401      	add	r1, r0
 8015bc0:	1858      	adds	r0, r3, r1
 8015bc2:	4282      	cmp	r2, r0
 8015bc4:	6019      	str	r1, [r3, #0]
 8015bc6:	d1dd      	bne.n	8015b84 <_free_r+0x24>
 8015bc8:	6810      	ldr	r0, [r2, #0]
 8015bca:	6852      	ldr	r2, [r2, #4]
 8015bcc:	605a      	str	r2, [r3, #4]
 8015bce:	4401      	add	r1, r0
 8015bd0:	6019      	str	r1, [r3, #0]
 8015bd2:	e7d7      	b.n	8015b84 <_free_r+0x24>
 8015bd4:	d902      	bls.n	8015bdc <_free_r+0x7c>
 8015bd6:	230c      	movs	r3, #12
 8015bd8:	602b      	str	r3, [r5, #0]
 8015bda:	e7d3      	b.n	8015b84 <_free_r+0x24>
 8015bdc:	6820      	ldr	r0, [r4, #0]
 8015bde:	1821      	adds	r1, r4, r0
 8015be0:	428a      	cmp	r2, r1
 8015be2:	bf04      	itt	eq
 8015be4:	6811      	ldreq	r1, [r2, #0]
 8015be6:	6852      	ldreq	r2, [r2, #4]
 8015be8:	6062      	str	r2, [r4, #4]
 8015bea:	bf04      	itt	eq
 8015bec:	1809      	addeq	r1, r1, r0
 8015bee:	6021      	streq	r1, [r4, #0]
 8015bf0:	605c      	str	r4, [r3, #4]
 8015bf2:	e7c7      	b.n	8015b84 <_free_r+0x24>
 8015bf4:	bd38      	pop	{r3, r4, r5, pc}
 8015bf6:	bf00      	nop
 8015bf8:	20004d58 	.word	0x20004d58

08015bfc <_malloc_r>:
 8015bfc:	b570      	push	{r4, r5, r6, lr}
 8015bfe:	1ccd      	adds	r5, r1, #3
 8015c00:	f025 0503 	bic.w	r5, r5, #3
 8015c04:	3508      	adds	r5, #8
 8015c06:	2d0c      	cmp	r5, #12
 8015c08:	bf38      	it	cc
 8015c0a:	250c      	movcc	r5, #12
 8015c0c:	2d00      	cmp	r5, #0
 8015c0e:	4606      	mov	r6, r0
 8015c10:	db01      	blt.n	8015c16 <_malloc_r+0x1a>
 8015c12:	42a9      	cmp	r1, r5
 8015c14:	d903      	bls.n	8015c1e <_malloc_r+0x22>
 8015c16:	230c      	movs	r3, #12
 8015c18:	6033      	str	r3, [r6, #0]
 8015c1a:	2000      	movs	r0, #0
 8015c1c:	bd70      	pop	{r4, r5, r6, pc}
 8015c1e:	f002 ff2f 	bl	8018a80 <__malloc_lock>
 8015c22:	4a21      	ldr	r2, [pc, #132]	; (8015ca8 <_malloc_r+0xac>)
 8015c24:	6814      	ldr	r4, [r2, #0]
 8015c26:	4621      	mov	r1, r4
 8015c28:	b991      	cbnz	r1, 8015c50 <_malloc_r+0x54>
 8015c2a:	4c20      	ldr	r4, [pc, #128]	; (8015cac <_malloc_r+0xb0>)
 8015c2c:	6823      	ldr	r3, [r4, #0]
 8015c2e:	b91b      	cbnz	r3, 8015c38 <_malloc_r+0x3c>
 8015c30:	4630      	mov	r0, r6
 8015c32:	f000 fe7b 	bl	801692c <_sbrk_r>
 8015c36:	6020      	str	r0, [r4, #0]
 8015c38:	4629      	mov	r1, r5
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	f000 fe76 	bl	801692c <_sbrk_r>
 8015c40:	1c43      	adds	r3, r0, #1
 8015c42:	d124      	bne.n	8015c8e <_malloc_r+0x92>
 8015c44:	230c      	movs	r3, #12
 8015c46:	6033      	str	r3, [r6, #0]
 8015c48:	4630      	mov	r0, r6
 8015c4a:	f002 ff1a 	bl	8018a82 <__malloc_unlock>
 8015c4e:	e7e4      	b.n	8015c1a <_malloc_r+0x1e>
 8015c50:	680b      	ldr	r3, [r1, #0]
 8015c52:	1b5b      	subs	r3, r3, r5
 8015c54:	d418      	bmi.n	8015c88 <_malloc_r+0x8c>
 8015c56:	2b0b      	cmp	r3, #11
 8015c58:	d90f      	bls.n	8015c7a <_malloc_r+0x7e>
 8015c5a:	600b      	str	r3, [r1, #0]
 8015c5c:	50cd      	str	r5, [r1, r3]
 8015c5e:	18cc      	adds	r4, r1, r3
 8015c60:	4630      	mov	r0, r6
 8015c62:	f002 ff0e 	bl	8018a82 <__malloc_unlock>
 8015c66:	f104 000b 	add.w	r0, r4, #11
 8015c6a:	1d23      	adds	r3, r4, #4
 8015c6c:	f020 0007 	bic.w	r0, r0, #7
 8015c70:	1ac3      	subs	r3, r0, r3
 8015c72:	d0d3      	beq.n	8015c1c <_malloc_r+0x20>
 8015c74:	425a      	negs	r2, r3
 8015c76:	50e2      	str	r2, [r4, r3]
 8015c78:	e7d0      	b.n	8015c1c <_malloc_r+0x20>
 8015c7a:	428c      	cmp	r4, r1
 8015c7c:	684b      	ldr	r3, [r1, #4]
 8015c7e:	bf16      	itet	ne
 8015c80:	6063      	strne	r3, [r4, #4]
 8015c82:	6013      	streq	r3, [r2, #0]
 8015c84:	460c      	movne	r4, r1
 8015c86:	e7eb      	b.n	8015c60 <_malloc_r+0x64>
 8015c88:	460c      	mov	r4, r1
 8015c8a:	6849      	ldr	r1, [r1, #4]
 8015c8c:	e7cc      	b.n	8015c28 <_malloc_r+0x2c>
 8015c8e:	1cc4      	adds	r4, r0, #3
 8015c90:	f024 0403 	bic.w	r4, r4, #3
 8015c94:	42a0      	cmp	r0, r4
 8015c96:	d005      	beq.n	8015ca4 <_malloc_r+0xa8>
 8015c98:	1a21      	subs	r1, r4, r0
 8015c9a:	4630      	mov	r0, r6
 8015c9c:	f000 fe46 	bl	801692c <_sbrk_r>
 8015ca0:	3001      	adds	r0, #1
 8015ca2:	d0cf      	beq.n	8015c44 <_malloc_r+0x48>
 8015ca4:	6025      	str	r5, [r4, #0]
 8015ca6:	e7db      	b.n	8015c60 <_malloc_r+0x64>
 8015ca8:	20004d58 	.word	0x20004d58
 8015cac:	20004d5c 	.word	0x20004d5c

08015cb0 <__cvt>:
 8015cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015cb4:	ec55 4b10 	vmov	r4, r5, d0
 8015cb8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015cba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015cbe:	2d00      	cmp	r5, #0
 8015cc0:	460e      	mov	r6, r1
 8015cc2:	4691      	mov	r9, r2
 8015cc4:	4619      	mov	r1, r3
 8015cc6:	bfb8      	it	lt
 8015cc8:	4622      	movlt	r2, r4
 8015cca:	462b      	mov	r3, r5
 8015ccc:	f027 0720 	bic.w	r7, r7, #32
 8015cd0:	bfbb      	ittet	lt
 8015cd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015cd6:	461d      	movlt	r5, r3
 8015cd8:	2300      	movge	r3, #0
 8015cda:	232d      	movlt	r3, #45	; 0x2d
 8015cdc:	bfb8      	it	lt
 8015cde:	4614      	movlt	r4, r2
 8015ce0:	2f46      	cmp	r7, #70	; 0x46
 8015ce2:	700b      	strb	r3, [r1, #0]
 8015ce4:	d004      	beq.n	8015cf0 <__cvt+0x40>
 8015ce6:	2f45      	cmp	r7, #69	; 0x45
 8015ce8:	d100      	bne.n	8015cec <__cvt+0x3c>
 8015cea:	3601      	adds	r6, #1
 8015cec:	2102      	movs	r1, #2
 8015cee:	e000      	b.n	8015cf2 <__cvt+0x42>
 8015cf0:	2103      	movs	r1, #3
 8015cf2:	ab03      	add	r3, sp, #12
 8015cf4:	9301      	str	r3, [sp, #4]
 8015cf6:	ab02      	add	r3, sp, #8
 8015cf8:	9300      	str	r3, [sp, #0]
 8015cfa:	4632      	mov	r2, r6
 8015cfc:	4653      	mov	r3, sl
 8015cfe:	ec45 4b10 	vmov	d0, r4, r5
 8015d02:	f001 fdb9 	bl	8017878 <_dtoa_r>
 8015d06:	2f47      	cmp	r7, #71	; 0x47
 8015d08:	4680      	mov	r8, r0
 8015d0a:	d102      	bne.n	8015d12 <__cvt+0x62>
 8015d0c:	f019 0f01 	tst.w	r9, #1
 8015d10:	d026      	beq.n	8015d60 <__cvt+0xb0>
 8015d12:	2f46      	cmp	r7, #70	; 0x46
 8015d14:	eb08 0906 	add.w	r9, r8, r6
 8015d18:	d111      	bne.n	8015d3e <__cvt+0x8e>
 8015d1a:	f898 3000 	ldrb.w	r3, [r8]
 8015d1e:	2b30      	cmp	r3, #48	; 0x30
 8015d20:	d10a      	bne.n	8015d38 <__cvt+0x88>
 8015d22:	2200      	movs	r2, #0
 8015d24:	2300      	movs	r3, #0
 8015d26:	4620      	mov	r0, r4
 8015d28:	4629      	mov	r1, r5
 8015d2a:	f7ea fecd 	bl	8000ac8 <__aeabi_dcmpeq>
 8015d2e:	b918      	cbnz	r0, 8015d38 <__cvt+0x88>
 8015d30:	f1c6 0601 	rsb	r6, r6, #1
 8015d34:	f8ca 6000 	str.w	r6, [sl]
 8015d38:	f8da 3000 	ldr.w	r3, [sl]
 8015d3c:	4499      	add	r9, r3
 8015d3e:	2200      	movs	r2, #0
 8015d40:	2300      	movs	r3, #0
 8015d42:	4620      	mov	r0, r4
 8015d44:	4629      	mov	r1, r5
 8015d46:	f7ea febf 	bl	8000ac8 <__aeabi_dcmpeq>
 8015d4a:	b938      	cbnz	r0, 8015d5c <__cvt+0xac>
 8015d4c:	2230      	movs	r2, #48	; 0x30
 8015d4e:	9b03      	ldr	r3, [sp, #12]
 8015d50:	454b      	cmp	r3, r9
 8015d52:	d205      	bcs.n	8015d60 <__cvt+0xb0>
 8015d54:	1c59      	adds	r1, r3, #1
 8015d56:	9103      	str	r1, [sp, #12]
 8015d58:	701a      	strb	r2, [r3, #0]
 8015d5a:	e7f8      	b.n	8015d4e <__cvt+0x9e>
 8015d5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8015d60:	9b03      	ldr	r3, [sp, #12]
 8015d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015d64:	eba3 0308 	sub.w	r3, r3, r8
 8015d68:	4640      	mov	r0, r8
 8015d6a:	6013      	str	r3, [r2, #0]
 8015d6c:	b004      	add	sp, #16
 8015d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015d72 <__exponent>:
 8015d72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d74:	2900      	cmp	r1, #0
 8015d76:	4604      	mov	r4, r0
 8015d78:	bfba      	itte	lt
 8015d7a:	4249      	neglt	r1, r1
 8015d7c:	232d      	movlt	r3, #45	; 0x2d
 8015d7e:	232b      	movge	r3, #43	; 0x2b
 8015d80:	2909      	cmp	r1, #9
 8015d82:	f804 2b02 	strb.w	r2, [r4], #2
 8015d86:	7043      	strb	r3, [r0, #1]
 8015d88:	dd20      	ble.n	8015dcc <__exponent+0x5a>
 8015d8a:	f10d 0307 	add.w	r3, sp, #7
 8015d8e:	461f      	mov	r7, r3
 8015d90:	260a      	movs	r6, #10
 8015d92:	fb91 f5f6 	sdiv	r5, r1, r6
 8015d96:	fb06 1115 	mls	r1, r6, r5, r1
 8015d9a:	3130      	adds	r1, #48	; 0x30
 8015d9c:	2d09      	cmp	r5, #9
 8015d9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015da2:	f103 32ff 	add.w	r2, r3, #4294967295
 8015da6:	4629      	mov	r1, r5
 8015da8:	dc09      	bgt.n	8015dbe <__exponent+0x4c>
 8015daa:	3130      	adds	r1, #48	; 0x30
 8015dac:	3b02      	subs	r3, #2
 8015dae:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015db2:	42bb      	cmp	r3, r7
 8015db4:	4622      	mov	r2, r4
 8015db6:	d304      	bcc.n	8015dc2 <__exponent+0x50>
 8015db8:	1a10      	subs	r0, r2, r0
 8015dba:	b003      	add	sp, #12
 8015dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dbe:	4613      	mov	r3, r2
 8015dc0:	e7e7      	b.n	8015d92 <__exponent+0x20>
 8015dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015dc6:	f804 2b01 	strb.w	r2, [r4], #1
 8015dca:	e7f2      	b.n	8015db2 <__exponent+0x40>
 8015dcc:	2330      	movs	r3, #48	; 0x30
 8015dce:	4419      	add	r1, r3
 8015dd0:	7083      	strb	r3, [r0, #2]
 8015dd2:	1d02      	adds	r2, r0, #4
 8015dd4:	70c1      	strb	r1, [r0, #3]
 8015dd6:	e7ef      	b.n	8015db8 <__exponent+0x46>

08015dd8 <_printf_float>:
 8015dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ddc:	b08d      	sub	sp, #52	; 0x34
 8015dde:	460c      	mov	r4, r1
 8015de0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015de4:	4616      	mov	r6, r2
 8015de6:	461f      	mov	r7, r3
 8015de8:	4605      	mov	r5, r0
 8015dea:	f002 fe29 	bl	8018a40 <_localeconv_r>
 8015dee:	6803      	ldr	r3, [r0, #0]
 8015df0:	9304      	str	r3, [sp, #16]
 8015df2:	4618      	mov	r0, r3
 8015df4:	f7ea f9ec 	bl	80001d0 <strlen>
 8015df8:	2300      	movs	r3, #0
 8015dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8015dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8015e00:	9005      	str	r0, [sp, #20]
 8015e02:	3307      	adds	r3, #7
 8015e04:	f023 0307 	bic.w	r3, r3, #7
 8015e08:	f103 0208 	add.w	r2, r3, #8
 8015e0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015e10:	f8d4 b000 	ldr.w	fp, [r4]
 8015e14:	f8c8 2000 	str.w	r2, [r8]
 8015e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015e20:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015e24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015e28:	9307      	str	r3, [sp, #28]
 8015e2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8015e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8015e32:	4ba7      	ldr	r3, [pc, #668]	; (80160d0 <_printf_float+0x2f8>)
 8015e34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e38:	f7ea fe78 	bl	8000b2c <__aeabi_dcmpun>
 8015e3c:	bb70      	cbnz	r0, 8015e9c <_printf_float+0xc4>
 8015e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8015e42:	4ba3      	ldr	r3, [pc, #652]	; (80160d0 <_printf_float+0x2f8>)
 8015e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e48:	f7ea fe52 	bl	8000af0 <__aeabi_dcmple>
 8015e4c:	bb30      	cbnz	r0, 8015e9c <_printf_float+0xc4>
 8015e4e:	2200      	movs	r2, #0
 8015e50:	2300      	movs	r3, #0
 8015e52:	4640      	mov	r0, r8
 8015e54:	4649      	mov	r1, r9
 8015e56:	f7ea fe41 	bl	8000adc <__aeabi_dcmplt>
 8015e5a:	b110      	cbz	r0, 8015e62 <_printf_float+0x8a>
 8015e5c:	232d      	movs	r3, #45	; 0x2d
 8015e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e62:	4a9c      	ldr	r2, [pc, #624]	; (80160d4 <_printf_float+0x2fc>)
 8015e64:	4b9c      	ldr	r3, [pc, #624]	; (80160d8 <_printf_float+0x300>)
 8015e66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015e6a:	bf8c      	ite	hi
 8015e6c:	4690      	movhi	r8, r2
 8015e6e:	4698      	movls	r8, r3
 8015e70:	2303      	movs	r3, #3
 8015e72:	f02b 0204 	bic.w	r2, fp, #4
 8015e76:	6123      	str	r3, [r4, #16]
 8015e78:	6022      	str	r2, [r4, #0]
 8015e7a:	f04f 0900 	mov.w	r9, #0
 8015e7e:	9700      	str	r7, [sp, #0]
 8015e80:	4633      	mov	r3, r6
 8015e82:	aa0b      	add	r2, sp, #44	; 0x2c
 8015e84:	4621      	mov	r1, r4
 8015e86:	4628      	mov	r0, r5
 8015e88:	f000 f9e6 	bl	8016258 <_printf_common>
 8015e8c:	3001      	adds	r0, #1
 8015e8e:	f040 808d 	bne.w	8015fac <_printf_float+0x1d4>
 8015e92:	f04f 30ff 	mov.w	r0, #4294967295
 8015e96:	b00d      	add	sp, #52	; 0x34
 8015e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e9c:	4642      	mov	r2, r8
 8015e9e:	464b      	mov	r3, r9
 8015ea0:	4640      	mov	r0, r8
 8015ea2:	4649      	mov	r1, r9
 8015ea4:	f7ea fe42 	bl	8000b2c <__aeabi_dcmpun>
 8015ea8:	b110      	cbz	r0, 8015eb0 <_printf_float+0xd8>
 8015eaa:	4a8c      	ldr	r2, [pc, #560]	; (80160dc <_printf_float+0x304>)
 8015eac:	4b8c      	ldr	r3, [pc, #560]	; (80160e0 <_printf_float+0x308>)
 8015eae:	e7da      	b.n	8015e66 <_printf_float+0x8e>
 8015eb0:	6861      	ldr	r1, [r4, #4]
 8015eb2:	1c4b      	adds	r3, r1, #1
 8015eb4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015eb8:	a80a      	add	r0, sp, #40	; 0x28
 8015eba:	d13e      	bne.n	8015f3a <_printf_float+0x162>
 8015ebc:	2306      	movs	r3, #6
 8015ebe:	6063      	str	r3, [r4, #4]
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015ec6:	ab09      	add	r3, sp, #36	; 0x24
 8015ec8:	9300      	str	r3, [sp, #0]
 8015eca:	ec49 8b10 	vmov	d0, r8, r9
 8015ece:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015ed2:	6022      	str	r2, [r4, #0]
 8015ed4:	f8cd a004 	str.w	sl, [sp, #4]
 8015ed8:	6861      	ldr	r1, [r4, #4]
 8015eda:	4628      	mov	r0, r5
 8015edc:	f7ff fee8 	bl	8015cb0 <__cvt>
 8015ee0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015ee4:	2b47      	cmp	r3, #71	; 0x47
 8015ee6:	4680      	mov	r8, r0
 8015ee8:	d109      	bne.n	8015efe <_printf_float+0x126>
 8015eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eec:	1cd8      	adds	r0, r3, #3
 8015eee:	db02      	blt.n	8015ef6 <_printf_float+0x11e>
 8015ef0:	6862      	ldr	r2, [r4, #4]
 8015ef2:	4293      	cmp	r3, r2
 8015ef4:	dd47      	ble.n	8015f86 <_printf_float+0x1ae>
 8015ef6:	f1aa 0a02 	sub.w	sl, sl, #2
 8015efa:	fa5f fa8a 	uxtb.w	sl, sl
 8015efe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f04:	d824      	bhi.n	8015f50 <_printf_float+0x178>
 8015f06:	3901      	subs	r1, #1
 8015f08:	4652      	mov	r2, sl
 8015f0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015f0e:	9109      	str	r1, [sp, #36]	; 0x24
 8015f10:	f7ff ff2f 	bl	8015d72 <__exponent>
 8015f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f16:	1813      	adds	r3, r2, r0
 8015f18:	2a01      	cmp	r2, #1
 8015f1a:	4681      	mov	r9, r0
 8015f1c:	6123      	str	r3, [r4, #16]
 8015f1e:	dc02      	bgt.n	8015f26 <_printf_float+0x14e>
 8015f20:	6822      	ldr	r2, [r4, #0]
 8015f22:	07d1      	lsls	r1, r2, #31
 8015f24:	d501      	bpl.n	8015f2a <_printf_float+0x152>
 8015f26:	3301      	adds	r3, #1
 8015f28:	6123      	str	r3, [r4, #16]
 8015f2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d0a5      	beq.n	8015e7e <_printf_float+0xa6>
 8015f32:	232d      	movs	r3, #45	; 0x2d
 8015f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f38:	e7a1      	b.n	8015e7e <_printf_float+0xa6>
 8015f3a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015f3e:	f000 8177 	beq.w	8016230 <_printf_float+0x458>
 8015f42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015f46:	d1bb      	bne.n	8015ec0 <_printf_float+0xe8>
 8015f48:	2900      	cmp	r1, #0
 8015f4a:	d1b9      	bne.n	8015ec0 <_printf_float+0xe8>
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	e7b6      	b.n	8015ebe <_printf_float+0xe6>
 8015f50:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015f54:	d119      	bne.n	8015f8a <_printf_float+0x1b2>
 8015f56:	2900      	cmp	r1, #0
 8015f58:	6863      	ldr	r3, [r4, #4]
 8015f5a:	dd0c      	ble.n	8015f76 <_printf_float+0x19e>
 8015f5c:	6121      	str	r1, [r4, #16]
 8015f5e:	b913      	cbnz	r3, 8015f66 <_printf_float+0x18e>
 8015f60:	6822      	ldr	r2, [r4, #0]
 8015f62:	07d2      	lsls	r2, r2, #31
 8015f64:	d502      	bpl.n	8015f6c <_printf_float+0x194>
 8015f66:	3301      	adds	r3, #1
 8015f68:	440b      	add	r3, r1
 8015f6a:	6123      	str	r3, [r4, #16]
 8015f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015f70:	f04f 0900 	mov.w	r9, #0
 8015f74:	e7d9      	b.n	8015f2a <_printf_float+0x152>
 8015f76:	b913      	cbnz	r3, 8015f7e <_printf_float+0x1a6>
 8015f78:	6822      	ldr	r2, [r4, #0]
 8015f7a:	07d0      	lsls	r0, r2, #31
 8015f7c:	d501      	bpl.n	8015f82 <_printf_float+0x1aa>
 8015f7e:	3302      	adds	r3, #2
 8015f80:	e7f3      	b.n	8015f6a <_printf_float+0x192>
 8015f82:	2301      	movs	r3, #1
 8015f84:	e7f1      	b.n	8015f6a <_printf_float+0x192>
 8015f86:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015f8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015f8e:	4293      	cmp	r3, r2
 8015f90:	db05      	blt.n	8015f9e <_printf_float+0x1c6>
 8015f92:	6822      	ldr	r2, [r4, #0]
 8015f94:	6123      	str	r3, [r4, #16]
 8015f96:	07d1      	lsls	r1, r2, #31
 8015f98:	d5e8      	bpl.n	8015f6c <_printf_float+0x194>
 8015f9a:	3301      	adds	r3, #1
 8015f9c:	e7e5      	b.n	8015f6a <_printf_float+0x192>
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	bfd4      	ite	le
 8015fa2:	f1c3 0302 	rsble	r3, r3, #2
 8015fa6:	2301      	movgt	r3, #1
 8015fa8:	4413      	add	r3, r2
 8015faa:	e7de      	b.n	8015f6a <_printf_float+0x192>
 8015fac:	6823      	ldr	r3, [r4, #0]
 8015fae:	055a      	lsls	r2, r3, #21
 8015fb0:	d407      	bmi.n	8015fc2 <_printf_float+0x1ea>
 8015fb2:	6923      	ldr	r3, [r4, #16]
 8015fb4:	4642      	mov	r2, r8
 8015fb6:	4631      	mov	r1, r6
 8015fb8:	4628      	mov	r0, r5
 8015fba:	47b8      	blx	r7
 8015fbc:	3001      	adds	r0, #1
 8015fbe:	d12b      	bne.n	8016018 <_printf_float+0x240>
 8015fc0:	e767      	b.n	8015e92 <_printf_float+0xba>
 8015fc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015fc6:	f240 80dc 	bls.w	8016182 <_printf_float+0x3aa>
 8015fca:	2200      	movs	r2, #0
 8015fcc:	2300      	movs	r3, #0
 8015fce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015fd2:	f7ea fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 8015fd6:	2800      	cmp	r0, #0
 8015fd8:	d033      	beq.n	8016042 <_printf_float+0x26a>
 8015fda:	2301      	movs	r3, #1
 8015fdc:	4a41      	ldr	r2, [pc, #260]	; (80160e4 <_printf_float+0x30c>)
 8015fde:	4631      	mov	r1, r6
 8015fe0:	4628      	mov	r0, r5
 8015fe2:	47b8      	blx	r7
 8015fe4:	3001      	adds	r0, #1
 8015fe6:	f43f af54 	beq.w	8015e92 <_printf_float+0xba>
 8015fea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	db02      	blt.n	8015ff8 <_printf_float+0x220>
 8015ff2:	6823      	ldr	r3, [r4, #0]
 8015ff4:	07d8      	lsls	r0, r3, #31
 8015ff6:	d50f      	bpl.n	8016018 <_printf_float+0x240>
 8015ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ffc:	4631      	mov	r1, r6
 8015ffe:	4628      	mov	r0, r5
 8016000:	47b8      	blx	r7
 8016002:	3001      	adds	r0, #1
 8016004:	f43f af45 	beq.w	8015e92 <_printf_float+0xba>
 8016008:	f04f 0800 	mov.w	r8, #0
 801600c:	f104 091a 	add.w	r9, r4, #26
 8016010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016012:	3b01      	subs	r3, #1
 8016014:	4543      	cmp	r3, r8
 8016016:	dc09      	bgt.n	801602c <_printf_float+0x254>
 8016018:	6823      	ldr	r3, [r4, #0]
 801601a:	079b      	lsls	r3, r3, #30
 801601c:	f100 8103 	bmi.w	8016226 <_printf_float+0x44e>
 8016020:	68e0      	ldr	r0, [r4, #12]
 8016022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016024:	4298      	cmp	r0, r3
 8016026:	bfb8      	it	lt
 8016028:	4618      	movlt	r0, r3
 801602a:	e734      	b.n	8015e96 <_printf_float+0xbe>
 801602c:	2301      	movs	r3, #1
 801602e:	464a      	mov	r2, r9
 8016030:	4631      	mov	r1, r6
 8016032:	4628      	mov	r0, r5
 8016034:	47b8      	blx	r7
 8016036:	3001      	adds	r0, #1
 8016038:	f43f af2b 	beq.w	8015e92 <_printf_float+0xba>
 801603c:	f108 0801 	add.w	r8, r8, #1
 8016040:	e7e6      	b.n	8016010 <_printf_float+0x238>
 8016042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016044:	2b00      	cmp	r3, #0
 8016046:	dc2b      	bgt.n	80160a0 <_printf_float+0x2c8>
 8016048:	2301      	movs	r3, #1
 801604a:	4a26      	ldr	r2, [pc, #152]	; (80160e4 <_printf_float+0x30c>)
 801604c:	4631      	mov	r1, r6
 801604e:	4628      	mov	r0, r5
 8016050:	47b8      	blx	r7
 8016052:	3001      	adds	r0, #1
 8016054:	f43f af1d 	beq.w	8015e92 <_printf_float+0xba>
 8016058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801605a:	b923      	cbnz	r3, 8016066 <_printf_float+0x28e>
 801605c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801605e:	b913      	cbnz	r3, 8016066 <_printf_float+0x28e>
 8016060:	6823      	ldr	r3, [r4, #0]
 8016062:	07d9      	lsls	r1, r3, #31
 8016064:	d5d8      	bpl.n	8016018 <_printf_float+0x240>
 8016066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801606a:	4631      	mov	r1, r6
 801606c:	4628      	mov	r0, r5
 801606e:	47b8      	blx	r7
 8016070:	3001      	adds	r0, #1
 8016072:	f43f af0e 	beq.w	8015e92 <_printf_float+0xba>
 8016076:	f04f 0900 	mov.w	r9, #0
 801607a:	f104 0a1a 	add.w	sl, r4, #26
 801607e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016080:	425b      	negs	r3, r3
 8016082:	454b      	cmp	r3, r9
 8016084:	dc01      	bgt.n	801608a <_printf_float+0x2b2>
 8016086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016088:	e794      	b.n	8015fb4 <_printf_float+0x1dc>
 801608a:	2301      	movs	r3, #1
 801608c:	4652      	mov	r2, sl
 801608e:	4631      	mov	r1, r6
 8016090:	4628      	mov	r0, r5
 8016092:	47b8      	blx	r7
 8016094:	3001      	adds	r0, #1
 8016096:	f43f aefc 	beq.w	8015e92 <_printf_float+0xba>
 801609a:	f109 0901 	add.w	r9, r9, #1
 801609e:	e7ee      	b.n	801607e <_printf_float+0x2a6>
 80160a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80160a4:	429a      	cmp	r2, r3
 80160a6:	bfa8      	it	ge
 80160a8:	461a      	movge	r2, r3
 80160aa:	2a00      	cmp	r2, #0
 80160ac:	4691      	mov	r9, r2
 80160ae:	dd07      	ble.n	80160c0 <_printf_float+0x2e8>
 80160b0:	4613      	mov	r3, r2
 80160b2:	4631      	mov	r1, r6
 80160b4:	4642      	mov	r2, r8
 80160b6:	4628      	mov	r0, r5
 80160b8:	47b8      	blx	r7
 80160ba:	3001      	adds	r0, #1
 80160bc:	f43f aee9 	beq.w	8015e92 <_printf_float+0xba>
 80160c0:	f104 031a 	add.w	r3, r4, #26
 80160c4:	f04f 0b00 	mov.w	fp, #0
 80160c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80160cc:	9306      	str	r3, [sp, #24]
 80160ce:	e015      	b.n	80160fc <_printf_float+0x324>
 80160d0:	7fefffff 	.word	0x7fefffff
 80160d4:	0801b284 	.word	0x0801b284
 80160d8:	0801b280 	.word	0x0801b280
 80160dc:	0801b28c 	.word	0x0801b28c
 80160e0:	0801b288 	.word	0x0801b288
 80160e4:	0801b290 	.word	0x0801b290
 80160e8:	2301      	movs	r3, #1
 80160ea:	9a06      	ldr	r2, [sp, #24]
 80160ec:	4631      	mov	r1, r6
 80160ee:	4628      	mov	r0, r5
 80160f0:	47b8      	blx	r7
 80160f2:	3001      	adds	r0, #1
 80160f4:	f43f aecd 	beq.w	8015e92 <_printf_float+0xba>
 80160f8:	f10b 0b01 	add.w	fp, fp, #1
 80160fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016100:	ebaa 0309 	sub.w	r3, sl, r9
 8016104:	455b      	cmp	r3, fp
 8016106:	dcef      	bgt.n	80160e8 <_printf_float+0x310>
 8016108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801610c:	429a      	cmp	r2, r3
 801610e:	44d0      	add	r8, sl
 8016110:	db15      	blt.n	801613e <_printf_float+0x366>
 8016112:	6823      	ldr	r3, [r4, #0]
 8016114:	07da      	lsls	r2, r3, #31
 8016116:	d412      	bmi.n	801613e <_printf_float+0x366>
 8016118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801611a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801611c:	eba3 020a 	sub.w	r2, r3, sl
 8016120:	eba3 0a01 	sub.w	sl, r3, r1
 8016124:	4592      	cmp	sl, r2
 8016126:	bfa8      	it	ge
 8016128:	4692      	movge	sl, r2
 801612a:	f1ba 0f00 	cmp.w	sl, #0
 801612e:	dc0e      	bgt.n	801614e <_printf_float+0x376>
 8016130:	f04f 0800 	mov.w	r8, #0
 8016134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016138:	f104 091a 	add.w	r9, r4, #26
 801613c:	e019      	b.n	8016172 <_printf_float+0x39a>
 801613e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016142:	4631      	mov	r1, r6
 8016144:	4628      	mov	r0, r5
 8016146:	47b8      	blx	r7
 8016148:	3001      	adds	r0, #1
 801614a:	d1e5      	bne.n	8016118 <_printf_float+0x340>
 801614c:	e6a1      	b.n	8015e92 <_printf_float+0xba>
 801614e:	4653      	mov	r3, sl
 8016150:	4642      	mov	r2, r8
 8016152:	4631      	mov	r1, r6
 8016154:	4628      	mov	r0, r5
 8016156:	47b8      	blx	r7
 8016158:	3001      	adds	r0, #1
 801615a:	d1e9      	bne.n	8016130 <_printf_float+0x358>
 801615c:	e699      	b.n	8015e92 <_printf_float+0xba>
 801615e:	2301      	movs	r3, #1
 8016160:	464a      	mov	r2, r9
 8016162:	4631      	mov	r1, r6
 8016164:	4628      	mov	r0, r5
 8016166:	47b8      	blx	r7
 8016168:	3001      	adds	r0, #1
 801616a:	f43f ae92 	beq.w	8015e92 <_printf_float+0xba>
 801616e:	f108 0801 	add.w	r8, r8, #1
 8016172:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016176:	1a9b      	subs	r3, r3, r2
 8016178:	eba3 030a 	sub.w	r3, r3, sl
 801617c:	4543      	cmp	r3, r8
 801617e:	dcee      	bgt.n	801615e <_printf_float+0x386>
 8016180:	e74a      	b.n	8016018 <_printf_float+0x240>
 8016182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016184:	2a01      	cmp	r2, #1
 8016186:	dc01      	bgt.n	801618c <_printf_float+0x3b4>
 8016188:	07db      	lsls	r3, r3, #31
 801618a:	d53a      	bpl.n	8016202 <_printf_float+0x42a>
 801618c:	2301      	movs	r3, #1
 801618e:	4642      	mov	r2, r8
 8016190:	4631      	mov	r1, r6
 8016192:	4628      	mov	r0, r5
 8016194:	47b8      	blx	r7
 8016196:	3001      	adds	r0, #1
 8016198:	f43f ae7b 	beq.w	8015e92 <_printf_float+0xba>
 801619c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80161a0:	4631      	mov	r1, r6
 80161a2:	4628      	mov	r0, r5
 80161a4:	47b8      	blx	r7
 80161a6:	3001      	adds	r0, #1
 80161a8:	f108 0801 	add.w	r8, r8, #1
 80161ac:	f43f ae71 	beq.w	8015e92 <_printf_float+0xba>
 80161b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161b2:	2200      	movs	r2, #0
 80161b4:	f103 3aff 	add.w	sl, r3, #4294967295
 80161b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80161bc:	2300      	movs	r3, #0
 80161be:	f7ea fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 80161c2:	b9c8      	cbnz	r0, 80161f8 <_printf_float+0x420>
 80161c4:	4653      	mov	r3, sl
 80161c6:	4642      	mov	r2, r8
 80161c8:	4631      	mov	r1, r6
 80161ca:	4628      	mov	r0, r5
 80161cc:	47b8      	blx	r7
 80161ce:	3001      	adds	r0, #1
 80161d0:	d10e      	bne.n	80161f0 <_printf_float+0x418>
 80161d2:	e65e      	b.n	8015e92 <_printf_float+0xba>
 80161d4:	2301      	movs	r3, #1
 80161d6:	4652      	mov	r2, sl
 80161d8:	4631      	mov	r1, r6
 80161da:	4628      	mov	r0, r5
 80161dc:	47b8      	blx	r7
 80161de:	3001      	adds	r0, #1
 80161e0:	f43f ae57 	beq.w	8015e92 <_printf_float+0xba>
 80161e4:	f108 0801 	add.w	r8, r8, #1
 80161e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161ea:	3b01      	subs	r3, #1
 80161ec:	4543      	cmp	r3, r8
 80161ee:	dcf1      	bgt.n	80161d4 <_printf_float+0x3fc>
 80161f0:	464b      	mov	r3, r9
 80161f2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80161f6:	e6de      	b.n	8015fb6 <_printf_float+0x1de>
 80161f8:	f04f 0800 	mov.w	r8, #0
 80161fc:	f104 0a1a 	add.w	sl, r4, #26
 8016200:	e7f2      	b.n	80161e8 <_printf_float+0x410>
 8016202:	2301      	movs	r3, #1
 8016204:	e7df      	b.n	80161c6 <_printf_float+0x3ee>
 8016206:	2301      	movs	r3, #1
 8016208:	464a      	mov	r2, r9
 801620a:	4631      	mov	r1, r6
 801620c:	4628      	mov	r0, r5
 801620e:	47b8      	blx	r7
 8016210:	3001      	adds	r0, #1
 8016212:	f43f ae3e 	beq.w	8015e92 <_printf_float+0xba>
 8016216:	f108 0801 	add.w	r8, r8, #1
 801621a:	68e3      	ldr	r3, [r4, #12]
 801621c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801621e:	1a9b      	subs	r3, r3, r2
 8016220:	4543      	cmp	r3, r8
 8016222:	dcf0      	bgt.n	8016206 <_printf_float+0x42e>
 8016224:	e6fc      	b.n	8016020 <_printf_float+0x248>
 8016226:	f04f 0800 	mov.w	r8, #0
 801622a:	f104 0919 	add.w	r9, r4, #25
 801622e:	e7f4      	b.n	801621a <_printf_float+0x442>
 8016230:	2900      	cmp	r1, #0
 8016232:	f43f ae8b 	beq.w	8015f4c <_printf_float+0x174>
 8016236:	2300      	movs	r3, #0
 8016238:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801623c:	ab09      	add	r3, sp, #36	; 0x24
 801623e:	9300      	str	r3, [sp, #0]
 8016240:	ec49 8b10 	vmov	d0, r8, r9
 8016244:	6022      	str	r2, [r4, #0]
 8016246:	f8cd a004 	str.w	sl, [sp, #4]
 801624a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801624e:	4628      	mov	r0, r5
 8016250:	f7ff fd2e 	bl	8015cb0 <__cvt>
 8016254:	4680      	mov	r8, r0
 8016256:	e648      	b.n	8015eea <_printf_float+0x112>

08016258 <_printf_common>:
 8016258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801625c:	4691      	mov	r9, r2
 801625e:	461f      	mov	r7, r3
 8016260:	688a      	ldr	r2, [r1, #8]
 8016262:	690b      	ldr	r3, [r1, #16]
 8016264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016268:	4293      	cmp	r3, r2
 801626a:	bfb8      	it	lt
 801626c:	4613      	movlt	r3, r2
 801626e:	f8c9 3000 	str.w	r3, [r9]
 8016272:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016276:	4606      	mov	r6, r0
 8016278:	460c      	mov	r4, r1
 801627a:	b112      	cbz	r2, 8016282 <_printf_common+0x2a>
 801627c:	3301      	adds	r3, #1
 801627e:	f8c9 3000 	str.w	r3, [r9]
 8016282:	6823      	ldr	r3, [r4, #0]
 8016284:	0699      	lsls	r1, r3, #26
 8016286:	bf42      	ittt	mi
 8016288:	f8d9 3000 	ldrmi.w	r3, [r9]
 801628c:	3302      	addmi	r3, #2
 801628e:	f8c9 3000 	strmi.w	r3, [r9]
 8016292:	6825      	ldr	r5, [r4, #0]
 8016294:	f015 0506 	ands.w	r5, r5, #6
 8016298:	d107      	bne.n	80162aa <_printf_common+0x52>
 801629a:	f104 0a19 	add.w	sl, r4, #25
 801629e:	68e3      	ldr	r3, [r4, #12]
 80162a0:	f8d9 2000 	ldr.w	r2, [r9]
 80162a4:	1a9b      	subs	r3, r3, r2
 80162a6:	42ab      	cmp	r3, r5
 80162a8:	dc28      	bgt.n	80162fc <_printf_common+0xa4>
 80162aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80162ae:	6822      	ldr	r2, [r4, #0]
 80162b0:	3300      	adds	r3, #0
 80162b2:	bf18      	it	ne
 80162b4:	2301      	movne	r3, #1
 80162b6:	0692      	lsls	r2, r2, #26
 80162b8:	d42d      	bmi.n	8016316 <_printf_common+0xbe>
 80162ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80162be:	4639      	mov	r1, r7
 80162c0:	4630      	mov	r0, r6
 80162c2:	47c0      	blx	r8
 80162c4:	3001      	adds	r0, #1
 80162c6:	d020      	beq.n	801630a <_printf_common+0xb2>
 80162c8:	6823      	ldr	r3, [r4, #0]
 80162ca:	68e5      	ldr	r5, [r4, #12]
 80162cc:	f8d9 2000 	ldr.w	r2, [r9]
 80162d0:	f003 0306 	and.w	r3, r3, #6
 80162d4:	2b04      	cmp	r3, #4
 80162d6:	bf08      	it	eq
 80162d8:	1aad      	subeq	r5, r5, r2
 80162da:	68a3      	ldr	r3, [r4, #8]
 80162dc:	6922      	ldr	r2, [r4, #16]
 80162de:	bf0c      	ite	eq
 80162e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80162e4:	2500      	movne	r5, #0
 80162e6:	4293      	cmp	r3, r2
 80162e8:	bfc4      	itt	gt
 80162ea:	1a9b      	subgt	r3, r3, r2
 80162ec:	18ed      	addgt	r5, r5, r3
 80162ee:	f04f 0900 	mov.w	r9, #0
 80162f2:	341a      	adds	r4, #26
 80162f4:	454d      	cmp	r5, r9
 80162f6:	d11a      	bne.n	801632e <_printf_common+0xd6>
 80162f8:	2000      	movs	r0, #0
 80162fa:	e008      	b.n	801630e <_printf_common+0xb6>
 80162fc:	2301      	movs	r3, #1
 80162fe:	4652      	mov	r2, sl
 8016300:	4639      	mov	r1, r7
 8016302:	4630      	mov	r0, r6
 8016304:	47c0      	blx	r8
 8016306:	3001      	adds	r0, #1
 8016308:	d103      	bne.n	8016312 <_printf_common+0xba>
 801630a:	f04f 30ff 	mov.w	r0, #4294967295
 801630e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016312:	3501      	adds	r5, #1
 8016314:	e7c3      	b.n	801629e <_printf_common+0x46>
 8016316:	18e1      	adds	r1, r4, r3
 8016318:	1c5a      	adds	r2, r3, #1
 801631a:	2030      	movs	r0, #48	; 0x30
 801631c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016320:	4422      	add	r2, r4
 8016322:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016326:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801632a:	3302      	adds	r3, #2
 801632c:	e7c5      	b.n	80162ba <_printf_common+0x62>
 801632e:	2301      	movs	r3, #1
 8016330:	4622      	mov	r2, r4
 8016332:	4639      	mov	r1, r7
 8016334:	4630      	mov	r0, r6
 8016336:	47c0      	blx	r8
 8016338:	3001      	adds	r0, #1
 801633a:	d0e6      	beq.n	801630a <_printf_common+0xb2>
 801633c:	f109 0901 	add.w	r9, r9, #1
 8016340:	e7d8      	b.n	80162f4 <_printf_common+0x9c>
	...

08016344 <_printf_i>:
 8016344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016348:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801634c:	460c      	mov	r4, r1
 801634e:	7e09      	ldrb	r1, [r1, #24]
 8016350:	b085      	sub	sp, #20
 8016352:	296e      	cmp	r1, #110	; 0x6e
 8016354:	4617      	mov	r7, r2
 8016356:	4606      	mov	r6, r0
 8016358:	4698      	mov	r8, r3
 801635a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801635c:	f000 80b3 	beq.w	80164c6 <_printf_i+0x182>
 8016360:	d822      	bhi.n	80163a8 <_printf_i+0x64>
 8016362:	2963      	cmp	r1, #99	; 0x63
 8016364:	d036      	beq.n	80163d4 <_printf_i+0x90>
 8016366:	d80a      	bhi.n	801637e <_printf_i+0x3a>
 8016368:	2900      	cmp	r1, #0
 801636a:	f000 80b9 	beq.w	80164e0 <_printf_i+0x19c>
 801636e:	2958      	cmp	r1, #88	; 0x58
 8016370:	f000 8083 	beq.w	801647a <_printf_i+0x136>
 8016374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016378:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801637c:	e032      	b.n	80163e4 <_printf_i+0xa0>
 801637e:	2964      	cmp	r1, #100	; 0x64
 8016380:	d001      	beq.n	8016386 <_printf_i+0x42>
 8016382:	2969      	cmp	r1, #105	; 0x69
 8016384:	d1f6      	bne.n	8016374 <_printf_i+0x30>
 8016386:	6820      	ldr	r0, [r4, #0]
 8016388:	6813      	ldr	r3, [r2, #0]
 801638a:	0605      	lsls	r5, r0, #24
 801638c:	f103 0104 	add.w	r1, r3, #4
 8016390:	d52a      	bpl.n	80163e8 <_printf_i+0xa4>
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	6011      	str	r1, [r2, #0]
 8016396:	2b00      	cmp	r3, #0
 8016398:	da03      	bge.n	80163a2 <_printf_i+0x5e>
 801639a:	222d      	movs	r2, #45	; 0x2d
 801639c:	425b      	negs	r3, r3
 801639e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80163a2:	486f      	ldr	r0, [pc, #444]	; (8016560 <_printf_i+0x21c>)
 80163a4:	220a      	movs	r2, #10
 80163a6:	e039      	b.n	801641c <_printf_i+0xd8>
 80163a8:	2973      	cmp	r1, #115	; 0x73
 80163aa:	f000 809d 	beq.w	80164e8 <_printf_i+0x1a4>
 80163ae:	d808      	bhi.n	80163c2 <_printf_i+0x7e>
 80163b0:	296f      	cmp	r1, #111	; 0x6f
 80163b2:	d020      	beq.n	80163f6 <_printf_i+0xb2>
 80163b4:	2970      	cmp	r1, #112	; 0x70
 80163b6:	d1dd      	bne.n	8016374 <_printf_i+0x30>
 80163b8:	6823      	ldr	r3, [r4, #0]
 80163ba:	f043 0320 	orr.w	r3, r3, #32
 80163be:	6023      	str	r3, [r4, #0]
 80163c0:	e003      	b.n	80163ca <_printf_i+0x86>
 80163c2:	2975      	cmp	r1, #117	; 0x75
 80163c4:	d017      	beq.n	80163f6 <_printf_i+0xb2>
 80163c6:	2978      	cmp	r1, #120	; 0x78
 80163c8:	d1d4      	bne.n	8016374 <_printf_i+0x30>
 80163ca:	2378      	movs	r3, #120	; 0x78
 80163cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80163d0:	4864      	ldr	r0, [pc, #400]	; (8016564 <_printf_i+0x220>)
 80163d2:	e055      	b.n	8016480 <_printf_i+0x13c>
 80163d4:	6813      	ldr	r3, [r2, #0]
 80163d6:	1d19      	adds	r1, r3, #4
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	6011      	str	r1, [r2, #0]
 80163dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80163e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80163e4:	2301      	movs	r3, #1
 80163e6:	e08c      	b.n	8016502 <_printf_i+0x1be>
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	6011      	str	r1, [r2, #0]
 80163ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80163f0:	bf18      	it	ne
 80163f2:	b21b      	sxthne	r3, r3
 80163f4:	e7cf      	b.n	8016396 <_printf_i+0x52>
 80163f6:	6813      	ldr	r3, [r2, #0]
 80163f8:	6825      	ldr	r5, [r4, #0]
 80163fa:	1d18      	adds	r0, r3, #4
 80163fc:	6010      	str	r0, [r2, #0]
 80163fe:	0628      	lsls	r0, r5, #24
 8016400:	d501      	bpl.n	8016406 <_printf_i+0xc2>
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	e002      	b.n	801640c <_printf_i+0xc8>
 8016406:	0668      	lsls	r0, r5, #25
 8016408:	d5fb      	bpl.n	8016402 <_printf_i+0xbe>
 801640a:	881b      	ldrh	r3, [r3, #0]
 801640c:	4854      	ldr	r0, [pc, #336]	; (8016560 <_printf_i+0x21c>)
 801640e:	296f      	cmp	r1, #111	; 0x6f
 8016410:	bf14      	ite	ne
 8016412:	220a      	movne	r2, #10
 8016414:	2208      	moveq	r2, #8
 8016416:	2100      	movs	r1, #0
 8016418:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801641c:	6865      	ldr	r5, [r4, #4]
 801641e:	60a5      	str	r5, [r4, #8]
 8016420:	2d00      	cmp	r5, #0
 8016422:	f2c0 8095 	blt.w	8016550 <_printf_i+0x20c>
 8016426:	6821      	ldr	r1, [r4, #0]
 8016428:	f021 0104 	bic.w	r1, r1, #4
 801642c:	6021      	str	r1, [r4, #0]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d13d      	bne.n	80164ae <_printf_i+0x16a>
 8016432:	2d00      	cmp	r5, #0
 8016434:	f040 808e 	bne.w	8016554 <_printf_i+0x210>
 8016438:	4665      	mov	r5, ip
 801643a:	2a08      	cmp	r2, #8
 801643c:	d10b      	bne.n	8016456 <_printf_i+0x112>
 801643e:	6823      	ldr	r3, [r4, #0]
 8016440:	07db      	lsls	r3, r3, #31
 8016442:	d508      	bpl.n	8016456 <_printf_i+0x112>
 8016444:	6923      	ldr	r3, [r4, #16]
 8016446:	6862      	ldr	r2, [r4, #4]
 8016448:	429a      	cmp	r2, r3
 801644a:	bfde      	ittt	le
 801644c:	2330      	movle	r3, #48	; 0x30
 801644e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016452:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016456:	ebac 0305 	sub.w	r3, ip, r5
 801645a:	6123      	str	r3, [r4, #16]
 801645c:	f8cd 8000 	str.w	r8, [sp]
 8016460:	463b      	mov	r3, r7
 8016462:	aa03      	add	r2, sp, #12
 8016464:	4621      	mov	r1, r4
 8016466:	4630      	mov	r0, r6
 8016468:	f7ff fef6 	bl	8016258 <_printf_common>
 801646c:	3001      	adds	r0, #1
 801646e:	d14d      	bne.n	801650c <_printf_i+0x1c8>
 8016470:	f04f 30ff 	mov.w	r0, #4294967295
 8016474:	b005      	add	sp, #20
 8016476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801647a:	4839      	ldr	r0, [pc, #228]	; (8016560 <_printf_i+0x21c>)
 801647c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016480:	6813      	ldr	r3, [r2, #0]
 8016482:	6821      	ldr	r1, [r4, #0]
 8016484:	1d1d      	adds	r5, r3, #4
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	6015      	str	r5, [r2, #0]
 801648a:	060a      	lsls	r2, r1, #24
 801648c:	d50b      	bpl.n	80164a6 <_printf_i+0x162>
 801648e:	07ca      	lsls	r2, r1, #31
 8016490:	bf44      	itt	mi
 8016492:	f041 0120 	orrmi.w	r1, r1, #32
 8016496:	6021      	strmi	r1, [r4, #0]
 8016498:	b91b      	cbnz	r3, 80164a2 <_printf_i+0x15e>
 801649a:	6822      	ldr	r2, [r4, #0]
 801649c:	f022 0220 	bic.w	r2, r2, #32
 80164a0:	6022      	str	r2, [r4, #0]
 80164a2:	2210      	movs	r2, #16
 80164a4:	e7b7      	b.n	8016416 <_printf_i+0xd2>
 80164a6:	064d      	lsls	r5, r1, #25
 80164a8:	bf48      	it	mi
 80164aa:	b29b      	uxthmi	r3, r3
 80164ac:	e7ef      	b.n	801648e <_printf_i+0x14a>
 80164ae:	4665      	mov	r5, ip
 80164b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80164b4:	fb02 3311 	mls	r3, r2, r1, r3
 80164b8:	5cc3      	ldrb	r3, [r0, r3]
 80164ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80164be:	460b      	mov	r3, r1
 80164c0:	2900      	cmp	r1, #0
 80164c2:	d1f5      	bne.n	80164b0 <_printf_i+0x16c>
 80164c4:	e7b9      	b.n	801643a <_printf_i+0xf6>
 80164c6:	6813      	ldr	r3, [r2, #0]
 80164c8:	6825      	ldr	r5, [r4, #0]
 80164ca:	6961      	ldr	r1, [r4, #20]
 80164cc:	1d18      	adds	r0, r3, #4
 80164ce:	6010      	str	r0, [r2, #0]
 80164d0:	0628      	lsls	r0, r5, #24
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	d501      	bpl.n	80164da <_printf_i+0x196>
 80164d6:	6019      	str	r1, [r3, #0]
 80164d8:	e002      	b.n	80164e0 <_printf_i+0x19c>
 80164da:	066a      	lsls	r2, r5, #25
 80164dc:	d5fb      	bpl.n	80164d6 <_printf_i+0x192>
 80164de:	8019      	strh	r1, [r3, #0]
 80164e0:	2300      	movs	r3, #0
 80164e2:	6123      	str	r3, [r4, #16]
 80164e4:	4665      	mov	r5, ip
 80164e6:	e7b9      	b.n	801645c <_printf_i+0x118>
 80164e8:	6813      	ldr	r3, [r2, #0]
 80164ea:	1d19      	adds	r1, r3, #4
 80164ec:	6011      	str	r1, [r2, #0]
 80164ee:	681d      	ldr	r5, [r3, #0]
 80164f0:	6862      	ldr	r2, [r4, #4]
 80164f2:	2100      	movs	r1, #0
 80164f4:	4628      	mov	r0, r5
 80164f6:	f7e9 fe73 	bl	80001e0 <memchr>
 80164fa:	b108      	cbz	r0, 8016500 <_printf_i+0x1bc>
 80164fc:	1b40      	subs	r0, r0, r5
 80164fe:	6060      	str	r0, [r4, #4]
 8016500:	6863      	ldr	r3, [r4, #4]
 8016502:	6123      	str	r3, [r4, #16]
 8016504:	2300      	movs	r3, #0
 8016506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801650a:	e7a7      	b.n	801645c <_printf_i+0x118>
 801650c:	6923      	ldr	r3, [r4, #16]
 801650e:	462a      	mov	r2, r5
 8016510:	4639      	mov	r1, r7
 8016512:	4630      	mov	r0, r6
 8016514:	47c0      	blx	r8
 8016516:	3001      	adds	r0, #1
 8016518:	d0aa      	beq.n	8016470 <_printf_i+0x12c>
 801651a:	6823      	ldr	r3, [r4, #0]
 801651c:	079b      	lsls	r3, r3, #30
 801651e:	d413      	bmi.n	8016548 <_printf_i+0x204>
 8016520:	68e0      	ldr	r0, [r4, #12]
 8016522:	9b03      	ldr	r3, [sp, #12]
 8016524:	4298      	cmp	r0, r3
 8016526:	bfb8      	it	lt
 8016528:	4618      	movlt	r0, r3
 801652a:	e7a3      	b.n	8016474 <_printf_i+0x130>
 801652c:	2301      	movs	r3, #1
 801652e:	464a      	mov	r2, r9
 8016530:	4639      	mov	r1, r7
 8016532:	4630      	mov	r0, r6
 8016534:	47c0      	blx	r8
 8016536:	3001      	adds	r0, #1
 8016538:	d09a      	beq.n	8016470 <_printf_i+0x12c>
 801653a:	3501      	adds	r5, #1
 801653c:	68e3      	ldr	r3, [r4, #12]
 801653e:	9a03      	ldr	r2, [sp, #12]
 8016540:	1a9b      	subs	r3, r3, r2
 8016542:	42ab      	cmp	r3, r5
 8016544:	dcf2      	bgt.n	801652c <_printf_i+0x1e8>
 8016546:	e7eb      	b.n	8016520 <_printf_i+0x1dc>
 8016548:	2500      	movs	r5, #0
 801654a:	f104 0919 	add.w	r9, r4, #25
 801654e:	e7f5      	b.n	801653c <_printf_i+0x1f8>
 8016550:	2b00      	cmp	r3, #0
 8016552:	d1ac      	bne.n	80164ae <_printf_i+0x16a>
 8016554:	7803      	ldrb	r3, [r0, #0]
 8016556:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801655a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801655e:	e76c      	b.n	801643a <_printf_i+0xf6>
 8016560:	0801b292 	.word	0x0801b292
 8016564:	0801b2a3 	.word	0x0801b2a3

08016568 <_scanf_float>:
 8016568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801656c:	469a      	mov	sl, r3
 801656e:	688b      	ldr	r3, [r1, #8]
 8016570:	4616      	mov	r6, r2
 8016572:	1e5a      	subs	r2, r3, #1
 8016574:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016578:	b087      	sub	sp, #28
 801657a:	bf83      	ittte	hi
 801657c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016580:	189b      	addhi	r3, r3, r2
 8016582:	9301      	strhi	r3, [sp, #4]
 8016584:	2300      	movls	r3, #0
 8016586:	bf86      	itte	hi
 8016588:	f240 135d 	movwhi	r3, #349	; 0x15d
 801658c:	608b      	strhi	r3, [r1, #8]
 801658e:	9301      	strls	r3, [sp, #4]
 8016590:	680b      	ldr	r3, [r1, #0]
 8016592:	4688      	mov	r8, r1
 8016594:	f04f 0b00 	mov.w	fp, #0
 8016598:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801659c:	f848 3b1c 	str.w	r3, [r8], #28
 80165a0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80165a4:	4607      	mov	r7, r0
 80165a6:	460c      	mov	r4, r1
 80165a8:	4645      	mov	r5, r8
 80165aa:	465a      	mov	r2, fp
 80165ac:	46d9      	mov	r9, fp
 80165ae:	f8cd b008 	str.w	fp, [sp, #8]
 80165b2:	68a1      	ldr	r1, [r4, #8]
 80165b4:	b181      	cbz	r1, 80165d8 <_scanf_float+0x70>
 80165b6:	6833      	ldr	r3, [r6, #0]
 80165b8:	781b      	ldrb	r3, [r3, #0]
 80165ba:	2b49      	cmp	r3, #73	; 0x49
 80165bc:	d071      	beq.n	80166a2 <_scanf_float+0x13a>
 80165be:	d84d      	bhi.n	801665c <_scanf_float+0xf4>
 80165c0:	2b39      	cmp	r3, #57	; 0x39
 80165c2:	d840      	bhi.n	8016646 <_scanf_float+0xde>
 80165c4:	2b31      	cmp	r3, #49	; 0x31
 80165c6:	f080 8088 	bcs.w	80166da <_scanf_float+0x172>
 80165ca:	2b2d      	cmp	r3, #45	; 0x2d
 80165cc:	f000 8090 	beq.w	80166f0 <_scanf_float+0x188>
 80165d0:	d815      	bhi.n	80165fe <_scanf_float+0x96>
 80165d2:	2b2b      	cmp	r3, #43	; 0x2b
 80165d4:	f000 808c 	beq.w	80166f0 <_scanf_float+0x188>
 80165d8:	f1b9 0f00 	cmp.w	r9, #0
 80165dc:	d003      	beq.n	80165e6 <_scanf_float+0x7e>
 80165de:	6823      	ldr	r3, [r4, #0]
 80165e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80165e4:	6023      	str	r3, [r4, #0]
 80165e6:	3a01      	subs	r2, #1
 80165e8:	2a01      	cmp	r2, #1
 80165ea:	f200 80ea 	bhi.w	80167c2 <_scanf_float+0x25a>
 80165ee:	4545      	cmp	r5, r8
 80165f0:	f200 80dc 	bhi.w	80167ac <_scanf_float+0x244>
 80165f4:	2601      	movs	r6, #1
 80165f6:	4630      	mov	r0, r6
 80165f8:	b007      	add	sp, #28
 80165fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165fe:	2b2e      	cmp	r3, #46	; 0x2e
 8016600:	f000 809f 	beq.w	8016742 <_scanf_float+0x1da>
 8016604:	2b30      	cmp	r3, #48	; 0x30
 8016606:	d1e7      	bne.n	80165d8 <_scanf_float+0x70>
 8016608:	6820      	ldr	r0, [r4, #0]
 801660a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801660e:	d064      	beq.n	80166da <_scanf_float+0x172>
 8016610:	9b01      	ldr	r3, [sp, #4]
 8016612:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016616:	6020      	str	r0, [r4, #0]
 8016618:	f109 0901 	add.w	r9, r9, #1
 801661c:	b11b      	cbz	r3, 8016626 <_scanf_float+0xbe>
 801661e:	3b01      	subs	r3, #1
 8016620:	3101      	adds	r1, #1
 8016622:	9301      	str	r3, [sp, #4]
 8016624:	60a1      	str	r1, [r4, #8]
 8016626:	68a3      	ldr	r3, [r4, #8]
 8016628:	3b01      	subs	r3, #1
 801662a:	60a3      	str	r3, [r4, #8]
 801662c:	6923      	ldr	r3, [r4, #16]
 801662e:	3301      	adds	r3, #1
 8016630:	6123      	str	r3, [r4, #16]
 8016632:	6873      	ldr	r3, [r6, #4]
 8016634:	3b01      	subs	r3, #1
 8016636:	2b00      	cmp	r3, #0
 8016638:	6073      	str	r3, [r6, #4]
 801663a:	f340 80ac 	ble.w	8016796 <_scanf_float+0x22e>
 801663e:	6833      	ldr	r3, [r6, #0]
 8016640:	3301      	adds	r3, #1
 8016642:	6033      	str	r3, [r6, #0]
 8016644:	e7b5      	b.n	80165b2 <_scanf_float+0x4a>
 8016646:	2b45      	cmp	r3, #69	; 0x45
 8016648:	f000 8085 	beq.w	8016756 <_scanf_float+0x1ee>
 801664c:	2b46      	cmp	r3, #70	; 0x46
 801664e:	d06a      	beq.n	8016726 <_scanf_float+0x1be>
 8016650:	2b41      	cmp	r3, #65	; 0x41
 8016652:	d1c1      	bne.n	80165d8 <_scanf_float+0x70>
 8016654:	2a01      	cmp	r2, #1
 8016656:	d1bf      	bne.n	80165d8 <_scanf_float+0x70>
 8016658:	2202      	movs	r2, #2
 801665a:	e046      	b.n	80166ea <_scanf_float+0x182>
 801665c:	2b65      	cmp	r3, #101	; 0x65
 801665e:	d07a      	beq.n	8016756 <_scanf_float+0x1ee>
 8016660:	d818      	bhi.n	8016694 <_scanf_float+0x12c>
 8016662:	2b54      	cmp	r3, #84	; 0x54
 8016664:	d066      	beq.n	8016734 <_scanf_float+0x1cc>
 8016666:	d811      	bhi.n	801668c <_scanf_float+0x124>
 8016668:	2b4e      	cmp	r3, #78	; 0x4e
 801666a:	d1b5      	bne.n	80165d8 <_scanf_float+0x70>
 801666c:	2a00      	cmp	r2, #0
 801666e:	d146      	bne.n	80166fe <_scanf_float+0x196>
 8016670:	f1b9 0f00 	cmp.w	r9, #0
 8016674:	d145      	bne.n	8016702 <_scanf_float+0x19a>
 8016676:	6821      	ldr	r1, [r4, #0]
 8016678:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801667c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016680:	d13f      	bne.n	8016702 <_scanf_float+0x19a>
 8016682:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016686:	6021      	str	r1, [r4, #0]
 8016688:	2201      	movs	r2, #1
 801668a:	e02e      	b.n	80166ea <_scanf_float+0x182>
 801668c:	2b59      	cmp	r3, #89	; 0x59
 801668e:	d01e      	beq.n	80166ce <_scanf_float+0x166>
 8016690:	2b61      	cmp	r3, #97	; 0x61
 8016692:	e7de      	b.n	8016652 <_scanf_float+0xea>
 8016694:	2b6e      	cmp	r3, #110	; 0x6e
 8016696:	d0e9      	beq.n	801666c <_scanf_float+0x104>
 8016698:	d815      	bhi.n	80166c6 <_scanf_float+0x15e>
 801669a:	2b66      	cmp	r3, #102	; 0x66
 801669c:	d043      	beq.n	8016726 <_scanf_float+0x1be>
 801669e:	2b69      	cmp	r3, #105	; 0x69
 80166a0:	d19a      	bne.n	80165d8 <_scanf_float+0x70>
 80166a2:	f1bb 0f00 	cmp.w	fp, #0
 80166a6:	d138      	bne.n	801671a <_scanf_float+0x1b2>
 80166a8:	f1b9 0f00 	cmp.w	r9, #0
 80166ac:	d197      	bne.n	80165de <_scanf_float+0x76>
 80166ae:	6821      	ldr	r1, [r4, #0]
 80166b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80166b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80166b8:	d195      	bne.n	80165e6 <_scanf_float+0x7e>
 80166ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80166be:	6021      	str	r1, [r4, #0]
 80166c0:	f04f 0b01 	mov.w	fp, #1
 80166c4:	e011      	b.n	80166ea <_scanf_float+0x182>
 80166c6:	2b74      	cmp	r3, #116	; 0x74
 80166c8:	d034      	beq.n	8016734 <_scanf_float+0x1cc>
 80166ca:	2b79      	cmp	r3, #121	; 0x79
 80166cc:	d184      	bne.n	80165d8 <_scanf_float+0x70>
 80166ce:	f1bb 0f07 	cmp.w	fp, #7
 80166d2:	d181      	bne.n	80165d8 <_scanf_float+0x70>
 80166d4:	f04f 0b08 	mov.w	fp, #8
 80166d8:	e007      	b.n	80166ea <_scanf_float+0x182>
 80166da:	eb12 0f0b 	cmn.w	r2, fp
 80166de:	f47f af7b 	bne.w	80165d8 <_scanf_float+0x70>
 80166e2:	6821      	ldr	r1, [r4, #0]
 80166e4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80166e8:	6021      	str	r1, [r4, #0]
 80166ea:	702b      	strb	r3, [r5, #0]
 80166ec:	3501      	adds	r5, #1
 80166ee:	e79a      	b.n	8016626 <_scanf_float+0xbe>
 80166f0:	6821      	ldr	r1, [r4, #0]
 80166f2:	0608      	lsls	r0, r1, #24
 80166f4:	f57f af70 	bpl.w	80165d8 <_scanf_float+0x70>
 80166f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80166fc:	e7f4      	b.n	80166e8 <_scanf_float+0x180>
 80166fe:	2a02      	cmp	r2, #2
 8016700:	d047      	beq.n	8016792 <_scanf_float+0x22a>
 8016702:	f1bb 0f01 	cmp.w	fp, #1
 8016706:	d003      	beq.n	8016710 <_scanf_float+0x1a8>
 8016708:	f1bb 0f04 	cmp.w	fp, #4
 801670c:	f47f af64 	bne.w	80165d8 <_scanf_float+0x70>
 8016710:	f10b 0b01 	add.w	fp, fp, #1
 8016714:	fa5f fb8b 	uxtb.w	fp, fp
 8016718:	e7e7      	b.n	80166ea <_scanf_float+0x182>
 801671a:	f1bb 0f03 	cmp.w	fp, #3
 801671e:	d0f7      	beq.n	8016710 <_scanf_float+0x1a8>
 8016720:	f1bb 0f05 	cmp.w	fp, #5
 8016724:	e7f2      	b.n	801670c <_scanf_float+0x1a4>
 8016726:	f1bb 0f02 	cmp.w	fp, #2
 801672a:	f47f af55 	bne.w	80165d8 <_scanf_float+0x70>
 801672e:	f04f 0b03 	mov.w	fp, #3
 8016732:	e7da      	b.n	80166ea <_scanf_float+0x182>
 8016734:	f1bb 0f06 	cmp.w	fp, #6
 8016738:	f47f af4e 	bne.w	80165d8 <_scanf_float+0x70>
 801673c:	f04f 0b07 	mov.w	fp, #7
 8016740:	e7d3      	b.n	80166ea <_scanf_float+0x182>
 8016742:	6821      	ldr	r1, [r4, #0]
 8016744:	0588      	lsls	r0, r1, #22
 8016746:	f57f af47 	bpl.w	80165d8 <_scanf_float+0x70>
 801674a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801674e:	6021      	str	r1, [r4, #0]
 8016750:	f8cd 9008 	str.w	r9, [sp, #8]
 8016754:	e7c9      	b.n	80166ea <_scanf_float+0x182>
 8016756:	6821      	ldr	r1, [r4, #0]
 8016758:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801675c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016760:	d006      	beq.n	8016770 <_scanf_float+0x208>
 8016762:	0548      	lsls	r0, r1, #21
 8016764:	f57f af38 	bpl.w	80165d8 <_scanf_float+0x70>
 8016768:	f1b9 0f00 	cmp.w	r9, #0
 801676c:	f43f af3b 	beq.w	80165e6 <_scanf_float+0x7e>
 8016770:	0588      	lsls	r0, r1, #22
 8016772:	bf58      	it	pl
 8016774:	9802      	ldrpl	r0, [sp, #8]
 8016776:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801677a:	bf58      	it	pl
 801677c:	eba9 0000 	subpl.w	r0, r9, r0
 8016780:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016784:	bf58      	it	pl
 8016786:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801678a:	6021      	str	r1, [r4, #0]
 801678c:	f04f 0900 	mov.w	r9, #0
 8016790:	e7ab      	b.n	80166ea <_scanf_float+0x182>
 8016792:	2203      	movs	r2, #3
 8016794:	e7a9      	b.n	80166ea <_scanf_float+0x182>
 8016796:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801679a:	9205      	str	r2, [sp, #20]
 801679c:	4631      	mov	r1, r6
 801679e:	4638      	mov	r0, r7
 80167a0:	4798      	blx	r3
 80167a2:	9a05      	ldr	r2, [sp, #20]
 80167a4:	2800      	cmp	r0, #0
 80167a6:	f43f af04 	beq.w	80165b2 <_scanf_float+0x4a>
 80167aa:	e715      	b.n	80165d8 <_scanf_float+0x70>
 80167ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80167b4:	4632      	mov	r2, r6
 80167b6:	4638      	mov	r0, r7
 80167b8:	4798      	blx	r3
 80167ba:	6923      	ldr	r3, [r4, #16]
 80167bc:	3b01      	subs	r3, #1
 80167be:	6123      	str	r3, [r4, #16]
 80167c0:	e715      	b.n	80165ee <_scanf_float+0x86>
 80167c2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80167c6:	2b06      	cmp	r3, #6
 80167c8:	d80a      	bhi.n	80167e0 <_scanf_float+0x278>
 80167ca:	f1bb 0f02 	cmp.w	fp, #2
 80167ce:	d968      	bls.n	80168a2 <_scanf_float+0x33a>
 80167d0:	f1ab 0b03 	sub.w	fp, fp, #3
 80167d4:	fa5f fb8b 	uxtb.w	fp, fp
 80167d8:	eba5 0b0b 	sub.w	fp, r5, fp
 80167dc:	455d      	cmp	r5, fp
 80167de:	d14b      	bne.n	8016878 <_scanf_float+0x310>
 80167e0:	6823      	ldr	r3, [r4, #0]
 80167e2:	05da      	lsls	r2, r3, #23
 80167e4:	d51f      	bpl.n	8016826 <_scanf_float+0x2be>
 80167e6:	055b      	lsls	r3, r3, #21
 80167e8:	d468      	bmi.n	80168bc <_scanf_float+0x354>
 80167ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80167ee:	6923      	ldr	r3, [r4, #16]
 80167f0:	2965      	cmp	r1, #101	; 0x65
 80167f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80167f6:	f105 3bff 	add.w	fp, r5, #4294967295
 80167fa:	6123      	str	r3, [r4, #16]
 80167fc:	d00d      	beq.n	801681a <_scanf_float+0x2b2>
 80167fe:	2945      	cmp	r1, #69	; 0x45
 8016800:	d00b      	beq.n	801681a <_scanf_float+0x2b2>
 8016802:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016806:	4632      	mov	r2, r6
 8016808:	4638      	mov	r0, r7
 801680a:	4798      	blx	r3
 801680c:	6923      	ldr	r3, [r4, #16]
 801680e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016812:	3b01      	subs	r3, #1
 8016814:	f1a5 0b02 	sub.w	fp, r5, #2
 8016818:	6123      	str	r3, [r4, #16]
 801681a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801681e:	4632      	mov	r2, r6
 8016820:	4638      	mov	r0, r7
 8016822:	4798      	blx	r3
 8016824:	465d      	mov	r5, fp
 8016826:	6826      	ldr	r6, [r4, #0]
 8016828:	f016 0610 	ands.w	r6, r6, #16
 801682c:	d17a      	bne.n	8016924 <_scanf_float+0x3bc>
 801682e:	702e      	strb	r6, [r5, #0]
 8016830:	6823      	ldr	r3, [r4, #0]
 8016832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801683a:	d142      	bne.n	80168c2 <_scanf_float+0x35a>
 801683c:	9b02      	ldr	r3, [sp, #8]
 801683e:	eba9 0303 	sub.w	r3, r9, r3
 8016842:	425a      	negs	r2, r3
 8016844:	2b00      	cmp	r3, #0
 8016846:	d149      	bne.n	80168dc <_scanf_float+0x374>
 8016848:	2200      	movs	r2, #0
 801684a:	4641      	mov	r1, r8
 801684c:	4638      	mov	r0, r7
 801684e:	f000 fee7 	bl	8017620 <_strtod_r>
 8016852:	6825      	ldr	r5, [r4, #0]
 8016854:	f8da 3000 	ldr.w	r3, [sl]
 8016858:	f015 0f02 	tst.w	r5, #2
 801685c:	f103 0204 	add.w	r2, r3, #4
 8016860:	ec59 8b10 	vmov	r8, r9, d0
 8016864:	f8ca 2000 	str.w	r2, [sl]
 8016868:	d043      	beq.n	80168f2 <_scanf_float+0x38a>
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	e9c3 8900 	strd	r8, r9, [r3]
 8016870:	68e3      	ldr	r3, [r4, #12]
 8016872:	3301      	adds	r3, #1
 8016874:	60e3      	str	r3, [r4, #12]
 8016876:	e6be      	b.n	80165f6 <_scanf_float+0x8e>
 8016878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801687c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016880:	4632      	mov	r2, r6
 8016882:	4638      	mov	r0, r7
 8016884:	4798      	blx	r3
 8016886:	6923      	ldr	r3, [r4, #16]
 8016888:	3b01      	subs	r3, #1
 801688a:	6123      	str	r3, [r4, #16]
 801688c:	e7a6      	b.n	80167dc <_scanf_float+0x274>
 801688e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016892:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016896:	4632      	mov	r2, r6
 8016898:	4638      	mov	r0, r7
 801689a:	4798      	blx	r3
 801689c:	6923      	ldr	r3, [r4, #16]
 801689e:	3b01      	subs	r3, #1
 80168a0:	6123      	str	r3, [r4, #16]
 80168a2:	4545      	cmp	r5, r8
 80168a4:	d8f3      	bhi.n	801688e <_scanf_float+0x326>
 80168a6:	e6a5      	b.n	80165f4 <_scanf_float+0x8c>
 80168a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80168ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80168b0:	4632      	mov	r2, r6
 80168b2:	4638      	mov	r0, r7
 80168b4:	4798      	blx	r3
 80168b6:	6923      	ldr	r3, [r4, #16]
 80168b8:	3b01      	subs	r3, #1
 80168ba:	6123      	str	r3, [r4, #16]
 80168bc:	4545      	cmp	r5, r8
 80168be:	d8f3      	bhi.n	80168a8 <_scanf_float+0x340>
 80168c0:	e698      	b.n	80165f4 <_scanf_float+0x8c>
 80168c2:	9b03      	ldr	r3, [sp, #12]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d0bf      	beq.n	8016848 <_scanf_float+0x2e0>
 80168c8:	9904      	ldr	r1, [sp, #16]
 80168ca:	230a      	movs	r3, #10
 80168cc:	4632      	mov	r2, r6
 80168ce:	3101      	adds	r1, #1
 80168d0:	4638      	mov	r0, r7
 80168d2:	f000 ff31 	bl	8017738 <_strtol_r>
 80168d6:	9b03      	ldr	r3, [sp, #12]
 80168d8:	9d04      	ldr	r5, [sp, #16]
 80168da:	1ac2      	subs	r2, r0, r3
 80168dc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80168e0:	429d      	cmp	r5, r3
 80168e2:	bf28      	it	cs
 80168e4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80168e8:	490f      	ldr	r1, [pc, #60]	; (8016928 <_scanf_float+0x3c0>)
 80168ea:	4628      	mov	r0, r5
 80168ec:	f000 f868 	bl	80169c0 <siprintf>
 80168f0:	e7aa      	b.n	8016848 <_scanf_float+0x2e0>
 80168f2:	f015 0504 	ands.w	r5, r5, #4
 80168f6:	d1b8      	bne.n	801686a <_scanf_float+0x302>
 80168f8:	681f      	ldr	r7, [r3, #0]
 80168fa:	ee10 2a10 	vmov	r2, s0
 80168fe:	464b      	mov	r3, r9
 8016900:	ee10 0a10 	vmov	r0, s0
 8016904:	4649      	mov	r1, r9
 8016906:	f7ea f911 	bl	8000b2c <__aeabi_dcmpun>
 801690a:	b128      	cbz	r0, 8016918 <_scanf_float+0x3b0>
 801690c:	4628      	mov	r0, r5
 801690e:	f000 f81d 	bl	801694c <nanf>
 8016912:	ed87 0a00 	vstr	s0, [r7]
 8016916:	e7ab      	b.n	8016870 <_scanf_float+0x308>
 8016918:	4640      	mov	r0, r8
 801691a:	4649      	mov	r1, r9
 801691c:	f7ea f964 	bl	8000be8 <__aeabi_d2f>
 8016920:	6038      	str	r0, [r7, #0]
 8016922:	e7a5      	b.n	8016870 <_scanf_float+0x308>
 8016924:	2600      	movs	r6, #0
 8016926:	e666      	b.n	80165f6 <_scanf_float+0x8e>
 8016928:	0801b2b4 	.word	0x0801b2b4

0801692c <_sbrk_r>:
 801692c:	b538      	push	{r3, r4, r5, lr}
 801692e:	4c06      	ldr	r4, [pc, #24]	; (8016948 <_sbrk_r+0x1c>)
 8016930:	2300      	movs	r3, #0
 8016932:	4605      	mov	r5, r0
 8016934:	4608      	mov	r0, r1
 8016936:	6023      	str	r3, [r4, #0]
 8016938:	f7f4 fade 	bl	800aef8 <_sbrk>
 801693c:	1c43      	adds	r3, r0, #1
 801693e:	d102      	bne.n	8016946 <_sbrk_r+0x1a>
 8016940:	6823      	ldr	r3, [r4, #0]
 8016942:	b103      	cbz	r3, 8016946 <_sbrk_r+0x1a>
 8016944:	602b      	str	r3, [r5, #0]
 8016946:	bd38      	pop	{r3, r4, r5, pc}
 8016948:	20006b6c 	.word	0x20006b6c

0801694c <nanf>:
 801694c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016954 <nanf+0x8>
 8016950:	4770      	bx	lr
 8016952:	bf00      	nop
 8016954:	7fc00000 	.word	0x7fc00000

08016958 <sniprintf>:
 8016958:	b40c      	push	{r2, r3}
 801695a:	b530      	push	{r4, r5, lr}
 801695c:	4b17      	ldr	r3, [pc, #92]	; (80169bc <sniprintf+0x64>)
 801695e:	1e0c      	subs	r4, r1, #0
 8016960:	b09d      	sub	sp, #116	; 0x74
 8016962:	681d      	ldr	r5, [r3, #0]
 8016964:	da08      	bge.n	8016978 <sniprintf+0x20>
 8016966:	238b      	movs	r3, #139	; 0x8b
 8016968:	602b      	str	r3, [r5, #0]
 801696a:	f04f 30ff 	mov.w	r0, #4294967295
 801696e:	b01d      	add	sp, #116	; 0x74
 8016970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016974:	b002      	add	sp, #8
 8016976:	4770      	bx	lr
 8016978:	f44f 7302 	mov.w	r3, #520	; 0x208
 801697c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016980:	bf14      	ite	ne
 8016982:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016986:	4623      	moveq	r3, r4
 8016988:	9304      	str	r3, [sp, #16]
 801698a:	9307      	str	r3, [sp, #28]
 801698c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016990:	9002      	str	r0, [sp, #8]
 8016992:	9006      	str	r0, [sp, #24]
 8016994:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016998:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801699a:	ab21      	add	r3, sp, #132	; 0x84
 801699c:	a902      	add	r1, sp, #8
 801699e:	4628      	mov	r0, r5
 80169a0:	9301      	str	r3, [sp, #4]
 80169a2:	f002 fcc9 	bl	8019338 <_svfiprintf_r>
 80169a6:	1c43      	adds	r3, r0, #1
 80169a8:	bfbc      	itt	lt
 80169aa:	238b      	movlt	r3, #139	; 0x8b
 80169ac:	602b      	strlt	r3, [r5, #0]
 80169ae:	2c00      	cmp	r4, #0
 80169b0:	d0dd      	beq.n	801696e <sniprintf+0x16>
 80169b2:	9b02      	ldr	r3, [sp, #8]
 80169b4:	2200      	movs	r2, #0
 80169b6:	701a      	strb	r2, [r3, #0]
 80169b8:	e7d9      	b.n	801696e <sniprintf+0x16>
 80169ba:	bf00      	nop
 80169bc:	200009a8 	.word	0x200009a8

080169c0 <siprintf>:
 80169c0:	b40e      	push	{r1, r2, r3}
 80169c2:	b500      	push	{lr}
 80169c4:	b09c      	sub	sp, #112	; 0x70
 80169c6:	ab1d      	add	r3, sp, #116	; 0x74
 80169c8:	9002      	str	r0, [sp, #8]
 80169ca:	9006      	str	r0, [sp, #24]
 80169cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80169d0:	4809      	ldr	r0, [pc, #36]	; (80169f8 <siprintf+0x38>)
 80169d2:	9107      	str	r1, [sp, #28]
 80169d4:	9104      	str	r1, [sp, #16]
 80169d6:	4909      	ldr	r1, [pc, #36]	; (80169fc <siprintf+0x3c>)
 80169d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80169dc:	9105      	str	r1, [sp, #20]
 80169de:	6800      	ldr	r0, [r0, #0]
 80169e0:	9301      	str	r3, [sp, #4]
 80169e2:	a902      	add	r1, sp, #8
 80169e4:	f002 fca8 	bl	8019338 <_svfiprintf_r>
 80169e8:	9b02      	ldr	r3, [sp, #8]
 80169ea:	2200      	movs	r2, #0
 80169ec:	701a      	strb	r2, [r3, #0]
 80169ee:	b01c      	add	sp, #112	; 0x70
 80169f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80169f4:	b003      	add	sp, #12
 80169f6:	4770      	bx	lr
 80169f8:	200009a8 	.word	0x200009a8
 80169fc:	ffff0208 	.word	0xffff0208

08016a00 <sulp>:
 8016a00:	b570      	push	{r4, r5, r6, lr}
 8016a02:	4604      	mov	r4, r0
 8016a04:	460d      	mov	r5, r1
 8016a06:	ec45 4b10 	vmov	d0, r4, r5
 8016a0a:	4616      	mov	r6, r2
 8016a0c:	f002 fb06 	bl	801901c <__ulp>
 8016a10:	ec51 0b10 	vmov	r0, r1, d0
 8016a14:	b17e      	cbz	r6, 8016a36 <sulp+0x36>
 8016a16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016a1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	dd09      	ble.n	8016a36 <sulp+0x36>
 8016a22:	051b      	lsls	r3, r3, #20
 8016a24:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016a28:	2400      	movs	r4, #0
 8016a2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016a2e:	4622      	mov	r2, r4
 8016a30:	462b      	mov	r3, r5
 8016a32:	f7e9 fde1 	bl	80005f8 <__aeabi_dmul>
 8016a36:	bd70      	pop	{r4, r5, r6, pc}

08016a38 <_strtod_l>:
 8016a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a3c:	461f      	mov	r7, r3
 8016a3e:	b0a1      	sub	sp, #132	; 0x84
 8016a40:	2300      	movs	r3, #0
 8016a42:	4681      	mov	r9, r0
 8016a44:	4638      	mov	r0, r7
 8016a46:	460e      	mov	r6, r1
 8016a48:	9217      	str	r2, [sp, #92]	; 0x5c
 8016a4a:	931c      	str	r3, [sp, #112]	; 0x70
 8016a4c:	f001 fff5 	bl	8018a3a <__localeconv_l>
 8016a50:	4680      	mov	r8, r0
 8016a52:	6800      	ldr	r0, [r0, #0]
 8016a54:	f7e9 fbbc 	bl	80001d0 <strlen>
 8016a58:	f04f 0a00 	mov.w	sl, #0
 8016a5c:	4604      	mov	r4, r0
 8016a5e:	f04f 0b00 	mov.w	fp, #0
 8016a62:	961b      	str	r6, [sp, #108]	; 0x6c
 8016a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a66:	781a      	ldrb	r2, [r3, #0]
 8016a68:	2a0d      	cmp	r2, #13
 8016a6a:	d832      	bhi.n	8016ad2 <_strtod_l+0x9a>
 8016a6c:	2a09      	cmp	r2, #9
 8016a6e:	d236      	bcs.n	8016ade <_strtod_l+0xa6>
 8016a70:	2a00      	cmp	r2, #0
 8016a72:	d03e      	beq.n	8016af2 <_strtod_l+0xba>
 8016a74:	2300      	movs	r3, #0
 8016a76:	930d      	str	r3, [sp, #52]	; 0x34
 8016a78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016a7a:	782b      	ldrb	r3, [r5, #0]
 8016a7c:	2b30      	cmp	r3, #48	; 0x30
 8016a7e:	f040 80ac 	bne.w	8016bda <_strtod_l+0x1a2>
 8016a82:	786b      	ldrb	r3, [r5, #1]
 8016a84:	2b58      	cmp	r3, #88	; 0x58
 8016a86:	d001      	beq.n	8016a8c <_strtod_l+0x54>
 8016a88:	2b78      	cmp	r3, #120	; 0x78
 8016a8a:	d167      	bne.n	8016b5c <_strtod_l+0x124>
 8016a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a8e:	9301      	str	r3, [sp, #4]
 8016a90:	ab1c      	add	r3, sp, #112	; 0x70
 8016a92:	9300      	str	r3, [sp, #0]
 8016a94:	9702      	str	r7, [sp, #8]
 8016a96:	ab1d      	add	r3, sp, #116	; 0x74
 8016a98:	4a88      	ldr	r2, [pc, #544]	; (8016cbc <_strtod_l+0x284>)
 8016a9a:	a91b      	add	r1, sp, #108	; 0x6c
 8016a9c:	4648      	mov	r0, r9
 8016a9e:	f001 fcf2 	bl	8018486 <__gethex>
 8016aa2:	f010 0407 	ands.w	r4, r0, #7
 8016aa6:	4606      	mov	r6, r0
 8016aa8:	d005      	beq.n	8016ab6 <_strtod_l+0x7e>
 8016aaa:	2c06      	cmp	r4, #6
 8016aac:	d12b      	bne.n	8016b06 <_strtod_l+0xce>
 8016aae:	3501      	adds	r5, #1
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	951b      	str	r5, [sp, #108]	; 0x6c
 8016ab4:	930d      	str	r3, [sp, #52]	; 0x34
 8016ab6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	f040 859a 	bne.w	80175f2 <_strtod_l+0xbba>
 8016abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ac0:	b1e3      	cbz	r3, 8016afc <_strtod_l+0xc4>
 8016ac2:	4652      	mov	r2, sl
 8016ac4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016ac8:	ec43 2b10 	vmov	d0, r2, r3
 8016acc:	b021      	add	sp, #132	; 0x84
 8016ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ad2:	2a2b      	cmp	r2, #43	; 0x2b
 8016ad4:	d015      	beq.n	8016b02 <_strtod_l+0xca>
 8016ad6:	2a2d      	cmp	r2, #45	; 0x2d
 8016ad8:	d004      	beq.n	8016ae4 <_strtod_l+0xac>
 8016ada:	2a20      	cmp	r2, #32
 8016adc:	d1ca      	bne.n	8016a74 <_strtod_l+0x3c>
 8016ade:	3301      	adds	r3, #1
 8016ae0:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ae2:	e7bf      	b.n	8016a64 <_strtod_l+0x2c>
 8016ae4:	2201      	movs	r2, #1
 8016ae6:	920d      	str	r2, [sp, #52]	; 0x34
 8016ae8:	1c5a      	adds	r2, r3, #1
 8016aea:	921b      	str	r2, [sp, #108]	; 0x6c
 8016aec:	785b      	ldrb	r3, [r3, #1]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d1c2      	bne.n	8016a78 <_strtod_l+0x40>
 8016af2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016af4:	961b      	str	r6, [sp, #108]	; 0x6c
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	f040 8579 	bne.w	80175ee <_strtod_l+0xbb6>
 8016afc:	4652      	mov	r2, sl
 8016afe:	465b      	mov	r3, fp
 8016b00:	e7e2      	b.n	8016ac8 <_strtod_l+0x90>
 8016b02:	2200      	movs	r2, #0
 8016b04:	e7ef      	b.n	8016ae6 <_strtod_l+0xae>
 8016b06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016b08:	b13a      	cbz	r2, 8016b1a <_strtod_l+0xe2>
 8016b0a:	2135      	movs	r1, #53	; 0x35
 8016b0c:	a81e      	add	r0, sp, #120	; 0x78
 8016b0e:	f002 fb7d 	bl	801920c <__copybits>
 8016b12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016b14:	4648      	mov	r0, r9
 8016b16:	f001 ffe9 	bl	8018aec <_Bfree>
 8016b1a:	3c01      	subs	r4, #1
 8016b1c:	2c04      	cmp	r4, #4
 8016b1e:	d806      	bhi.n	8016b2e <_strtod_l+0xf6>
 8016b20:	e8df f004 	tbb	[pc, r4]
 8016b24:	1714030a 	.word	0x1714030a
 8016b28:	0a          	.byte	0x0a
 8016b29:	00          	.byte	0x00
 8016b2a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016b2e:	0730      	lsls	r0, r6, #28
 8016b30:	d5c1      	bpl.n	8016ab6 <_strtod_l+0x7e>
 8016b32:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016b36:	e7be      	b.n	8016ab6 <_strtod_l+0x7e>
 8016b38:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016b3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016b3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016b42:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016b46:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016b4a:	e7f0      	b.n	8016b2e <_strtod_l+0xf6>
 8016b4c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016cc0 <_strtod_l+0x288>
 8016b50:	e7ed      	b.n	8016b2e <_strtod_l+0xf6>
 8016b52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016b56:	f04f 3aff 	mov.w	sl, #4294967295
 8016b5a:	e7e8      	b.n	8016b2e <_strtod_l+0xf6>
 8016b5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b5e:	1c5a      	adds	r2, r3, #1
 8016b60:	921b      	str	r2, [sp, #108]	; 0x6c
 8016b62:	785b      	ldrb	r3, [r3, #1]
 8016b64:	2b30      	cmp	r3, #48	; 0x30
 8016b66:	d0f9      	beq.n	8016b5c <_strtod_l+0x124>
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d0a4      	beq.n	8016ab6 <_strtod_l+0x7e>
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	2500      	movs	r5, #0
 8016b70:	9306      	str	r3, [sp, #24]
 8016b72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b74:	9308      	str	r3, [sp, #32]
 8016b76:	9507      	str	r5, [sp, #28]
 8016b78:	9505      	str	r5, [sp, #20]
 8016b7a:	220a      	movs	r2, #10
 8016b7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016b7e:	7807      	ldrb	r7, [r0, #0]
 8016b80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016b84:	b2d9      	uxtb	r1, r3
 8016b86:	2909      	cmp	r1, #9
 8016b88:	d929      	bls.n	8016bde <_strtod_l+0x1a6>
 8016b8a:	4622      	mov	r2, r4
 8016b8c:	f8d8 1000 	ldr.w	r1, [r8]
 8016b90:	f002 fcca 	bl	8019528 <strncmp>
 8016b94:	2800      	cmp	r0, #0
 8016b96:	d031      	beq.n	8016bfc <_strtod_l+0x1c4>
 8016b98:	2000      	movs	r0, #0
 8016b9a:	9c05      	ldr	r4, [sp, #20]
 8016b9c:	9004      	str	r0, [sp, #16]
 8016b9e:	463b      	mov	r3, r7
 8016ba0:	4602      	mov	r2, r0
 8016ba2:	2b65      	cmp	r3, #101	; 0x65
 8016ba4:	d001      	beq.n	8016baa <_strtod_l+0x172>
 8016ba6:	2b45      	cmp	r3, #69	; 0x45
 8016ba8:	d114      	bne.n	8016bd4 <_strtod_l+0x19c>
 8016baa:	b924      	cbnz	r4, 8016bb6 <_strtod_l+0x17e>
 8016bac:	b910      	cbnz	r0, 8016bb4 <_strtod_l+0x17c>
 8016bae:	9b06      	ldr	r3, [sp, #24]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d09e      	beq.n	8016af2 <_strtod_l+0xba>
 8016bb4:	2400      	movs	r4, #0
 8016bb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016bb8:	1c73      	adds	r3, r6, #1
 8016bba:	931b      	str	r3, [sp, #108]	; 0x6c
 8016bbc:	7873      	ldrb	r3, [r6, #1]
 8016bbe:	2b2b      	cmp	r3, #43	; 0x2b
 8016bc0:	d078      	beq.n	8016cb4 <_strtod_l+0x27c>
 8016bc2:	2b2d      	cmp	r3, #45	; 0x2d
 8016bc4:	d070      	beq.n	8016ca8 <_strtod_l+0x270>
 8016bc6:	f04f 0c00 	mov.w	ip, #0
 8016bca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016bce:	2f09      	cmp	r7, #9
 8016bd0:	d97c      	bls.n	8016ccc <_strtod_l+0x294>
 8016bd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8016bd4:	f04f 0e00 	mov.w	lr, #0
 8016bd8:	e09a      	b.n	8016d10 <_strtod_l+0x2d8>
 8016bda:	2300      	movs	r3, #0
 8016bdc:	e7c7      	b.n	8016b6e <_strtod_l+0x136>
 8016bde:	9905      	ldr	r1, [sp, #20]
 8016be0:	2908      	cmp	r1, #8
 8016be2:	bfdd      	ittte	le
 8016be4:	9907      	ldrle	r1, [sp, #28]
 8016be6:	fb02 3301 	mlale	r3, r2, r1, r3
 8016bea:	9307      	strle	r3, [sp, #28]
 8016bec:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016bf0:	9b05      	ldr	r3, [sp, #20]
 8016bf2:	3001      	adds	r0, #1
 8016bf4:	3301      	adds	r3, #1
 8016bf6:	9305      	str	r3, [sp, #20]
 8016bf8:	901b      	str	r0, [sp, #108]	; 0x6c
 8016bfa:	e7bf      	b.n	8016b7c <_strtod_l+0x144>
 8016bfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016bfe:	191a      	adds	r2, r3, r4
 8016c00:	921b      	str	r2, [sp, #108]	; 0x6c
 8016c02:	9a05      	ldr	r2, [sp, #20]
 8016c04:	5d1b      	ldrb	r3, [r3, r4]
 8016c06:	2a00      	cmp	r2, #0
 8016c08:	d037      	beq.n	8016c7a <_strtod_l+0x242>
 8016c0a:	9c05      	ldr	r4, [sp, #20]
 8016c0c:	4602      	mov	r2, r0
 8016c0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016c12:	2909      	cmp	r1, #9
 8016c14:	d913      	bls.n	8016c3e <_strtod_l+0x206>
 8016c16:	2101      	movs	r1, #1
 8016c18:	9104      	str	r1, [sp, #16]
 8016c1a:	e7c2      	b.n	8016ba2 <_strtod_l+0x16a>
 8016c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c1e:	1c5a      	adds	r2, r3, #1
 8016c20:	921b      	str	r2, [sp, #108]	; 0x6c
 8016c22:	785b      	ldrb	r3, [r3, #1]
 8016c24:	3001      	adds	r0, #1
 8016c26:	2b30      	cmp	r3, #48	; 0x30
 8016c28:	d0f8      	beq.n	8016c1c <_strtod_l+0x1e4>
 8016c2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016c2e:	2a08      	cmp	r2, #8
 8016c30:	f200 84e4 	bhi.w	80175fc <_strtod_l+0xbc4>
 8016c34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016c36:	9208      	str	r2, [sp, #32]
 8016c38:	4602      	mov	r2, r0
 8016c3a:	2000      	movs	r0, #0
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016c42:	f100 0101 	add.w	r1, r0, #1
 8016c46:	d012      	beq.n	8016c6e <_strtod_l+0x236>
 8016c48:	440a      	add	r2, r1
 8016c4a:	eb00 0c04 	add.w	ip, r0, r4
 8016c4e:	4621      	mov	r1, r4
 8016c50:	270a      	movs	r7, #10
 8016c52:	458c      	cmp	ip, r1
 8016c54:	d113      	bne.n	8016c7e <_strtod_l+0x246>
 8016c56:	1821      	adds	r1, r4, r0
 8016c58:	2908      	cmp	r1, #8
 8016c5a:	f104 0401 	add.w	r4, r4, #1
 8016c5e:	4404      	add	r4, r0
 8016c60:	dc19      	bgt.n	8016c96 <_strtod_l+0x25e>
 8016c62:	9b07      	ldr	r3, [sp, #28]
 8016c64:	210a      	movs	r1, #10
 8016c66:	fb01 e303 	mla	r3, r1, r3, lr
 8016c6a:	9307      	str	r3, [sp, #28]
 8016c6c:	2100      	movs	r1, #0
 8016c6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c70:	1c58      	adds	r0, r3, #1
 8016c72:	901b      	str	r0, [sp, #108]	; 0x6c
 8016c74:	785b      	ldrb	r3, [r3, #1]
 8016c76:	4608      	mov	r0, r1
 8016c78:	e7c9      	b.n	8016c0e <_strtod_l+0x1d6>
 8016c7a:	9805      	ldr	r0, [sp, #20]
 8016c7c:	e7d3      	b.n	8016c26 <_strtod_l+0x1ee>
 8016c7e:	2908      	cmp	r1, #8
 8016c80:	f101 0101 	add.w	r1, r1, #1
 8016c84:	dc03      	bgt.n	8016c8e <_strtod_l+0x256>
 8016c86:	9b07      	ldr	r3, [sp, #28]
 8016c88:	437b      	muls	r3, r7
 8016c8a:	9307      	str	r3, [sp, #28]
 8016c8c:	e7e1      	b.n	8016c52 <_strtod_l+0x21a>
 8016c8e:	2910      	cmp	r1, #16
 8016c90:	bfd8      	it	le
 8016c92:	437d      	mulle	r5, r7
 8016c94:	e7dd      	b.n	8016c52 <_strtod_l+0x21a>
 8016c96:	2c10      	cmp	r4, #16
 8016c98:	bfdc      	itt	le
 8016c9a:	210a      	movle	r1, #10
 8016c9c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016ca0:	e7e4      	b.n	8016c6c <_strtod_l+0x234>
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	9304      	str	r3, [sp, #16]
 8016ca6:	e781      	b.n	8016bac <_strtod_l+0x174>
 8016ca8:	f04f 0c01 	mov.w	ip, #1
 8016cac:	1cb3      	adds	r3, r6, #2
 8016cae:	931b      	str	r3, [sp, #108]	; 0x6c
 8016cb0:	78b3      	ldrb	r3, [r6, #2]
 8016cb2:	e78a      	b.n	8016bca <_strtod_l+0x192>
 8016cb4:	f04f 0c00 	mov.w	ip, #0
 8016cb8:	e7f8      	b.n	8016cac <_strtod_l+0x274>
 8016cba:	bf00      	nop
 8016cbc:	0801b2bc 	.word	0x0801b2bc
 8016cc0:	7ff00000 	.word	0x7ff00000
 8016cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cc6:	1c5f      	adds	r7, r3, #1
 8016cc8:	971b      	str	r7, [sp, #108]	; 0x6c
 8016cca:	785b      	ldrb	r3, [r3, #1]
 8016ccc:	2b30      	cmp	r3, #48	; 0x30
 8016cce:	d0f9      	beq.n	8016cc4 <_strtod_l+0x28c>
 8016cd0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016cd4:	2f08      	cmp	r7, #8
 8016cd6:	f63f af7d 	bhi.w	8016bd4 <_strtod_l+0x19c>
 8016cda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016cde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8016ce2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ce4:	1c5f      	adds	r7, r3, #1
 8016ce6:	971b      	str	r7, [sp, #108]	; 0x6c
 8016ce8:	785b      	ldrb	r3, [r3, #1]
 8016cea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016cee:	f1b8 0f09 	cmp.w	r8, #9
 8016cf2:	d937      	bls.n	8016d64 <_strtod_l+0x32c>
 8016cf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016cf6:	1a7f      	subs	r7, r7, r1
 8016cf8:	2f08      	cmp	r7, #8
 8016cfa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016cfe:	dc37      	bgt.n	8016d70 <_strtod_l+0x338>
 8016d00:	45be      	cmp	lr, r7
 8016d02:	bfa8      	it	ge
 8016d04:	46be      	movge	lr, r7
 8016d06:	f1bc 0f00 	cmp.w	ip, #0
 8016d0a:	d001      	beq.n	8016d10 <_strtod_l+0x2d8>
 8016d0c:	f1ce 0e00 	rsb	lr, lr, #0
 8016d10:	2c00      	cmp	r4, #0
 8016d12:	d151      	bne.n	8016db8 <_strtod_l+0x380>
 8016d14:	2800      	cmp	r0, #0
 8016d16:	f47f aece 	bne.w	8016ab6 <_strtod_l+0x7e>
 8016d1a:	9a06      	ldr	r2, [sp, #24]
 8016d1c:	2a00      	cmp	r2, #0
 8016d1e:	f47f aeca 	bne.w	8016ab6 <_strtod_l+0x7e>
 8016d22:	9a04      	ldr	r2, [sp, #16]
 8016d24:	2a00      	cmp	r2, #0
 8016d26:	f47f aee4 	bne.w	8016af2 <_strtod_l+0xba>
 8016d2a:	2b4e      	cmp	r3, #78	; 0x4e
 8016d2c:	d027      	beq.n	8016d7e <_strtod_l+0x346>
 8016d2e:	dc21      	bgt.n	8016d74 <_strtod_l+0x33c>
 8016d30:	2b49      	cmp	r3, #73	; 0x49
 8016d32:	f47f aede 	bne.w	8016af2 <_strtod_l+0xba>
 8016d36:	49a0      	ldr	r1, [pc, #640]	; (8016fb8 <_strtod_l+0x580>)
 8016d38:	a81b      	add	r0, sp, #108	; 0x6c
 8016d3a:	f001 fdd7 	bl	80188ec <__match>
 8016d3e:	2800      	cmp	r0, #0
 8016d40:	f43f aed7 	beq.w	8016af2 <_strtod_l+0xba>
 8016d44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d46:	499d      	ldr	r1, [pc, #628]	; (8016fbc <_strtod_l+0x584>)
 8016d48:	3b01      	subs	r3, #1
 8016d4a:	a81b      	add	r0, sp, #108	; 0x6c
 8016d4c:	931b      	str	r3, [sp, #108]	; 0x6c
 8016d4e:	f001 fdcd 	bl	80188ec <__match>
 8016d52:	b910      	cbnz	r0, 8016d5a <_strtod_l+0x322>
 8016d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d56:	3301      	adds	r3, #1
 8016d58:	931b      	str	r3, [sp, #108]	; 0x6c
 8016d5a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016fd0 <_strtod_l+0x598>
 8016d5e:	f04f 0a00 	mov.w	sl, #0
 8016d62:	e6a8      	b.n	8016ab6 <_strtod_l+0x7e>
 8016d64:	210a      	movs	r1, #10
 8016d66:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016d6a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016d6e:	e7b8      	b.n	8016ce2 <_strtod_l+0x2aa>
 8016d70:	46be      	mov	lr, r7
 8016d72:	e7c8      	b.n	8016d06 <_strtod_l+0x2ce>
 8016d74:	2b69      	cmp	r3, #105	; 0x69
 8016d76:	d0de      	beq.n	8016d36 <_strtod_l+0x2fe>
 8016d78:	2b6e      	cmp	r3, #110	; 0x6e
 8016d7a:	f47f aeba 	bne.w	8016af2 <_strtod_l+0xba>
 8016d7e:	4990      	ldr	r1, [pc, #576]	; (8016fc0 <_strtod_l+0x588>)
 8016d80:	a81b      	add	r0, sp, #108	; 0x6c
 8016d82:	f001 fdb3 	bl	80188ec <__match>
 8016d86:	2800      	cmp	r0, #0
 8016d88:	f43f aeb3 	beq.w	8016af2 <_strtod_l+0xba>
 8016d8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d8e:	781b      	ldrb	r3, [r3, #0]
 8016d90:	2b28      	cmp	r3, #40	; 0x28
 8016d92:	d10e      	bne.n	8016db2 <_strtod_l+0x37a>
 8016d94:	aa1e      	add	r2, sp, #120	; 0x78
 8016d96:	498b      	ldr	r1, [pc, #556]	; (8016fc4 <_strtod_l+0x58c>)
 8016d98:	a81b      	add	r0, sp, #108	; 0x6c
 8016d9a:	f001 fdbb 	bl	8018914 <__hexnan>
 8016d9e:	2805      	cmp	r0, #5
 8016da0:	d107      	bne.n	8016db2 <_strtod_l+0x37a>
 8016da2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016da4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016da8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016dac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016db0:	e681      	b.n	8016ab6 <_strtod_l+0x7e>
 8016db2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016fd8 <_strtod_l+0x5a0>
 8016db6:	e7d2      	b.n	8016d5e <_strtod_l+0x326>
 8016db8:	ebae 0302 	sub.w	r3, lr, r2
 8016dbc:	9306      	str	r3, [sp, #24]
 8016dbe:	9b05      	ldr	r3, [sp, #20]
 8016dc0:	9807      	ldr	r0, [sp, #28]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	bf08      	it	eq
 8016dc6:	4623      	moveq	r3, r4
 8016dc8:	2c10      	cmp	r4, #16
 8016dca:	9305      	str	r3, [sp, #20]
 8016dcc:	46a0      	mov	r8, r4
 8016dce:	bfa8      	it	ge
 8016dd0:	f04f 0810 	movge.w	r8, #16
 8016dd4:	f7e9 fb96 	bl	8000504 <__aeabi_ui2d>
 8016dd8:	2c09      	cmp	r4, #9
 8016dda:	4682      	mov	sl, r0
 8016ddc:	468b      	mov	fp, r1
 8016dde:	dc13      	bgt.n	8016e08 <_strtod_l+0x3d0>
 8016de0:	9b06      	ldr	r3, [sp, #24]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	f43f ae67 	beq.w	8016ab6 <_strtod_l+0x7e>
 8016de8:	9b06      	ldr	r3, [sp, #24]
 8016dea:	dd7a      	ble.n	8016ee2 <_strtod_l+0x4aa>
 8016dec:	2b16      	cmp	r3, #22
 8016dee:	dc61      	bgt.n	8016eb4 <_strtod_l+0x47c>
 8016df0:	4a75      	ldr	r2, [pc, #468]	; (8016fc8 <_strtod_l+0x590>)
 8016df2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016df6:	e9de 0100 	ldrd	r0, r1, [lr]
 8016dfa:	4652      	mov	r2, sl
 8016dfc:	465b      	mov	r3, fp
 8016dfe:	f7e9 fbfb 	bl	80005f8 <__aeabi_dmul>
 8016e02:	4682      	mov	sl, r0
 8016e04:	468b      	mov	fp, r1
 8016e06:	e656      	b.n	8016ab6 <_strtod_l+0x7e>
 8016e08:	4b6f      	ldr	r3, [pc, #444]	; (8016fc8 <_strtod_l+0x590>)
 8016e0a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016e0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016e12:	f7e9 fbf1 	bl	80005f8 <__aeabi_dmul>
 8016e16:	4606      	mov	r6, r0
 8016e18:	4628      	mov	r0, r5
 8016e1a:	460f      	mov	r7, r1
 8016e1c:	f7e9 fb72 	bl	8000504 <__aeabi_ui2d>
 8016e20:	4602      	mov	r2, r0
 8016e22:	460b      	mov	r3, r1
 8016e24:	4630      	mov	r0, r6
 8016e26:	4639      	mov	r1, r7
 8016e28:	f7e9 fa30 	bl	800028c <__adddf3>
 8016e2c:	2c0f      	cmp	r4, #15
 8016e2e:	4682      	mov	sl, r0
 8016e30:	468b      	mov	fp, r1
 8016e32:	ddd5      	ble.n	8016de0 <_strtod_l+0x3a8>
 8016e34:	9b06      	ldr	r3, [sp, #24]
 8016e36:	eba4 0808 	sub.w	r8, r4, r8
 8016e3a:	4498      	add	r8, r3
 8016e3c:	f1b8 0f00 	cmp.w	r8, #0
 8016e40:	f340 8096 	ble.w	8016f70 <_strtod_l+0x538>
 8016e44:	f018 030f 	ands.w	r3, r8, #15
 8016e48:	d00a      	beq.n	8016e60 <_strtod_l+0x428>
 8016e4a:	495f      	ldr	r1, [pc, #380]	; (8016fc8 <_strtod_l+0x590>)
 8016e4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016e50:	4652      	mov	r2, sl
 8016e52:	465b      	mov	r3, fp
 8016e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e58:	f7e9 fbce 	bl	80005f8 <__aeabi_dmul>
 8016e5c:	4682      	mov	sl, r0
 8016e5e:	468b      	mov	fp, r1
 8016e60:	f038 080f 	bics.w	r8, r8, #15
 8016e64:	d073      	beq.n	8016f4e <_strtod_l+0x516>
 8016e66:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016e6a:	dd47      	ble.n	8016efc <_strtod_l+0x4c4>
 8016e6c:	2400      	movs	r4, #0
 8016e6e:	46a0      	mov	r8, r4
 8016e70:	9407      	str	r4, [sp, #28]
 8016e72:	9405      	str	r4, [sp, #20]
 8016e74:	2322      	movs	r3, #34	; 0x22
 8016e76:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016fd0 <_strtod_l+0x598>
 8016e7a:	f8c9 3000 	str.w	r3, [r9]
 8016e7e:	f04f 0a00 	mov.w	sl, #0
 8016e82:	9b07      	ldr	r3, [sp, #28]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	f43f ae16 	beq.w	8016ab6 <_strtod_l+0x7e>
 8016e8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e8c:	4648      	mov	r0, r9
 8016e8e:	f001 fe2d 	bl	8018aec <_Bfree>
 8016e92:	9905      	ldr	r1, [sp, #20]
 8016e94:	4648      	mov	r0, r9
 8016e96:	f001 fe29 	bl	8018aec <_Bfree>
 8016e9a:	4641      	mov	r1, r8
 8016e9c:	4648      	mov	r0, r9
 8016e9e:	f001 fe25 	bl	8018aec <_Bfree>
 8016ea2:	9907      	ldr	r1, [sp, #28]
 8016ea4:	4648      	mov	r0, r9
 8016ea6:	f001 fe21 	bl	8018aec <_Bfree>
 8016eaa:	4621      	mov	r1, r4
 8016eac:	4648      	mov	r0, r9
 8016eae:	f001 fe1d 	bl	8018aec <_Bfree>
 8016eb2:	e600      	b.n	8016ab6 <_strtod_l+0x7e>
 8016eb4:	9a06      	ldr	r2, [sp, #24]
 8016eb6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016eba:	4293      	cmp	r3, r2
 8016ebc:	dbba      	blt.n	8016e34 <_strtod_l+0x3fc>
 8016ebe:	4d42      	ldr	r5, [pc, #264]	; (8016fc8 <_strtod_l+0x590>)
 8016ec0:	f1c4 040f 	rsb	r4, r4, #15
 8016ec4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016ec8:	4652      	mov	r2, sl
 8016eca:	465b      	mov	r3, fp
 8016ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ed0:	f7e9 fb92 	bl	80005f8 <__aeabi_dmul>
 8016ed4:	9b06      	ldr	r3, [sp, #24]
 8016ed6:	1b1c      	subs	r4, r3, r4
 8016ed8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016edc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ee0:	e78d      	b.n	8016dfe <_strtod_l+0x3c6>
 8016ee2:	f113 0f16 	cmn.w	r3, #22
 8016ee6:	dba5      	blt.n	8016e34 <_strtod_l+0x3fc>
 8016ee8:	4a37      	ldr	r2, [pc, #220]	; (8016fc8 <_strtod_l+0x590>)
 8016eea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016eee:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016ef2:	4650      	mov	r0, sl
 8016ef4:	4659      	mov	r1, fp
 8016ef6:	f7e9 fca9 	bl	800084c <__aeabi_ddiv>
 8016efa:	e782      	b.n	8016e02 <_strtod_l+0x3ca>
 8016efc:	2300      	movs	r3, #0
 8016efe:	4e33      	ldr	r6, [pc, #204]	; (8016fcc <_strtod_l+0x594>)
 8016f00:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016f04:	4650      	mov	r0, sl
 8016f06:	4659      	mov	r1, fp
 8016f08:	461d      	mov	r5, r3
 8016f0a:	f1b8 0f01 	cmp.w	r8, #1
 8016f0e:	dc21      	bgt.n	8016f54 <_strtod_l+0x51c>
 8016f10:	b10b      	cbz	r3, 8016f16 <_strtod_l+0x4de>
 8016f12:	4682      	mov	sl, r0
 8016f14:	468b      	mov	fp, r1
 8016f16:	4b2d      	ldr	r3, [pc, #180]	; (8016fcc <_strtod_l+0x594>)
 8016f18:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016f1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016f20:	4652      	mov	r2, sl
 8016f22:	465b      	mov	r3, fp
 8016f24:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016f28:	f7e9 fb66 	bl	80005f8 <__aeabi_dmul>
 8016f2c:	4b28      	ldr	r3, [pc, #160]	; (8016fd0 <_strtod_l+0x598>)
 8016f2e:	460a      	mov	r2, r1
 8016f30:	400b      	ands	r3, r1
 8016f32:	4928      	ldr	r1, [pc, #160]	; (8016fd4 <_strtod_l+0x59c>)
 8016f34:	428b      	cmp	r3, r1
 8016f36:	4682      	mov	sl, r0
 8016f38:	d898      	bhi.n	8016e6c <_strtod_l+0x434>
 8016f3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016f3e:	428b      	cmp	r3, r1
 8016f40:	bf86      	itte	hi
 8016f42:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016fdc <_strtod_l+0x5a4>
 8016f46:	f04f 3aff 	movhi.w	sl, #4294967295
 8016f4a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016f4e:	2300      	movs	r3, #0
 8016f50:	9304      	str	r3, [sp, #16]
 8016f52:	e077      	b.n	8017044 <_strtod_l+0x60c>
 8016f54:	f018 0f01 	tst.w	r8, #1
 8016f58:	d006      	beq.n	8016f68 <_strtod_l+0x530>
 8016f5a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f62:	f7e9 fb49 	bl	80005f8 <__aeabi_dmul>
 8016f66:	2301      	movs	r3, #1
 8016f68:	3501      	adds	r5, #1
 8016f6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016f6e:	e7cc      	b.n	8016f0a <_strtod_l+0x4d2>
 8016f70:	d0ed      	beq.n	8016f4e <_strtod_l+0x516>
 8016f72:	f1c8 0800 	rsb	r8, r8, #0
 8016f76:	f018 020f 	ands.w	r2, r8, #15
 8016f7a:	d00a      	beq.n	8016f92 <_strtod_l+0x55a>
 8016f7c:	4b12      	ldr	r3, [pc, #72]	; (8016fc8 <_strtod_l+0x590>)
 8016f7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016f82:	4650      	mov	r0, sl
 8016f84:	4659      	mov	r1, fp
 8016f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f8a:	f7e9 fc5f 	bl	800084c <__aeabi_ddiv>
 8016f8e:	4682      	mov	sl, r0
 8016f90:	468b      	mov	fp, r1
 8016f92:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016f96:	d0da      	beq.n	8016f4e <_strtod_l+0x516>
 8016f98:	f1b8 0f1f 	cmp.w	r8, #31
 8016f9c:	dd20      	ble.n	8016fe0 <_strtod_l+0x5a8>
 8016f9e:	2400      	movs	r4, #0
 8016fa0:	46a0      	mov	r8, r4
 8016fa2:	9407      	str	r4, [sp, #28]
 8016fa4:	9405      	str	r4, [sp, #20]
 8016fa6:	2322      	movs	r3, #34	; 0x22
 8016fa8:	f04f 0a00 	mov.w	sl, #0
 8016fac:	f04f 0b00 	mov.w	fp, #0
 8016fb0:	f8c9 3000 	str.w	r3, [r9]
 8016fb4:	e765      	b.n	8016e82 <_strtod_l+0x44a>
 8016fb6:	bf00      	nop
 8016fb8:	0801b285 	.word	0x0801b285
 8016fbc:	0801b313 	.word	0x0801b313
 8016fc0:	0801b28d 	.word	0x0801b28d
 8016fc4:	0801b2d0 	.word	0x0801b2d0
 8016fc8:	0801b350 	.word	0x0801b350
 8016fcc:	0801b328 	.word	0x0801b328
 8016fd0:	7ff00000 	.word	0x7ff00000
 8016fd4:	7ca00000 	.word	0x7ca00000
 8016fd8:	fff80000 	.word	0xfff80000
 8016fdc:	7fefffff 	.word	0x7fefffff
 8016fe0:	f018 0310 	ands.w	r3, r8, #16
 8016fe4:	bf18      	it	ne
 8016fe6:	236a      	movne	r3, #106	; 0x6a
 8016fe8:	4da0      	ldr	r5, [pc, #640]	; (801726c <_strtod_l+0x834>)
 8016fea:	9304      	str	r3, [sp, #16]
 8016fec:	4650      	mov	r0, sl
 8016fee:	4659      	mov	r1, fp
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	f1b8 0f00 	cmp.w	r8, #0
 8016ff6:	f300 810a 	bgt.w	801720e <_strtod_l+0x7d6>
 8016ffa:	b10b      	cbz	r3, 8017000 <_strtod_l+0x5c8>
 8016ffc:	4682      	mov	sl, r0
 8016ffe:	468b      	mov	fp, r1
 8017000:	9b04      	ldr	r3, [sp, #16]
 8017002:	b1bb      	cbz	r3, 8017034 <_strtod_l+0x5fc>
 8017004:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017008:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801700c:	2b00      	cmp	r3, #0
 801700e:	4659      	mov	r1, fp
 8017010:	dd10      	ble.n	8017034 <_strtod_l+0x5fc>
 8017012:	2b1f      	cmp	r3, #31
 8017014:	f340 8107 	ble.w	8017226 <_strtod_l+0x7ee>
 8017018:	2b34      	cmp	r3, #52	; 0x34
 801701a:	bfde      	ittt	le
 801701c:	3b20      	suble	r3, #32
 801701e:	f04f 32ff 	movle.w	r2, #4294967295
 8017022:	fa02 f303 	lslle.w	r3, r2, r3
 8017026:	f04f 0a00 	mov.w	sl, #0
 801702a:	bfcc      	ite	gt
 801702c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017030:	ea03 0b01 	andle.w	fp, r3, r1
 8017034:	2200      	movs	r2, #0
 8017036:	2300      	movs	r3, #0
 8017038:	4650      	mov	r0, sl
 801703a:	4659      	mov	r1, fp
 801703c:	f7e9 fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8017040:	2800      	cmp	r0, #0
 8017042:	d1ac      	bne.n	8016f9e <_strtod_l+0x566>
 8017044:	9b07      	ldr	r3, [sp, #28]
 8017046:	9300      	str	r3, [sp, #0]
 8017048:	9a05      	ldr	r2, [sp, #20]
 801704a:	9908      	ldr	r1, [sp, #32]
 801704c:	4623      	mov	r3, r4
 801704e:	4648      	mov	r0, r9
 8017050:	f001 fd9e 	bl	8018b90 <__s2b>
 8017054:	9007      	str	r0, [sp, #28]
 8017056:	2800      	cmp	r0, #0
 8017058:	f43f af08 	beq.w	8016e6c <_strtod_l+0x434>
 801705c:	9a06      	ldr	r2, [sp, #24]
 801705e:	9b06      	ldr	r3, [sp, #24]
 8017060:	2a00      	cmp	r2, #0
 8017062:	f1c3 0300 	rsb	r3, r3, #0
 8017066:	bfa8      	it	ge
 8017068:	2300      	movge	r3, #0
 801706a:	930e      	str	r3, [sp, #56]	; 0x38
 801706c:	2400      	movs	r4, #0
 801706e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017072:	9316      	str	r3, [sp, #88]	; 0x58
 8017074:	46a0      	mov	r8, r4
 8017076:	9b07      	ldr	r3, [sp, #28]
 8017078:	4648      	mov	r0, r9
 801707a:	6859      	ldr	r1, [r3, #4]
 801707c:	f001 fd02 	bl	8018a84 <_Balloc>
 8017080:	9005      	str	r0, [sp, #20]
 8017082:	2800      	cmp	r0, #0
 8017084:	f43f aef6 	beq.w	8016e74 <_strtod_l+0x43c>
 8017088:	9b07      	ldr	r3, [sp, #28]
 801708a:	691a      	ldr	r2, [r3, #16]
 801708c:	3202      	adds	r2, #2
 801708e:	f103 010c 	add.w	r1, r3, #12
 8017092:	0092      	lsls	r2, r2, #2
 8017094:	300c      	adds	r0, #12
 8017096:	f7fe fd29 	bl	8015aec <memcpy>
 801709a:	aa1e      	add	r2, sp, #120	; 0x78
 801709c:	a91d      	add	r1, sp, #116	; 0x74
 801709e:	ec4b ab10 	vmov	d0, sl, fp
 80170a2:	4648      	mov	r0, r9
 80170a4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80170a8:	f002 f82e 	bl	8019108 <__d2b>
 80170ac:	901c      	str	r0, [sp, #112]	; 0x70
 80170ae:	2800      	cmp	r0, #0
 80170b0:	f43f aee0 	beq.w	8016e74 <_strtod_l+0x43c>
 80170b4:	2101      	movs	r1, #1
 80170b6:	4648      	mov	r0, r9
 80170b8:	f001 fdf6 	bl	8018ca8 <__i2b>
 80170bc:	4680      	mov	r8, r0
 80170be:	2800      	cmp	r0, #0
 80170c0:	f43f aed8 	beq.w	8016e74 <_strtod_l+0x43c>
 80170c4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80170c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80170c8:	2e00      	cmp	r6, #0
 80170ca:	bfab      	itete	ge
 80170cc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80170ce:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80170d0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80170d2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80170d4:	bfac      	ite	ge
 80170d6:	18f7      	addge	r7, r6, r3
 80170d8:	1b9d      	sublt	r5, r3, r6
 80170da:	9b04      	ldr	r3, [sp, #16]
 80170dc:	1af6      	subs	r6, r6, r3
 80170de:	4416      	add	r6, r2
 80170e0:	4b63      	ldr	r3, [pc, #396]	; (8017270 <_strtod_l+0x838>)
 80170e2:	3e01      	subs	r6, #1
 80170e4:	429e      	cmp	r6, r3
 80170e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80170ea:	f280 80af 	bge.w	801724c <_strtod_l+0x814>
 80170ee:	1b9b      	subs	r3, r3, r6
 80170f0:	2b1f      	cmp	r3, #31
 80170f2:	eba2 0203 	sub.w	r2, r2, r3
 80170f6:	f04f 0101 	mov.w	r1, #1
 80170fa:	f300 809b 	bgt.w	8017234 <_strtod_l+0x7fc>
 80170fe:	fa01 f303 	lsl.w	r3, r1, r3
 8017102:	930f      	str	r3, [sp, #60]	; 0x3c
 8017104:	2300      	movs	r3, #0
 8017106:	930a      	str	r3, [sp, #40]	; 0x28
 8017108:	18be      	adds	r6, r7, r2
 801710a:	9b04      	ldr	r3, [sp, #16]
 801710c:	42b7      	cmp	r7, r6
 801710e:	4415      	add	r5, r2
 8017110:	441d      	add	r5, r3
 8017112:	463b      	mov	r3, r7
 8017114:	bfa8      	it	ge
 8017116:	4633      	movge	r3, r6
 8017118:	42ab      	cmp	r3, r5
 801711a:	bfa8      	it	ge
 801711c:	462b      	movge	r3, r5
 801711e:	2b00      	cmp	r3, #0
 8017120:	bfc2      	ittt	gt
 8017122:	1af6      	subgt	r6, r6, r3
 8017124:	1aed      	subgt	r5, r5, r3
 8017126:	1aff      	subgt	r7, r7, r3
 8017128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801712a:	b1bb      	cbz	r3, 801715c <_strtod_l+0x724>
 801712c:	4641      	mov	r1, r8
 801712e:	461a      	mov	r2, r3
 8017130:	4648      	mov	r0, r9
 8017132:	f001 fe59 	bl	8018de8 <__pow5mult>
 8017136:	4680      	mov	r8, r0
 8017138:	2800      	cmp	r0, #0
 801713a:	f43f ae9b 	beq.w	8016e74 <_strtod_l+0x43c>
 801713e:	4601      	mov	r1, r0
 8017140:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017142:	4648      	mov	r0, r9
 8017144:	f001 fdb9 	bl	8018cba <__multiply>
 8017148:	900c      	str	r0, [sp, #48]	; 0x30
 801714a:	2800      	cmp	r0, #0
 801714c:	f43f ae92 	beq.w	8016e74 <_strtod_l+0x43c>
 8017150:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017152:	4648      	mov	r0, r9
 8017154:	f001 fcca 	bl	8018aec <_Bfree>
 8017158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801715a:	931c      	str	r3, [sp, #112]	; 0x70
 801715c:	2e00      	cmp	r6, #0
 801715e:	dc7a      	bgt.n	8017256 <_strtod_l+0x81e>
 8017160:	9b06      	ldr	r3, [sp, #24]
 8017162:	2b00      	cmp	r3, #0
 8017164:	dd08      	ble.n	8017178 <_strtod_l+0x740>
 8017166:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017168:	9905      	ldr	r1, [sp, #20]
 801716a:	4648      	mov	r0, r9
 801716c:	f001 fe3c 	bl	8018de8 <__pow5mult>
 8017170:	9005      	str	r0, [sp, #20]
 8017172:	2800      	cmp	r0, #0
 8017174:	f43f ae7e 	beq.w	8016e74 <_strtod_l+0x43c>
 8017178:	2d00      	cmp	r5, #0
 801717a:	dd08      	ble.n	801718e <_strtod_l+0x756>
 801717c:	462a      	mov	r2, r5
 801717e:	9905      	ldr	r1, [sp, #20]
 8017180:	4648      	mov	r0, r9
 8017182:	f001 fe7f 	bl	8018e84 <__lshift>
 8017186:	9005      	str	r0, [sp, #20]
 8017188:	2800      	cmp	r0, #0
 801718a:	f43f ae73 	beq.w	8016e74 <_strtod_l+0x43c>
 801718e:	2f00      	cmp	r7, #0
 8017190:	dd08      	ble.n	80171a4 <_strtod_l+0x76c>
 8017192:	4641      	mov	r1, r8
 8017194:	463a      	mov	r2, r7
 8017196:	4648      	mov	r0, r9
 8017198:	f001 fe74 	bl	8018e84 <__lshift>
 801719c:	4680      	mov	r8, r0
 801719e:	2800      	cmp	r0, #0
 80171a0:	f43f ae68 	beq.w	8016e74 <_strtod_l+0x43c>
 80171a4:	9a05      	ldr	r2, [sp, #20]
 80171a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80171a8:	4648      	mov	r0, r9
 80171aa:	f001 fed9 	bl	8018f60 <__mdiff>
 80171ae:	4604      	mov	r4, r0
 80171b0:	2800      	cmp	r0, #0
 80171b2:	f43f ae5f 	beq.w	8016e74 <_strtod_l+0x43c>
 80171b6:	68c3      	ldr	r3, [r0, #12]
 80171b8:	930c      	str	r3, [sp, #48]	; 0x30
 80171ba:	2300      	movs	r3, #0
 80171bc:	60c3      	str	r3, [r0, #12]
 80171be:	4641      	mov	r1, r8
 80171c0:	f001 feb4 	bl	8018f2c <__mcmp>
 80171c4:	2800      	cmp	r0, #0
 80171c6:	da55      	bge.n	8017274 <_strtod_l+0x83c>
 80171c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171ca:	b9e3      	cbnz	r3, 8017206 <_strtod_l+0x7ce>
 80171cc:	f1ba 0f00 	cmp.w	sl, #0
 80171d0:	d119      	bne.n	8017206 <_strtod_l+0x7ce>
 80171d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171d6:	b9b3      	cbnz	r3, 8017206 <_strtod_l+0x7ce>
 80171d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80171dc:	0d1b      	lsrs	r3, r3, #20
 80171de:	051b      	lsls	r3, r3, #20
 80171e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80171e4:	d90f      	bls.n	8017206 <_strtod_l+0x7ce>
 80171e6:	6963      	ldr	r3, [r4, #20]
 80171e8:	b913      	cbnz	r3, 80171f0 <_strtod_l+0x7b8>
 80171ea:	6923      	ldr	r3, [r4, #16]
 80171ec:	2b01      	cmp	r3, #1
 80171ee:	dd0a      	ble.n	8017206 <_strtod_l+0x7ce>
 80171f0:	4621      	mov	r1, r4
 80171f2:	2201      	movs	r2, #1
 80171f4:	4648      	mov	r0, r9
 80171f6:	f001 fe45 	bl	8018e84 <__lshift>
 80171fa:	4641      	mov	r1, r8
 80171fc:	4604      	mov	r4, r0
 80171fe:	f001 fe95 	bl	8018f2c <__mcmp>
 8017202:	2800      	cmp	r0, #0
 8017204:	dc67      	bgt.n	80172d6 <_strtod_l+0x89e>
 8017206:	9b04      	ldr	r3, [sp, #16]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d171      	bne.n	80172f0 <_strtod_l+0x8b8>
 801720c:	e63d      	b.n	8016e8a <_strtod_l+0x452>
 801720e:	f018 0f01 	tst.w	r8, #1
 8017212:	d004      	beq.n	801721e <_strtod_l+0x7e6>
 8017214:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017218:	f7e9 f9ee 	bl	80005f8 <__aeabi_dmul>
 801721c:	2301      	movs	r3, #1
 801721e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017222:	3508      	adds	r5, #8
 8017224:	e6e5      	b.n	8016ff2 <_strtod_l+0x5ba>
 8017226:	f04f 32ff 	mov.w	r2, #4294967295
 801722a:	fa02 f303 	lsl.w	r3, r2, r3
 801722e:	ea03 0a0a 	and.w	sl, r3, sl
 8017232:	e6ff      	b.n	8017034 <_strtod_l+0x5fc>
 8017234:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017238:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801723c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017240:	36e2      	adds	r6, #226	; 0xe2
 8017242:	fa01 f306 	lsl.w	r3, r1, r6
 8017246:	930a      	str	r3, [sp, #40]	; 0x28
 8017248:	910f      	str	r1, [sp, #60]	; 0x3c
 801724a:	e75d      	b.n	8017108 <_strtod_l+0x6d0>
 801724c:	2300      	movs	r3, #0
 801724e:	930a      	str	r3, [sp, #40]	; 0x28
 8017250:	2301      	movs	r3, #1
 8017252:	930f      	str	r3, [sp, #60]	; 0x3c
 8017254:	e758      	b.n	8017108 <_strtod_l+0x6d0>
 8017256:	4632      	mov	r2, r6
 8017258:	991c      	ldr	r1, [sp, #112]	; 0x70
 801725a:	4648      	mov	r0, r9
 801725c:	f001 fe12 	bl	8018e84 <__lshift>
 8017260:	901c      	str	r0, [sp, #112]	; 0x70
 8017262:	2800      	cmp	r0, #0
 8017264:	f47f af7c 	bne.w	8017160 <_strtod_l+0x728>
 8017268:	e604      	b.n	8016e74 <_strtod_l+0x43c>
 801726a:	bf00      	nop
 801726c:	0801b2e8 	.word	0x0801b2e8
 8017270:	fffffc02 	.word	0xfffffc02
 8017274:	465d      	mov	r5, fp
 8017276:	f040 8086 	bne.w	8017386 <_strtod_l+0x94e>
 801727a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801727c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017280:	b32a      	cbz	r2, 80172ce <_strtod_l+0x896>
 8017282:	4aaf      	ldr	r2, [pc, #700]	; (8017540 <_strtod_l+0xb08>)
 8017284:	4293      	cmp	r3, r2
 8017286:	d153      	bne.n	8017330 <_strtod_l+0x8f8>
 8017288:	9b04      	ldr	r3, [sp, #16]
 801728a:	4650      	mov	r0, sl
 801728c:	b1d3      	cbz	r3, 80172c4 <_strtod_l+0x88c>
 801728e:	4aad      	ldr	r2, [pc, #692]	; (8017544 <_strtod_l+0xb0c>)
 8017290:	402a      	ands	r2, r5
 8017292:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017296:	f04f 31ff 	mov.w	r1, #4294967295
 801729a:	d816      	bhi.n	80172ca <_strtod_l+0x892>
 801729c:	0d12      	lsrs	r2, r2, #20
 801729e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80172a2:	fa01 f303 	lsl.w	r3, r1, r3
 80172a6:	4298      	cmp	r0, r3
 80172a8:	d142      	bne.n	8017330 <_strtod_l+0x8f8>
 80172aa:	4ba7      	ldr	r3, [pc, #668]	; (8017548 <_strtod_l+0xb10>)
 80172ac:	429d      	cmp	r5, r3
 80172ae:	d102      	bne.n	80172b6 <_strtod_l+0x87e>
 80172b0:	3001      	adds	r0, #1
 80172b2:	f43f addf 	beq.w	8016e74 <_strtod_l+0x43c>
 80172b6:	4ba3      	ldr	r3, [pc, #652]	; (8017544 <_strtod_l+0xb0c>)
 80172b8:	402b      	ands	r3, r5
 80172ba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80172be:	f04f 0a00 	mov.w	sl, #0
 80172c2:	e7a0      	b.n	8017206 <_strtod_l+0x7ce>
 80172c4:	f04f 33ff 	mov.w	r3, #4294967295
 80172c8:	e7ed      	b.n	80172a6 <_strtod_l+0x86e>
 80172ca:	460b      	mov	r3, r1
 80172cc:	e7eb      	b.n	80172a6 <_strtod_l+0x86e>
 80172ce:	bb7b      	cbnz	r3, 8017330 <_strtod_l+0x8f8>
 80172d0:	f1ba 0f00 	cmp.w	sl, #0
 80172d4:	d12c      	bne.n	8017330 <_strtod_l+0x8f8>
 80172d6:	9904      	ldr	r1, [sp, #16]
 80172d8:	4a9a      	ldr	r2, [pc, #616]	; (8017544 <_strtod_l+0xb0c>)
 80172da:	465b      	mov	r3, fp
 80172dc:	b1f1      	cbz	r1, 801731c <_strtod_l+0x8e4>
 80172de:	ea02 010b 	and.w	r1, r2, fp
 80172e2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80172e6:	dc19      	bgt.n	801731c <_strtod_l+0x8e4>
 80172e8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80172ec:	f77f ae5b 	ble.w	8016fa6 <_strtod_l+0x56e>
 80172f0:	4a96      	ldr	r2, [pc, #600]	; (801754c <_strtod_l+0xb14>)
 80172f2:	2300      	movs	r3, #0
 80172f4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80172f8:	4650      	mov	r0, sl
 80172fa:	4659      	mov	r1, fp
 80172fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017300:	f7e9 f97a 	bl	80005f8 <__aeabi_dmul>
 8017304:	4682      	mov	sl, r0
 8017306:	468b      	mov	fp, r1
 8017308:	2900      	cmp	r1, #0
 801730a:	f47f adbe 	bne.w	8016e8a <_strtod_l+0x452>
 801730e:	2800      	cmp	r0, #0
 8017310:	f47f adbb 	bne.w	8016e8a <_strtod_l+0x452>
 8017314:	2322      	movs	r3, #34	; 0x22
 8017316:	f8c9 3000 	str.w	r3, [r9]
 801731a:	e5b6      	b.n	8016e8a <_strtod_l+0x452>
 801731c:	4013      	ands	r3, r2
 801731e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017322:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017326:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801732a:	f04f 3aff 	mov.w	sl, #4294967295
 801732e:	e76a      	b.n	8017206 <_strtod_l+0x7ce>
 8017330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017332:	b193      	cbz	r3, 801735a <_strtod_l+0x922>
 8017334:	422b      	tst	r3, r5
 8017336:	f43f af66 	beq.w	8017206 <_strtod_l+0x7ce>
 801733a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801733c:	9a04      	ldr	r2, [sp, #16]
 801733e:	4650      	mov	r0, sl
 8017340:	4659      	mov	r1, fp
 8017342:	b173      	cbz	r3, 8017362 <_strtod_l+0x92a>
 8017344:	f7ff fb5c 	bl	8016a00 <sulp>
 8017348:	4602      	mov	r2, r0
 801734a:	460b      	mov	r3, r1
 801734c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017350:	f7e8 ff9c 	bl	800028c <__adddf3>
 8017354:	4682      	mov	sl, r0
 8017356:	468b      	mov	fp, r1
 8017358:	e755      	b.n	8017206 <_strtod_l+0x7ce>
 801735a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801735c:	ea13 0f0a 	tst.w	r3, sl
 8017360:	e7e9      	b.n	8017336 <_strtod_l+0x8fe>
 8017362:	f7ff fb4d 	bl	8016a00 <sulp>
 8017366:	4602      	mov	r2, r0
 8017368:	460b      	mov	r3, r1
 801736a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801736e:	f7e8 ff8b 	bl	8000288 <__aeabi_dsub>
 8017372:	2200      	movs	r2, #0
 8017374:	2300      	movs	r3, #0
 8017376:	4682      	mov	sl, r0
 8017378:	468b      	mov	fp, r1
 801737a:	f7e9 fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 801737e:	2800      	cmp	r0, #0
 8017380:	f47f ae11 	bne.w	8016fa6 <_strtod_l+0x56e>
 8017384:	e73f      	b.n	8017206 <_strtod_l+0x7ce>
 8017386:	4641      	mov	r1, r8
 8017388:	4620      	mov	r0, r4
 801738a:	f001 ff0c 	bl	80191a6 <__ratio>
 801738e:	ec57 6b10 	vmov	r6, r7, d0
 8017392:	2200      	movs	r2, #0
 8017394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017398:	ee10 0a10 	vmov	r0, s0
 801739c:	4639      	mov	r1, r7
 801739e:	f7e9 fba7 	bl	8000af0 <__aeabi_dcmple>
 80173a2:	2800      	cmp	r0, #0
 80173a4:	d077      	beq.n	8017496 <_strtod_l+0xa5e>
 80173a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d04a      	beq.n	8017442 <_strtod_l+0xa0a>
 80173ac:	4b68      	ldr	r3, [pc, #416]	; (8017550 <_strtod_l+0xb18>)
 80173ae:	2200      	movs	r2, #0
 80173b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80173b4:	4f66      	ldr	r7, [pc, #408]	; (8017550 <_strtod_l+0xb18>)
 80173b6:	2600      	movs	r6, #0
 80173b8:	4b62      	ldr	r3, [pc, #392]	; (8017544 <_strtod_l+0xb0c>)
 80173ba:	402b      	ands	r3, r5
 80173bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80173be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80173c0:	4b64      	ldr	r3, [pc, #400]	; (8017554 <_strtod_l+0xb1c>)
 80173c2:	429a      	cmp	r2, r3
 80173c4:	f040 80ce 	bne.w	8017564 <_strtod_l+0xb2c>
 80173c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80173cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80173d0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80173d4:	ec4b ab10 	vmov	d0, sl, fp
 80173d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80173dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80173e0:	f001 fe1c 	bl	801901c <__ulp>
 80173e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80173e8:	ec53 2b10 	vmov	r2, r3, d0
 80173ec:	f7e9 f904 	bl	80005f8 <__aeabi_dmul>
 80173f0:	4652      	mov	r2, sl
 80173f2:	465b      	mov	r3, fp
 80173f4:	f7e8 ff4a 	bl	800028c <__adddf3>
 80173f8:	460b      	mov	r3, r1
 80173fa:	4952      	ldr	r1, [pc, #328]	; (8017544 <_strtod_l+0xb0c>)
 80173fc:	4a56      	ldr	r2, [pc, #344]	; (8017558 <_strtod_l+0xb20>)
 80173fe:	4019      	ands	r1, r3
 8017400:	4291      	cmp	r1, r2
 8017402:	4682      	mov	sl, r0
 8017404:	d95b      	bls.n	80174be <_strtod_l+0xa86>
 8017406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017408:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801740c:	4293      	cmp	r3, r2
 801740e:	d103      	bne.n	8017418 <_strtod_l+0x9e0>
 8017410:	9b08      	ldr	r3, [sp, #32]
 8017412:	3301      	adds	r3, #1
 8017414:	f43f ad2e 	beq.w	8016e74 <_strtod_l+0x43c>
 8017418:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017548 <_strtod_l+0xb10>
 801741c:	f04f 3aff 	mov.w	sl, #4294967295
 8017420:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017422:	4648      	mov	r0, r9
 8017424:	f001 fb62 	bl	8018aec <_Bfree>
 8017428:	9905      	ldr	r1, [sp, #20]
 801742a:	4648      	mov	r0, r9
 801742c:	f001 fb5e 	bl	8018aec <_Bfree>
 8017430:	4641      	mov	r1, r8
 8017432:	4648      	mov	r0, r9
 8017434:	f001 fb5a 	bl	8018aec <_Bfree>
 8017438:	4621      	mov	r1, r4
 801743a:	4648      	mov	r0, r9
 801743c:	f001 fb56 	bl	8018aec <_Bfree>
 8017440:	e619      	b.n	8017076 <_strtod_l+0x63e>
 8017442:	f1ba 0f00 	cmp.w	sl, #0
 8017446:	d11a      	bne.n	801747e <_strtod_l+0xa46>
 8017448:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801744c:	b9eb      	cbnz	r3, 801748a <_strtod_l+0xa52>
 801744e:	2200      	movs	r2, #0
 8017450:	4b3f      	ldr	r3, [pc, #252]	; (8017550 <_strtod_l+0xb18>)
 8017452:	4630      	mov	r0, r6
 8017454:	4639      	mov	r1, r7
 8017456:	f7e9 fb41 	bl	8000adc <__aeabi_dcmplt>
 801745a:	b9c8      	cbnz	r0, 8017490 <_strtod_l+0xa58>
 801745c:	4630      	mov	r0, r6
 801745e:	4639      	mov	r1, r7
 8017460:	2200      	movs	r2, #0
 8017462:	4b3e      	ldr	r3, [pc, #248]	; (801755c <_strtod_l+0xb24>)
 8017464:	f7e9 f8c8 	bl	80005f8 <__aeabi_dmul>
 8017468:	4606      	mov	r6, r0
 801746a:	460f      	mov	r7, r1
 801746c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017470:	9618      	str	r6, [sp, #96]	; 0x60
 8017472:	9319      	str	r3, [sp, #100]	; 0x64
 8017474:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017478:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801747c:	e79c      	b.n	80173b8 <_strtod_l+0x980>
 801747e:	f1ba 0f01 	cmp.w	sl, #1
 8017482:	d102      	bne.n	801748a <_strtod_l+0xa52>
 8017484:	2d00      	cmp	r5, #0
 8017486:	f43f ad8e 	beq.w	8016fa6 <_strtod_l+0x56e>
 801748a:	2200      	movs	r2, #0
 801748c:	4b34      	ldr	r3, [pc, #208]	; (8017560 <_strtod_l+0xb28>)
 801748e:	e78f      	b.n	80173b0 <_strtod_l+0x978>
 8017490:	2600      	movs	r6, #0
 8017492:	4f32      	ldr	r7, [pc, #200]	; (801755c <_strtod_l+0xb24>)
 8017494:	e7ea      	b.n	801746c <_strtod_l+0xa34>
 8017496:	4b31      	ldr	r3, [pc, #196]	; (801755c <_strtod_l+0xb24>)
 8017498:	4630      	mov	r0, r6
 801749a:	4639      	mov	r1, r7
 801749c:	2200      	movs	r2, #0
 801749e:	f7e9 f8ab 	bl	80005f8 <__aeabi_dmul>
 80174a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174a4:	4606      	mov	r6, r0
 80174a6:	460f      	mov	r7, r1
 80174a8:	b933      	cbnz	r3, 80174b8 <_strtod_l+0xa80>
 80174aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80174ae:	9010      	str	r0, [sp, #64]	; 0x40
 80174b0:	9311      	str	r3, [sp, #68]	; 0x44
 80174b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80174b6:	e7df      	b.n	8017478 <_strtod_l+0xa40>
 80174b8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80174bc:	e7f9      	b.n	80174b2 <_strtod_l+0xa7a>
 80174be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80174c2:	9b04      	ldr	r3, [sp, #16]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d1ab      	bne.n	8017420 <_strtod_l+0x9e8>
 80174c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80174cc:	0d1b      	lsrs	r3, r3, #20
 80174ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80174d0:	051b      	lsls	r3, r3, #20
 80174d2:	429a      	cmp	r2, r3
 80174d4:	465d      	mov	r5, fp
 80174d6:	d1a3      	bne.n	8017420 <_strtod_l+0x9e8>
 80174d8:	4639      	mov	r1, r7
 80174da:	4630      	mov	r0, r6
 80174dc:	f7e9 fb3c 	bl	8000b58 <__aeabi_d2iz>
 80174e0:	f7e9 f820 	bl	8000524 <__aeabi_i2d>
 80174e4:	460b      	mov	r3, r1
 80174e6:	4602      	mov	r2, r0
 80174e8:	4639      	mov	r1, r7
 80174ea:	4630      	mov	r0, r6
 80174ec:	f7e8 fecc 	bl	8000288 <__aeabi_dsub>
 80174f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174f2:	4606      	mov	r6, r0
 80174f4:	460f      	mov	r7, r1
 80174f6:	b933      	cbnz	r3, 8017506 <_strtod_l+0xace>
 80174f8:	f1ba 0f00 	cmp.w	sl, #0
 80174fc:	d103      	bne.n	8017506 <_strtod_l+0xace>
 80174fe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017502:	2d00      	cmp	r5, #0
 8017504:	d06d      	beq.n	80175e2 <_strtod_l+0xbaa>
 8017506:	a30a      	add	r3, pc, #40	; (adr r3, 8017530 <_strtod_l+0xaf8>)
 8017508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801750c:	4630      	mov	r0, r6
 801750e:	4639      	mov	r1, r7
 8017510:	f7e9 fae4 	bl	8000adc <__aeabi_dcmplt>
 8017514:	2800      	cmp	r0, #0
 8017516:	f47f acb8 	bne.w	8016e8a <_strtod_l+0x452>
 801751a:	a307      	add	r3, pc, #28	; (adr r3, 8017538 <_strtod_l+0xb00>)
 801751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017520:	4630      	mov	r0, r6
 8017522:	4639      	mov	r1, r7
 8017524:	f7e9 faf8 	bl	8000b18 <__aeabi_dcmpgt>
 8017528:	2800      	cmp	r0, #0
 801752a:	f43f af79 	beq.w	8017420 <_strtod_l+0x9e8>
 801752e:	e4ac      	b.n	8016e8a <_strtod_l+0x452>
 8017530:	94a03595 	.word	0x94a03595
 8017534:	3fdfffff 	.word	0x3fdfffff
 8017538:	35afe535 	.word	0x35afe535
 801753c:	3fe00000 	.word	0x3fe00000
 8017540:	000fffff 	.word	0x000fffff
 8017544:	7ff00000 	.word	0x7ff00000
 8017548:	7fefffff 	.word	0x7fefffff
 801754c:	39500000 	.word	0x39500000
 8017550:	3ff00000 	.word	0x3ff00000
 8017554:	7fe00000 	.word	0x7fe00000
 8017558:	7c9fffff 	.word	0x7c9fffff
 801755c:	3fe00000 	.word	0x3fe00000
 8017560:	bff00000 	.word	0xbff00000
 8017564:	9b04      	ldr	r3, [sp, #16]
 8017566:	b333      	cbz	r3, 80175b6 <_strtod_l+0xb7e>
 8017568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801756a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801756e:	d822      	bhi.n	80175b6 <_strtod_l+0xb7e>
 8017570:	a327      	add	r3, pc, #156	; (adr r3, 8017610 <_strtod_l+0xbd8>)
 8017572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017576:	4630      	mov	r0, r6
 8017578:	4639      	mov	r1, r7
 801757a:	f7e9 fab9 	bl	8000af0 <__aeabi_dcmple>
 801757e:	b1a0      	cbz	r0, 80175aa <_strtod_l+0xb72>
 8017580:	4639      	mov	r1, r7
 8017582:	4630      	mov	r0, r6
 8017584:	f7e9 fb10 	bl	8000ba8 <__aeabi_d2uiz>
 8017588:	2800      	cmp	r0, #0
 801758a:	bf08      	it	eq
 801758c:	2001      	moveq	r0, #1
 801758e:	f7e8 ffb9 	bl	8000504 <__aeabi_ui2d>
 8017592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017594:	4606      	mov	r6, r0
 8017596:	460f      	mov	r7, r1
 8017598:	bb03      	cbnz	r3, 80175dc <_strtod_l+0xba4>
 801759a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801759e:	9012      	str	r0, [sp, #72]	; 0x48
 80175a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80175a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80175a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80175aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80175ae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80175b2:	1a9b      	subs	r3, r3, r2
 80175b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80175b6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80175ba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80175be:	f001 fd2d 	bl	801901c <__ulp>
 80175c2:	4650      	mov	r0, sl
 80175c4:	ec53 2b10 	vmov	r2, r3, d0
 80175c8:	4659      	mov	r1, fp
 80175ca:	f7e9 f815 	bl	80005f8 <__aeabi_dmul>
 80175ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80175d2:	f7e8 fe5b 	bl	800028c <__adddf3>
 80175d6:	4682      	mov	sl, r0
 80175d8:	468b      	mov	fp, r1
 80175da:	e772      	b.n	80174c2 <_strtod_l+0xa8a>
 80175dc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80175e0:	e7df      	b.n	80175a2 <_strtod_l+0xb6a>
 80175e2:	a30d      	add	r3, pc, #52	; (adr r3, 8017618 <_strtod_l+0xbe0>)
 80175e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e8:	f7e9 fa78 	bl	8000adc <__aeabi_dcmplt>
 80175ec:	e79c      	b.n	8017528 <_strtod_l+0xaf0>
 80175ee:	2300      	movs	r3, #0
 80175f0:	930d      	str	r3, [sp, #52]	; 0x34
 80175f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80175f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80175f6:	6013      	str	r3, [r2, #0]
 80175f8:	f7ff ba61 	b.w	8016abe <_strtod_l+0x86>
 80175fc:	2b65      	cmp	r3, #101	; 0x65
 80175fe:	f04f 0200 	mov.w	r2, #0
 8017602:	f43f ab4e 	beq.w	8016ca2 <_strtod_l+0x26a>
 8017606:	2101      	movs	r1, #1
 8017608:	4614      	mov	r4, r2
 801760a:	9104      	str	r1, [sp, #16]
 801760c:	f7ff bacb 	b.w	8016ba6 <_strtod_l+0x16e>
 8017610:	ffc00000 	.word	0xffc00000
 8017614:	41dfffff 	.word	0x41dfffff
 8017618:	94a03595 	.word	0x94a03595
 801761c:	3fcfffff 	.word	0x3fcfffff

08017620 <_strtod_r>:
 8017620:	4b05      	ldr	r3, [pc, #20]	; (8017638 <_strtod_r+0x18>)
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	b410      	push	{r4}
 8017626:	6a1b      	ldr	r3, [r3, #32]
 8017628:	4c04      	ldr	r4, [pc, #16]	; (801763c <_strtod_r+0x1c>)
 801762a:	2b00      	cmp	r3, #0
 801762c:	bf08      	it	eq
 801762e:	4623      	moveq	r3, r4
 8017630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017634:	f7ff ba00 	b.w	8016a38 <_strtod_l>
 8017638:	200009a8 	.word	0x200009a8
 801763c:	20000a0c 	.word	0x20000a0c

08017640 <_strtol_l.isra.0>:
 8017640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017644:	4680      	mov	r8, r0
 8017646:	4689      	mov	r9, r1
 8017648:	4692      	mov	sl, r2
 801764a:	461e      	mov	r6, r3
 801764c:	460f      	mov	r7, r1
 801764e:	463d      	mov	r5, r7
 8017650:	9808      	ldr	r0, [sp, #32]
 8017652:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017656:	f001 f9ed 	bl	8018a34 <__locale_ctype_ptr_l>
 801765a:	4420      	add	r0, r4
 801765c:	7843      	ldrb	r3, [r0, #1]
 801765e:	f013 0308 	ands.w	r3, r3, #8
 8017662:	d132      	bne.n	80176ca <_strtol_l.isra.0+0x8a>
 8017664:	2c2d      	cmp	r4, #45	; 0x2d
 8017666:	d132      	bne.n	80176ce <_strtol_l.isra.0+0x8e>
 8017668:	787c      	ldrb	r4, [r7, #1]
 801766a:	1cbd      	adds	r5, r7, #2
 801766c:	2201      	movs	r2, #1
 801766e:	2e00      	cmp	r6, #0
 8017670:	d05d      	beq.n	801772e <_strtol_l.isra.0+0xee>
 8017672:	2e10      	cmp	r6, #16
 8017674:	d109      	bne.n	801768a <_strtol_l.isra.0+0x4a>
 8017676:	2c30      	cmp	r4, #48	; 0x30
 8017678:	d107      	bne.n	801768a <_strtol_l.isra.0+0x4a>
 801767a:	782b      	ldrb	r3, [r5, #0]
 801767c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017680:	2b58      	cmp	r3, #88	; 0x58
 8017682:	d14f      	bne.n	8017724 <_strtol_l.isra.0+0xe4>
 8017684:	786c      	ldrb	r4, [r5, #1]
 8017686:	2610      	movs	r6, #16
 8017688:	3502      	adds	r5, #2
 801768a:	2a00      	cmp	r2, #0
 801768c:	bf14      	ite	ne
 801768e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017692:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017696:	2700      	movs	r7, #0
 8017698:	fbb1 fcf6 	udiv	ip, r1, r6
 801769c:	4638      	mov	r0, r7
 801769e:	fb06 1e1c 	mls	lr, r6, ip, r1
 80176a2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80176a6:	2b09      	cmp	r3, #9
 80176a8:	d817      	bhi.n	80176da <_strtol_l.isra.0+0x9a>
 80176aa:	461c      	mov	r4, r3
 80176ac:	42a6      	cmp	r6, r4
 80176ae:	dd23      	ble.n	80176f8 <_strtol_l.isra.0+0xb8>
 80176b0:	1c7b      	adds	r3, r7, #1
 80176b2:	d007      	beq.n	80176c4 <_strtol_l.isra.0+0x84>
 80176b4:	4584      	cmp	ip, r0
 80176b6:	d31c      	bcc.n	80176f2 <_strtol_l.isra.0+0xb2>
 80176b8:	d101      	bne.n	80176be <_strtol_l.isra.0+0x7e>
 80176ba:	45a6      	cmp	lr, r4
 80176bc:	db19      	blt.n	80176f2 <_strtol_l.isra.0+0xb2>
 80176be:	fb00 4006 	mla	r0, r0, r6, r4
 80176c2:	2701      	movs	r7, #1
 80176c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176c8:	e7eb      	b.n	80176a2 <_strtol_l.isra.0+0x62>
 80176ca:	462f      	mov	r7, r5
 80176cc:	e7bf      	b.n	801764e <_strtol_l.isra.0+0xe>
 80176ce:	2c2b      	cmp	r4, #43	; 0x2b
 80176d0:	bf04      	itt	eq
 80176d2:	1cbd      	addeq	r5, r7, #2
 80176d4:	787c      	ldrbeq	r4, [r7, #1]
 80176d6:	461a      	mov	r2, r3
 80176d8:	e7c9      	b.n	801766e <_strtol_l.isra.0+0x2e>
 80176da:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80176de:	2b19      	cmp	r3, #25
 80176e0:	d801      	bhi.n	80176e6 <_strtol_l.isra.0+0xa6>
 80176e2:	3c37      	subs	r4, #55	; 0x37
 80176e4:	e7e2      	b.n	80176ac <_strtol_l.isra.0+0x6c>
 80176e6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80176ea:	2b19      	cmp	r3, #25
 80176ec:	d804      	bhi.n	80176f8 <_strtol_l.isra.0+0xb8>
 80176ee:	3c57      	subs	r4, #87	; 0x57
 80176f0:	e7dc      	b.n	80176ac <_strtol_l.isra.0+0x6c>
 80176f2:	f04f 37ff 	mov.w	r7, #4294967295
 80176f6:	e7e5      	b.n	80176c4 <_strtol_l.isra.0+0x84>
 80176f8:	1c7b      	adds	r3, r7, #1
 80176fa:	d108      	bne.n	801770e <_strtol_l.isra.0+0xce>
 80176fc:	2322      	movs	r3, #34	; 0x22
 80176fe:	f8c8 3000 	str.w	r3, [r8]
 8017702:	4608      	mov	r0, r1
 8017704:	f1ba 0f00 	cmp.w	sl, #0
 8017708:	d107      	bne.n	801771a <_strtol_l.isra.0+0xda>
 801770a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801770e:	b102      	cbz	r2, 8017712 <_strtol_l.isra.0+0xd2>
 8017710:	4240      	negs	r0, r0
 8017712:	f1ba 0f00 	cmp.w	sl, #0
 8017716:	d0f8      	beq.n	801770a <_strtol_l.isra.0+0xca>
 8017718:	b10f      	cbz	r7, 801771e <_strtol_l.isra.0+0xde>
 801771a:	f105 39ff 	add.w	r9, r5, #4294967295
 801771e:	f8ca 9000 	str.w	r9, [sl]
 8017722:	e7f2      	b.n	801770a <_strtol_l.isra.0+0xca>
 8017724:	2430      	movs	r4, #48	; 0x30
 8017726:	2e00      	cmp	r6, #0
 8017728:	d1af      	bne.n	801768a <_strtol_l.isra.0+0x4a>
 801772a:	2608      	movs	r6, #8
 801772c:	e7ad      	b.n	801768a <_strtol_l.isra.0+0x4a>
 801772e:	2c30      	cmp	r4, #48	; 0x30
 8017730:	d0a3      	beq.n	801767a <_strtol_l.isra.0+0x3a>
 8017732:	260a      	movs	r6, #10
 8017734:	e7a9      	b.n	801768a <_strtol_l.isra.0+0x4a>
	...

08017738 <_strtol_r>:
 8017738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801773a:	4c06      	ldr	r4, [pc, #24]	; (8017754 <_strtol_r+0x1c>)
 801773c:	4d06      	ldr	r5, [pc, #24]	; (8017758 <_strtol_r+0x20>)
 801773e:	6824      	ldr	r4, [r4, #0]
 8017740:	6a24      	ldr	r4, [r4, #32]
 8017742:	2c00      	cmp	r4, #0
 8017744:	bf08      	it	eq
 8017746:	462c      	moveq	r4, r5
 8017748:	9400      	str	r4, [sp, #0]
 801774a:	f7ff ff79 	bl	8017640 <_strtol_l.isra.0>
 801774e:	b003      	add	sp, #12
 8017750:	bd30      	pop	{r4, r5, pc}
 8017752:	bf00      	nop
 8017754:	200009a8 	.word	0x200009a8
 8017758:	20000a0c 	.word	0x20000a0c

0801775c <quorem>:
 801775c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017760:	6903      	ldr	r3, [r0, #16]
 8017762:	690c      	ldr	r4, [r1, #16]
 8017764:	42a3      	cmp	r3, r4
 8017766:	4680      	mov	r8, r0
 8017768:	f2c0 8082 	blt.w	8017870 <quorem+0x114>
 801776c:	3c01      	subs	r4, #1
 801776e:	f101 0714 	add.w	r7, r1, #20
 8017772:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017776:	f100 0614 	add.w	r6, r0, #20
 801777a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801777e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017782:	eb06 030c 	add.w	r3, r6, ip
 8017786:	3501      	adds	r5, #1
 8017788:	eb07 090c 	add.w	r9, r7, ip
 801778c:	9301      	str	r3, [sp, #4]
 801778e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017792:	b395      	cbz	r5, 80177fa <quorem+0x9e>
 8017794:	f04f 0a00 	mov.w	sl, #0
 8017798:	4638      	mov	r0, r7
 801779a:	46b6      	mov	lr, r6
 801779c:	46d3      	mov	fp, sl
 801779e:	f850 2b04 	ldr.w	r2, [r0], #4
 80177a2:	b293      	uxth	r3, r2
 80177a4:	fb05 a303 	mla	r3, r5, r3, sl
 80177a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80177ac:	b29b      	uxth	r3, r3
 80177ae:	ebab 0303 	sub.w	r3, fp, r3
 80177b2:	0c12      	lsrs	r2, r2, #16
 80177b4:	f8de b000 	ldr.w	fp, [lr]
 80177b8:	fb05 a202 	mla	r2, r5, r2, sl
 80177bc:	fa13 f38b 	uxtah	r3, r3, fp
 80177c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80177c4:	fa1f fb82 	uxth.w	fp, r2
 80177c8:	f8de 2000 	ldr.w	r2, [lr]
 80177cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80177d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80177d4:	b29b      	uxth	r3, r3
 80177d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80177da:	4581      	cmp	r9, r0
 80177dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80177e0:	f84e 3b04 	str.w	r3, [lr], #4
 80177e4:	d2db      	bcs.n	801779e <quorem+0x42>
 80177e6:	f856 300c 	ldr.w	r3, [r6, ip]
 80177ea:	b933      	cbnz	r3, 80177fa <quorem+0x9e>
 80177ec:	9b01      	ldr	r3, [sp, #4]
 80177ee:	3b04      	subs	r3, #4
 80177f0:	429e      	cmp	r6, r3
 80177f2:	461a      	mov	r2, r3
 80177f4:	d330      	bcc.n	8017858 <quorem+0xfc>
 80177f6:	f8c8 4010 	str.w	r4, [r8, #16]
 80177fa:	4640      	mov	r0, r8
 80177fc:	f001 fb96 	bl	8018f2c <__mcmp>
 8017800:	2800      	cmp	r0, #0
 8017802:	db25      	blt.n	8017850 <quorem+0xf4>
 8017804:	3501      	adds	r5, #1
 8017806:	4630      	mov	r0, r6
 8017808:	f04f 0c00 	mov.w	ip, #0
 801780c:	f857 2b04 	ldr.w	r2, [r7], #4
 8017810:	f8d0 e000 	ldr.w	lr, [r0]
 8017814:	b293      	uxth	r3, r2
 8017816:	ebac 0303 	sub.w	r3, ip, r3
 801781a:	0c12      	lsrs	r2, r2, #16
 801781c:	fa13 f38e 	uxtah	r3, r3, lr
 8017820:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017824:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017828:	b29b      	uxth	r3, r3
 801782a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801782e:	45b9      	cmp	r9, r7
 8017830:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017834:	f840 3b04 	str.w	r3, [r0], #4
 8017838:	d2e8      	bcs.n	801780c <quorem+0xb0>
 801783a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801783e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017842:	b92a      	cbnz	r2, 8017850 <quorem+0xf4>
 8017844:	3b04      	subs	r3, #4
 8017846:	429e      	cmp	r6, r3
 8017848:	461a      	mov	r2, r3
 801784a:	d30b      	bcc.n	8017864 <quorem+0x108>
 801784c:	f8c8 4010 	str.w	r4, [r8, #16]
 8017850:	4628      	mov	r0, r5
 8017852:	b003      	add	sp, #12
 8017854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017858:	6812      	ldr	r2, [r2, #0]
 801785a:	3b04      	subs	r3, #4
 801785c:	2a00      	cmp	r2, #0
 801785e:	d1ca      	bne.n	80177f6 <quorem+0x9a>
 8017860:	3c01      	subs	r4, #1
 8017862:	e7c5      	b.n	80177f0 <quorem+0x94>
 8017864:	6812      	ldr	r2, [r2, #0]
 8017866:	3b04      	subs	r3, #4
 8017868:	2a00      	cmp	r2, #0
 801786a:	d1ef      	bne.n	801784c <quorem+0xf0>
 801786c:	3c01      	subs	r4, #1
 801786e:	e7ea      	b.n	8017846 <quorem+0xea>
 8017870:	2000      	movs	r0, #0
 8017872:	e7ee      	b.n	8017852 <quorem+0xf6>
 8017874:	0000      	movs	r0, r0
	...

08017878 <_dtoa_r>:
 8017878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801787c:	ec57 6b10 	vmov	r6, r7, d0
 8017880:	b097      	sub	sp, #92	; 0x5c
 8017882:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017884:	9106      	str	r1, [sp, #24]
 8017886:	4604      	mov	r4, r0
 8017888:	920b      	str	r2, [sp, #44]	; 0x2c
 801788a:	9312      	str	r3, [sp, #72]	; 0x48
 801788c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017890:	e9cd 6700 	strd	r6, r7, [sp]
 8017894:	b93d      	cbnz	r5, 80178a6 <_dtoa_r+0x2e>
 8017896:	2010      	movs	r0, #16
 8017898:	f7fe f918 	bl	8015acc <malloc>
 801789c:	6260      	str	r0, [r4, #36]	; 0x24
 801789e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80178a2:	6005      	str	r5, [r0, #0]
 80178a4:	60c5      	str	r5, [r0, #12]
 80178a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178a8:	6819      	ldr	r1, [r3, #0]
 80178aa:	b151      	cbz	r1, 80178c2 <_dtoa_r+0x4a>
 80178ac:	685a      	ldr	r2, [r3, #4]
 80178ae:	604a      	str	r2, [r1, #4]
 80178b0:	2301      	movs	r3, #1
 80178b2:	4093      	lsls	r3, r2
 80178b4:	608b      	str	r3, [r1, #8]
 80178b6:	4620      	mov	r0, r4
 80178b8:	f001 f918 	bl	8018aec <_Bfree>
 80178bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178be:	2200      	movs	r2, #0
 80178c0:	601a      	str	r2, [r3, #0]
 80178c2:	1e3b      	subs	r3, r7, #0
 80178c4:	bfbb      	ittet	lt
 80178c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80178ca:	9301      	strlt	r3, [sp, #4]
 80178cc:	2300      	movge	r3, #0
 80178ce:	2201      	movlt	r2, #1
 80178d0:	bfac      	ite	ge
 80178d2:	f8c8 3000 	strge.w	r3, [r8]
 80178d6:	f8c8 2000 	strlt.w	r2, [r8]
 80178da:	4baf      	ldr	r3, [pc, #700]	; (8017b98 <_dtoa_r+0x320>)
 80178dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80178e0:	ea33 0308 	bics.w	r3, r3, r8
 80178e4:	d114      	bne.n	8017910 <_dtoa_r+0x98>
 80178e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80178e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80178ec:	6013      	str	r3, [r2, #0]
 80178ee:	9b00      	ldr	r3, [sp, #0]
 80178f0:	b923      	cbnz	r3, 80178fc <_dtoa_r+0x84>
 80178f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80178f6:	2800      	cmp	r0, #0
 80178f8:	f000 8542 	beq.w	8018380 <_dtoa_r+0xb08>
 80178fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017bac <_dtoa_r+0x334>
 8017902:	2b00      	cmp	r3, #0
 8017904:	f000 8544 	beq.w	8018390 <_dtoa_r+0xb18>
 8017908:	f10b 0303 	add.w	r3, fp, #3
 801790c:	f000 bd3e 	b.w	801838c <_dtoa_r+0xb14>
 8017910:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017914:	2200      	movs	r2, #0
 8017916:	2300      	movs	r3, #0
 8017918:	4630      	mov	r0, r6
 801791a:	4639      	mov	r1, r7
 801791c:	f7e9 f8d4 	bl	8000ac8 <__aeabi_dcmpeq>
 8017920:	4681      	mov	r9, r0
 8017922:	b168      	cbz	r0, 8017940 <_dtoa_r+0xc8>
 8017924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017926:	2301      	movs	r3, #1
 8017928:	6013      	str	r3, [r2, #0]
 801792a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801792c:	2b00      	cmp	r3, #0
 801792e:	f000 8524 	beq.w	801837a <_dtoa_r+0xb02>
 8017932:	4b9a      	ldr	r3, [pc, #616]	; (8017b9c <_dtoa_r+0x324>)
 8017934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017936:	f103 3bff 	add.w	fp, r3, #4294967295
 801793a:	6013      	str	r3, [r2, #0]
 801793c:	f000 bd28 	b.w	8018390 <_dtoa_r+0xb18>
 8017940:	aa14      	add	r2, sp, #80	; 0x50
 8017942:	a915      	add	r1, sp, #84	; 0x54
 8017944:	ec47 6b10 	vmov	d0, r6, r7
 8017948:	4620      	mov	r0, r4
 801794a:	f001 fbdd 	bl	8019108 <__d2b>
 801794e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017952:	9004      	str	r0, [sp, #16]
 8017954:	2d00      	cmp	r5, #0
 8017956:	d07c      	beq.n	8017a52 <_dtoa_r+0x1da>
 8017958:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801795c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017960:	46b2      	mov	sl, r6
 8017962:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801796a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801796e:	2200      	movs	r2, #0
 8017970:	4b8b      	ldr	r3, [pc, #556]	; (8017ba0 <_dtoa_r+0x328>)
 8017972:	4650      	mov	r0, sl
 8017974:	4659      	mov	r1, fp
 8017976:	f7e8 fc87 	bl	8000288 <__aeabi_dsub>
 801797a:	a381      	add	r3, pc, #516	; (adr r3, 8017b80 <_dtoa_r+0x308>)
 801797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017980:	f7e8 fe3a 	bl	80005f8 <__aeabi_dmul>
 8017984:	a380      	add	r3, pc, #512	; (adr r3, 8017b88 <_dtoa_r+0x310>)
 8017986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801798a:	f7e8 fc7f 	bl	800028c <__adddf3>
 801798e:	4606      	mov	r6, r0
 8017990:	4628      	mov	r0, r5
 8017992:	460f      	mov	r7, r1
 8017994:	f7e8 fdc6 	bl	8000524 <__aeabi_i2d>
 8017998:	a37d      	add	r3, pc, #500	; (adr r3, 8017b90 <_dtoa_r+0x318>)
 801799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801799e:	f7e8 fe2b 	bl	80005f8 <__aeabi_dmul>
 80179a2:	4602      	mov	r2, r0
 80179a4:	460b      	mov	r3, r1
 80179a6:	4630      	mov	r0, r6
 80179a8:	4639      	mov	r1, r7
 80179aa:	f7e8 fc6f 	bl	800028c <__adddf3>
 80179ae:	4606      	mov	r6, r0
 80179b0:	460f      	mov	r7, r1
 80179b2:	f7e9 f8d1 	bl	8000b58 <__aeabi_d2iz>
 80179b6:	2200      	movs	r2, #0
 80179b8:	4682      	mov	sl, r0
 80179ba:	2300      	movs	r3, #0
 80179bc:	4630      	mov	r0, r6
 80179be:	4639      	mov	r1, r7
 80179c0:	f7e9 f88c 	bl	8000adc <__aeabi_dcmplt>
 80179c4:	b148      	cbz	r0, 80179da <_dtoa_r+0x162>
 80179c6:	4650      	mov	r0, sl
 80179c8:	f7e8 fdac 	bl	8000524 <__aeabi_i2d>
 80179cc:	4632      	mov	r2, r6
 80179ce:	463b      	mov	r3, r7
 80179d0:	f7e9 f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 80179d4:	b908      	cbnz	r0, 80179da <_dtoa_r+0x162>
 80179d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80179da:	f1ba 0f16 	cmp.w	sl, #22
 80179de:	d859      	bhi.n	8017a94 <_dtoa_r+0x21c>
 80179e0:	4970      	ldr	r1, [pc, #448]	; (8017ba4 <_dtoa_r+0x32c>)
 80179e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80179e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80179ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179ee:	f7e9 f893 	bl	8000b18 <__aeabi_dcmpgt>
 80179f2:	2800      	cmp	r0, #0
 80179f4:	d050      	beq.n	8017a98 <_dtoa_r+0x220>
 80179f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80179fa:	2300      	movs	r3, #0
 80179fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80179fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017a00:	1b5d      	subs	r5, r3, r5
 8017a02:	f1b5 0801 	subs.w	r8, r5, #1
 8017a06:	bf49      	itett	mi
 8017a08:	f1c5 0301 	rsbmi	r3, r5, #1
 8017a0c:	2300      	movpl	r3, #0
 8017a0e:	9305      	strmi	r3, [sp, #20]
 8017a10:	f04f 0800 	movmi.w	r8, #0
 8017a14:	bf58      	it	pl
 8017a16:	9305      	strpl	r3, [sp, #20]
 8017a18:	f1ba 0f00 	cmp.w	sl, #0
 8017a1c:	db3e      	blt.n	8017a9c <_dtoa_r+0x224>
 8017a1e:	2300      	movs	r3, #0
 8017a20:	44d0      	add	r8, sl
 8017a22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017a26:	9307      	str	r3, [sp, #28]
 8017a28:	9b06      	ldr	r3, [sp, #24]
 8017a2a:	2b09      	cmp	r3, #9
 8017a2c:	f200 8090 	bhi.w	8017b50 <_dtoa_r+0x2d8>
 8017a30:	2b05      	cmp	r3, #5
 8017a32:	bfc4      	itt	gt
 8017a34:	3b04      	subgt	r3, #4
 8017a36:	9306      	strgt	r3, [sp, #24]
 8017a38:	9b06      	ldr	r3, [sp, #24]
 8017a3a:	f1a3 0302 	sub.w	r3, r3, #2
 8017a3e:	bfcc      	ite	gt
 8017a40:	2500      	movgt	r5, #0
 8017a42:	2501      	movle	r5, #1
 8017a44:	2b03      	cmp	r3, #3
 8017a46:	f200 808f 	bhi.w	8017b68 <_dtoa_r+0x2f0>
 8017a4a:	e8df f003 	tbb	[pc, r3]
 8017a4e:	7f7d      	.short	0x7f7d
 8017a50:	7131      	.short	0x7131
 8017a52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017a56:	441d      	add	r5, r3
 8017a58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017a5c:	2820      	cmp	r0, #32
 8017a5e:	dd13      	ble.n	8017a88 <_dtoa_r+0x210>
 8017a60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017a64:	9b00      	ldr	r3, [sp, #0]
 8017a66:	fa08 f800 	lsl.w	r8, r8, r0
 8017a6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017a6e:	fa23 f000 	lsr.w	r0, r3, r0
 8017a72:	ea48 0000 	orr.w	r0, r8, r0
 8017a76:	f7e8 fd45 	bl	8000504 <__aeabi_ui2d>
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	4682      	mov	sl, r0
 8017a7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017a82:	3d01      	subs	r5, #1
 8017a84:	9313      	str	r3, [sp, #76]	; 0x4c
 8017a86:	e772      	b.n	801796e <_dtoa_r+0xf6>
 8017a88:	9b00      	ldr	r3, [sp, #0]
 8017a8a:	f1c0 0020 	rsb	r0, r0, #32
 8017a8e:	fa03 f000 	lsl.w	r0, r3, r0
 8017a92:	e7f0      	b.n	8017a76 <_dtoa_r+0x1fe>
 8017a94:	2301      	movs	r3, #1
 8017a96:	e7b1      	b.n	80179fc <_dtoa_r+0x184>
 8017a98:	900f      	str	r0, [sp, #60]	; 0x3c
 8017a9a:	e7b0      	b.n	80179fe <_dtoa_r+0x186>
 8017a9c:	9b05      	ldr	r3, [sp, #20]
 8017a9e:	eba3 030a 	sub.w	r3, r3, sl
 8017aa2:	9305      	str	r3, [sp, #20]
 8017aa4:	f1ca 0300 	rsb	r3, sl, #0
 8017aa8:	9307      	str	r3, [sp, #28]
 8017aaa:	2300      	movs	r3, #0
 8017aac:	930e      	str	r3, [sp, #56]	; 0x38
 8017aae:	e7bb      	b.n	8017a28 <_dtoa_r+0x1b0>
 8017ab0:	2301      	movs	r3, #1
 8017ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8017ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	dd59      	ble.n	8017b6e <_dtoa_r+0x2f6>
 8017aba:	9302      	str	r3, [sp, #8]
 8017abc:	4699      	mov	r9, r3
 8017abe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	6072      	str	r2, [r6, #4]
 8017ac4:	2204      	movs	r2, #4
 8017ac6:	f102 0014 	add.w	r0, r2, #20
 8017aca:	4298      	cmp	r0, r3
 8017acc:	6871      	ldr	r1, [r6, #4]
 8017ace:	d953      	bls.n	8017b78 <_dtoa_r+0x300>
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	f000 ffd7 	bl	8018a84 <_Balloc>
 8017ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ad8:	6030      	str	r0, [r6, #0]
 8017ada:	f1b9 0f0e 	cmp.w	r9, #14
 8017ade:	f8d3 b000 	ldr.w	fp, [r3]
 8017ae2:	f200 80e6 	bhi.w	8017cb2 <_dtoa_r+0x43a>
 8017ae6:	2d00      	cmp	r5, #0
 8017ae8:	f000 80e3 	beq.w	8017cb2 <_dtoa_r+0x43a>
 8017aec:	ed9d 7b00 	vldr	d7, [sp]
 8017af0:	f1ba 0f00 	cmp.w	sl, #0
 8017af4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017af8:	dd74      	ble.n	8017be4 <_dtoa_r+0x36c>
 8017afa:	4a2a      	ldr	r2, [pc, #168]	; (8017ba4 <_dtoa_r+0x32c>)
 8017afc:	f00a 030f 	and.w	r3, sl, #15
 8017b00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017b04:	ed93 7b00 	vldr	d7, [r3]
 8017b08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017b0c:	06f0      	lsls	r0, r6, #27
 8017b0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017b12:	d565      	bpl.n	8017be0 <_dtoa_r+0x368>
 8017b14:	4b24      	ldr	r3, [pc, #144]	; (8017ba8 <_dtoa_r+0x330>)
 8017b16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017b1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017b1e:	f7e8 fe95 	bl	800084c <__aeabi_ddiv>
 8017b22:	e9cd 0100 	strd	r0, r1, [sp]
 8017b26:	f006 060f 	and.w	r6, r6, #15
 8017b2a:	2503      	movs	r5, #3
 8017b2c:	4f1e      	ldr	r7, [pc, #120]	; (8017ba8 <_dtoa_r+0x330>)
 8017b2e:	e04c      	b.n	8017bca <_dtoa_r+0x352>
 8017b30:	2301      	movs	r3, #1
 8017b32:	930a      	str	r3, [sp, #40]	; 0x28
 8017b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b36:	4453      	add	r3, sl
 8017b38:	f103 0901 	add.w	r9, r3, #1
 8017b3c:	9302      	str	r3, [sp, #8]
 8017b3e:	464b      	mov	r3, r9
 8017b40:	2b01      	cmp	r3, #1
 8017b42:	bfb8      	it	lt
 8017b44:	2301      	movlt	r3, #1
 8017b46:	e7ba      	b.n	8017abe <_dtoa_r+0x246>
 8017b48:	2300      	movs	r3, #0
 8017b4a:	e7b2      	b.n	8017ab2 <_dtoa_r+0x23a>
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	e7f0      	b.n	8017b32 <_dtoa_r+0x2ba>
 8017b50:	2501      	movs	r5, #1
 8017b52:	2300      	movs	r3, #0
 8017b54:	9306      	str	r3, [sp, #24]
 8017b56:	950a      	str	r5, [sp, #40]	; 0x28
 8017b58:	f04f 33ff 	mov.w	r3, #4294967295
 8017b5c:	9302      	str	r3, [sp, #8]
 8017b5e:	4699      	mov	r9, r3
 8017b60:	2200      	movs	r2, #0
 8017b62:	2312      	movs	r3, #18
 8017b64:	920b      	str	r2, [sp, #44]	; 0x2c
 8017b66:	e7aa      	b.n	8017abe <_dtoa_r+0x246>
 8017b68:	2301      	movs	r3, #1
 8017b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8017b6c:	e7f4      	b.n	8017b58 <_dtoa_r+0x2e0>
 8017b6e:	2301      	movs	r3, #1
 8017b70:	9302      	str	r3, [sp, #8]
 8017b72:	4699      	mov	r9, r3
 8017b74:	461a      	mov	r2, r3
 8017b76:	e7f5      	b.n	8017b64 <_dtoa_r+0x2ec>
 8017b78:	3101      	adds	r1, #1
 8017b7a:	6071      	str	r1, [r6, #4]
 8017b7c:	0052      	lsls	r2, r2, #1
 8017b7e:	e7a2      	b.n	8017ac6 <_dtoa_r+0x24e>
 8017b80:	636f4361 	.word	0x636f4361
 8017b84:	3fd287a7 	.word	0x3fd287a7
 8017b88:	8b60c8b3 	.word	0x8b60c8b3
 8017b8c:	3fc68a28 	.word	0x3fc68a28
 8017b90:	509f79fb 	.word	0x509f79fb
 8017b94:	3fd34413 	.word	0x3fd34413
 8017b98:	7ff00000 	.word	0x7ff00000
 8017b9c:	0801b291 	.word	0x0801b291
 8017ba0:	3ff80000 	.word	0x3ff80000
 8017ba4:	0801b350 	.word	0x0801b350
 8017ba8:	0801b328 	.word	0x0801b328
 8017bac:	0801b319 	.word	0x0801b319
 8017bb0:	07f1      	lsls	r1, r6, #31
 8017bb2:	d508      	bpl.n	8017bc6 <_dtoa_r+0x34e>
 8017bb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017bbc:	f7e8 fd1c 	bl	80005f8 <__aeabi_dmul>
 8017bc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017bc4:	3501      	adds	r5, #1
 8017bc6:	1076      	asrs	r6, r6, #1
 8017bc8:	3708      	adds	r7, #8
 8017bca:	2e00      	cmp	r6, #0
 8017bcc:	d1f0      	bne.n	8017bb0 <_dtoa_r+0x338>
 8017bce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017bd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bd6:	f7e8 fe39 	bl	800084c <__aeabi_ddiv>
 8017bda:	e9cd 0100 	strd	r0, r1, [sp]
 8017bde:	e01a      	b.n	8017c16 <_dtoa_r+0x39e>
 8017be0:	2502      	movs	r5, #2
 8017be2:	e7a3      	b.n	8017b2c <_dtoa_r+0x2b4>
 8017be4:	f000 80a0 	beq.w	8017d28 <_dtoa_r+0x4b0>
 8017be8:	f1ca 0600 	rsb	r6, sl, #0
 8017bec:	4b9f      	ldr	r3, [pc, #636]	; (8017e6c <_dtoa_r+0x5f4>)
 8017bee:	4fa0      	ldr	r7, [pc, #640]	; (8017e70 <_dtoa_r+0x5f8>)
 8017bf0:	f006 020f 	and.w	r2, r6, #15
 8017bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017c00:	f7e8 fcfa 	bl	80005f8 <__aeabi_dmul>
 8017c04:	e9cd 0100 	strd	r0, r1, [sp]
 8017c08:	1136      	asrs	r6, r6, #4
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	2502      	movs	r5, #2
 8017c0e:	2e00      	cmp	r6, #0
 8017c10:	d17f      	bne.n	8017d12 <_dtoa_r+0x49a>
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d1e1      	bne.n	8017bda <_dtoa_r+0x362>
 8017c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	f000 8087 	beq.w	8017d2c <_dtoa_r+0x4b4>
 8017c1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017c22:	2200      	movs	r2, #0
 8017c24:	4b93      	ldr	r3, [pc, #588]	; (8017e74 <_dtoa_r+0x5fc>)
 8017c26:	4630      	mov	r0, r6
 8017c28:	4639      	mov	r1, r7
 8017c2a:	f7e8 ff57 	bl	8000adc <__aeabi_dcmplt>
 8017c2e:	2800      	cmp	r0, #0
 8017c30:	d07c      	beq.n	8017d2c <_dtoa_r+0x4b4>
 8017c32:	f1b9 0f00 	cmp.w	r9, #0
 8017c36:	d079      	beq.n	8017d2c <_dtoa_r+0x4b4>
 8017c38:	9b02      	ldr	r3, [sp, #8]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	dd35      	ble.n	8017caa <_dtoa_r+0x432>
 8017c3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017c42:	9308      	str	r3, [sp, #32]
 8017c44:	4639      	mov	r1, r7
 8017c46:	2200      	movs	r2, #0
 8017c48:	4b8b      	ldr	r3, [pc, #556]	; (8017e78 <_dtoa_r+0x600>)
 8017c4a:	4630      	mov	r0, r6
 8017c4c:	f7e8 fcd4 	bl	80005f8 <__aeabi_dmul>
 8017c50:	e9cd 0100 	strd	r0, r1, [sp]
 8017c54:	9f02      	ldr	r7, [sp, #8]
 8017c56:	3501      	adds	r5, #1
 8017c58:	4628      	mov	r0, r5
 8017c5a:	f7e8 fc63 	bl	8000524 <__aeabi_i2d>
 8017c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017c62:	f7e8 fcc9 	bl	80005f8 <__aeabi_dmul>
 8017c66:	2200      	movs	r2, #0
 8017c68:	4b84      	ldr	r3, [pc, #528]	; (8017e7c <_dtoa_r+0x604>)
 8017c6a:	f7e8 fb0f 	bl	800028c <__adddf3>
 8017c6e:	4605      	mov	r5, r0
 8017c70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017c74:	2f00      	cmp	r7, #0
 8017c76:	d15d      	bne.n	8017d34 <_dtoa_r+0x4bc>
 8017c78:	2200      	movs	r2, #0
 8017c7a:	4b81      	ldr	r3, [pc, #516]	; (8017e80 <_dtoa_r+0x608>)
 8017c7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c80:	f7e8 fb02 	bl	8000288 <__aeabi_dsub>
 8017c84:	462a      	mov	r2, r5
 8017c86:	4633      	mov	r3, r6
 8017c88:	e9cd 0100 	strd	r0, r1, [sp]
 8017c8c:	f7e8 ff44 	bl	8000b18 <__aeabi_dcmpgt>
 8017c90:	2800      	cmp	r0, #0
 8017c92:	f040 8288 	bne.w	80181a6 <_dtoa_r+0x92e>
 8017c96:	462a      	mov	r2, r5
 8017c98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017c9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ca0:	f7e8 ff1c 	bl	8000adc <__aeabi_dcmplt>
 8017ca4:	2800      	cmp	r0, #0
 8017ca6:	f040 827c 	bne.w	80181a2 <_dtoa_r+0x92a>
 8017caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017cae:	e9cd 2300 	strd	r2, r3, [sp]
 8017cb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	f2c0 8150 	blt.w	8017f5a <_dtoa_r+0x6e2>
 8017cba:	f1ba 0f0e 	cmp.w	sl, #14
 8017cbe:	f300 814c 	bgt.w	8017f5a <_dtoa_r+0x6e2>
 8017cc2:	4b6a      	ldr	r3, [pc, #424]	; (8017e6c <_dtoa_r+0x5f4>)
 8017cc4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017cc8:	ed93 7b00 	vldr	d7, [r3]
 8017ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017cd4:	f280 80d8 	bge.w	8017e88 <_dtoa_r+0x610>
 8017cd8:	f1b9 0f00 	cmp.w	r9, #0
 8017cdc:	f300 80d4 	bgt.w	8017e88 <_dtoa_r+0x610>
 8017ce0:	f040 825e 	bne.w	80181a0 <_dtoa_r+0x928>
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	4b66      	ldr	r3, [pc, #408]	; (8017e80 <_dtoa_r+0x608>)
 8017ce8:	ec51 0b17 	vmov	r0, r1, d7
 8017cec:	f7e8 fc84 	bl	80005f8 <__aeabi_dmul>
 8017cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017cf4:	f7e8 ff06 	bl	8000b04 <__aeabi_dcmpge>
 8017cf8:	464f      	mov	r7, r9
 8017cfa:	464e      	mov	r6, r9
 8017cfc:	2800      	cmp	r0, #0
 8017cfe:	f040 8234 	bne.w	801816a <_dtoa_r+0x8f2>
 8017d02:	2331      	movs	r3, #49	; 0x31
 8017d04:	f10b 0501 	add.w	r5, fp, #1
 8017d08:	f88b 3000 	strb.w	r3, [fp]
 8017d0c:	f10a 0a01 	add.w	sl, sl, #1
 8017d10:	e22f      	b.n	8018172 <_dtoa_r+0x8fa>
 8017d12:	07f2      	lsls	r2, r6, #31
 8017d14:	d505      	bpl.n	8017d22 <_dtoa_r+0x4aa>
 8017d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017d1a:	f7e8 fc6d 	bl	80005f8 <__aeabi_dmul>
 8017d1e:	3501      	adds	r5, #1
 8017d20:	2301      	movs	r3, #1
 8017d22:	1076      	asrs	r6, r6, #1
 8017d24:	3708      	adds	r7, #8
 8017d26:	e772      	b.n	8017c0e <_dtoa_r+0x396>
 8017d28:	2502      	movs	r5, #2
 8017d2a:	e774      	b.n	8017c16 <_dtoa_r+0x39e>
 8017d2c:	f8cd a020 	str.w	sl, [sp, #32]
 8017d30:	464f      	mov	r7, r9
 8017d32:	e791      	b.n	8017c58 <_dtoa_r+0x3e0>
 8017d34:	4b4d      	ldr	r3, [pc, #308]	; (8017e6c <_dtoa_r+0x5f4>)
 8017d36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017d3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d047      	beq.n	8017dd4 <_dtoa_r+0x55c>
 8017d44:	4602      	mov	r2, r0
 8017d46:	460b      	mov	r3, r1
 8017d48:	2000      	movs	r0, #0
 8017d4a:	494e      	ldr	r1, [pc, #312]	; (8017e84 <_dtoa_r+0x60c>)
 8017d4c:	f7e8 fd7e 	bl	800084c <__aeabi_ddiv>
 8017d50:	462a      	mov	r2, r5
 8017d52:	4633      	mov	r3, r6
 8017d54:	f7e8 fa98 	bl	8000288 <__aeabi_dsub>
 8017d58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017d5c:	465d      	mov	r5, fp
 8017d5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d62:	f7e8 fef9 	bl	8000b58 <__aeabi_d2iz>
 8017d66:	4606      	mov	r6, r0
 8017d68:	f7e8 fbdc 	bl	8000524 <__aeabi_i2d>
 8017d6c:	4602      	mov	r2, r0
 8017d6e:	460b      	mov	r3, r1
 8017d70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d74:	f7e8 fa88 	bl	8000288 <__aeabi_dsub>
 8017d78:	3630      	adds	r6, #48	; 0x30
 8017d7a:	f805 6b01 	strb.w	r6, [r5], #1
 8017d7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017d82:	e9cd 0100 	strd	r0, r1, [sp]
 8017d86:	f7e8 fea9 	bl	8000adc <__aeabi_dcmplt>
 8017d8a:	2800      	cmp	r0, #0
 8017d8c:	d163      	bne.n	8017e56 <_dtoa_r+0x5de>
 8017d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d92:	2000      	movs	r0, #0
 8017d94:	4937      	ldr	r1, [pc, #220]	; (8017e74 <_dtoa_r+0x5fc>)
 8017d96:	f7e8 fa77 	bl	8000288 <__aeabi_dsub>
 8017d9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017d9e:	f7e8 fe9d 	bl	8000adc <__aeabi_dcmplt>
 8017da2:	2800      	cmp	r0, #0
 8017da4:	f040 80b7 	bne.w	8017f16 <_dtoa_r+0x69e>
 8017da8:	eba5 030b 	sub.w	r3, r5, fp
 8017dac:	429f      	cmp	r7, r3
 8017dae:	f77f af7c 	ble.w	8017caa <_dtoa_r+0x432>
 8017db2:	2200      	movs	r2, #0
 8017db4:	4b30      	ldr	r3, [pc, #192]	; (8017e78 <_dtoa_r+0x600>)
 8017db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017dba:	f7e8 fc1d 	bl	80005f8 <__aeabi_dmul>
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017dc4:	4b2c      	ldr	r3, [pc, #176]	; (8017e78 <_dtoa_r+0x600>)
 8017dc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017dca:	f7e8 fc15 	bl	80005f8 <__aeabi_dmul>
 8017dce:	e9cd 0100 	strd	r0, r1, [sp]
 8017dd2:	e7c4      	b.n	8017d5e <_dtoa_r+0x4e6>
 8017dd4:	462a      	mov	r2, r5
 8017dd6:	4633      	mov	r3, r6
 8017dd8:	f7e8 fc0e 	bl	80005f8 <__aeabi_dmul>
 8017ddc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017de0:	eb0b 0507 	add.w	r5, fp, r7
 8017de4:	465e      	mov	r6, fp
 8017de6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017dea:	f7e8 feb5 	bl	8000b58 <__aeabi_d2iz>
 8017dee:	4607      	mov	r7, r0
 8017df0:	f7e8 fb98 	bl	8000524 <__aeabi_i2d>
 8017df4:	3730      	adds	r7, #48	; 0x30
 8017df6:	4602      	mov	r2, r0
 8017df8:	460b      	mov	r3, r1
 8017dfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017dfe:	f7e8 fa43 	bl	8000288 <__aeabi_dsub>
 8017e02:	f806 7b01 	strb.w	r7, [r6], #1
 8017e06:	42ae      	cmp	r6, r5
 8017e08:	e9cd 0100 	strd	r0, r1, [sp]
 8017e0c:	f04f 0200 	mov.w	r2, #0
 8017e10:	d126      	bne.n	8017e60 <_dtoa_r+0x5e8>
 8017e12:	4b1c      	ldr	r3, [pc, #112]	; (8017e84 <_dtoa_r+0x60c>)
 8017e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017e18:	f7e8 fa38 	bl	800028c <__adddf3>
 8017e1c:	4602      	mov	r2, r0
 8017e1e:	460b      	mov	r3, r1
 8017e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e24:	f7e8 fe78 	bl	8000b18 <__aeabi_dcmpgt>
 8017e28:	2800      	cmp	r0, #0
 8017e2a:	d174      	bne.n	8017f16 <_dtoa_r+0x69e>
 8017e2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017e30:	2000      	movs	r0, #0
 8017e32:	4914      	ldr	r1, [pc, #80]	; (8017e84 <_dtoa_r+0x60c>)
 8017e34:	f7e8 fa28 	bl	8000288 <__aeabi_dsub>
 8017e38:	4602      	mov	r2, r0
 8017e3a:	460b      	mov	r3, r1
 8017e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e40:	f7e8 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8017e44:	2800      	cmp	r0, #0
 8017e46:	f43f af30 	beq.w	8017caa <_dtoa_r+0x432>
 8017e4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017e4e:	2b30      	cmp	r3, #48	; 0x30
 8017e50:	f105 32ff 	add.w	r2, r5, #4294967295
 8017e54:	d002      	beq.n	8017e5c <_dtoa_r+0x5e4>
 8017e56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017e5a:	e04a      	b.n	8017ef2 <_dtoa_r+0x67a>
 8017e5c:	4615      	mov	r5, r2
 8017e5e:	e7f4      	b.n	8017e4a <_dtoa_r+0x5d2>
 8017e60:	4b05      	ldr	r3, [pc, #20]	; (8017e78 <_dtoa_r+0x600>)
 8017e62:	f7e8 fbc9 	bl	80005f8 <__aeabi_dmul>
 8017e66:	e9cd 0100 	strd	r0, r1, [sp]
 8017e6a:	e7bc      	b.n	8017de6 <_dtoa_r+0x56e>
 8017e6c:	0801b350 	.word	0x0801b350
 8017e70:	0801b328 	.word	0x0801b328
 8017e74:	3ff00000 	.word	0x3ff00000
 8017e78:	40240000 	.word	0x40240000
 8017e7c:	401c0000 	.word	0x401c0000
 8017e80:	40140000 	.word	0x40140000
 8017e84:	3fe00000 	.word	0x3fe00000
 8017e88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017e8c:	465d      	mov	r5, fp
 8017e8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e92:	4630      	mov	r0, r6
 8017e94:	4639      	mov	r1, r7
 8017e96:	f7e8 fcd9 	bl	800084c <__aeabi_ddiv>
 8017e9a:	f7e8 fe5d 	bl	8000b58 <__aeabi_d2iz>
 8017e9e:	4680      	mov	r8, r0
 8017ea0:	f7e8 fb40 	bl	8000524 <__aeabi_i2d>
 8017ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ea8:	f7e8 fba6 	bl	80005f8 <__aeabi_dmul>
 8017eac:	4602      	mov	r2, r0
 8017eae:	460b      	mov	r3, r1
 8017eb0:	4630      	mov	r0, r6
 8017eb2:	4639      	mov	r1, r7
 8017eb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017eb8:	f7e8 f9e6 	bl	8000288 <__aeabi_dsub>
 8017ebc:	f805 6b01 	strb.w	r6, [r5], #1
 8017ec0:	eba5 060b 	sub.w	r6, r5, fp
 8017ec4:	45b1      	cmp	r9, r6
 8017ec6:	4602      	mov	r2, r0
 8017ec8:	460b      	mov	r3, r1
 8017eca:	d139      	bne.n	8017f40 <_dtoa_r+0x6c8>
 8017ecc:	f7e8 f9de 	bl	800028c <__adddf3>
 8017ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ed4:	4606      	mov	r6, r0
 8017ed6:	460f      	mov	r7, r1
 8017ed8:	f7e8 fe1e 	bl	8000b18 <__aeabi_dcmpgt>
 8017edc:	b9c8      	cbnz	r0, 8017f12 <_dtoa_r+0x69a>
 8017ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ee2:	4630      	mov	r0, r6
 8017ee4:	4639      	mov	r1, r7
 8017ee6:	f7e8 fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 8017eea:	b110      	cbz	r0, 8017ef2 <_dtoa_r+0x67a>
 8017eec:	f018 0f01 	tst.w	r8, #1
 8017ef0:	d10f      	bne.n	8017f12 <_dtoa_r+0x69a>
 8017ef2:	9904      	ldr	r1, [sp, #16]
 8017ef4:	4620      	mov	r0, r4
 8017ef6:	f000 fdf9 	bl	8018aec <_Bfree>
 8017efa:	2300      	movs	r3, #0
 8017efc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017efe:	702b      	strb	r3, [r5, #0]
 8017f00:	f10a 0301 	add.w	r3, sl, #1
 8017f04:	6013      	str	r3, [r2, #0]
 8017f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	f000 8241 	beq.w	8018390 <_dtoa_r+0xb18>
 8017f0e:	601d      	str	r5, [r3, #0]
 8017f10:	e23e      	b.n	8018390 <_dtoa_r+0xb18>
 8017f12:	f8cd a020 	str.w	sl, [sp, #32]
 8017f16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017f1a:	2a39      	cmp	r2, #57	; 0x39
 8017f1c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017f20:	d108      	bne.n	8017f34 <_dtoa_r+0x6bc>
 8017f22:	459b      	cmp	fp, r3
 8017f24:	d10a      	bne.n	8017f3c <_dtoa_r+0x6c4>
 8017f26:	9b08      	ldr	r3, [sp, #32]
 8017f28:	3301      	adds	r3, #1
 8017f2a:	9308      	str	r3, [sp, #32]
 8017f2c:	2330      	movs	r3, #48	; 0x30
 8017f2e:	f88b 3000 	strb.w	r3, [fp]
 8017f32:	465b      	mov	r3, fp
 8017f34:	781a      	ldrb	r2, [r3, #0]
 8017f36:	3201      	adds	r2, #1
 8017f38:	701a      	strb	r2, [r3, #0]
 8017f3a:	e78c      	b.n	8017e56 <_dtoa_r+0x5de>
 8017f3c:	461d      	mov	r5, r3
 8017f3e:	e7ea      	b.n	8017f16 <_dtoa_r+0x69e>
 8017f40:	2200      	movs	r2, #0
 8017f42:	4b9b      	ldr	r3, [pc, #620]	; (80181b0 <_dtoa_r+0x938>)
 8017f44:	f7e8 fb58 	bl	80005f8 <__aeabi_dmul>
 8017f48:	2200      	movs	r2, #0
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	4606      	mov	r6, r0
 8017f4e:	460f      	mov	r7, r1
 8017f50:	f7e8 fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f54:	2800      	cmp	r0, #0
 8017f56:	d09a      	beq.n	8017e8e <_dtoa_r+0x616>
 8017f58:	e7cb      	b.n	8017ef2 <_dtoa_r+0x67a>
 8017f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f5c:	2a00      	cmp	r2, #0
 8017f5e:	f000 808b 	beq.w	8018078 <_dtoa_r+0x800>
 8017f62:	9a06      	ldr	r2, [sp, #24]
 8017f64:	2a01      	cmp	r2, #1
 8017f66:	dc6e      	bgt.n	8018046 <_dtoa_r+0x7ce>
 8017f68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017f6a:	2a00      	cmp	r2, #0
 8017f6c:	d067      	beq.n	801803e <_dtoa_r+0x7c6>
 8017f6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017f72:	9f07      	ldr	r7, [sp, #28]
 8017f74:	9d05      	ldr	r5, [sp, #20]
 8017f76:	9a05      	ldr	r2, [sp, #20]
 8017f78:	2101      	movs	r1, #1
 8017f7a:	441a      	add	r2, r3
 8017f7c:	4620      	mov	r0, r4
 8017f7e:	9205      	str	r2, [sp, #20]
 8017f80:	4498      	add	r8, r3
 8017f82:	f000 fe91 	bl	8018ca8 <__i2b>
 8017f86:	4606      	mov	r6, r0
 8017f88:	2d00      	cmp	r5, #0
 8017f8a:	dd0c      	ble.n	8017fa6 <_dtoa_r+0x72e>
 8017f8c:	f1b8 0f00 	cmp.w	r8, #0
 8017f90:	dd09      	ble.n	8017fa6 <_dtoa_r+0x72e>
 8017f92:	4545      	cmp	r5, r8
 8017f94:	9a05      	ldr	r2, [sp, #20]
 8017f96:	462b      	mov	r3, r5
 8017f98:	bfa8      	it	ge
 8017f9a:	4643      	movge	r3, r8
 8017f9c:	1ad2      	subs	r2, r2, r3
 8017f9e:	9205      	str	r2, [sp, #20]
 8017fa0:	1aed      	subs	r5, r5, r3
 8017fa2:	eba8 0803 	sub.w	r8, r8, r3
 8017fa6:	9b07      	ldr	r3, [sp, #28]
 8017fa8:	b1eb      	cbz	r3, 8017fe6 <_dtoa_r+0x76e>
 8017faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d067      	beq.n	8018080 <_dtoa_r+0x808>
 8017fb0:	b18f      	cbz	r7, 8017fd6 <_dtoa_r+0x75e>
 8017fb2:	4631      	mov	r1, r6
 8017fb4:	463a      	mov	r2, r7
 8017fb6:	4620      	mov	r0, r4
 8017fb8:	f000 ff16 	bl	8018de8 <__pow5mult>
 8017fbc:	9a04      	ldr	r2, [sp, #16]
 8017fbe:	4601      	mov	r1, r0
 8017fc0:	4606      	mov	r6, r0
 8017fc2:	4620      	mov	r0, r4
 8017fc4:	f000 fe79 	bl	8018cba <__multiply>
 8017fc8:	9904      	ldr	r1, [sp, #16]
 8017fca:	9008      	str	r0, [sp, #32]
 8017fcc:	4620      	mov	r0, r4
 8017fce:	f000 fd8d 	bl	8018aec <_Bfree>
 8017fd2:	9b08      	ldr	r3, [sp, #32]
 8017fd4:	9304      	str	r3, [sp, #16]
 8017fd6:	9b07      	ldr	r3, [sp, #28]
 8017fd8:	1bda      	subs	r2, r3, r7
 8017fda:	d004      	beq.n	8017fe6 <_dtoa_r+0x76e>
 8017fdc:	9904      	ldr	r1, [sp, #16]
 8017fde:	4620      	mov	r0, r4
 8017fe0:	f000 ff02 	bl	8018de8 <__pow5mult>
 8017fe4:	9004      	str	r0, [sp, #16]
 8017fe6:	2101      	movs	r1, #1
 8017fe8:	4620      	mov	r0, r4
 8017fea:	f000 fe5d 	bl	8018ca8 <__i2b>
 8017fee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ff0:	4607      	mov	r7, r0
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	f000 81d0 	beq.w	8018398 <_dtoa_r+0xb20>
 8017ff8:	461a      	mov	r2, r3
 8017ffa:	4601      	mov	r1, r0
 8017ffc:	4620      	mov	r0, r4
 8017ffe:	f000 fef3 	bl	8018de8 <__pow5mult>
 8018002:	9b06      	ldr	r3, [sp, #24]
 8018004:	2b01      	cmp	r3, #1
 8018006:	4607      	mov	r7, r0
 8018008:	dc40      	bgt.n	801808c <_dtoa_r+0x814>
 801800a:	9b00      	ldr	r3, [sp, #0]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d139      	bne.n	8018084 <_dtoa_r+0x80c>
 8018010:	9b01      	ldr	r3, [sp, #4]
 8018012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018016:	2b00      	cmp	r3, #0
 8018018:	d136      	bne.n	8018088 <_dtoa_r+0x810>
 801801a:	9b01      	ldr	r3, [sp, #4]
 801801c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018020:	0d1b      	lsrs	r3, r3, #20
 8018022:	051b      	lsls	r3, r3, #20
 8018024:	b12b      	cbz	r3, 8018032 <_dtoa_r+0x7ba>
 8018026:	9b05      	ldr	r3, [sp, #20]
 8018028:	3301      	adds	r3, #1
 801802a:	9305      	str	r3, [sp, #20]
 801802c:	f108 0801 	add.w	r8, r8, #1
 8018030:	2301      	movs	r3, #1
 8018032:	9307      	str	r3, [sp, #28]
 8018034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018036:	2b00      	cmp	r3, #0
 8018038:	d12a      	bne.n	8018090 <_dtoa_r+0x818>
 801803a:	2001      	movs	r0, #1
 801803c:	e030      	b.n	80180a0 <_dtoa_r+0x828>
 801803e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018040:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018044:	e795      	b.n	8017f72 <_dtoa_r+0x6fa>
 8018046:	9b07      	ldr	r3, [sp, #28]
 8018048:	f109 37ff 	add.w	r7, r9, #4294967295
 801804c:	42bb      	cmp	r3, r7
 801804e:	bfbf      	itttt	lt
 8018050:	9b07      	ldrlt	r3, [sp, #28]
 8018052:	9707      	strlt	r7, [sp, #28]
 8018054:	1afa      	sublt	r2, r7, r3
 8018056:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8018058:	bfbb      	ittet	lt
 801805a:	189b      	addlt	r3, r3, r2
 801805c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801805e:	1bdf      	subge	r7, r3, r7
 8018060:	2700      	movlt	r7, #0
 8018062:	f1b9 0f00 	cmp.w	r9, #0
 8018066:	bfb5      	itete	lt
 8018068:	9b05      	ldrlt	r3, [sp, #20]
 801806a:	9d05      	ldrge	r5, [sp, #20]
 801806c:	eba3 0509 	sublt.w	r5, r3, r9
 8018070:	464b      	movge	r3, r9
 8018072:	bfb8      	it	lt
 8018074:	2300      	movlt	r3, #0
 8018076:	e77e      	b.n	8017f76 <_dtoa_r+0x6fe>
 8018078:	9f07      	ldr	r7, [sp, #28]
 801807a:	9d05      	ldr	r5, [sp, #20]
 801807c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801807e:	e783      	b.n	8017f88 <_dtoa_r+0x710>
 8018080:	9a07      	ldr	r2, [sp, #28]
 8018082:	e7ab      	b.n	8017fdc <_dtoa_r+0x764>
 8018084:	2300      	movs	r3, #0
 8018086:	e7d4      	b.n	8018032 <_dtoa_r+0x7ba>
 8018088:	9b00      	ldr	r3, [sp, #0]
 801808a:	e7d2      	b.n	8018032 <_dtoa_r+0x7ba>
 801808c:	2300      	movs	r3, #0
 801808e:	9307      	str	r3, [sp, #28]
 8018090:	693b      	ldr	r3, [r7, #16]
 8018092:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8018096:	6918      	ldr	r0, [r3, #16]
 8018098:	f000 fdb8 	bl	8018c0c <__hi0bits>
 801809c:	f1c0 0020 	rsb	r0, r0, #32
 80180a0:	4440      	add	r0, r8
 80180a2:	f010 001f 	ands.w	r0, r0, #31
 80180a6:	d047      	beq.n	8018138 <_dtoa_r+0x8c0>
 80180a8:	f1c0 0320 	rsb	r3, r0, #32
 80180ac:	2b04      	cmp	r3, #4
 80180ae:	dd3b      	ble.n	8018128 <_dtoa_r+0x8b0>
 80180b0:	9b05      	ldr	r3, [sp, #20]
 80180b2:	f1c0 001c 	rsb	r0, r0, #28
 80180b6:	4403      	add	r3, r0
 80180b8:	9305      	str	r3, [sp, #20]
 80180ba:	4405      	add	r5, r0
 80180bc:	4480      	add	r8, r0
 80180be:	9b05      	ldr	r3, [sp, #20]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	dd05      	ble.n	80180d0 <_dtoa_r+0x858>
 80180c4:	461a      	mov	r2, r3
 80180c6:	9904      	ldr	r1, [sp, #16]
 80180c8:	4620      	mov	r0, r4
 80180ca:	f000 fedb 	bl	8018e84 <__lshift>
 80180ce:	9004      	str	r0, [sp, #16]
 80180d0:	f1b8 0f00 	cmp.w	r8, #0
 80180d4:	dd05      	ble.n	80180e2 <_dtoa_r+0x86a>
 80180d6:	4639      	mov	r1, r7
 80180d8:	4642      	mov	r2, r8
 80180da:	4620      	mov	r0, r4
 80180dc:	f000 fed2 	bl	8018e84 <__lshift>
 80180e0:	4607      	mov	r7, r0
 80180e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80180e4:	b353      	cbz	r3, 801813c <_dtoa_r+0x8c4>
 80180e6:	4639      	mov	r1, r7
 80180e8:	9804      	ldr	r0, [sp, #16]
 80180ea:	f000 ff1f 	bl	8018f2c <__mcmp>
 80180ee:	2800      	cmp	r0, #0
 80180f0:	da24      	bge.n	801813c <_dtoa_r+0x8c4>
 80180f2:	2300      	movs	r3, #0
 80180f4:	220a      	movs	r2, #10
 80180f6:	9904      	ldr	r1, [sp, #16]
 80180f8:	4620      	mov	r0, r4
 80180fa:	f000 fd0e 	bl	8018b1a <__multadd>
 80180fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018100:	9004      	str	r0, [sp, #16]
 8018102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018106:	2b00      	cmp	r3, #0
 8018108:	f000 814d 	beq.w	80183a6 <_dtoa_r+0xb2e>
 801810c:	2300      	movs	r3, #0
 801810e:	4631      	mov	r1, r6
 8018110:	220a      	movs	r2, #10
 8018112:	4620      	mov	r0, r4
 8018114:	f000 fd01 	bl	8018b1a <__multadd>
 8018118:	9b02      	ldr	r3, [sp, #8]
 801811a:	2b00      	cmp	r3, #0
 801811c:	4606      	mov	r6, r0
 801811e:	dc4f      	bgt.n	80181c0 <_dtoa_r+0x948>
 8018120:	9b06      	ldr	r3, [sp, #24]
 8018122:	2b02      	cmp	r3, #2
 8018124:	dd4c      	ble.n	80181c0 <_dtoa_r+0x948>
 8018126:	e011      	b.n	801814c <_dtoa_r+0x8d4>
 8018128:	d0c9      	beq.n	80180be <_dtoa_r+0x846>
 801812a:	9a05      	ldr	r2, [sp, #20]
 801812c:	331c      	adds	r3, #28
 801812e:	441a      	add	r2, r3
 8018130:	9205      	str	r2, [sp, #20]
 8018132:	441d      	add	r5, r3
 8018134:	4498      	add	r8, r3
 8018136:	e7c2      	b.n	80180be <_dtoa_r+0x846>
 8018138:	4603      	mov	r3, r0
 801813a:	e7f6      	b.n	801812a <_dtoa_r+0x8b2>
 801813c:	f1b9 0f00 	cmp.w	r9, #0
 8018140:	dc38      	bgt.n	80181b4 <_dtoa_r+0x93c>
 8018142:	9b06      	ldr	r3, [sp, #24]
 8018144:	2b02      	cmp	r3, #2
 8018146:	dd35      	ble.n	80181b4 <_dtoa_r+0x93c>
 8018148:	f8cd 9008 	str.w	r9, [sp, #8]
 801814c:	9b02      	ldr	r3, [sp, #8]
 801814e:	b963      	cbnz	r3, 801816a <_dtoa_r+0x8f2>
 8018150:	4639      	mov	r1, r7
 8018152:	2205      	movs	r2, #5
 8018154:	4620      	mov	r0, r4
 8018156:	f000 fce0 	bl	8018b1a <__multadd>
 801815a:	4601      	mov	r1, r0
 801815c:	4607      	mov	r7, r0
 801815e:	9804      	ldr	r0, [sp, #16]
 8018160:	f000 fee4 	bl	8018f2c <__mcmp>
 8018164:	2800      	cmp	r0, #0
 8018166:	f73f adcc 	bgt.w	8017d02 <_dtoa_r+0x48a>
 801816a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801816c:	465d      	mov	r5, fp
 801816e:	ea6f 0a03 	mvn.w	sl, r3
 8018172:	f04f 0900 	mov.w	r9, #0
 8018176:	4639      	mov	r1, r7
 8018178:	4620      	mov	r0, r4
 801817a:	f000 fcb7 	bl	8018aec <_Bfree>
 801817e:	2e00      	cmp	r6, #0
 8018180:	f43f aeb7 	beq.w	8017ef2 <_dtoa_r+0x67a>
 8018184:	f1b9 0f00 	cmp.w	r9, #0
 8018188:	d005      	beq.n	8018196 <_dtoa_r+0x91e>
 801818a:	45b1      	cmp	r9, r6
 801818c:	d003      	beq.n	8018196 <_dtoa_r+0x91e>
 801818e:	4649      	mov	r1, r9
 8018190:	4620      	mov	r0, r4
 8018192:	f000 fcab 	bl	8018aec <_Bfree>
 8018196:	4631      	mov	r1, r6
 8018198:	4620      	mov	r0, r4
 801819a:	f000 fca7 	bl	8018aec <_Bfree>
 801819e:	e6a8      	b.n	8017ef2 <_dtoa_r+0x67a>
 80181a0:	2700      	movs	r7, #0
 80181a2:	463e      	mov	r6, r7
 80181a4:	e7e1      	b.n	801816a <_dtoa_r+0x8f2>
 80181a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80181aa:	463e      	mov	r6, r7
 80181ac:	e5a9      	b.n	8017d02 <_dtoa_r+0x48a>
 80181ae:	bf00      	nop
 80181b0:	40240000 	.word	0x40240000
 80181b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	f000 80fa 	beq.w	80183b4 <_dtoa_r+0xb3c>
 80181c0:	2d00      	cmp	r5, #0
 80181c2:	dd05      	ble.n	80181d0 <_dtoa_r+0x958>
 80181c4:	4631      	mov	r1, r6
 80181c6:	462a      	mov	r2, r5
 80181c8:	4620      	mov	r0, r4
 80181ca:	f000 fe5b 	bl	8018e84 <__lshift>
 80181ce:	4606      	mov	r6, r0
 80181d0:	9b07      	ldr	r3, [sp, #28]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d04c      	beq.n	8018270 <_dtoa_r+0x9f8>
 80181d6:	6871      	ldr	r1, [r6, #4]
 80181d8:	4620      	mov	r0, r4
 80181da:	f000 fc53 	bl	8018a84 <_Balloc>
 80181de:	6932      	ldr	r2, [r6, #16]
 80181e0:	3202      	adds	r2, #2
 80181e2:	4605      	mov	r5, r0
 80181e4:	0092      	lsls	r2, r2, #2
 80181e6:	f106 010c 	add.w	r1, r6, #12
 80181ea:	300c      	adds	r0, #12
 80181ec:	f7fd fc7e 	bl	8015aec <memcpy>
 80181f0:	2201      	movs	r2, #1
 80181f2:	4629      	mov	r1, r5
 80181f4:	4620      	mov	r0, r4
 80181f6:	f000 fe45 	bl	8018e84 <__lshift>
 80181fa:	9b00      	ldr	r3, [sp, #0]
 80181fc:	f8cd b014 	str.w	fp, [sp, #20]
 8018200:	f003 0301 	and.w	r3, r3, #1
 8018204:	46b1      	mov	r9, r6
 8018206:	9307      	str	r3, [sp, #28]
 8018208:	4606      	mov	r6, r0
 801820a:	4639      	mov	r1, r7
 801820c:	9804      	ldr	r0, [sp, #16]
 801820e:	f7ff faa5 	bl	801775c <quorem>
 8018212:	4649      	mov	r1, r9
 8018214:	4605      	mov	r5, r0
 8018216:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801821a:	9804      	ldr	r0, [sp, #16]
 801821c:	f000 fe86 	bl	8018f2c <__mcmp>
 8018220:	4632      	mov	r2, r6
 8018222:	9000      	str	r0, [sp, #0]
 8018224:	4639      	mov	r1, r7
 8018226:	4620      	mov	r0, r4
 8018228:	f000 fe9a 	bl	8018f60 <__mdiff>
 801822c:	68c3      	ldr	r3, [r0, #12]
 801822e:	4602      	mov	r2, r0
 8018230:	bb03      	cbnz	r3, 8018274 <_dtoa_r+0x9fc>
 8018232:	4601      	mov	r1, r0
 8018234:	9008      	str	r0, [sp, #32]
 8018236:	9804      	ldr	r0, [sp, #16]
 8018238:	f000 fe78 	bl	8018f2c <__mcmp>
 801823c:	9a08      	ldr	r2, [sp, #32]
 801823e:	4603      	mov	r3, r0
 8018240:	4611      	mov	r1, r2
 8018242:	4620      	mov	r0, r4
 8018244:	9308      	str	r3, [sp, #32]
 8018246:	f000 fc51 	bl	8018aec <_Bfree>
 801824a:	9b08      	ldr	r3, [sp, #32]
 801824c:	b9a3      	cbnz	r3, 8018278 <_dtoa_r+0xa00>
 801824e:	9a06      	ldr	r2, [sp, #24]
 8018250:	b992      	cbnz	r2, 8018278 <_dtoa_r+0xa00>
 8018252:	9a07      	ldr	r2, [sp, #28]
 8018254:	b982      	cbnz	r2, 8018278 <_dtoa_r+0xa00>
 8018256:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801825a:	d029      	beq.n	80182b0 <_dtoa_r+0xa38>
 801825c:	9b00      	ldr	r3, [sp, #0]
 801825e:	2b00      	cmp	r3, #0
 8018260:	dd01      	ble.n	8018266 <_dtoa_r+0x9ee>
 8018262:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8018266:	9b05      	ldr	r3, [sp, #20]
 8018268:	1c5d      	adds	r5, r3, #1
 801826a:	f883 8000 	strb.w	r8, [r3]
 801826e:	e782      	b.n	8018176 <_dtoa_r+0x8fe>
 8018270:	4630      	mov	r0, r6
 8018272:	e7c2      	b.n	80181fa <_dtoa_r+0x982>
 8018274:	2301      	movs	r3, #1
 8018276:	e7e3      	b.n	8018240 <_dtoa_r+0x9c8>
 8018278:	9a00      	ldr	r2, [sp, #0]
 801827a:	2a00      	cmp	r2, #0
 801827c:	db04      	blt.n	8018288 <_dtoa_r+0xa10>
 801827e:	d125      	bne.n	80182cc <_dtoa_r+0xa54>
 8018280:	9a06      	ldr	r2, [sp, #24]
 8018282:	bb1a      	cbnz	r2, 80182cc <_dtoa_r+0xa54>
 8018284:	9a07      	ldr	r2, [sp, #28]
 8018286:	bb0a      	cbnz	r2, 80182cc <_dtoa_r+0xa54>
 8018288:	2b00      	cmp	r3, #0
 801828a:	ddec      	ble.n	8018266 <_dtoa_r+0x9ee>
 801828c:	2201      	movs	r2, #1
 801828e:	9904      	ldr	r1, [sp, #16]
 8018290:	4620      	mov	r0, r4
 8018292:	f000 fdf7 	bl	8018e84 <__lshift>
 8018296:	4639      	mov	r1, r7
 8018298:	9004      	str	r0, [sp, #16]
 801829a:	f000 fe47 	bl	8018f2c <__mcmp>
 801829e:	2800      	cmp	r0, #0
 80182a0:	dc03      	bgt.n	80182aa <_dtoa_r+0xa32>
 80182a2:	d1e0      	bne.n	8018266 <_dtoa_r+0x9ee>
 80182a4:	f018 0f01 	tst.w	r8, #1
 80182a8:	d0dd      	beq.n	8018266 <_dtoa_r+0x9ee>
 80182aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80182ae:	d1d8      	bne.n	8018262 <_dtoa_r+0x9ea>
 80182b0:	9b05      	ldr	r3, [sp, #20]
 80182b2:	9a05      	ldr	r2, [sp, #20]
 80182b4:	1c5d      	adds	r5, r3, #1
 80182b6:	2339      	movs	r3, #57	; 0x39
 80182b8:	7013      	strb	r3, [r2, #0]
 80182ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80182be:	2b39      	cmp	r3, #57	; 0x39
 80182c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80182c4:	d04f      	beq.n	8018366 <_dtoa_r+0xaee>
 80182c6:	3301      	adds	r3, #1
 80182c8:	7013      	strb	r3, [r2, #0]
 80182ca:	e754      	b.n	8018176 <_dtoa_r+0x8fe>
 80182cc:	9a05      	ldr	r2, [sp, #20]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	f102 0501 	add.w	r5, r2, #1
 80182d4:	dd06      	ble.n	80182e4 <_dtoa_r+0xa6c>
 80182d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80182da:	d0e9      	beq.n	80182b0 <_dtoa_r+0xa38>
 80182dc:	f108 0801 	add.w	r8, r8, #1
 80182e0:	9b05      	ldr	r3, [sp, #20]
 80182e2:	e7c2      	b.n	801826a <_dtoa_r+0x9f2>
 80182e4:	9a02      	ldr	r2, [sp, #8]
 80182e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80182ea:	eba5 030b 	sub.w	r3, r5, fp
 80182ee:	4293      	cmp	r3, r2
 80182f0:	d021      	beq.n	8018336 <_dtoa_r+0xabe>
 80182f2:	2300      	movs	r3, #0
 80182f4:	220a      	movs	r2, #10
 80182f6:	9904      	ldr	r1, [sp, #16]
 80182f8:	4620      	mov	r0, r4
 80182fa:	f000 fc0e 	bl	8018b1a <__multadd>
 80182fe:	45b1      	cmp	r9, r6
 8018300:	9004      	str	r0, [sp, #16]
 8018302:	f04f 0300 	mov.w	r3, #0
 8018306:	f04f 020a 	mov.w	r2, #10
 801830a:	4649      	mov	r1, r9
 801830c:	4620      	mov	r0, r4
 801830e:	d105      	bne.n	801831c <_dtoa_r+0xaa4>
 8018310:	f000 fc03 	bl	8018b1a <__multadd>
 8018314:	4681      	mov	r9, r0
 8018316:	4606      	mov	r6, r0
 8018318:	9505      	str	r5, [sp, #20]
 801831a:	e776      	b.n	801820a <_dtoa_r+0x992>
 801831c:	f000 fbfd 	bl	8018b1a <__multadd>
 8018320:	4631      	mov	r1, r6
 8018322:	4681      	mov	r9, r0
 8018324:	2300      	movs	r3, #0
 8018326:	220a      	movs	r2, #10
 8018328:	4620      	mov	r0, r4
 801832a:	f000 fbf6 	bl	8018b1a <__multadd>
 801832e:	4606      	mov	r6, r0
 8018330:	e7f2      	b.n	8018318 <_dtoa_r+0xaa0>
 8018332:	f04f 0900 	mov.w	r9, #0
 8018336:	2201      	movs	r2, #1
 8018338:	9904      	ldr	r1, [sp, #16]
 801833a:	4620      	mov	r0, r4
 801833c:	f000 fda2 	bl	8018e84 <__lshift>
 8018340:	4639      	mov	r1, r7
 8018342:	9004      	str	r0, [sp, #16]
 8018344:	f000 fdf2 	bl	8018f2c <__mcmp>
 8018348:	2800      	cmp	r0, #0
 801834a:	dcb6      	bgt.n	80182ba <_dtoa_r+0xa42>
 801834c:	d102      	bne.n	8018354 <_dtoa_r+0xadc>
 801834e:	f018 0f01 	tst.w	r8, #1
 8018352:	d1b2      	bne.n	80182ba <_dtoa_r+0xa42>
 8018354:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018358:	2b30      	cmp	r3, #48	; 0x30
 801835a:	f105 32ff 	add.w	r2, r5, #4294967295
 801835e:	f47f af0a 	bne.w	8018176 <_dtoa_r+0x8fe>
 8018362:	4615      	mov	r5, r2
 8018364:	e7f6      	b.n	8018354 <_dtoa_r+0xadc>
 8018366:	4593      	cmp	fp, r2
 8018368:	d105      	bne.n	8018376 <_dtoa_r+0xafe>
 801836a:	2331      	movs	r3, #49	; 0x31
 801836c:	f10a 0a01 	add.w	sl, sl, #1
 8018370:	f88b 3000 	strb.w	r3, [fp]
 8018374:	e6ff      	b.n	8018176 <_dtoa_r+0x8fe>
 8018376:	4615      	mov	r5, r2
 8018378:	e79f      	b.n	80182ba <_dtoa_r+0xa42>
 801837a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80183e0 <_dtoa_r+0xb68>
 801837e:	e007      	b.n	8018390 <_dtoa_r+0xb18>
 8018380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018382:	f8df b060 	ldr.w	fp, [pc, #96]	; 80183e4 <_dtoa_r+0xb6c>
 8018386:	b11b      	cbz	r3, 8018390 <_dtoa_r+0xb18>
 8018388:	f10b 0308 	add.w	r3, fp, #8
 801838c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801838e:	6013      	str	r3, [r2, #0]
 8018390:	4658      	mov	r0, fp
 8018392:	b017      	add	sp, #92	; 0x5c
 8018394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018398:	9b06      	ldr	r3, [sp, #24]
 801839a:	2b01      	cmp	r3, #1
 801839c:	f77f ae35 	ble.w	801800a <_dtoa_r+0x792>
 80183a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183a2:	9307      	str	r3, [sp, #28]
 80183a4:	e649      	b.n	801803a <_dtoa_r+0x7c2>
 80183a6:	9b02      	ldr	r3, [sp, #8]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	dc03      	bgt.n	80183b4 <_dtoa_r+0xb3c>
 80183ac:	9b06      	ldr	r3, [sp, #24]
 80183ae:	2b02      	cmp	r3, #2
 80183b0:	f73f aecc 	bgt.w	801814c <_dtoa_r+0x8d4>
 80183b4:	465d      	mov	r5, fp
 80183b6:	4639      	mov	r1, r7
 80183b8:	9804      	ldr	r0, [sp, #16]
 80183ba:	f7ff f9cf 	bl	801775c <quorem>
 80183be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80183c2:	f805 8b01 	strb.w	r8, [r5], #1
 80183c6:	9a02      	ldr	r2, [sp, #8]
 80183c8:	eba5 030b 	sub.w	r3, r5, fp
 80183cc:	429a      	cmp	r2, r3
 80183ce:	ddb0      	ble.n	8018332 <_dtoa_r+0xaba>
 80183d0:	2300      	movs	r3, #0
 80183d2:	220a      	movs	r2, #10
 80183d4:	9904      	ldr	r1, [sp, #16]
 80183d6:	4620      	mov	r0, r4
 80183d8:	f000 fb9f 	bl	8018b1a <__multadd>
 80183dc:	9004      	str	r0, [sp, #16]
 80183de:	e7ea      	b.n	80183b6 <_dtoa_r+0xb3e>
 80183e0:	0801b290 	.word	0x0801b290
 80183e4:	0801b310 	.word	0x0801b310

080183e8 <rshift>:
 80183e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183ea:	6906      	ldr	r6, [r0, #16]
 80183ec:	114b      	asrs	r3, r1, #5
 80183ee:	429e      	cmp	r6, r3
 80183f0:	f100 0414 	add.w	r4, r0, #20
 80183f4:	dd30      	ble.n	8018458 <rshift+0x70>
 80183f6:	f011 011f 	ands.w	r1, r1, #31
 80183fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80183fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018402:	d108      	bne.n	8018416 <rshift+0x2e>
 8018404:	4621      	mov	r1, r4
 8018406:	42b2      	cmp	r2, r6
 8018408:	460b      	mov	r3, r1
 801840a:	d211      	bcs.n	8018430 <rshift+0x48>
 801840c:	f852 3b04 	ldr.w	r3, [r2], #4
 8018410:	f841 3b04 	str.w	r3, [r1], #4
 8018414:	e7f7      	b.n	8018406 <rshift+0x1e>
 8018416:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801841a:	f1c1 0c20 	rsb	ip, r1, #32
 801841e:	40cd      	lsrs	r5, r1
 8018420:	3204      	adds	r2, #4
 8018422:	4623      	mov	r3, r4
 8018424:	42b2      	cmp	r2, r6
 8018426:	4617      	mov	r7, r2
 8018428:	d30c      	bcc.n	8018444 <rshift+0x5c>
 801842a:	601d      	str	r5, [r3, #0]
 801842c:	b105      	cbz	r5, 8018430 <rshift+0x48>
 801842e:	3304      	adds	r3, #4
 8018430:	1b1a      	subs	r2, r3, r4
 8018432:	42a3      	cmp	r3, r4
 8018434:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018438:	bf08      	it	eq
 801843a:	2300      	moveq	r3, #0
 801843c:	6102      	str	r2, [r0, #16]
 801843e:	bf08      	it	eq
 8018440:	6143      	streq	r3, [r0, #20]
 8018442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018444:	683f      	ldr	r7, [r7, #0]
 8018446:	fa07 f70c 	lsl.w	r7, r7, ip
 801844a:	433d      	orrs	r5, r7
 801844c:	f843 5b04 	str.w	r5, [r3], #4
 8018450:	f852 5b04 	ldr.w	r5, [r2], #4
 8018454:	40cd      	lsrs	r5, r1
 8018456:	e7e5      	b.n	8018424 <rshift+0x3c>
 8018458:	4623      	mov	r3, r4
 801845a:	e7e9      	b.n	8018430 <rshift+0x48>

0801845c <__hexdig_fun>:
 801845c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018460:	2b09      	cmp	r3, #9
 8018462:	d802      	bhi.n	801846a <__hexdig_fun+0xe>
 8018464:	3820      	subs	r0, #32
 8018466:	b2c0      	uxtb	r0, r0
 8018468:	4770      	bx	lr
 801846a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801846e:	2b05      	cmp	r3, #5
 8018470:	d801      	bhi.n	8018476 <__hexdig_fun+0x1a>
 8018472:	3847      	subs	r0, #71	; 0x47
 8018474:	e7f7      	b.n	8018466 <__hexdig_fun+0xa>
 8018476:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801847a:	2b05      	cmp	r3, #5
 801847c:	d801      	bhi.n	8018482 <__hexdig_fun+0x26>
 801847e:	3827      	subs	r0, #39	; 0x27
 8018480:	e7f1      	b.n	8018466 <__hexdig_fun+0xa>
 8018482:	2000      	movs	r0, #0
 8018484:	4770      	bx	lr

08018486 <__gethex>:
 8018486:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801848a:	b08b      	sub	sp, #44	; 0x2c
 801848c:	468a      	mov	sl, r1
 801848e:	9002      	str	r0, [sp, #8]
 8018490:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018492:	9306      	str	r3, [sp, #24]
 8018494:	4690      	mov	r8, r2
 8018496:	f000 fad0 	bl	8018a3a <__localeconv_l>
 801849a:	6803      	ldr	r3, [r0, #0]
 801849c:	9303      	str	r3, [sp, #12]
 801849e:	4618      	mov	r0, r3
 80184a0:	f7e7 fe96 	bl	80001d0 <strlen>
 80184a4:	9b03      	ldr	r3, [sp, #12]
 80184a6:	9001      	str	r0, [sp, #4]
 80184a8:	4403      	add	r3, r0
 80184aa:	f04f 0b00 	mov.w	fp, #0
 80184ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80184b2:	9307      	str	r3, [sp, #28]
 80184b4:	f8da 3000 	ldr.w	r3, [sl]
 80184b8:	3302      	adds	r3, #2
 80184ba:	461f      	mov	r7, r3
 80184bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80184c0:	2830      	cmp	r0, #48	; 0x30
 80184c2:	d06c      	beq.n	801859e <__gethex+0x118>
 80184c4:	f7ff ffca 	bl	801845c <__hexdig_fun>
 80184c8:	4604      	mov	r4, r0
 80184ca:	2800      	cmp	r0, #0
 80184cc:	d16a      	bne.n	80185a4 <__gethex+0x11e>
 80184ce:	9a01      	ldr	r2, [sp, #4]
 80184d0:	9903      	ldr	r1, [sp, #12]
 80184d2:	4638      	mov	r0, r7
 80184d4:	f001 f828 	bl	8019528 <strncmp>
 80184d8:	2800      	cmp	r0, #0
 80184da:	d166      	bne.n	80185aa <__gethex+0x124>
 80184dc:	9b01      	ldr	r3, [sp, #4]
 80184de:	5cf8      	ldrb	r0, [r7, r3]
 80184e0:	18fe      	adds	r6, r7, r3
 80184e2:	f7ff ffbb 	bl	801845c <__hexdig_fun>
 80184e6:	2800      	cmp	r0, #0
 80184e8:	d062      	beq.n	80185b0 <__gethex+0x12a>
 80184ea:	4633      	mov	r3, r6
 80184ec:	7818      	ldrb	r0, [r3, #0]
 80184ee:	2830      	cmp	r0, #48	; 0x30
 80184f0:	461f      	mov	r7, r3
 80184f2:	f103 0301 	add.w	r3, r3, #1
 80184f6:	d0f9      	beq.n	80184ec <__gethex+0x66>
 80184f8:	f7ff ffb0 	bl	801845c <__hexdig_fun>
 80184fc:	fab0 f580 	clz	r5, r0
 8018500:	096d      	lsrs	r5, r5, #5
 8018502:	4634      	mov	r4, r6
 8018504:	f04f 0b01 	mov.w	fp, #1
 8018508:	463a      	mov	r2, r7
 801850a:	4616      	mov	r6, r2
 801850c:	3201      	adds	r2, #1
 801850e:	7830      	ldrb	r0, [r6, #0]
 8018510:	f7ff ffa4 	bl	801845c <__hexdig_fun>
 8018514:	2800      	cmp	r0, #0
 8018516:	d1f8      	bne.n	801850a <__gethex+0x84>
 8018518:	9a01      	ldr	r2, [sp, #4]
 801851a:	9903      	ldr	r1, [sp, #12]
 801851c:	4630      	mov	r0, r6
 801851e:	f001 f803 	bl	8019528 <strncmp>
 8018522:	b950      	cbnz	r0, 801853a <__gethex+0xb4>
 8018524:	b954      	cbnz	r4, 801853c <__gethex+0xb6>
 8018526:	9b01      	ldr	r3, [sp, #4]
 8018528:	18f4      	adds	r4, r6, r3
 801852a:	4622      	mov	r2, r4
 801852c:	4616      	mov	r6, r2
 801852e:	3201      	adds	r2, #1
 8018530:	7830      	ldrb	r0, [r6, #0]
 8018532:	f7ff ff93 	bl	801845c <__hexdig_fun>
 8018536:	2800      	cmp	r0, #0
 8018538:	d1f8      	bne.n	801852c <__gethex+0xa6>
 801853a:	b10c      	cbz	r4, 8018540 <__gethex+0xba>
 801853c:	1ba4      	subs	r4, r4, r6
 801853e:	00a4      	lsls	r4, r4, #2
 8018540:	7833      	ldrb	r3, [r6, #0]
 8018542:	2b50      	cmp	r3, #80	; 0x50
 8018544:	d001      	beq.n	801854a <__gethex+0xc4>
 8018546:	2b70      	cmp	r3, #112	; 0x70
 8018548:	d140      	bne.n	80185cc <__gethex+0x146>
 801854a:	7873      	ldrb	r3, [r6, #1]
 801854c:	2b2b      	cmp	r3, #43	; 0x2b
 801854e:	d031      	beq.n	80185b4 <__gethex+0x12e>
 8018550:	2b2d      	cmp	r3, #45	; 0x2d
 8018552:	d033      	beq.n	80185bc <__gethex+0x136>
 8018554:	1c71      	adds	r1, r6, #1
 8018556:	f04f 0900 	mov.w	r9, #0
 801855a:	7808      	ldrb	r0, [r1, #0]
 801855c:	f7ff ff7e 	bl	801845c <__hexdig_fun>
 8018560:	1e43      	subs	r3, r0, #1
 8018562:	b2db      	uxtb	r3, r3
 8018564:	2b18      	cmp	r3, #24
 8018566:	d831      	bhi.n	80185cc <__gethex+0x146>
 8018568:	f1a0 0210 	sub.w	r2, r0, #16
 801856c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018570:	f7ff ff74 	bl	801845c <__hexdig_fun>
 8018574:	1e43      	subs	r3, r0, #1
 8018576:	b2db      	uxtb	r3, r3
 8018578:	2b18      	cmp	r3, #24
 801857a:	d922      	bls.n	80185c2 <__gethex+0x13c>
 801857c:	f1b9 0f00 	cmp.w	r9, #0
 8018580:	d000      	beq.n	8018584 <__gethex+0xfe>
 8018582:	4252      	negs	r2, r2
 8018584:	4414      	add	r4, r2
 8018586:	f8ca 1000 	str.w	r1, [sl]
 801858a:	b30d      	cbz	r5, 80185d0 <__gethex+0x14a>
 801858c:	f1bb 0f00 	cmp.w	fp, #0
 8018590:	bf0c      	ite	eq
 8018592:	2706      	moveq	r7, #6
 8018594:	2700      	movne	r7, #0
 8018596:	4638      	mov	r0, r7
 8018598:	b00b      	add	sp, #44	; 0x2c
 801859a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801859e:	f10b 0b01 	add.w	fp, fp, #1
 80185a2:	e78a      	b.n	80184ba <__gethex+0x34>
 80185a4:	2500      	movs	r5, #0
 80185a6:	462c      	mov	r4, r5
 80185a8:	e7ae      	b.n	8018508 <__gethex+0x82>
 80185aa:	463e      	mov	r6, r7
 80185ac:	2501      	movs	r5, #1
 80185ae:	e7c7      	b.n	8018540 <__gethex+0xba>
 80185b0:	4604      	mov	r4, r0
 80185b2:	e7fb      	b.n	80185ac <__gethex+0x126>
 80185b4:	f04f 0900 	mov.w	r9, #0
 80185b8:	1cb1      	adds	r1, r6, #2
 80185ba:	e7ce      	b.n	801855a <__gethex+0xd4>
 80185bc:	f04f 0901 	mov.w	r9, #1
 80185c0:	e7fa      	b.n	80185b8 <__gethex+0x132>
 80185c2:	230a      	movs	r3, #10
 80185c4:	fb03 0202 	mla	r2, r3, r2, r0
 80185c8:	3a10      	subs	r2, #16
 80185ca:	e7cf      	b.n	801856c <__gethex+0xe6>
 80185cc:	4631      	mov	r1, r6
 80185ce:	e7da      	b.n	8018586 <__gethex+0x100>
 80185d0:	1bf3      	subs	r3, r6, r7
 80185d2:	3b01      	subs	r3, #1
 80185d4:	4629      	mov	r1, r5
 80185d6:	2b07      	cmp	r3, #7
 80185d8:	dc49      	bgt.n	801866e <__gethex+0x1e8>
 80185da:	9802      	ldr	r0, [sp, #8]
 80185dc:	f000 fa52 	bl	8018a84 <_Balloc>
 80185e0:	9b01      	ldr	r3, [sp, #4]
 80185e2:	f100 0914 	add.w	r9, r0, #20
 80185e6:	f04f 0b00 	mov.w	fp, #0
 80185ea:	f1c3 0301 	rsb	r3, r3, #1
 80185ee:	4605      	mov	r5, r0
 80185f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80185f4:	46da      	mov	sl, fp
 80185f6:	9308      	str	r3, [sp, #32]
 80185f8:	42b7      	cmp	r7, r6
 80185fa:	d33b      	bcc.n	8018674 <__gethex+0x1ee>
 80185fc:	9804      	ldr	r0, [sp, #16]
 80185fe:	f840 ab04 	str.w	sl, [r0], #4
 8018602:	eba0 0009 	sub.w	r0, r0, r9
 8018606:	1080      	asrs	r0, r0, #2
 8018608:	6128      	str	r0, [r5, #16]
 801860a:	0147      	lsls	r7, r0, #5
 801860c:	4650      	mov	r0, sl
 801860e:	f000 fafd 	bl	8018c0c <__hi0bits>
 8018612:	f8d8 6000 	ldr.w	r6, [r8]
 8018616:	1a3f      	subs	r7, r7, r0
 8018618:	42b7      	cmp	r7, r6
 801861a:	dd64      	ble.n	80186e6 <__gethex+0x260>
 801861c:	1bbf      	subs	r7, r7, r6
 801861e:	4639      	mov	r1, r7
 8018620:	4628      	mov	r0, r5
 8018622:	f000 fe0d 	bl	8019240 <__any_on>
 8018626:	4682      	mov	sl, r0
 8018628:	b178      	cbz	r0, 801864a <__gethex+0x1c4>
 801862a:	1e7b      	subs	r3, r7, #1
 801862c:	1159      	asrs	r1, r3, #5
 801862e:	f003 021f 	and.w	r2, r3, #31
 8018632:	f04f 0a01 	mov.w	sl, #1
 8018636:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801863a:	fa0a f202 	lsl.w	r2, sl, r2
 801863e:	420a      	tst	r2, r1
 8018640:	d003      	beq.n	801864a <__gethex+0x1c4>
 8018642:	4553      	cmp	r3, sl
 8018644:	dc46      	bgt.n	80186d4 <__gethex+0x24e>
 8018646:	f04f 0a02 	mov.w	sl, #2
 801864a:	4639      	mov	r1, r7
 801864c:	4628      	mov	r0, r5
 801864e:	f7ff fecb 	bl	80183e8 <rshift>
 8018652:	443c      	add	r4, r7
 8018654:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018658:	42a3      	cmp	r3, r4
 801865a:	da52      	bge.n	8018702 <__gethex+0x27c>
 801865c:	4629      	mov	r1, r5
 801865e:	9802      	ldr	r0, [sp, #8]
 8018660:	f000 fa44 	bl	8018aec <_Bfree>
 8018664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018666:	2300      	movs	r3, #0
 8018668:	6013      	str	r3, [r2, #0]
 801866a:	27a3      	movs	r7, #163	; 0xa3
 801866c:	e793      	b.n	8018596 <__gethex+0x110>
 801866e:	3101      	adds	r1, #1
 8018670:	105b      	asrs	r3, r3, #1
 8018672:	e7b0      	b.n	80185d6 <__gethex+0x150>
 8018674:	1e73      	subs	r3, r6, #1
 8018676:	9305      	str	r3, [sp, #20]
 8018678:	9a07      	ldr	r2, [sp, #28]
 801867a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801867e:	4293      	cmp	r3, r2
 8018680:	d018      	beq.n	80186b4 <__gethex+0x22e>
 8018682:	f1bb 0f20 	cmp.w	fp, #32
 8018686:	d107      	bne.n	8018698 <__gethex+0x212>
 8018688:	9b04      	ldr	r3, [sp, #16]
 801868a:	f8c3 a000 	str.w	sl, [r3]
 801868e:	3304      	adds	r3, #4
 8018690:	f04f 0a00 	mov.w	sl, #0
 8018694:	9304      	str	r3, [sp, #16]
 8018696:	46d3      	mov	fp, sl
 8018698:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801869c:	f7ff fede 	bl	801845c <__hexdig_fun>
 80186a0:	f000 000f 	and.w	r0, r0, #15
 80186a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80186a8:	ea4a 0a00 	orr.w	sl, sl, r0
 80186ac:	f10b 0b04 	add.w	fp, fp, #4
 80186b0:	9b05      	ldr	r3, [sp, #20]
 80186b2:	e00d      	b.n	80186d0 <__gethex+0x24a>
 80186b4:	9b05      	ldr	r3, [sp, #20]
 80186b6:	9a08      	ldr	r2, [sp, #32]
 80186b8:	4413      	add	r3, r2
 80186ba:	42bb      	cmp	r3, r7
 80186bc:	d3e1      	bcc.n	8018682 <__gethex+0x1fc>
 80186be:	4618      	mov	r0, r3
 80186c0:	9a01      	ldr	r2, [sp, #4]
 80186c2:	9903      	ldr	r1, [sp, #12]
 80186c4:	9309      	str	r3, [sp, #36]	; 0x24
 80186c6:	f000 ff2f 	bl	8019528 <strncmp>
 80186ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186cc:	2800      	cmp	r0, #0
 80186ce:	d1d8      	bne.n	8018682 <__gethex+0x1fc>
 80186d0:	461e      	mov	r6, r3
 80186d2:	e791      	b.n	80185f8 <__gethex+0x172>
 80186d4:	1eb9      	subs	r1, r7, #2
 80186d6:	4628      	mov	r0, r5
 80186d8:	f000 fdb2 	bl	8019240 <__any_on>
 80186dc:	2800      	cmp	r0, #0
 80186de:	d0b2      	beq.n	8018646 <__gethex+0x1c0>
 80186e0:	f04f 0a03 	mov.w	sl, #3
 80186e4:	e7b1      	b.n	801864a <__gethex+0x1c4>
 80186e6:	da09      	bge.n	80186fc <__gethex+0x276>
 80186e8:	1bf7      	subs	r7, r6, r7
 80186ea:	4629      	mov	r1, r5
 80186ec:	463a      	mov	r2, r7
 80186ee:	9802      	ldr	r0, [sp, #8]
 80186f0:	f000 fbc8 	bl	8018e84 <__lshift>
 80186f4:	1be4      	subs	r4, r4, r7
 80186f6:	4605      	mov	r5, r0
 80186f8:	f100 0914 	add.w	r9, r0, #20
 80186fc:	f04f 0a00 	mov.w	sl, #0
 8018700:	e7a8      	b.n	8018654 <__gethex+0x1ce>
 8018702:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018706:	42a0      	cmp	r0, r4
 8018708:	dd6a      	ble.n	80187e0 <__gethex+0x35a>
 801870a:	1b04      	subs	r4, r0, r4
 801870c:	42a6      	cmp	r6, r4
 801870e:	dc2e      	bgt.n	801876e <__gethex+0x2e8>
 8018710:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018714:	2b02      	cmp	r3, #2
 8018716:	d022      	beq.n	801875e <__gethex+0x2d8>
 8018718:	2b03      	cmp	r3, #3
 801871a:	d024      	beq.n	8018766 <__gethex+0x2e0>
 801871c:	2b01      	cmp	r3, #1
 801871e:	d115      	bne.n	801874c <__gethex+0x2c6>
 8018720:	42a6      	cmp	r6, r4
 8018722:	d113      	bne.n	801874c <__gethex+0x2c6>
 8018724:	2e01      	cmp	r6, #1
 8018726:	dc0b      	bgt.n	8018740 <__gethex+0x2ba>
 8018728:	9a06      	ldr	r2, [sp, #24]
 801872a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801872e:	6013      	str	r3, [r2, #0]
 8018730:	2301      	movs	r3, #1
 8018732:	612b      	str	r3, [r5, #16]
 8018734:	f8c9 3000 	str.w	r3, [r9]
 8018738:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801873a:	2762      	movs	r7, #98	; 0x62
 801873c:	601d      	str	r5, [r3, #0]
 801873e:	e72a      	b.n	8018596 <__gethex+0x110>
 8018740:	1e71      	subs	r1, r6, #1
 8018742:	4628      	mov	r0, r5
 8018744:	f000 fd7c 	bl	8019240 <__any_on>
 8018748:	2800      	cmp	r0, #0
 801874a:	d1ed      	bne.n	8018728 <__gethex+0x2a2>
 801874c:	4629      	mov	r1, r5
 801874e:	9802      	ldr	r0, [sp, #8]
 8018750:	f000 f9cc 	bl	8018aec <_Bfree>
 8018754:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018756:	2300      	movs	r3, #0
 8018758:	6013      	str	r3, [r2, #0]
 801875a:	2750      	movs	r7, #80	; 0x50
 801875c:	e71b      	b.n	8018596 <__gethex+0x110>
 801875e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018760:	2b00      	cmp	r3, #0
 8018762:	d0e1      	beq.n	8018728 <__gethex+0x2a2>
 8018764:	e7f2      	b.n	801874c <__gethex+0x2c6>
 8018766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018768:	2b00      	cmp	r3, #0
 801876a:	d1dd      	bne.n	8018728 <__gethex+0x2a2>
 801876c:	e7ee      	b.n	801874c <__gethex+0x2c6>
 801876e:	1e67      	subs	r7, r4, #1
 8018770:	f1ba 0f00 	cmp.w	sl, #0
 8018774:	d131      	bne.n	80187da <__gethex+0x354>
 8018776:	b127      	cbz	r7, 8018782 <__gethex+0x2fc>
 8018778:	4639      	mov	r1, r7
 801877a:	4628      	mov	r0, r5
 801877c:	f000 fd60 	bl	8019240 <__any_on>
 8018780:	4682      	mov	sl, r0
 8018782:	117a      	asrs	r2, r7, #5
 8018784:	2301      	movs	r3, #1
 8018786:	f007 071f 	and.w	r7, r7, #31
 801878a:	fa03 f707 	lsl.w	r7, r3, r7
 801878e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018792:	4621      	mov	r1, r4
 8018794:	421f      	tst	r7, r3
 8018796:	4628      	mov	r0, r5
 8018798:	bf18      	it	ne
 801879a:	f04a 0a02 	orrne.w	sl, sl, #2
 801879e:	1b36      	subs	r6, r6, r4
 80187a0:	f7ff fe22 	bl	80183e8 <rshift>
 80187a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80187a8:	2702      	movs	r7, #2
 80187aa:	f1ba 0f00 	cmp.w	sl, #0
 80187ae:	d048      	beq.n	8018842 <__gethex+0x3bc>
 80187b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80187b4:	2b02      	cmp	r3, #2
 80187b6:	d015      	beq.n	80187e4 <__gethex+0x35e>
 80187b8:	2b03      	cmp	r3, #3
 80187ba:	d017      	beq.n	80187ec <__gethex+0x366>
 80187bc:	2b01      	cmp	r3, #1
 80187be:	d109      	bne.n	80187d4 <__gethex+0x34e>
 80187c0:	f01a 0f02 	tst.w	sl, #2
 80187c4:	d006      	beq.n	80187d4 <__gethex+0x34e>
 80187c6:	f8d9 3000 	ldr.w	r3, [r9]
 80187ca:	ea4a 0a03 	orr.w	sl, sl, r3
 80187ce:	f01a 0f01 	tst.w	sl, #1
 80187d2:	d10e      	bne.n	80187f2 <__gethex+0x36c>
 80187d4:	f047 0710 	orr.w	r7, r7, #16
 80187d8:	e033      	b.n	8018842 <__gethex+0x3bc>
 80187da:	f04f 0a01 	mov.w	sl, #1
 80187de:	e7d0      	b.n	8018782 <__gethex+0x2fc>
 80187e0:	2701      	movs	r7, #1
 80187e2:	e7e2      	b.n	80187aa <__gethex+0x324>
 80187e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187e6:	f1c3 0301 	rsb	r3, r3, #1
 80187ea:	9315      	str	r3, [sp, #84]	; 0x54
 80187ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d0f0      	beq.n	80187d4 <__gethex+0x34e>
 80187f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80187f6:	f105 0314 	add.w	r3, r5, #20
 80187fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80187fe:	eb03 010a 	add.w	r1, r3, sl
 8018802:	f04f 0c00 	mov.w	ip, #0
 8018806:	4618      	mov	r0, r3
 8018808:	f853 2b04 	ldr.w	r2, [r3], #4
 801880c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018810:	d01c      	beq.n	801884c <__gethex+0x3c6>
 8018812:	3201      	adds	r2, #1
 8018814:	6002      	str	r2, [r0, #0]
 8018816:	2f02      	cmp	r7, #2
 8018818:	f105 0314 	add.w	r3, r5, #20
 801881c:	d138      	bne.n	8018890 <__gethex+0x40a>
 801881e:	f8d8 2000 	ldr.w	r2, [r8]
 8018822:	3a01      	subs	r2, #1
 8018824:	42b2      	cmp	r2, r6
 8018826:	d10a      	bne.n	801883e <__gethex+0x3b8>
 8018828:	1171      	asrs	r1, r6, #5
 801882a:	2201      	movs	r2, #1
 801882c:	f006 061f 	and.w	r6, r6, #31
 8018830:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018834:	fa02 f606 	lsl.w	r6, r2, r6
 8018838:	421e      	tst	r6, r3
 801883a:	bf18      	it	ne
 801883c:	4617      	movne	r7, r2
 801883e:	f047 0720 	orr.w	r7, r7, #32
 8018842:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018844:	601d      	str	r5, [r3, #0]
 8018846:	9b06      	ldr	r3, [sp, #24]
 8018848:	601c      	str	r4, [r3, #0]
 801884a:	e6a4      	b.n	8018596 <__gethex+0x110>
 801884c:	4299      	cmp	r1, r3
 801884e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018852:	d8d8      	bhi.n	8018806 <__gethex+0x380>
 8018854:	68ab      	ldr	r3, [r5, #8]
 8018856:	4599      	cmp	r9, r3
 8018858:	db12      	blt.n	8018880 <__gethex+0x3fa>
 801885a:	6869      	ldr	r1, [r5, #4]
 801885c:	9802      	ldr	r0, [sp, #8]
 801885e:	3101      	adds	r1, #1
 8018860:	f000 f910 	bl	8018a84 <_Balloc>
 8018864:	692a      	ldr	r2, [r5, #16]
 8018866:	3202      	adds	r2, #2
 8018868:	f105 010c 	add.w	r1, r5, #12
 801886c:	4683      	mov	fp, r0
 801886e:	0092      	lsls	r2, r2, #2
 8018870:	300c      	adds	r0, #12
 8018872:	f7fd f93b 	bl	8015aec <memcpy>
 8018876:	4629      	mov	r1, r5
 8018878:	9802      	ldr	r0, [sp, #8]
 801887a:	f000 f937 	bl	8018aec <_Bfree>
 801887e:	465d      	mov	r5, fp
 8018880:	692b      	ldr	r3, [r5, #16]
 8018882:	1c5a      	adds	r2, r3, #1
 8018884:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018888:	612a      	str	r2, [r5, #16]
 801888a:	2201      	movs	r2, #1
 801888c:	615a      	str	r2, [r3, #20]
 801888e:	e7c2      	b.n	8018816 <__gethex+0x390>
 8018890:	692a      	ldr	r2, [r5, #16]
 8018892:	454a      	cmp	r2, r9
 8018894:	dd0b      	ble.n	80188ae <__gethex+0x428>
 8018896:	2101      	movs	r1, #1
 8018898:	4628      	mov	r0, r5
 801889a:	f7ff fda5 	bl	80183e8 <rshift>
 801889e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80188a2:	3401      	adds	r4, #1
 80188a4:	42a3      	cmp	r3, r4
 80188a6:	f6ff aed9 	blt.w	801865c <__gethex+0x1d6>
 80188aa:	2701      	movs	r7, #1
 80188ac:	e7c7      	b.n	801883e <__gethex+0x3b8>
 80188ae:	f016 061f 	ands.w	r6, r6, #31
 80188b2:	d0fa      	beq.n	80188aa <__gethex+0x424>
 80188b4:	449a      	add	sl, r3
 80188b6:	f1c6 0620 	rsb	r6, r6, #32
 80188ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80188be:	f000 f9a5 	bl	8018c0c <__hi0bits>
 80188c2:	42b0      	cmp	r0, r6
 80188c4:	dbe7      	blt.n	8018896 <__gethex+0x410>
 80188c6:	e7f0      	b.n	80188aa <__gethex+0x424>

080188c8 <L_shift>:
 80188c8:	f1c2 0208 	rsb	r2, r2, #8
 80188cc:	0092      	lsls	r2, r2, #2
 80188ce:	b570      	push	{r4, r5, r6, lr}
 80188d0:	f1c2 0620 	rsb	r6, r2, #32
 80188d4:	6843      	ldr	r3, [r0, #4]
 80188d6:	6804      	ldr	r4, [r0, #0]
 80188d8:	fa03 f506 	lsl.w	r5, r3, r6
 80188dc:	432c      	orrs	r4, r5
 80188de:	40d3      	lsrs	r3, r2
 80188e0:	6004      	str	r4, [r0, #0]
 80188e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80188e6:	4288      	cmp	r0, r1
 80188e8:	d3f4      	bcc.n	80188d4 <L_shift+0xc>
 80188ea:	bd70      	pop	{r4, r5, r6, pc}

080188ec <__match>:
 80188ec:	b530      	push	{r4, r5, lr}
 80188ee:	6803      	ldr	r3, [r0, #0]
 80188f0:	3301      	adds	r3, #1
 80188f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80188f6:	b914      	cbnz	r4, 80188fe <__match+0x12>
 80188f8:	6003      	str	r3, [r0, #0]
 80188fa:	2001      	movs	r0, #1
 80188fc:	bd30      	pop	{r4, r5, pc}
 80188fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018902:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018906:	2d19      	cmp	r5, #25
 8018908:	bf98      	it	ls
 801890a:	3220      	addls	r2, #32
 801890c:	42a2      	cmp	r2, r4
 801890e:	d0f0      	beq.n	80188f2 <__match+0x6>
 8018910:	2000      	movs	r0, #0
 8018912:	e7f3      	b.n	80188fc <__match+0x10>

08018914 <__hexnan>:
 8018914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018918:	680b      	ldr	r3, [r1, #0]
 801891a:	6801      	ldr	r1, [r0, #0]
 801891c:	115f      	asrs	r7, r3, #5
 801891e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018922:	f013 031f 	ands.w	r3, r3, #31
 8018926:	b087      	sub	sp, #28
 8018928:	bf18      	it	ne
 801892a:	3704      	addne	r7, #4
 801892c:	2500      	movs	r5, #0
 801892e:	1f3e      	subs	r6, r7, #4
 8018930:	4682      	mov	sl, r0
 8018932:	4690      	mov	r8, r2
 8018934:	9301      	str	r3, [sp, #4]
 8018936:	f847 5c04 	str.w	r5, [r7, #-4]
 801893a:	46b1      	mov	r9, r6
 801893c:	4634      	mov	r4, r6
 801893e:	9502      	str	r5, [sp, #8]
 8018940:	46ab      	mov	fp, r5
 8018942:	784a      	ldrb	r2, [r1, #1]
 8018944:	1c4b      	adds	r3, r1, #1
 8018946:	9303      	str	r3, [sp, #12]
 8018948:	b342      	cbz	r2, 801899c <__hexnan+0x88>
 801894a:	4610      	mov	r0, r2
 801894c:	9105      	str	r1, [sp, #20]
 801894e:	9204      	str	r2, [sp, #16]
 8018950:	f7ff fd84 	bl	801845c <__hexdig_fun>
 8018954:	2800      	cmp	r0, #0
 8018956:	d143      	bne.n	80189e0 <__hexnan+0xcc>
 8018958:	9a04      	ldr	r2, [sp, #16]
 801895a:	9905      	ldr	r1, [sp, #20]
 801895c:	2a20      	cmp	r2, #32
 801895e:	d818      	bhi.n	8018992 <__hexnan+0x7e>
 8018960:	9b02      	ldr	r3, [sp, #8]
 8018962:	459b      	cmp	fp, r3
 8018964:	dd13      	ble.n	801898e <__hexnan+0x7a>
 8018966:	454c      	cmp	r4, r9
 8018968:	d206      	bcs.n	8018978 <__hexnan+0x64>
 801896a:	2d07      	cmp	r5, #7
 801896c:	dc04      	bgt.n	8018978 <__hexnan+0x64>
 801896e:	462a      	mov	r2, r5
 8018970:	4649      	mov	r1, r9
 8018972:	4620      	mov	r0, r4
 8018974:	f7ff ffa8 	bl	80188c8 <L_shift>
 8018978:	4544      	cmp	r4, r8
 801897a:	d944      	bls.n	8018a06 <__hexnan+0xf2>
 801897c:	2300      	movs	r3, #0
 801897e:	f1a4 0904 	sub.w	r9, r4, #4
 8018982:	f844 3c04 	str.w	r3, [r4, #-4]
 8018986:	f8cd b008 	str.w	fp, [sp, #8]
 801898a:	464c      	mov	r4, r9
 801898c:	461d      	mov	r5, r3
 801898e:	9903      	ldr	r1, [sp, #12]
 8018990:	e7d7      	b.n	8018942 <__hexnan+0x2e>
 8018992:	2a29      	cmp	r2, #41	; 0x29
 8018994:	d14a      	bne.n	8018a2c <__hexnan+0x118>
 8018996:	3102      	adds	r1, #2
 8018998:	f8ca 1000 	str.w	r1, [sl]
 801899c:	f1bb 0f00 	cmp.w	fp, #0
 80189a0:	d044      	beq.n	8018a2c <__hexnan+0x118>
 80189a2:	454c      	cmp	r4, r9
 80189a4:	d206      	bcs.n	80189b4 <__hexnan+0xa0>
 80189a6:	2d07      	cmp	r5, #7
 80189a8:	dc04      	bgt.n	80189b4 <__hexnan+0xa0>
 80189aa:	462a      	mov	r2, r5
 80189ac:	4649      	mov	r1, r9
 80189ae:	4620      	mov	r0, r4
 80189b0:	f7ff ff8a 	bl	80188c8 <L_shift>
 80189b4:	4544      	cmp	r4, r8
 80189b6:	d928      	bls.n	8018a0a <__hexnan+0xf6>
 80189b8:	4643      	mov	r3, r8
 80189ba:	f854 2b04 	ldr.w	r2, [r4], #4
 80189be:	f843 2b04 	str.w	r2, [r3], #4
 80189c2:	42a6      	cmp	r6, r4
 80189c4:	d2f9      	bcs.n	80189ba <__hexnan+0xa6>
 80189c6:	2200      	movs	r2, #0
 80189c8:	f843 2b04 	str.w	r2, [r3], #4
 80189cc:	429e      	cmp	r6, r3
 80189ce:	d2fb      	bcs.n	80189c8 <__hexnan+0xb4>
 80189d0:	6833      	ldr	r3, [r6, #0]
 80189d2:	b91b      	cbnz	r3, 80189dc <__hexnan+0xc8>
 80189d4:	4546      	cmp	r6, r8
 80189d6:	d127      	bne.n	8018a28 <__hexnan+0x114>
 80189d8:	2301      	movs	r3, #1
 80189da:	6033      	str	r3, [r6, #0]
 80189dc:	2005      	movs	r0, #5
 80189de:	e026      	b.n	8018a2e <__hexnan+0x11a>
 80189e0:	3501      	adds	r5, #1
 80189e2:	2d08      	cmp	r5, #8
 80189e4:	f10b 0b01 	add.w	fp, fp, #1
 80189e8:	dd06      	ble.n	80189f8 <__hexnan+0xe4>
 80189ea:	4544      	cmp	r4, r8
 80189ec:	d9cf      	bls.n	801898e <__hexnan+0x7a>
 80189ee:	2300      	movs	r3, #0
 80189f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80189f4:	2501      	movs	r5, #1
 80189f6:	3c04      	subs	r4, #4
 80189f8:	6822      	ldr	r2, [r4, #0]
 80189fa:	f000 000f 	and.w	r0, r0, #15
 80189fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018a02:	6020      	str	r0, [r4, #0]
 8018a04:	e7c3      	b.n	801898e <__hexnan+0x7a>
 8018a06:	2508      	movs	r5, #8
 8018a08:	e7c1      	b.n	801898e <__hexnan+0x7a>
 8018a0a:	9b01      	ldr	r3, [sp, #4]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d0df      	beq.n	80189d0 <__hexnan+0xbc>
 8018a10:	f04f 32ff 	mov.w	r2, #4294967295
 8018a14:	f1c3 0320 	rsb	r3, r3, #32
 8018a18:	fa22 f303 	lsr.w	r3, r2, r3
 8018a1c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018a20:	401a      	ands	r2, r3
 8018a22:	f847 2c04 	str.w	r2, [r7, #-4]
 8018a26:	e7d3      	b.n	80189d0 <__hexnan+0xbc>
 8018a28:	3e04      	subs	r6, #4
 8018a2a:	e7d1      	b.n	80189d0 <__hexnan+0xbc>
 8018a2c:	2004      	movs	r0, #4
 8018a2e:	b007      	add	sp, #28
 8018a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a34 <__locale_ctype_ptr_l>:
 8018a34:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018a38:	4770      	bx	lr

08018a3a <__localeconv_l>:
 8018a3a:	30f0      	adds	r0, #240	; 0xf0
 8018a3c:	4770      	bx	lr
	...

08018a40 <_localeconv_r>:
 8018a40:	4b04      	ldr	r3, [pc, #16]	; (8018a54 <_localeconv_r+0x14>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	6a18      	ldr	r0, [r3, #32]
 8018a46:	4b04      	ldr	r3, [pc, #16]	; (8018a58 <_localeconv_r+0x18>)
 8018a48:	2800      	cmp	r0, #0
 8018a4a:	bf08      	it	eq
 8018a4c:	4618      	moveq	r0, r3
 8018a4e:	30f0      	adds	r0, #240	; 0xf0
 8018a50:	4770      	bx	lr
 8018a52:	bf00      	nop
 8018a54:	200009a8 	.word	0x200009a8
 8018a58:	20000a0c 	.word	0x20000a0c

08018a5c <__ascii_mbtowc>:
 8018a5c:	b082      	sub	sp, #8
 8018a5e:	b901      	cbnz	r1, 8018a62 <__ascii_mbtowc+0x6>
 8018a60:	a901      	add	r1, sp, #4
 8018a62:	b142      	cbz	r2, 8018a76 <__ascii_mbtowc+0x1a>
 8018a64:	b14b      	cbz	r3, 8018a7a <__ascii_mbtowc+0x1e>
 8018a66:	7813      	ldrb	r3, [r2, #0]
 8018a68:	600b      	str	r3, [r1, #0]
 8018a6a:	7812      	ldrb	r2, [r2, #0]
 8018a6c:	1c10      	adds	r0, r2, #0
 8018a6e:	bf18      	it	ne
 8018a70:	2001      	movne	r0, #1
 8018a72:	b002      	add	sp, #8
 8018a74:	4770      	bx	lr
 8018a76:	4610      	mov	r0, r2
 8018a78:	e7fb      	b.n	8018a72 <__ascii_mbtowc+0x16>
 8018a7a:	f06f 0001 	mvn.w	r0, #1
 8018a7e:	e7f8      	b.n	8018a72 <__ascii_mbtowc+0x16>

08018a80 <__malloc_lock>:
 8018a80:	4770      	bx	lr

08018a82 <__malloc_unlock>:
 8018a82:	4770      	bx	lr

08018a84 <_Balloc>:
 8018a84:	b570      	push	{r4, r5, r6, lr}
 8018a86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018a88:	4604      	mov	r4, r0
 8018a8a:	460e      	mov	r6, r1
 8018a8c:	b93d      	cbnz	r5, 8018a9e <_Balloc+0x1a>
 8018a8e:	2010      	movs	r0, #16
 8018a90:	f7fd f81c 	bl	8015acc <malloc>
 8018a94:	6260      	str	r0, [r4, #36]	; 0x24
 8018a96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018a9a:	6005      	str	r5, [r0, #0]
 8018a9c:	60c5      	str	r5, [r0, #12]
 8018a9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018aa0:	68eb      	ldr	r3, [r5, #12]
 8018aa2:	b183      	cbz	r3, 8018ac6 <_Balloc+0x42>
 8018aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018aa6:	68db      	ldr	r3, [r3, #12]
 8018aa8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018aac:	b9b8      	cbnz	r0, 8018ade <_Balloc+0x5a>
 8018aae:	2101      	movs	r1, #1
 8018ab0:	fa01 f506 	lsl.w	r5, r1, r6
 8018ab4:	1d6a      	adds	r2, r5, #5
 8018ab6:	0092      	lsls	r2, r2, #2
 8018ab8:	4620      	mov	r0, r4
 8018aba:	f7fd f843 	bl	8015b44 <_calloc_r>
 8018abe:	b160      	cbz	r0, 8018ada <_Balloc+0x56>
 8018ac0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018ac4:	e00e      	b.n	8018ae4 <_Balloc+0x60>
 8018ac6:	2221      	movs	r2, #33	; 0x21
 8018ac8:	2104      	movs	r1, #4
 8018aca:	4620      	mov	r0, r4
 8018acc:	f7fd f83a 	bl	8015b44 <_calloc_r>
 8018ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ad2:	60e8      	str	r0, [r5, #12]
 8018ad4:	68db      	ldr	r3, [r3, #12]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d1e4      	bne.n	8018aa4 <_Balloc+0x20>
 8018ada:	2000      	movs	r0, #0
 8018adc:	bd70      	pop	{r4, r5, r6, pc}
 8018ade:	6802      	ldr	r2, [r0, #0]
 8018ae0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018aea:	e7f7      	b.n	8018adc <_Balloc+0x58>

08018aec <_Bfree>:
 8018aec:	b570      	push	{r4, r5, r6, lr}
 8018aee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018af0:	4606      	mov	r6, r0
 8018af2:	460d      	mov	r5, r1
 8018af4:	b93c      	cbnz	r4, 8018b06 <_Bfree+0x1a>
 8018af6:	2010      	movs	r0, #16
 8018af8:	f7fc ffe8 	bl	8015acc <malloc>
 8018afc:	6270      	str	r0, [r6, #36]	; 0x24
 8018afe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018b02:	6004      	str	r4, [r0, #0]
 8018b04:	60c4      	str	r4, [r0, #12]
 8018b06:	b13d      	cbz	r5, 8018b18 <_Bfree+0x2c>
 8018b08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018b0a:	686a      	ldr	r2, [r5, #4]
 8018b0c:	68db      	ldr	r3, [r3, #12]
 8018b0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018b12:	6029      	str	r1, [r5, #0]
 8018b14:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018b18:	bd70      	pop	{r4, r5, r6, pc}

08018b1a <__multadd>:
 8018b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b1e:	690d      	ldr	r5, [r1, #16]
 8018b20:	461f      	mov	r7, r3
 8018b22:	4606      	mov	r6, r0
 8018b24:	460c      	mov	r4, r1
 8018b26:	f101 0c14 	add.w	ip, r1, #20
 8018b2a:	2300      	movs	r3, #0
 8018b2c:	f8dc 0000 	ldr.w	r0, [ip]
 8018b30:	b281      	uxth	r1, r0
 8018b32:	fb02 7101 	mla	r1, r2, r1, r7
 8018b36:	0c0f      	lsrs	r7, r1, #16
 8018b38:	0c00      	lsrs	r0, r0, #16
 8018b3a:	fb02 7000 	mla	r0, r2, r0, r7
 8018b3e:	b289      	uxth	r1, r1
 8018b40:	3301      	adds	r3, #1
 8018b42:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018b46:	429d      	cmp	r5, r3
 8018b48:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018b4c:	f84c 1b04 	str.w	r1, [ip], #4
 8018b50:	dcec      	bgt.n	8018b2c <__multadd+0x12>
 8018b52:	b1d7      	cbz	r7, 8018b8a <__multadd+0x70>
 8018b54:	68a3      	ldr	r3, [r4, #8]
 8018b56:	42ab      	cmp	r3, r5
 8018b58:	dc12      	bgt.n	8018b80 <__multadd+0x66>
 8018b5a:	6861      	ldr	r1, [r4, #4]
 8018b5c:	4630      	mov	r0, r6
 8018b5e:	3101      	adds	r1, #1
 8018b60:	f7ff ff90 	bl	8018a84 <_Balloc>
 8018b64:	6922      	ldr	r2, [r4, #16]
 8018b66:	3202      	adds	r2, #2
 8018b68:	f104 010c 	add.w	r1, r4, #12
 8018b6c:	4680      	mov	r8, r0
 8018b6e:	0092      	lsls	r2, r2, #2
 8018b70:	300c      	adds	r0, #12
 8018b72:	f7fc ffbb 	bl	8015aec <memcpy>
 8018b76:	4621      	mov	r1, r4
 8018b78:	4630      	mov	r0, r6
 8018b7a:	f7ff ffb7 	bl	8018aec <_Bfree>
 8018b7e:	4644      	mov	r4, r8
 8018b80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018b84:	3501      	adds	r5, #1
 8018b86:	615f      	str	r7, [r3, #20]
 8018b88:	6125      	str	r5, [r4, #16]
 8018b8a:	4620      	mov	r0, r4
 8018b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b90 <__s2b>:
 8018b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b94:	460c      	mov	r4, r1
 8018b96:	4615      	mov	r5, r2
 8018b98:	461f      	mov	r7, r3
 8018b9a:	2209      	movs	r2, #9
 8018b9c:	3308      	adds	r3, #8
 8018b9e:	4606      	mov	r6, r0
 8018ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8018ba4:	2100      	movs	r1, #0
 8018ba6:	2201      	movs	r2, #1
 8018ba8:	429a      	cmp	r2, r3
 8018baa:	db20      	blt.n	8018bee <__s2b+0x5e>
 8018bac:	4630      	mov	r0, r6
 8018bae:	f7ff ff69 	bl	8018a84 <_Balloc>
 8018bb2:	9b08      	ldr	r3, [sp, #32]
 8018bb4:	6143      	str	r3, [r0, #20]
 8018bb6:	2d09      	cmp	r5, #9
 8018bb8:	f04f 0301 	mov.w	r3, #1
 8018bbc:	6103      	str	r3, [r0, #16]
 8018bbe:	dd19      	ble.n	8018bf4 <__s2b+0x64>
 8018bc0:	f104 0809 	add.w	r8, r4, #9
 8018bc4:	46c1      	mov	r9, r8
 8018bc6:	442c      	add	r4, r5
 8018bc8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018bcc:	4601      	mov	r1, r0
 8018bce:	3b30      	subs	r3, #48	; 0x30
 8018bd0:	220a      	movs	r2, #10
 8018bd2:	4630      	mov	r0, r6
 8018bd4:	f7ff ffa1 	bl	8018b1a <__multadd>
 8018bd8:	45a1      	cmp	r9, r4
 8018bda:	d1f5      	bne.n	8018bc8 <__s2b+0x38>
 8018bdc:	eb08 0405 	add.w	r4, r8, r5
 8018be0:	3c08      	subs	r4, #8
 8018be2:	1b2d      	subs	r5, r5, r4
 8018be4:	1963      	adds	r3, r4, r5
 8018be6:	42bb      	cmp	r3, r7
 8018be8:	db07      	blt.n	8018bfa <__s2b+0x6a>
 8018bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bee:	0052      	lsls	r2, r2, #1
 8018bf0:	3101      	adds	r1, #1
 8018bf2:	e7d9      	b.n	8018ba8 <__s2b+0x18>
 8018bf4:	340a      	adds	r4, #10
 8018bf6:	2509      	movs	r5, #9
 8018bf8:	e7f3      	b.n	8018be2 <__s2b+0x52>
 8018bfa:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018bfe:	4601      	mov	r1, r0
 8018c00:	3b30      	subs	r3, #48	; 0x30
 8018c02:	220a      	movs	r2, #10
 8018c04:	4630      	mov	r0, r6
 8018c06:	f7ff ff88 	bl	8018b1a <__multadd>
 8018c0a:	e7eb      	b.n	8018be4 <__s2b+0x54>

08018c0c <__hi0bits>:
 8018c0c:	0c02      	lsrs	r2, r0, #16
 8018c0e:	0412      	lsls	r2, r2, #16
 8018c10:	4603      	mov	r3, r0
 8018c12:	b9b2      	cbnz	r2, 8018c42 <__hi0bits+0x36>
 8018c14:	0403      	lsls	r3, r0, #16
 8018c16:	2010      	movs	r0, #16
 8018c18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018c1c:	bf04      	itt	eq
 8018c1e:	021b      	lsleq	r3, r3, #8
 8018c20:	3008      	addeq	r0, #8
 8018c22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018c26:	bf04      	itt	eq
 8018c28:	011b      	lsleq	r3, r3, #4
 8018c2a:	3004      	addeq	r0, #4
 8018c2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018c30:	bf04      	itt	eq
 8018c32:	009b      	lsleq	r3, r3, #2
 8018c34:	3002      	addeq	r0, #2
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	db06      	blt.n	8018c48 <__hi0bits+0x3c>
 8018c3a:	005b      	lsls	r3, r3, #1
 8018c3c:	d503      	bpl.n	8018c46 <__hi0bits+0x3a>
 8018c3e:	3001      	adds	r0, #1
 8018c40:	4770      	bx	lr
 8018c42:	2000      	movs	r0, #0
 8018c44:	e7e8      	b.n	8018c18 <__hi0bits+0xc>
 8018c46:	2020      	movs	r0, #32
 8018c48:	4770      	bx	lr

08018c4a <__lo0bits>:
 8018c4a:	6803      	ldr	r3, [r0, #0]
 8018c4c:	f013 0207 	ands.w	r2, r3, #7
 8018c50:	4601      	mov	r1, r0
 8018c52:	d00b      	beq.n	8018c6c <__lo0bits+0x22>
 8018c54:	07da      	lsls	r2, r3, #31
 8018c56:	d423      	bmi.n	8018ca0 <__lo0bits+0x56>
 8018c58:	0798      	lsls	r0, r3, #30
 8018c5a:	bf49      	itett	mi
 8018c5c:	085b      	lsrmi	r3, r3, #1
 8018c5e:	089b      	lsrpl	r3, r3, #2
 8018c60:	2001      	movmi	r0, #1
 8018c62:	600b      	strmi	r3, [r1, #0]
 8018c64:	bf5c      	itt	pl
 8018c66:	600b      	strpl	r3, [r1, #0]
 8018c68:	2002      	movpl	r0, #2
 8018c6a:	4770      	bx	lr
 8018c6c:	b298      	uxth	r0, r3
 8018c6e:	b9a8      	cbnz	r0, 8018c9c <__lo0bits+0x52>
 8018c70:	0c1b      	lsrs	r3, r3, #16
 8018c72:	2010      	movs	r0, #16
 8018c74:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018c78:	bf04      	itt	eq
 8018c7a:	0a1b      	lsreq	r3, r3, #8
 8018c7c:	3008      	addeq	r0, #8
 8018c7e:	071a      	lsls	r2, r3, #28
 8018c80:	bf04      	itt	eq
 8018c82:	091b      	lsreq	r3, r3, #4
 8018c84:	3004      	addeq	r0, #4
 8018c86:	079a      	lsls	r2, r3, #30
 8018c88:	bf04      	itt	eq
 8018c8a:	089b      	lsreq	r3, r3, #2
 8018c8c:	3002      	addeq	r0, #2
 8018c8e:	07da      	lsls	r2, r3, #31
 8018c90:	d402      	bmi.n	8018c98 <__lo0bits+0x4e>
 8018c92:	085b      	lsrs	r3, r3, #1
 8018c94:	d006      	beq.n	8018ca4 <__lo0bits+0x5a>
 8018c96:	3001      	adds	r0, #1
 8018c98:	600b      	str	r3, [r1, #0]
 8018c9a:	4770      	bx	lr
 8018c9c:	4610      	mov	r0, r2
 8018c9e:	e7e9      	b.n	8018c74 <__lo0bits+0x2a>
 8018ca0:	2000      	movs	r0, #0
 8018ca2:	4770      	bx	lr
 8018ca4:	2020      	movs	r0, #32
 8018ca6:	4770      	bx	lr

08018ca8 <__i2b>:
 8018ca8:	b510      	push	{r4, lr}
 8018caa:	460c      	mov	r4, r1
 8018cac:	2101      	movs	r1, #1
 8018cae:	f7ff fee9 	bl	8018a84 <_Balloc>
 8018cb2:	2201      	movs	r2, #1
 8018cb4:	6144      	str	r4, [r0, #20]
 8018cb6:	6102      	str	r2, [r0, #16]
 8018cb8:	bd10      	pop	{r4, pc}

08018cba <__multiply>:
 8018cba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cbe:	4614      	mov	r4, r2
 8018cc0:	690a      	ldr	r2, [r1, #16]
 8018cc2:	6923      	ldr	r3, [r4, #16]
 8018cc4:	429a      	cmp	r2, r3
 8018cc6:	bfb8      	it	lt
 8018cc8:	460b      	movlt	r3, r1
 8018cca:	4688      	mov	r8, r1
 8018ccc:	bfbc      	itt	lt
 8018cce:	46a0      	movlt	r8, r4
 8018cd0:	461c      	movlt	r4, r3
 8018cd2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018cd6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018cda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018cde:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018ce2:	eb07 0609 	add.w	r6, r7, r9
 8018ce6:	42b3      	cmp	r3, r6
 8018ce8:	bfb8      	it	lt
 8018cea:	3101      	addlt	r1, #1
 8018cec:	f7ff feca 	bl	8018a84 <_Balloc>
 8018cf0:	f100 0514 	add.w	r5, r0, #20
 8018cf4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018cf8:	462b      	mov	r3, r5
 8018cfa:	2200      	movs	r2, #0
 8018cfc:	4573      	cmp	r3, lr
 8018cfe:	d316      	bcc.n	8018d2e <__multiply+0x74>
 8018d00:	f104 0214 	add.w	r2, r4, #20
 8018d04:	f108 0114 	add.w	r1, r8, #20
 8018d08:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018d0c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018d10:	9300      	str	r3, [sp, #0]
 8018d12:	9b00      	ldr	r3, [sp, #0]
 8018d14:	9201      	str	r2, [sp, #4]
 8018d16:	4293      	cmp	r3, r2
 8018d18:	d80c      	bhi.n	8018d34 <__multiply+0x7a>
 8018d1a:	2e00      	cmp	r6, #0
 8018d1c:	dd03      	ble.n	8018d26 <__multiply+0x6c>
 8018d1e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d05d      	beq.n	8018de2 <__multiply+0x128>
 8018d26:	6106      	str	r6, [r0, #16]
 8018d28:	b003      	add	sp, #12
 8018d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d2e:	f843 2b04 	str.w	r2, [r3], #4
 8018d32:	e7e3      	b.n	8018cfc <__multiply+0x42>
 8018d34:	f8b2 b000 	ldrh.w	fp, [r2]
 8018d38:	f1bb 0f00 	cmp.w	fp, #0
 8018d3c:	d023      	beq.n	8018d86 <__multiply+0xcc>
 8018d3e:	4689      	mov	r9, r1
 8018d40:	46ac      	mov	ip, r5
 8018d42:	f04f 0800 	mov.w	r8, #0
 8018d46:	f859 4b04 	ldr.w	r4, [r9], #4
 8018d4a:	f8dc a000 	ldr.w	sl, [ip]
 8018d4e:	b2a3      	uxth	r3, r4
 8018d50:	fa1f fa8a 	uxth.w	sl, sl
 8018d54:	fb0b a303 	mla	r3, fp, r3, sl
 8018d58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018d5c:	f8dc 4000 	ldr.w	r4, [ip]
 8018d60:	4443      	add	r3, r8
 8018d62:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018d66:	fb0b 840a 	mla	r4, fp, sl, r8
 8018d6a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018d6e:	46e2      	mov	sl, ip
 8018d70:	b29b      	uxth	r3, r3
 8018d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018d76:	454f      	cmp	r7, r9
 8018d78:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018d7c:	f84a 3b04 	str.w	r3, [sl], #4
 8018d80:	d82b      	bhi.n	8018dda <__multiply+0x120>
 8018d82:	f8cc 8004 	str.w	r8, [ip, #4]
 8018d86:	9b01      	ldr	r3, [sp, #4]
 8018d88:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018d8c:	3204      	adds	r2, #4
 8018d8e:	f1ba 0f00 	cmp.w	sl, #0
 8018d92:	d020      	beq.n	8018dd6 <__multiply+0x11c>
 8018d94:	682b      	ldr	r3, [r5, #0]
 8018d96:	4689      	mov	r9, r1
 8018d98:	46a8      	mov	r8, r5
 8018d9a:	f04f 0b00 	mov.w	fp, #0
 8018d9e:	f8b9 c000 	ldrh.w	ip, [r9]
 8018da2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018da6:	fb0a 440c 	mla	r4, sl, ip, r4
 8018daa:	445c      	add	r4, fp
 8018dac:	46c4      	mov	ip, r8
 8018dae:	b29b      	uxth	r3, r3
 8018db0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018db4:	f84c 3b04 	str.w	r3, [ip], #4
 8018db8:	f859 3b04 	ldr.w	r3, [r9], #4
 8018dbc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018dc0:	0c1b      	lsrs	r3, r3, #16
 8018dc2:	fb0a b303 	mla	r3, sl, r3, fp
 8018dc6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018dca:	454f      	cmp	r7, r9
 8018dcc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018dd0:	d805      	bhi.n	8018dde <__multiply+0x124>
 8018dd2:	f8c8 3004 	str.w	r3, [r8, #4]
 8018dd6:	3504      	adds	r5, #4
 8018dd8:	e79b      	b.n	8018d12 <__multiply+0x58>
 8018dda:	46d4      	mov	ip, sl
 8018ddc:	e7b3      	b.n	8018d46 <__multiply+0x8c>
 8018dde:	46e0      	mov	r8, ip
 8018de0:	e7dd      	b.n	8018d9e <__multiply+0xe4>
 8018de2:	3e01      	subs	r6, #1
 8018de4:	e799      	b.n	8018d1a <__multiply+0x60>
	...

08018de8 <__pow5mult>:
 8018de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018dec:	4615      	mov	r5, r2
 8018dee:	f012 0203 	ands.w	r2, r2, #3
 8018df2:	4606      	mov	r6, r0
 8018df4:	460f      	mov	r7, r1
 8018df6:	d007      	beq.n	8018e08 <__pow5mult+0x20>
 8018df8:	3a01      	subs	r2, #1
 8018dfa:	4c21      	ldr	r4, [pc, #132]	; (8018e80 <__pow5mult+0x98>)
 8018dfc:	2300      	movs	r3, #0
 8018dfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018e02:	f7ff fe8a 	bl	8018b1a <__multadd>
 8018e06:	4607      	mov	r7, r0
 8018e08:	10ad      	asrs	r5, r5, #2
 8018e0a:	d035      	beq.n	8018e78 <__pow5mult+0x90>
 8018e0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018e0e:	b93c      	cbnz	r4, 8018e20 <__pow5mult+0x38>
 8018e10:	2010      	movs	r0, #16
 8018e12:	f7fc fe5b 	bl	8015acc <malloc>
 8018e16:	6270      	str	r0, [r6, #36]	; 0x24
 8018e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018e1c:	6004      	str	r4, [r0, #0]
 8018e1e:	60c4      	str	r4, [r0, #12]
 8018e20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018e28:	b94c      	cbnz	r4, 8018e3e <__pow5mult+0x56>
 8018e2a:	f240 2171 	movw	r1, #625	; 0x271
 8018e2e:	4630      	mov	r0, r6
 8018e30:	f7ff ff3a 	bl	8018ca8 <__i2b>
 8018e34:	2300      	movs	r3, #0
 8018e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8018e3a:	4604      	mov	r4, r0
 8018e3c:	6003      	str	r3, [r0, #0]
 8018e3e:	f04f 0800 	mov.w	r8, #0
 8018e42:	07eb      	lsls	r3, r5, #31
 8018e44:	d50a      	bpl.n	8018e5c <__pow5mult+0x74>
 8018e46:	4639      	mov	r1, r7
 8018e48:	4622      	mov	r2, r4
 8018e4a:	4630      	mov	r0, r6
 8018e4c:	f7ff ff35 	bl	8018cba <__multiply>
 8018e50:	4639      	mov	r1, r7
 8018e52:	4681      	mov	r9, r0
 8018e54:	4630      	mov	r0, r6
 8018e56:	f7ff fe49 	bl	8018aec <_Bfree>
 8018e5a:	464f      	mov	r7, r9
 8018e5c:	106d      	asrs	r5, r5, #1
 8018e5e:	d00b      	beq.n	8018e78 <__pow5mult+0x90>
 8018e60:	6820      	ldr	r0, [r4, #0]
 8018e62:	b938      	cbnz	r0, 8018e74 <__pow5mult+0x8c>
 8018e64:	4622      	mov	r2, r4
 8018e66:	4621      	mov	r1, r4
 8018e68:	4630      	mov	r0, r6
 8018e6a:	f7ff ff26 	bl	8018cba <__multiply>
 8018e6e:	6020      	str	r0, [r4, #0]
 8018e70:	f8c0 8000 	str.w	r8, [r0]
 8018e74:	4604      	mov	r4, r0
 8018e76:	e7e4      	b.n	8018e42 <__pow5mult+0x5a>
 8018e78:	4638      	mov	r0, r7
 8018e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e7e:	bf00      	nop
 8018e80:	0801b418 	.word	0x0801b418

08018e84 <__lshift>:
 8018e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e88:	460c      	mov	r4, r1
 8018e8a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018e8e:	6923      	ldr	r3, [r4, #16]
 8018e90:	6849      	ldr	r1, [r1, #4]
 8018e92:	eb0a 0903 	add.w	r9, sl, r3
 8018e96:	68a3      	ldr	r3, [r4, #8]
 8018e98:	4607      	mov	r7, r0
 8018e9a:	4616      	mov	r6, r2
 8018e9c:	f109 0501 	add.w	r5, r9, #1
 8018ea0:	42ab      	cmp	r3, r5
 8018ea2:	db32      	blt.n	8018f0a <__lshift+0x86>
 8018ea4:	4638      	mov	r0, r7
 8018ea6:	f7ff fded 	bl	8018a84 <_Balloc>
 8018eaa:	2300      	movs	r3, #0
 8018eac:	4680      	mov	r8, r0
 8018eae:	f100 0114 	add.w	r1, r0, #20
 8018eb2:	461a      	mov	r2, r3
 8018eb4:	4553      	cmp	r3, sl
 8018eb6:	db2b      	blt.n	8018f10 <__lshift+0x8c>
 8018eb8:	6920      	ldr	r0, [r4, #16]
 8018eba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018ebe:	f104 0314 	add.w	r3, r4, #20
 8018ec2:	f016 021f 	ands.w	r2, r6, #31
 8018ec6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018eca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018ece:	d025      	beq.n	8018f1c <__lshift+0x98>
 8018ed0:	f1c2 0e20 	rsb	lr, r2, #32
 8018ed4:	2000      	movs	r0, #0
 8018ed6:	681e      	ldr	r6, [r3, #0]
 8018ed8:	468a      	mov	sl, r1
 8018eda:	4096      	lsls	r6, r2
 8018edc:	4330      	orrs	r0, r6
 8018ede:	f84a 0b04 	str.w	r0, [sl], #4
 8018ee2:	f853 0b04 	ldr.w	r0, [r3], #4
 8018ee6:	459c      	cmp	ip, r3
 8018ee8:	fa20 f00e 	lsr.w	r0, r0, lr
 8018eec:	d814      	bhi.n	8018f18 <__lshift+0x94>
 8018eee:	6048      	str	r0, [r1, #4]
 8018ef0:	b108      	cbz	r0, 8018ef6 <__lshift+0x72>
 8018ef2:	f109 0502 	add.w	r5, r9, #2
 8018ef6:	3d01      	subs	r5, #1
 8018ef8:	4638      	mov	r0, r7
 8018efa:	f8c8 5010 	str.w	r5, [r8, #16]
 8018efe:	4621      	mov	r1, r4
 8018f00:	f7ff fdf4 	bl	8018aec <_Bfree>
 8018f04:	4640      	mov	r0, r8
 8018f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f0a:	3101      	adds	r1, #1
 8018f0c:	005b      	lsls	r3, r3, #1
 8018f0e:	e7c7      	b.n	8018ea0 <__lshift+0x1c>
 8018f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018f14:	3301      	adds	r3, #1
 8018f16:	e7cd      	b.n	8018eb4 <__lshift+0x30>
 8018f18:	4651      	mov	r1, sl
 8018f1a:	e7dc      	b.n	8018ed6 <__lshift+0x52>
 8018f1c:	3904      	subs	r1, #4
 8018f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f22:	f841 2f04 	str.w	r2, [r1, #4]!
 8018f26:	459c      	cmp	ip, r3
 8018f28:	d8f9      	bhi.n	8018f1e <__lshift+0x9a>
 8018f2a:	e7e4      	b.n	8018ef6 <__lshift+0x72>

08018f2c <__mcmp>:
 8018f2c:	6903      	ldr	r3, [r0, #16]
 8018f2e:	690a      	ldr	r2, [r1, #16]
 8018f30:	1a9b      	subs	r3, r3, r2
 8018f32:	b530      	push	{r4, r5, lr}
 8018f34:	d10c      	bne.n	8018f50 <__mcmp+0x24>
 8018f36:	0092      	lsls	r2, r2, #2
 8018f38:	3014      	adds	r0, #20
 8018f3a:	3114      	adds	r1, #20
 8018f3c:	1884      	adds	r4, r0, r2
 8018f3e:	4411      	add	r1, r2
 8018f40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018f44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018f48:	4295      	cmp	r5, r2
 8018f4a:	d003      	beq.n	8018f54 <__mcmp+0x28>
 8018f4c:	d305      	bcc.n	8018f5a <__mcmp+0x2e>
 8018f4e:	2301      	movs	r3, #1
 8018f50:	4618      	mov	r0, r3
 8018f52:	bd30      	pop	{r4, r5, pc}
 8018f54:	42a0      	cmp	r0, r4
 8018f56:	d3f3      	bcc.n	8018f40 <__mcmp+0x14>
 8018f58:	e7fa      	b.n	8018f50 <__mcmp+0x24>
 8018f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8018f5e:	e7f7      	b.n	8018f50 <__mcmp+0x24>

08018f60 <__mdiff>:
 8018f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f64:	460d      	mov	r5, r1
 8018f66:	4607      	mov	r7, r0
 8018f68:	4611      	mov	r1, r2
 8018f6a:	4628      	mov	r0, r5
 8018f6c:	4614      	mov	r4, r2
 8018f6e:	f7ff ffdd 	bl	8018f2c <__mcmp>
 8018f72:	1e06      	subs	r6, r0, #0
 8018f74:	d108      	bne.n	8018f88 <__mdiff+0x28>
 8018f76:	4631      	mov	r1, r6
 8018f78:	4638      	mov	r0, r7
 8018f7a:	f7ff fd83 	bl	8018a84 <_Balloc>
 8018f7e:	2301      	movs	r3, #1
 8018f80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f88:	bfa4      	itt	ge
 8018f8a:	4623      	movge	r3, r4
 8018f8c:	462c      	movge	r4, r5
 8018f8e:	4638      	mov	r0, r7
 8018f90:	6861      	ldr	r1, [r4, #4]
 8018f92:	bfa6      	itte	ge
 8018f94:	461d      	movge	r5, r3
 8018f96:	2600      	movge	r6, #0
 8018f98:	2601      	movlt	r6, #1
 8018f9a:	f7ff fd73 	bl	8018a84 <_Balloc>
 8018f9e:	692b      	ldr	r3, [r5, #16]
 8018fa0:	60c6      	str	r6, [r0, #12]
 8018fa2:	6926      	ldr	r6, [r4, #16]
 8018fa4:	f105 0914 	add.w	r9, r5, #20
 8018fa8:	f104 0214 	add.w	r2, r4, #20
 8018fac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018fb0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018fb4:	f100 0514 	add.w	r5, r0, #20
 8018fb8:	f04f 0e00 	mov.w	lr, #0
 8018fbc:	f852 ab04 	ldr.w	sl, [r2], #4
 8018fc0:	f859 4b04 	ldr.w	r4, [r9], #4
 8018fc4:	fa1e f18a 	uxtah	r1, lr, sl
 8018fc8:	b2a3      	uxth	r3, r4
 8018fca:	1ac9      	subs	r1, r1, r3
 8018fcc:	0c23      	lsrs	r3, r4, #16
 8018fce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018fd2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018fd6:	b289      	uxth	r1, r1
 8018fd8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018fdc:	45c8      	cmp	r8, r9
 8018fde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018fe2:	4694      	mov	ip, r2
 8018fe4:	f845 3b04 	str.w	r3, [r5], #4
 8018fe8:	d8e8      	bhi.n	8018fbc <__mdiff+0x5c>
 8018fea:	45bc      	cmp	ip, r7
 8018fec:	d304      	bcc.n	8018ff8 <__mdiff+0x98>
 8018fee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018ff2:	b183      	cbz	r3, 8019016 <__mdiff+0xb6>
 8018ff4:	6106      	str	r6, [r0, #16]
 8018ff6:	e7c5      	b.n	8018f84 <__mdiff+0x24>
 8018ff8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018ffc:	fa1e f381 	uxtah	r3, lr, r1
 8019000:	141a      	asrs	r2, r3, #16
 8019002:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019006:	b29b      	uxth	r3, r3
 8019008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801900c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019010:	f845 3b04 	str.w	r3, [r5], #4
 8019014:	e7e9      	b.n	8018fea <__mdiff+0x8a>
 8019016:	3e01      	subs	r6, #1
 8019018:	e7e9      	b.n	8018fee <__mdiff+0x8e>
	...

0801901c <__ulp>:
 801901c:	4b12      	ldr	r3, [pc, #72]	; (8019068 <__ulp+0x4c>)
 801901e:	ee10 2a90 	vmov	r2, s1
 8019022:	401a      	ands	r2, r3
 8019024:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8019028:	2b00      	cmp	r3, #0
 801902a:	dd04      	ble.n	8019036 <__ulp+0x1a>
 801902c:	2000      	movs	r0, #0
 801902e:	4619      	mov	r1, r3
 8019030:	ec41 0b10 	vmov	d0, r0, r1
 8019034:	4770      	bx	lr
 8019036:	425b      	negs	r3, r3
 8019038:	151b      	asrs	r3, r3, #20
 801903a:	2b13      	cmp	r3, #19
 801903c:	f04f 0000 	mov.w	r0, #0
 8019040:	f04f 0100 	mov.w	r1, #0
 8019044:	dc04      	bgt.n	8019050 <__ulp+0x34>
 8019046:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801904a:	fa42 f103 	asr.w	r1, r2, r3
 801904e:	e7ef      	b.n	8019030 <__ulp+0x14>
 8019050:	3b14      	subs	r3, #20
 8019052:	2b1e      	cmp	r3, #30
 8019054:	f04f 0201 	mov.w	r2, #1
 8019058:	bfda      	itte	le
 801905a:	f1c3 031f 	rsble	r3, r3, #31
 801905e:	fa02 f303 	lslle.w	r3, r2, r3
 8019062:	4613      	movgt	r3, r2
 8019064:	4618      	mov	r0, r3
 8019066:	e7e3      	b.n	8019030 <__ulp+0x14>
 8019068:	7ff00000 	.word	0x7ff00000

0801906c <__b2d>:
 801906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801906e:	6905      	ldr	r5, [r0, #16]
 8019070:	f100 0714 	add.w	r7, r0, #20
 8019074:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019078:	1f2e      	subs	r6, r5, #4
 801907a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801907e:	4620      	mov	r0, r4
 8019080:	f7ff fdc4 	bl	8018c0c <__hi0bits>
 8019084:	f1c0 0320 	rsb	r3, r0, #32
 8019088:	280a      	cmp	r0, #10
 801908a:	600b      	str	r3, [r1, #0]
 801908c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8019104 <__b2d+0x98>
 8019090:	dc14      	bgt.n	80190bc <__b2d+0x50>
 8019092:	f1c0 0e0b 	rsb	lr, r0, #11
 8019096:	fa24 f10e 	lsr.w	r1, r4, lr
 801909a:	42b7      	cmp	r7, r6
 801909c:	ea41 030c 	orr.w	r3, r1, ip
 80190a0:	bf34      	ite	cc
 80190a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80190a6:	2100      	movcs	r1, #0
 80190a8:	3015      	adds	r0, #21
 80190aa:	fa04 f000 	lsl.w	r0, r4, r0
 80190ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80190b2:	ea40 0201 	orr.w	r2, r0, r1
 80190b6:	ec43 2b10 	vmov	d0, r2, r3
 80190ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190bc:	42b7      	cmp	r7, r6
 80190be:	bf3a      	itte	cc
 80190c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80190c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80190c8:	2100      	movcs	r1, #0
 80190ca:	380b      	subs	r0, #11
 80190cc:	d015      	beq.n	80190fa <__b2d+0x8e>
 80190ce:	4084      	lsls	r4, r0
 80190d0:	f1c0 0520 	rsb	r5, r0, #32
 80190d4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80190d8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80190dc:	42be      	cmp	r6, r7
 80190de:	fa21 fc05 	lsr.w	ip, r1, r5
 80190e2:	ea44 030c 	orr.w	r3, r4, ip
 80190e6:	bf8c      	ite	hi
 80190e8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80190ec:	2400      	movls	r4, #0
 80190ee:	fa01 f000 	lsl.w	r0, r1, r0
 80190f2:	40ec      	lsrs	r4, r5
 80190f4:	ea40 0204 	orr.w	r2, r0, r4
 80190f8:	e7dd      	b.n	80190b6 <__b2d+0x4a>
 80190fa:	ea44 030c 	orr.w	r3, r4, ip
 80190fe:	460a      	mov	r2, r1
 8019100:	e7d9      	b.n	80190b6 <__b2d+0x4a>
 8019102:	bf00      	nop
 8019104:	3ff00000 	.word	0x3ff00000

08019108 <__d2b>:
 8019108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801910c:	460e      	mov	r6, r1
 801910e:	2101      	movs	r1, #1
 8019110:	ec59 8b10 	vmov	r8, r9, d0
 8019114:	4615      	mov	r5, r2
 8019116:	f7ff fcb5 	bl	8018a84 <_Balloc>
 801911a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801911e:	4607      	mov	r7, r0
 8019120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019124:	bb34      	cbnz	r4, 8019174 <__d2b+0x6c>
 8019126:	9301      	str	r3, [sp, #4]
 8019128:	f1b8 0300 	subs.w	r3, r8, #0
 801912c:	d027      	beq.n	801917e <__d2b+0x76>
 801912e:	a802      	add	r0, sp, #8
 8019130:	f840 3d08 	str.w	r3, [r0, #-8]!
 8019134:	f7ff fd89 	bl	8018c4a <__lo0bits>
 8019138:	9900      	ldr	r1, [sp, #0]
 801913a:	b1f0      	cbz	r0, 801917a <__d2b+0x72>
 801913c:	9a01      	ldr	r2, [sp, #4]
 801913e:	f1c0 0320 	rsb	r3, r0, #32
 8019142:	fa02 f303 	lsl.w	r3, r2, r3
 8019146:	430b      	orrs	r3, r1
 8019148:	40c2      	lsrs	r2, r0
 801914a:	617b      	str	r3, [r7, #20]
 801914c:	9201      	str	r2, [sp, #4]
 801914e:	9b01      	ldr	r3, [sp, #4]
 8019150:	61bb      	str	r3, [r7, #24]
 8019152:	2b00      	cmp	r3, #0
 8019154:	bf14      	ite	ne
 8019156:	2102      	movne	r1, #2
 8019158:	2101      	moveq	r1, #1
 801915a:	6139      	str	r1, [r7, #16]
 801915c:	b1c4      	cbz	r4, 8019190 <__d2b+0x88>
 801915e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8019162:	4404      	add	r4, r0
 8019164:	6034      	str	r4, [r6, #0]
 8019166:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801916a:	6028      	str	r0, [r5, #0]
 801916c:	4638      	mov	r0, r7
 801916e:	b003      	add	sp, #12
 8019170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019178:	e7d5      	b.n	8019126 <__d2b+0x1e>
 801917a:	6179      	str	r1, [r7, #20]
 801917c:	e7e7      	b.n	801914e <__d2b+0x46>
 801917e:	a801      	add	r0, sp, #4
 8019180:	f7ff fd63 	bl	8018c4a <__lo0bits>
 8019184:	9b01      	ldr	r3, [sp, #4]
 8019186:	617b      	str	r3, [r7, #20]
 8019188:	2101      	movs	r1, #1
 801918a:	6139      	str	r1, [r7, #16]
 801918c:	3020      	adds	r0, #32
 801918e:	e7e5      	b.n	801915c <__d2b+0x54>
 8019190:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8019194:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019198:	6030      	str	r0, [r6, #0]
 801919a:	6918      	ldr	r0, [r3, #16]
 801919c:	f7ff fd36 	bl	8018c0c <__hi0bits>
 80191a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80191a4:	e7e1      	b.n	801916a <__d2b+0x62>

080191a6 <__ratio>:
 80191a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191aa:	4688      	mov	r8, r1
 80191ac:	4669      	mov	r1, sp
 80191ae:	4681      	mov	r9, r0
 80191b0:	f7ff ff5c 	bl	801906c <__b2d>
 80191b4:	a901      	add	r1, sp, #4
 80191b6:	4640      	mov	r0, r8
 80191b8:	ec57 6b10 	vmov	r6, r7, d0
 80191bc:	f7ff ff56 	bl	801906c <__b2d>
 80191c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80191c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80191c8:	eba3 0c02 	sub.w	ip, r3, r2
 80191cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80191d0:	1a9b      	subs	r3, r3, r2
 80191d2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80191d6:	ec5b ab10 	vmov	sl, fp, d0
 80191da:	2b00      	cmp	r3, #0
 80191dc:	bfce      	itee	gt
 80191de:	463a      	movgt	r2, r7
 80191e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80191e4:	465a      	movle	r2, fp
 80191e6:	4659      	mov	r1, fp
 80191e8:	463d      	mov	r5, r7
 80191ea:	bfd4      	ite	le
 80191ec:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80191f0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80191f4:	4630      	mov	r0, r6
 80191f6:	ee10 2a10 	vmov	r2, s0
 80191fa:	460b      	mov	r3, r1
 80191fc:	4629      	mov	r1, r5
 80191fe:	f7e7 fb25 	bl	800084c <__aeabi_ddiv>
 8019202:	ec41 0b10 	vmov	d0, r0, r1
 8019206:	b003      	add	sp, #12
 8019208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801920c <__copybits>:
 801920c:	3901      	subs	r1, #1
 801920e:	b510      	push	{r4, lr}
 8019210:	1149      	asrs	r1, r1, #5
 8019212:	6914      	ldr	r4, [r2, #16]
 8019214:	3101      	adds	r1, #1
 8019216:	f102 0314 	add.w	r3, r2, #20
 801921a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801921e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019222:	42a3      	cmp	r3, r4
 8019224:	4602      	mov	r2, r0
 8019226:	d303      	bcc.n	8019230 <__copybits+0x24>
 8019228:	2300      	movs	r3, #0
 801922a:	428a      	cmp	r2, r1
 801922c:	d305      	bcc.n	801923a <__copybits+0x2e>
 801922e:	bd10      	pop	{r4, pc}
 8019230:	f853 2b04 	ldr.w	r2, [r3], #4
 8019234:	f840 2b04 	str.w	r2, [r0], #4
 8019238:	e7f3      	b.n	8019222 <__copybits+0x16>
 801923a:	f842 3b04 	str.w	r3, [r2], #4
 801923e:	e7f4      	b.n	801922a <__copybits+0x1e>

08019240 <__any_on>:
 8019240:	f100 0214 	add.w	r2, r0, #20
 8019244:	6900      	ldr	r0, [r0, #16]
 8019246:	114b      	asrs	r3, r1, #5
 8019248:	4298      	cmp	r0, r3
 801924a:	b510      	push	{r4, lr}
 801924c:	db11      	blt.n	8019272 <__any_on+0x32>
 801924e:	dd0a      	ble.n	8019266 <__any_on+0x26>
 8019250:	f011 011f 	ands.w	r1, r1, #31
 8019254:	d007      	beq.n	8019266 <__any_on+0x26>
 8019256:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801925a:	fa24 f001 	lsr.w	r0, r4, r1
 801925e:	fa00 f101 	lsl.w	r1, r0, r1
 8019262:	428c      	cmp	r4, r1
 8019264:	d10b      	bne.n	801927e <__any_on+0x3e>
 8019266:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801926a:	4293      	cmp	r3, r2
 801926c:	d803      	bhi.n	8019276 <__any_on+0x36>
 801926e:	2000      	movs	r0, #0
 8019270:	bd10      	pop	{r4, pc}
 8019272:	4603      	mov	r3, r0
 8019274:	e7f7      	b.n	8019266 <__any_on+0x26>
 8019276:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801927a:	2900      	cmp	r1, #0
 801927c:	d0f5      	beq.n	801926a <__any_on+0x2a>
 801927e:	2001      	movs	r0, #1
 8019280:	e7f6      	b.n	8019270 <__any_on+0x30>

08019282 <__ssputs_r>:
 8019282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019286:	688e      	ldr	r6, [r1, #8]
 8019288:	429e      	cmp	r6, r3
 801928a:	4682      	mov	sl, r0
 801928c:	460c      	mov	r4, r1
 801928e:	4690      	mov	r8, r2
 8019290:	4699      	mov	r9, r3
 8019292:	d837      	bhi.n	8019304 <__ssputs_r+0x82>
 8019294:	898a      	ldrh	r2, [r1, #12]
 8019296:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801929a:	d031      	beq.n	8019300 <__ssputs_r+0x7e>
 801929c:	6825      	ldr	r5, [r4, #0]
 801929e:	6909      	ldr	r1, [r1, #16]
 80192a0:	1a6f      	subs	r7, r5, r1
 80192a2:	6965      	ldr	r5, [r4, #20]
 80192a4:	2302      	movs	r3, #2
 80192a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80192aa:	fb95 f5f3 	sdiv	r5, r5, r3
 80192ae:	f109 0301 	add.w	r3, r9, #1
 80192b2:	443b      	add	r3, r7
 80192b4:	429d      	cmp	r5, r3
 80192b6:	bf38      	it	cc
 80192b8:	461d      	movcc	r5, r3
 80192ba:	0553      	lsls	r3, r2, #21
 80192bc:	d530      	bpl.n	8019320 <__ssputs_r+0x9e>
 80192be:	4629      	mov	r1, r5
 80192c0:	f7fc fc9c 	bl	8015bfc <_malloc_r>
 80192c4:	4606      	mov	r6, r0
 80192c6:	b950      	cbnz	r0, 80192de <__ssputs_r+0x5c>
 80192c8:	230c      	movs	r3, #12
 80192ca:	f8ca 3000 	str.w	r3, [sl]
 80192ce:	89a3      	ldrh	r3, [r4, #12]
 80192d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192d4:	81a3      	strh	r3, [r4, #12]
 80192d6:	f04f 30ff 	mov.w	r0, #4294967295
 80192da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192de:	463a      	mov	r2, r7
 80192e0:	6921      	ldr	r1, [r4, #16]
 80192e2:	f7fc fc03 	bl	8015aec <memcpy>
 80192e6:	89a3      	ldrh	r3, [r4, #12]
 80192e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80192ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80192f0:	81a3      	strh	r3, [r4, #12]
 80192f2:	6126      	str	r6, [r4, #16]
 80192f4:	6165      	str	r5, [r4, #20]
 80192f6:	443e      	add	r6, r7
 80192f8:	1bed      	subs	r5, r5, r7
 80192fa:	6026      	str	r6, [r4, #0]
 80192fc:	60a5      	str	r5, [r4, #8]
 80192fe:	464e      	mov	r6, r9
 8019300:	454e      	cmp	r6, r9
 8019302:	d900      	bls.n	8019306 <__ssputs_r+0x84>
 8019304:	464e      	mov	r6, r9
 8019306:	4632      	mov	r2, r6
 8019308:	4641      	mov	r1, r8
 801930a:	6820      	ldr	r0, [r4, #0]
 801930c:	f7fc fbf9 	bl	8015b02 <memmove>
 8019310:	68a3      	ldr	r3, [r4, #8]
 8019312:	1b9b      	subs	r3, r3, r6
 8019314:	60a3      	str	r3, [r4, #8]
 8019316:	6823      	ldr	r3, [r4, #0]
 8019318:	441e      	add	r6, r3
 801931a:	6026      	str	r6, [r4, #0]
 801931c:	2000      	movs	r0, #0
 801931e:	e7dc      	b.n	80192da <__ssputs_r+0x58>
 8019320:	462a      	mov	r2, r5
 8019322:	f000 f920 	bl	8019566 <_realloc_r>
 8019326:	4606      	mov	r6, r0
 8019328:	2800      	cmp	r0, #0
 801932a:	d1e2      	bne.n	80192f2 <__ssputs_r+0x70>
 801932c:	6921      	ldr	r1, [r4, #16]
 801932e:	4650      	mov	r0, sl
 8019330:	f7fc fc16 	bl	8015b60 <_free_r>
 8019334:	e7c8      	b.n	80192c8 <__ssputs_r+0x46>
	...

08019338 <_svfiprintf_r>:
 8019338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801933c:	461d      	mov	r5, r3
 801933e:	898b      	ldrh	r3, [r1, #12]
 8019340:	061f      	lsls	r7, r3, #24
 8019342:	b09d      	sub	sp, #116	; 0x74
 8019344:	4680      	mov	r8, r0
 8019346:	460c      	mov	r4, r1
 8019348:	4616      	mov	r6, r2
 801934a:	d50f      	bpl.n	801936c <_svfiprintf_r+0x34>
 801934c:	690b      	ldr	r3, [r1, #16]
 801934e:	b96b      	cbnz	r3, 801936c <_svfiprintf_r+0x34>
 8019350:	2140      	movs	r1, #64	; 0x40
 8019352:	f7fc fc53 	bl	8015bfc <_malloc_r>
 8019356:	6020      	str	r0, [r4, #0]
 8019358:	6120      	str	r0, [r4, #16]
 801935a:	b928      	cbnz	r0, 8019368 <_svfiprintf_r+0x30>
 801935c:	230c      	movs	r3, #12
 801935e:	f8c8 3000 	str.w	r3, [r8]
 8019362:	f04f 30ff 	mov.w	r0, #4294967295
 8019366:	e0c8      	b.n	80194fa <_svfiprintf_r+0x1c2>
 8019368:	2340      	movs	r3, #64	; 0x40
 801936a:	6163      	str	r3, [r4, #20]
 801936c:	2300      	movs	r3, #0
 801936e:	9309      	str	r3, [sp, #36]	; 0x24
 8019370:	2320      	movs	r3, #32
 8019372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019376:	2330      	movs	r3, #48	; 0x30
 8019378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801937c:	9503      	str	r5, [sp, #12]
 801937e:	f04f 0b01 	mov.w	fp, #1
 8019382:	4637      	mov	r7, r6
 8019384:	463d      	mov	r5, r7
 8019386:	f815 3b01 	ldrb.w	r3, [r5], #1
 801938a:	b10b      	cbz	r3, 8019390 <_svfiprintf_r+0x58>
 801938c:	2b25      	cmp	r3, #37	; 0x25
 801938e:	d13e      	bne.n	801940e <_svfiprintf_r+0xd6>
 8019390:	ebb7 0a06 	subs.w	sl, r7, r6
 8019394:	d00b      	beq.n	80193ae <_svfiprintf_r+0x76>
 8019396:	4653      	mov	r3, sl
 8019398:	4632      	mov	r2, r6
 801939a:	4621      	mov	r1, r4
 801939c:	4640      	mov	r0, r8
 801939e:	f7ff ff70 	bl	8019282 <__ssputs_r>
 80193a2:	3001      	adds	r0, #1
 80193a4:	f000 80a4 	beq.w	80194f0 <_svfiprintf_r+0x1b8>
 80193a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193aa:	4453      	add	r3, sl
 80193ac:	9309      	str	r3, [sp, #36]	; 0x24
 80193ae:	783b      	ldrb	r3, [r7, #0]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	f000 809d 	beq.w	80194f0 <_svfiprintf_r+0x1b8>
 80193b6:	2300      	movs	r3, #0
 80193b8:	f04f 32ff 	mov.w	r2, #4294967295
 80193bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80193c0:	9304      	str	r3, [sp, #16]
 80193c2:	9307      	str	r3, [sp, #28]
 80193c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80193c8:	931a      	str	r3, [sp, #104]	; 0x68
 80193ca:	462f      	mov	r7, r5
 80193cc:	2205      	movs	r2, #5
 80193ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80193d2:	4850      	ldr	r0, [pc, #320]	; (8019514 <_svfiprintf_r+0x1dc>)
 80193d4:	f7e6 ff04 	bl	80001e0 <memchr>
 80193d8:	9b04      	ldr	r3, [sp, #16]
 80193da:	b9d0      	cbnz	r0, 8019412 <_svfiprintf_r+0xda>
 80193dc:	06d9      	lsls	r1, r3, #27
 80193de:	bf44      	itt	mi
 80193e0:	2220      	movmi	r2, #32
 80193e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80193e6:	071a      	lsls	r2, r3, #28
 80193e8:	bf44      	itt	mi
 80193ea:	222b      	movmi	r2, #43	; 0x2b
 80193ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80193f0:	782a      	ldrb	r2, [r5, #0]
 80193f2:	2a2a      	cmp	r2, #42	; 0x2a
 80193f4:	d015      	beq.n	8019422 <_svfiprintf_r+0xea>
 80193f6:	9a07      	ldr	r2, [sp, #28]
 80193f8:	462f      	mov	r7, r5
 80193fa:	2000      	movs	r0, #0
 80193fc:	250a      	movs	r5, #10
 80193fe:	4639      	mov	r1, r7
 8019400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019404:	3b30      	subs	r3, #48	; 0x30
 8019406:	2b09      	cmp	r3, #9
 8019408:	d94d      	bls.n	80194a6 <_svfiprintf_r+0x16e>
 801940a:	b1b8      	cbz	r0, 801943c <_svfiprintf_r+0x104>
 801940c:	e00f      	b.n	801942e <_svfiprintf_r+0xf6>
 801940e:	462f      	mov	r7, r5
 8019410:	e7b8      	b.n	8019384 <_svfiprintf_r+0x4c>
 8019412:	4a40      	ldr	r2, [pc, #256]	; (8019514 <_svfiprintf_r+0x1dc>)
 8019414:	1a80      	subs	r0, r0, r2
 8019416:	fa0b f000 	lsl.w	r0, fp, r0
 801941a:	4318      	orrs	r0, r3
 801941c:	9004      	str	r0, [sp, #16]
 801941e:	463d      	mov	r5, r7
 8019420:	e7d3      	b.n	80193ca <_svfiprintf_r+0x92>
 8019422:	9a03      	ldr	r2, [sp, #12]
 8019424:	1d11      	adds	r1, r2, #4
 8019426:	6812      	ldr	r2, [r2, #0]
 8019428:	9103      	str	r1, [sp, #12]
 801942a:	2a00      	cmp	r2, #0
 801942c:	db01      	blt.n	8019432 <_svfiprintf_r+0xfa>
 801942e:	9207      	str	r2, [sp, #28]
 8019430:	e004      	b.n	801943c <_svfiprintf_r+0x104>
 8019432:	4252      	negs	r2, r2
 8019434:	f043 0302 	orr.w	r3, r3, #2
 8019438:	9207      	str	r2, [sp, #28]
 801943a:	9304      	str	r3, [sp, #16]
 801943c:	783b      	ldrb	r3, [r7, #0]
 801943e:	2b2e      	cmp	r3, #46	; 0x2e
 8019440:	d10c      	bne.n	801945c <_svfiprintf_r+0x124>
 8019442:	787b      	ldrb	r3, [r7, #1]
 8019444:	2b2a      	cmp	r3, #42	; 0x2a
 8019446:	d133      	bne.n	80194b0 <_svfiprintf_r+0x178>
 8019448:	9b03      	ldr	r3, [sp, #12]
 801944a:	1d1a      	adds	r2, r3, #4
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	9203      	str	r2, [sp, #12]
 8019450:	2b00      	cmp	r3, #0
 8019452:	bfb8      	it	lt
 8019454:	f04f 33ff 	movlt.w	r3, #4294967295
 8019458:	3702      	adds	r7, #2
 801945a:	9305      	str	r3, [sp, #20]
 801945c:	4d2e      	ldr	r5, [pc, #184]	; (8019518 <_svfiprintf_r+0x1e0>)
 801945e:	7839      	ldrb	r1, [r7, #0]
 8019460:	2203      	movs	r2, #3
 8019462:	4628      	mov	r0, r5
 8019464:	f7e6 febc 	bl	80001e0 <memchr>
 8019468:	b138      	cbz	r0, 801947a <_svfiprintf_r+0x142>
 801946a:	2340      	movs	r3, #64	; 0x40
 801946c:	1b40      	subs	r0, r0, r5
 801946e:	fa03 f000 	lsl.w	r0, r3, r0
 8019472:	9b04      	ldr	r3, [sp, #16]
 8019474:	4303      	orrs	r3, r0
 8019476:	3701      	adds	r7, #1
 8019478:	9304      	str	r3, [sp, #16]
 801947a:	7839      	ldrb	r1, [r7, #0]
 801947c:	4827      	ldr	r0, [pc, #156]	; (801951c <_svfiprintf_r+0x1e4>)
 801947e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019482:	2206      	movs	r2, #6
 8019484:	1c7e      	adds	r6, r7, #1
 8019486:	f7e6 feab 	bl	80001e0 <memchr>
 801948a:	2800      	cmp	r0, #0
 801948c:	d038      	beq.n	8019500 <_svfiprintf_r+0x1c8>
 801948e:	4b24      	ldr	r3, [pc, #144]	; (8019520 <_svfiprintf_r+0x1e8>)
 8019490:	bb13      	cbnz	r3, 80194d8 <_svfiprintf_r+0x1a0>
 8019492:	9b03      	ldr	r3, [sp, #12]
 8019494:	3307      	adds	r3, #7
 8019496:	f023 0307 	bic.w	r3, r3, #7
 801949a:	3308      	adds	r3, #8
 801949c:	9303      	str	r3, [sp, #12]
 801949e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194a0:	444b      	add	r3, r9
 80194a2:	9309      	str	r3, [sp, #36]	; 0x24
 80194a4:	e76d      	b.n	8019382 <_svfiprintf_r+0x4a>
 80194a6:	fb05 3202 	mla	r2, r5, r2, r3
 80194aa:	2001      	movs	r0, #1
 80194ac:	460f      	mov	r7, r1
 80194ae:	e7a6      	b.n	80193fe <_svfiprintf_r+0xc6>
 80194b0:	2300      	movs	r3, #0
 80194b2:	3701      	adds	r7, #1
 80194b4:	9305      	str	r3, [sp, #20]
 80194b6:	4619      	mov	r1, r3
 80194b8:	250a      	movs	r5, #10
 80194ba:	4638      	mov	r0, r7
 80194bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80194c0:	3a30      	subs	r2, #48	; 0x30
 80194c2:	2a09      	cmp	r2, #9
 80194c4:	d903      	bls.n	80194ce <_svfiprintf_r+0x196>
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d0c8      	beq.n	801945c <_svfiprintf_r+0x124>
 80194ca:	9105      	str	r1, [sp, #20]
 80194cc:	e7c6      	b.n	801945c <_svfiprintf_r+0x124>
 80194ce:	fb05 2101 	mla	r1, r5, r1, r2
 80194d2:	2301      	movs	r3, #1
 80194d4:	4607      	mov	r7, r0
 80194d6:	e7f0      	b.n	80194ba <_svfiprintf_r+0x182>
 80194d8:	ab03      	add	r3, sp, #12
 80194da:	9300      	str	r3, [sp, #0]
 80194dc:	4622      	mov	r2, r4
 80194de:	4b11      	ldr	r3, [pc, #68]	; (8019524 <_svfiprintf_r+0x1ec>)
 80194e0:	a904      	add	r1, sp, #16
 80194e2:	4640      	mov	r0, r8
 80194e4:	f7fc fc78 	bl	8015dd8 <_printf_float>
 80194e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80194ec:	4681      	mov	r9, r0
 80194ee:	d1d6      	bne.n	801949e <_svfiprintf_r+0x166>
 80194f0:	89a3      	ldrh	r3, [r4, #12]
 80194f2:	065b      	lsls	r3, r3, #25
 80194f4:	f53f af35 	bmi.w	8019362 <_svfiprintf_r+0x2a>
 80194f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80194fa:	b01d      	add	sp, #116	; 0x74
 80194fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019500:	ab03      	add	r3, sp, #12
 8019502:	9300      	str	r3, [sp, #0]
 8019504:	4622      	mov	r2, r4
 8019506:	4b07      	ldr	r3, [pc, #28]	; (8019524 <_svfiprintf_r+0x1ec>)
 8019508:	a904      	add	r1, sp, #16
 801950a:	4640      	mov	r0, r8
 801950c:	f7fc ff1a 	bl	8016344 <_printf_i>
 8019510:	e7ea      	b.n	80194e8 <_svfiprintf_r+0x1b0>
 8019512:	bf00      	nop
 8019514:	0801b424 	.word	0x0801b424
 8019518:	0801b42a 	.word	0x0801b42a
 801951c:	0801b42e 	.word	0x0801b42e
 8019520:	08015dd9 	.word	0x08015dd9
 8019524:	08019283 	.word	0x08019283

08019528 <strncmp>:
 8019528:	b510      	push	{r4, lr}
 801952a:	b16a      	cbz	r2, 8019548 <strncmp+0x20>
 801952c:	3901      	subs	r1, #1
 801952e:	1884      	adds	r4, r0, r2
 8019530:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019534:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019538:	4293      	cmp	r3, r2
 801953a:	d103      	bne.n	8019544 <strncmp+0x1c>
 801953c:	42a0      	cmp	r0, r4
 801953e:	d001      	beq.n	8019544 <strncmp+0x1c>
 8019540:	2b00      	cmp	r3, #0
 8019542:	d1f5      	bne.n	8019530 <strncmp+0x8>
 8019544:	1a98      	subs	r0, r3, r2
 8019546:	bd10      	pop	{r4, pc}
 8019548:	4610      	mov	r0, r2
 801954a:	e7fc      	b.n	8019546 <strncmp+0x1e>

0801954c <__ascii_wctomb>:
 801954c:	b149      	cbz	r1, 8019562 <__ascii_wctomb+0x16>
 801954e:	2aff      	cmp	r2, #255	; 0xff
 8019550:	bf85      	ittet	hi
 8019552:	238a      	movhi	r3, #138	; 0x8a
 8019554:	6003      	strhi	r3, [r0, #0]
 8019556:	700a      	strbls	r2, [r1, #0]
 8019558:	f04f 30ff 	movhi.w	r0, #4294967295
 801955c:	bf98      	it	ls
 801955e:	2001      	movls	r0, #1
 8019560:	4770      	bx	lr
 8019562:	4608      	mov	r0, r1
 8019564:	4770      	bx	lr

08019566 <_realloc_r>:
 8019566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019568:	4607      	mov	r7, r0
 801956a:	4614      	mov	r4, r2
 801956c:	460e      	mov	r6, r1
 801956e:	b921      	cbnz	r1, 801957a <_realloc_r+0x14>
 8019570:	4611      	mov	r1, r2
 8019572:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019576:	f7fc bb41 	b.w	8015bfc <_malloc_r>
 801957a:	b922      	cbnz	r2, 8019586 <_realloc_r+0x20>
 801957c:	f7fc faf0 	bl	8015b60 <_free_r>
 8019580:	4625      	mov	r5, r4
 8019582:	4628      	mov	r0, r5
 8019584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019586:	f000 f814 	bl	80195b2 <_malloc_usable_size_r>
 801958a:	42a0      	cmp	r0, r4
 801958c:	d20f      	bcs.n	80195ae <_realloc_r+0x48>
 801958e:	4621      	mov	r1, r4
 8019590:	4638      	mov	r0, r7
 8019592:	f7fc fb33 	bl	8015bfc <_malloc_r>
 8019596:	4605      	mov	r5, r0
 8019598:	2800      	cmp	r0, #0
 801959a:	d0f2      	beq.n	8019582 <_realloc_r+0x1c>
 801959c:	4631      	mov	r1, r6
 801959e:	4622      	mov	r2, r4
 80195a0:	f7fc faa4 	bl	8015aec <memcpy>
 80195a4:	4631      	mov	r1, r6
 80195a6:	4638      	mov	r0, r7
 80195a8:	f7fc fada 	bl	8015b60 <_free_r>
 80195ac:	e7e9      	b.n	8019582 <_realloc_r+0x1c>
 80195ae:	4635      	mov	r5, r6
 80195b0:	e7e7      	b.n	8019582 <_realloc_r+0x1c>

080195b2 <_malloc_usable_size_r>:
 80195b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80195b6:	1f18      	subs	r0, r3, #4
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	bfbc      	itt	lt
 80195bc:	580b      	ldrlt	r3, [r1, r0]
 80195be:	18c0      	addlt	r0, r0, r3
 80195c0:	4770      	bx	lr
 80195c2:	0000      	movs	r0, r0
 80195c4:	0000      	movs	r0, r0
	...

080195c8 <ceil>:
 80195c8:	ec51 0b10 	vmov	r0, r1, d0
 80195cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80195d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80195d8:	2e13      	cmp	r6, #19
 80195da:	460c      	mov	r4, r1
 80195dc:	ee10 5a10 	vmov	r5, s0
 80195e0:	4680      	mov	r8, r0
 80195e2:	dc30      	bgt.n	8019646 <ceil+0x7e>
 80195e4:	2e00      	cmp	r6, #0
 80195e6:	da12      	bge.n	801960e <ceil+0x46>
 80195e8:	a333      	add	r3, pc, #204	; (adr r3, 80196b8 <ceil+0xf0>)
 80195ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ee:	f7e6 fe4d 	bl	800028c <__adddf3>
 80195f2:	2200      	movs	r2, #0
 80195f4:	2300      	movs	r3, #0
 80195f6:	f7e7 fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 80195fa:	b128      	cbz	r0, 8019608 <ceil+0x40>
 80195fc:	2c00      	cmp	r4, #0
 80195fe:	db55      	blt.n	80196ac <ceil+0xe4>
 8019600:	432c      	orrs	r4, r5
 8019602:	d057      	beq.n	80196b4 <ceil+0xec>
 8019604:	4c2e      	ldr	r4, [pc, #184]	; (80196c0 <ceil+0xf8>)
 8019606:	2500      	movs	r5, #0
 8019608:	4621      	mov	r1, r4
 801960a:	4628      	mov	r0, r5
 801960c:	e025      	b.n	801965a <ceil+0x92>
 801960e:	4f2d      	ldr	r7, [pc, #180]	; (80196c4 <ceil+0xfc>)
 8019610:	4137      	asrs	r7, r6
 8019612:	ea01 0307 	and.w	r3, r1, r7
 8019616:	4303      	orrs	r3, r0
 8019618:	d01f      	beq.n	801965a <ceil+0x92>
 801961a:	a327      	add	r3, pc, #156	; (adr r3, 80196b8 <ceil+0xf0>)
 801961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019620:	f7e6 fe34 	bl	800028c <__adddf3>
 8019624:	2200      	movs	r2, #0
 8019626:	2300      	movs	r3, #0
 8019628:	f7e7 fa76 	bl	8000b18 <__aeabi_dcmpgt>
 801962c:	2800      	cmp	r0, #0
 801962e:	d0eb      	beq.n	8019608 <ceil+0x40>
 8019630:	2c00      	cmp	r4, #0
 8019632:	bfc2      	ittt	gt
 8019634:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8019638:	fa43 f606 	asrgt.w	r6, r3, r6
 801963c:	19a4      	addgt	r4, r4, r6
 801963e:	ea24 0407 	bic.w	r4, r4, r7
 8019642:	2500      	movs	r5, #0
 8019644:	e7e0      	b.n	8019608 <ceil+0x40>
 8019646:	2e33      	cmp	r6, #51	; 0x33
 8019648:	dd0b      	ble.n	8019662 <ceil+0x9a>
 801964a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801964e:	d104      	bne.n	801965a <ceil+0x92>
 8019650:	ee10 2a10 	vmov	r2, s0
 8019654:	460b      	mov	r3, r1
 8019656:	f7e6 fe19 	bl	800028c <__adddf3>
 801965a:	ec41 0b10 	vmov	d0, r0, r1
 801965e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019662:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019666:	f04f 33ff 	mov.w	r3, #4294967295
 801966a:	fa23 f707 	lsr.w	r7, r3, r7
 801966e:	4207      	tst	r7, r0
 8019670:	d0f3      	beq.n	801965a <ceil+0x92>
 8019672:	a311      	add	r3, pc, #68	; (adr r3, 80196b8 <ceil+0xf0>)
 8019674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019678:	f7e6 fe08 	bl	800028c <__adddf3>
 801967c:	2200      	movs	r2, #0
 801967e:	2300      	movs	r3, #0
 8019680:	f7e7 fa4a 	bl	8000b18 <__aeabi_dcmpgt>
 8019684:	2800      	cmp	r0, #0
 8019686:	d0bf      	beq.n	8019608 <ceil+0x40>
 8019688:	2c00      	cmp	r4, #0
 801968a:	dd02      	ble.n	8019692 <ceil+0xca>
 801968c:	2e14      	cmp	r6, #20
 801968e:	d103      	bne.n	8019698 <ceil+0xd0>
 8019690:	3401      	adds	r4, #1
 8019692:	ea25 0507 	bic.w	r5, r5, r7
 8019696:	e7b7      	b.n	8019608 <ceil+0x40>
 8019698:	2301      	movs	r3, #1
 801969a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801969e:	fa03 f606 	lsl.w	r6, r3, r6
 80196a2:	4435      	add	r5, r6
 80196a4:	4545      	cmp	r5, r8
 80196a6:	bf38      	it	cc
 80196a8:	18e4      	addcc	r4, r4, r3
 80196aa:	e7f2      	b.n	8019692 <ceil+0xca>
 80196ac:	2500      	movs	r5, #0
 80196ae:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80196b2:	e7a9      	b.n	8019608 <ceil+0x40>
 80196b4:	4625      	mov	r5, r4
 80196b6:	e7a7      	b.n	8019608 <ceil+0x40>
 80196b8:	8800759c 	.word	0x8800759c
 80196bc:	7e37e43c 	.word	0x7e37e43c
 80196c0:	3ff00000 	.word	0x3ff00000
 80196c4:	000fffff 	.word	0x000fffff

080196c8 <cos>:
 80196c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80196ca:	ec51 0b10 	vmov	r0, r1, d0
 80196ce:	4a1e      	ldr	r2, [pc, #120]	; (8019748 <cos+0x80>)
 80196d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80196d4:	4293      	cmp	r3, r2
 80196d6:	dc06      	bgt.n	80196e6 <cos+0x1e>
 80196d8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8019740 <cos+0x78>
 80196dc:	f000 fcec 	bl	801a0b8 <__kernel_cos>
 80196e0:	ec51 0b10 	vmov	r0, r1, d0
 80196e4:	e007      	b.n	80196f6 <cos+0x2e>
 80196e6:	4a19      	ldr	r2, [pc, #100]	; (801974c <cos+0x84>)
 80196e8:	4293      	cmp	r3, r2
 80196ea:	dd09      	ble.n	8019700 <cos+0x38>
 80196ec:	ee10 2a10 	vmov	r2, s0
 80196f0:	460b      	mov	r3, r1
 80196f2:	f7e6 fdc9 	bl	8000288 <__aeabi_dsub>
 80196f6:	ec41 0b10 	vmov	d0, r0, r1
 80196fa:	b005      	add	sp, #20
 80196fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8019700:	4668      	mov	r0, sp
 8019702:	f000 fa35 	bl	8019b70 <__ieee754_rem_pio2>
 8019706:	f000 0003 	and.w	r0, r0, #3
 801970a:	2801      	cmp	r0, #1
 801970c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019710:	ed9d 0b00 	vldr	d0, [sp]
 8019714:	d007      	beq.n	8019726 <cos+0x5e>
 8019716:	2802      	cmp	r0, #2
 8019718:	d00e      	beq.n	8019738 <cos+0x70>
 801971a:	2800      	cmp	r0, #0
 801971c:	d0de      	beq.n	80196dc <cos+0x14>
 801971e:	2001      	movs	r0, #1
 8019720:	f001 f8d2 	bl	801a8c8 <__kernel_sin>
 8019724:	e7dc      	b.n	80196e0 <cos+0x18>
 8019726:	f001 f8cf 	bl	801a8c8 <__kernel_sin>
 801972a:	ec53 2b10 	vmov	r2, r3, d0
 801972e:	ee10 0a10 	vmov	r0, s0
 8019732:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019736:	e7de      	b.n	80196f6 <cos+0x2e>
 8019738:	f000 fcbe 	bl	801a0b8 <__kernel_cos>
 801973c:	e7f5      	b.n	801972a <cos+0x62>
 801973e:	bf00      	nop
	...
 8019748:	3fe921fb 	.word	0x3fe921fb
 801974c:	7fefffff 	.word	0x7fefffff

08019750 <round>:
 8019750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019752:	ec57 6b10 	vmov	r6, r7, d0
 8019756:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801975a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801975e:	2c13      	cmp	r4, #19
 8019760:	463b      	mov	r3, r7
 8019762:	463d      	mov	r5, r7
 8019764:	dc17      	bgt.n	8019796 <round+0x46>
 8019766:	2c00      	cmp	r4, #0
 8019768:	da09      	bge.n	801977e <round+0x2e>
 801976a:	3401      	adds	r4, #1
 801976c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8019770:	d103      	bne.n	801977a <round+0x2a>
 8019772:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019776:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801977a:	2100      	movs	r1, #0
 801977c:	e02c      	b.n	80197d8 <round+0x88>
 801977e:	4a18      	ldr	r2, [pc, #96]	; (80197e0 <round+0x90>)
 8019780:	4122      	asrs	r2, r4
 8019782:	4217      	tst	r7, r2
 8019784:	d100      	bne.n	8019788 <round+0x38>
 8019786:	b19e      	cbz	r6, 80197b0 <round+0x60>
 8019788:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801978c:	4123      	asrs	r3, r4
 801978e:	442b      	add	r3, r5
 8019790:	ea23 0302 	bic.w	r3, r3, r2
 8019794:	e7f1      	b.n	801977a <round+0x2a>
 8019796:	2c33      	cmp	r4, #51	; 0x33
 8019798:	dd0d      	ble.n	80197b6 <round+0x66>
 801979a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801979e:	d107      	bne.n	80197b0 <round+0x60>
 80197a0:	4630      	mov	r0, r6
 80197a2:	4639      	mov	r1, r7
 80197a4:	ee10 2a10 	vmov	r2, s0
 80197a8:	f7e6 fd70 	bl	800028c <__adddf3>
 80197ac:	4606      	mov	r6, r0
 80197ae:	460f      	mov	r7, r1
 80197b0:	ec47 6b10 	vmov	d0, r6, r7
 80197b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197b6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80197ba:	f04f 30ff 	mov.w	r0, #4294967295
 80197be:	40d0      	lsrs	r0, r2
 80197c0:	4206      	tst	r6, r0
 80197c2:	d0f5      	beq.n	80197b0 <round+0x60>
 80197c4:	2201      	movs	r2, #1
 80197c6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80197ca:	fa02 f404 	lsl.w	r4, r2, r4
 80197ce:	1931      	adds	r1, r6, r4
 80197d0:	bf28      	it	cs
 80197d2:	189b      	addcs	r3, r3, r2
 80197d4:	ea21 0100 	bic.w	r1, r1, r0
 80197d8:	461f      	mov	r7, r3
 80197da:	460e      	mov	r6, r1
 80197dc:	e7e8      	b.n	80197b0 <round+0x60>
 80197de:	bf00      	nop
 80197e0:	000fffff 	.word	0x000fffff
 80197e4:	00000000 	.word	0x00000000

080197e8 <sin>:
 80197e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80197ea:	ec51 0b10 	vmov	r0, r1, d0
 80197ee:	4a20      	ldr	r2, [pc, #128]	; (8019870 <sin+0x88>)
 80197f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80197f4:	4293      	cmp	r3, r2
 80197f6:	dc07      	bgt.n	8019808 <sin+0x20>
 80197f8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8019868 <sin+0x80>
 80197fc:	2000      	movs	r0, #0
 80197fe:	f001 f863 	bl	801a8c8 <__kernel_sin>
 8019802:	ec51 0b10 	vmov	r0, r1, d0
 8019806:	e007      	b.n	8019818 <sin+0x30>
 8019808:	4a1a      	ldr	r2, [pc, #104]	; (8019874 <sin+0x8c>)
 801980a:	4293      	cmp	r3, r2
 801980c:	dd09      	ble.n	8019822 <sin+0x3a>
 801980e:	ee10 2a10 	vmov	r2, s0
 8019812:	460b      	mov	r3, r1
 8019814:	f7e6 fd38 	bl	8000288 <__aeabi_dsub>
 8019818:	ec41 0b10 	vmov	d0, r0, r1
 801981c:	b005      	add	sp, #20
 801981e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019822:	4668      	mov	r0, sp
 8019824:	f000 f9a4 	bl	8019b70 <__ieee754_rem_pio2>
 8019828:	f000 0003 	and.w	r0, r0, #3
 801982c:	2801      	cmp	r0, #1
 801982e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019832:	ed9d 0b00 	vldr	d0, [sp]
 8019836:	d004      	beq.n	8019842 <sin+0x5a>
 8019838:	2802      	cmp	r0, #2
 801983a:	d005      	beq.n	8019848 <sin+0x60>
 801983c:	b970      	cbnz	r0, 801985c <sin+0x74>
 801983e:	2001      	movs	r0, #1
 8019840:	e7dd      	b.n	80197fe <sin+0x16>
 8019842:	f000 fc39 	bl	801a0b8 <__kernel_cos>
 8019846:	e7dc      	b.n	8019802 <sin+0x1a>
 8019848:	2001      	movs	r0, #1
 801984a:	f001 f83d 	bl	801a8c8 <__kernel_sin>
 801984e:	ec53 2b10 	vmov	r2, r3, d0
 8019852:	ee10 0a10 	vmov	r0, s0
 8019856:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801985a:	e7dd      	b.n	8019818 <sin+0x30>
 801985c:	f000 fc2c 	bl	801a0b8 <__kernel_cos>
 8019860:	e7f5      	b.n	801984e <sin+0x66>
 8019862:	bf00      	nop
 8019864:	f3af 8000 	nop.w
	...
 8019870:	3fe921fb 	.word	0x3fe921fb
 8019874:	7fefffff 	.word	0x7fefffff

08019878 <ceilf>:
 8019878:	ee10 3a10 	vmov	r3, s0
 801987c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019880:	0dca      	lsrs	r2, r1, #23
 8019882:	3a7f      	subs	r2, #127	; 0x7f
 8019884:	2a16      	cmp	r2, #22
 8019886:	dc2a      	bgt.n	80198de <ceilf+0x66>
 8019888:	2a00      	cmp	r2, #0
 801988a:	da11      	bge.n	80198b0 <ceilf+0x38>
 801988c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80198f0 <ceilf+0x78>
 8019890:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019894:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801989c:	dd05      	ble.n	80198aa <ceilf+0x32>
 801989e:	2b00      	cmp	r3, #0
 80198a0:	db23      	blt.n	80198ea <ceilf+0x72>
 80198a2:	2900      	cmp	r1, #0
 80198a4:	bf18      	it	ne
 80198a6:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80198aa:	ee00 3a10 	vmov	s0, r3
 80198ae:	4770      	bx	lr
 80198b0:	4910      	ldr	r1, [pc, #64]	; (80198f4 <ceilf+0x7c>)
 80198b2:	4111      	asrs	r1, r2
 80198b4:	420b      	tst	r3, r1
 80198b6:	d0fa      	beq.n	80198ae <ceilf+0x36>
 80198b8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80198f0 <ceilf+0x78>
 80198bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80198c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80198c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198c8:	ddef      	ble.n	80198aa <ceilf+0x32>
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	bfc2      	ittt	gt
 80198ce:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80198d2:	fa40 f202 	asrgt.w	r2, r0, r2
 80198d6:	189b      	addgt	r3, r3, r2
 80198d8:	ea23 0301 	bic.w	r3, r3, r1
 80198dc:	e7e5      	b.n	80198aa <ceilf+0x32>
 80198de:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80198e2:	d3e4      	bcc.n	80198ae <ceilf+0x36>
 80198e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80198e8:	4770      	bx	lr
 80198ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80198ee:	e7dc      	b.n	80198aa <ceilf+0x32>
 80198f0:	7149f2ca 	.word	0x7149f2ca
 80198f4:	007fffff 	.word	0x007fffff

080198f8 <atan2>:
 80198f8:	f000 b85a 	b.w	80199b0 <__ieee754_atan2>

080198fc <sqrt>:
 80198fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019900:	ed2d 8b02 	vpush	{d8}
 8019904:	b08b      	sub	sp, #44	; 0x2c
 8019906:	ec55 4b10 	vmov	r4, r5, d0
 801990a:	f000 fb23 	bl	8019f54 <__ieee754_sqrt>
 801990e:	4b26      	ldr	r3, [pc, #152]	; (80199a8 <sqrt+0xac>)
 8019910:	eeb0 8a40 	vmov.f32	s16, s0
 8019914:	eef0 8a60 	vmov.f32	s17, s1
 8019918:	f993 6000 	ldrsb.w	r6, [r3]
 801991c:	1c73      	adds	r3, r6, #1
 801991e:	d02a      	beq.n	8019976 <sqrt+0x7a>
 8019920:	4622      	mov	r2, r4
 8019922:	462b      	mov	r3, r5
 8019924:	4620      	mov	r0, r4
 8019926:	4629      	mov	r1, r5
 8019928:	f7e7 f900 	bl	8000b2c <__aeabi_dcmpun>
 801992c:	4607      	mov	r7, r0
 801992e:	bb10      	cbnz	r0, 8019976 <sqrt+0x7a>
 8019930:	f04f 0800 	mov.w	r8, #0
 8019934:	f04f 0900 	mov.w	r9, #0
 8019938:	4642      	mov	r2, r8
 801993a:	464b      	mov	r3, r9
 801993c:	4620      	mov	r0, r4
 801993e:	4629      	mov	r1, r5
 8019940:	f7e7 f8cc 	bl	8000adc <__aeabi_dcmplt>
 8019944:	b1b8      	cbz	r0, 8019976 <sqrt+0x7a>
 8019946:	2301      	movs	r3, #1
 8019948:	9300      	str	r3, [sp, #0]
 801994a:	4b18      	ldr	r3, [pc, #96]	; (80199ac <sqrt+0xb0>)
 801994c:	9301      	str	r3, [sp, #4]
 801994e:	9708      	str	r7, [sp, #32]
 8019950:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019954:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019958:	b9b6      	cbnz	r6, 8019988 <sqrt+0x8c>
 801995a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801995e:	4668      	mov	r0, sp
 8019960:	f001 fa9e 	bl	801aea0 <matherr>
 8019964:	b1d0      	cbz	r0, 801999c <sqrt+0xa0>
 8019966:	9b08      	ldr	r3, [sp, #32]
 8019968:	b11b      	cbz	r3, 8019972 <sqrt+0x76>
 801996a:	f7fc f885 	bl	8015a78 <__errno>
 801996e:	9b08      	ldr	r3, [sp, #32]
 8019970:	6003      	str	r3, [r0, #0]
 8019972:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019976:	eeb0 0a48 	vmov.f32	s0, s16
 801997a:	eef0 0a68 	vmov.f32	s1, s17
 801997e:	b00b      	add	sp, #44	; 0x2c
 8019980:	ecbd 8b02 	vpop	{d8}
 8019984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019988:	4642      	mov	r2, r8
 801998a:	464b      	mov	r3, r9
 801998c:	4640      	mov	r0, r8
 801998e:	4649      	mov	r1, r9
 8019990:	f7e6 ff5c 	bl	800084c <__aeabi_ddiv>
 8019994:	2e02      	cmp	r6, #2
 8019996:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801999a:	d1e0      	bne.n	801995e <sqrt+0x62>
 801999c:	f7fc f86c 	bl	8015a78 <__errno>
 80199a0:	2321      	movs	r3, #33	; 0x21
 80199a2:	6003      	str	r3, [r0, #0]
 80199a4:	e7df      	b.n	8019966 <sqrt+0x6a>
 80199a6:	bf00      	nop
 80199a8:	20000b78 	.word	0x20000b78
 80199ac:	0801b536 	.word	0x0801b536

080199b0 <__ieee754_atan2>:
 80199b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199b4:	ec57 6b11 	vmov	r6, r7, d1
 80199b8:	4273      	negs	r3, r6
 80199ba:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80199be:	4333      	orrs	r3, r6
 80199c0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019b68 <__ieee754_atan2+0x1b8>
 80199c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80199c8:	4573      	cmp	r3, lr
 80199ca:	ec51 0b10 	vmov	r0, r1, d0
 80199ce:	ee11 8a10 	vmov	r8, s2
 80199d2:	d80a      	bhi.n	80199ea <__ieee754_atan2+0x3a>
 80199d4:	4244      	negs	r4, r0
 80199d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80199da:	4304      	orrs	r4, r0
 80199dc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80199e0:	4574      	cmp	r4, lr
 80199e2:	468c      	mov	ip, r1
 80199e4:	ee10 9a10 	vmov	r9, s0
 80199e8:	d907      	bls.n	80199fa <__ieee754_atan2+0x4a>
 80199ea:	4632      	mov	r2, r6
 80199ec:	463b      	mov	r3, r7
 80199ee:	f7e6 fc4d 	bl	800028c <__adddf3>
 80199f2:	ec41 0b10 	vmov	d0, r0, r1
 80199f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199fa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80199fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019a02:	4334      	orrs	r4, r6
 8019a04:	d103      	bne.n	8019a0e <__ieee754_atan2+0x5e>
 8019a06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a0a:	f001 b819 	b.w	801aa40 <atan>
 8019a0e:	17bc      	asrs	r4, r7, #30
 8019a10:	f004 0402 	and.w	r4, r4, #2
 8019a14:	ea53 0909 	orrs.w	r9, r3, r9
 8019a18:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019a1c:	d107      	bne.n	8019a2e <__ieee754_atan2+0x7e>
 8019a1e:	2c02      	cmp	r4, #2
 8019a20:	d073      	beq.n	8019b0a <__ieee754_atan2+0x15a>
 8019a22:	2c03      	cmp	r4, #3
 8019a24:	d1e5      	bne.n	80199f2 <__ieee754_atan2+0x42>
 8019a26:	a13e      	add	r1, pc, #248	; (adr r1, 8019b20 <__ieee754_atan2+0x170>)
 8019a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a2c:	e7e1      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019a2e:	ea52 0808 	orrs.w	r8, r2, r8
 8019a32:	d106      	bne.n	8019a42 <__ieee754_atan2+0x92>
 8019a34:	f1bc 0f00 	cmp.w	ip, #0
 8019a38:	da6b      	bge.n	8019b12 <__ieee754_atan2+0x162>
 8019a3a:	a13b      	add	r1, pc, #236	; (adr r1, 8019b28 <__ieee754_atan2+0x178>)
 8019a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a40:	e7d7      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019a42:	4572      	cmp	r2, lr
 8019a44:	d120      	bne.n	8019a88 <__ieee754_atan2+0xd8>
 8019a46:	4293      	cmp	r3, r2
 8019a48:	d111      	bne.n	8019a6e <__ieee754_atan2+0xbe>
 8019a4a:	2c02      	cmp	r4, #2
 8019a4c:	d007      	beq.n	8019a5e <__ieee754_atan2+0xae>
 8019a4e:	2c03      	cmp	r4, #3
 8019a50:	d009      	beq.n	8019a66 <__ieee754_atan2+0xb6>
 8019a52:	2c01      	cmp	r4, #1
 8019a54:	d155      	bne.n	8019b02 <__ieee754_atan2+0x152>
 8019a56:	a136      	add	r1, pc, #216	; (adr r1, 8019b30 <__ieee754_atan2+0x180>)
 8019a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a5c:	e7c9      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019a5e:	a136      	add	r1, pc, #216	; (adr r1, 8019b38 <__ieee754_atan2+0x188>)
 8019a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a64:	e7c5      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019a66:	a136      	add	r1, pc, #216	; (adr r1, 8019b40 <__ieee754_atan2+0x190>)
 8019a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a6c:	e7c1      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019a6e:	2c02      	cmp	r4, #2
 8019a70:	d04b      	beq.n	8019b0a <__ieee754_atan2+0x15a>
 8019a72:	2c03      	cmp	r4, #3
 8019a74:	d0d7      	beq.n	8019a26 <__ieee754_atan2+0x76>
 8019a76:	2c01      	cmp	r4, #1
 8019a78:	f04f 0000 	mov.w	r0, #0
 8019a7c:	d102      	bne.n	8019a84 <__ieee754_atan2+0xd4>
 8019a7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019a82:	e7b6      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019a84:	2100      	movs	r1, #0
 8019a86:	e7b4      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019a88:	4573      	cmp	r3, lr
 8019a8a:	d0d3      	beq.n	8019a34 <__ieee754_atan2+0x84>
 8019a8c:	1a9b      	subs	r3, r3, r2
 8019a8e:	151b      	asrs	r3, r3, #20
 8019a90:	2b3c      	cmp	r3, #60	; 0x3c
 8019a92:	dc1e      	bgt.n	8019ad2 <__ieee754_atan2+0x122>
 8019a94:	2f00      	cmp	r7, #0
 8019a96:	da01      	bge.n	8019a9c <__ieee754_atan2+0xec>
 8019a98:	333c      	adds	r3, #60	; 0x3c
 8019a9a:	db1e      	blt.n	8019ada <__ieee754_atan2+0x12a>
 8019a9c:	4632      	mov	r2, r6
 8019a9e:	463b      	mov	r3, r7
 8019aa0:	f7e6 fed4 	bl	800084c <__aeabi_ddiv>
 8019aa4:	ec41 0b10 	vmov	d0, r0, r1
 8019aa8:	f001 f96a 	bl	801ad80 <fabs>
 8019aac:	f000 ffc8 	bl	801aa40 <atan>
 8019ab0:	ec51 0b10 	vmov	r0, r1, d0
 8019ab4:	2c01      	cmp	r4, #1
 8019ab6:	d013      	beq.n	8019ae0 <__ieee754_atan2+0x130>
 8019ab8:	2c02      	cmp	r4, #2
 8019aba:	d015      	beq.n	8019ae8 <__ieee754_atan2+0x138>
 8019abc:	2c00      	cmp	r4, #0
 8019abe:	d098      	beq.n	80199f2 <__ieee754_atan2+0x42>
 8019ac0:	a321      	add	r3, pc, #132	; (adr r3, 8019b48 <__ieee754_atan2+0x198>)
 8019ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ac6:	f7e6 fbdf 	bl	8000288 <__aeabi_dsub>
 8019aca:	a321      	add	r3, pc, #132	; (adr r3, 8019b50 <__ieee754_atan2+0x1a0>)
 8019acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ad0:	e014      	b.n	8019afc <__ieee754_atan2+0x14c>
 8019ad2:	a121      	add	r1, pc, #132	; (adr r1, 8019b58 <__ieee754_atan2+0x1a8>)
 8019ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ad8:	e7ec      	b.n	8019ab4 <__ieee754_atan2+0x104>
 8019ada:	2000      	movs	r0, #0
 8019adc:	2100      	movs	r1, #0
 8019ade:	e7e9      	b.n	8019ab4 <__ieee754_atan2+0x104>
 8019ae0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019ae4:	4619      	mov	r1, r3
 8019ae6:	e784      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019ae8:	a317      	add	r3, pc, #92	; (adr r3, 8019b48 <__ieee754_atan2+0x198>)
 8019aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aee:	f7e6 fbcb 	bl	8000288 <__aeabi_dsub>
 8019af2:	4602      	mov	r2, r0
 8019af4:	460b      	mov	r3, r1
 8019af6:	a116      	add	r1, pc, #88	; (adr r1, 8019b50 <__ieee754_atan2+0x1a0>)
 8019af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019afc:	f7e6 fbc4 	bl	8000288 <__aeabi_dsub>
 8019b00:	e777      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019b02:	a117      	add	r1, pc, #92	; (adr r1, 8019b60 <__ieee754_atan2+0x1b0>)
 8019b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b08:	e773      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019b0a:	a111      	add	r1, pc, #68	; (adr r1, 8019b50 <__ieee754_atan2+0x1a0>)
 8019b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b10:	e76f      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019b12:	a111      	add	r1, pc, #68	; (adr r1, 8019b58 <__ieee754_atan2+0x1a8>)
 8019b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b18:	e76b      	b.n	80199f2 <__ieee754_atan2+0x42>
 8019b1a:	bf00      	nop
 8019b1c:	f3af 8000 	nop.w
 8019b20:	54442d18 	.word	0x54442d18
 8019b24:	c00921fb 	.word	0xc00921fb
 8019b28:	54442d18 	.word	0x54442d18
 8019b2c:	bff921fb 	.word	0xbff921fb
 8019b30:	54442d18 	.word	0x54442d18
 8019b34:	bfe921fb 	.word	0xbfe921fb
 8019b38:	7f3321d2 	.word	0x7f3321d2
 8019b3c:	4002d97c 	.word	0x4002d97c
 8019b40:	7f3321d2 	.word	0x7f3321d2
 8019b44:	c002d97c 	.word	0xc002d97c
 8019b48:	33145c07 	.word	0x33145c07
 8019b4c:	3ca1a626 	.word	0x3ca1a626
 8019b50:	54442d18 	.word	0x54442d18
 8019b54:	400921fb 	.word	0x400921fb
 8019b58:	54442d18 	.word	0x54442d18
 8019b5c:	3ff921fb 	.word	0x3ff921fb
 8019b60:	54442d18 	.word	0x54442d18
 8019b64:	3fe921fb 	.word	0x3fe921fb
 8019b68:	7ff00000 	.word	0x7ff00000
 8019b6c:	00000000 	.word	0x00000000

08019b70 <__ieee754_rem_pio2>:
 8019b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b74:	ec57 6b10 	vmov	r6, r7, d0
 8019b78:	4bc3      	ldr	r3, [pc, #780]	; (8019e88 <__ieee754_rem_pio2+0x318>)
 8019b7a:	b08d      	sub	sp, #52	; 0x34
 8019b7c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019b80:	4598      	cmp	r8, r3
 8019b82:	4604      	mov	r4, r0
 8019b84:	9704      	str	r7, [sp, #16]
 8019b86:	dc07      	bgt.n	8019b98 <__ieee754_rem_pio2+0x28>
 8019b88:	2200      	movs	r2, #0
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	ed84 0b00 	vstr	d0, [r4]
 8019b90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019b94:	2500      	movs	r5, #0
 8019b96:	e027      	b.n	8019be8 <__ieee754_rem_pio2+0x78>
 8019b98:	4bbc      	ldr	r3, [pc, #752]	; (8019e8c <__ieee754_rem_pio2+0x31c>)
 8019b9a:	4598      	cmp	r8, r3
 8019b9c:	dc75      	bgt.n	8019c8a <__ieee754_rem_pio2+0x11a>
 8019b9e:	9b04      	ldr	r3, [sp, #16]
 8019ba0:	4dbb      	ldr	r5, [pc, #748]	; (8019e90 <__ieee754_rem_pio2+0x320>)
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	ee10 0a10 	vmov	r0, s0
 8019ba8:	a3a9      	add	r3, pc, #676	; (adr r3, 8019e50 <__ieee754_rem_pio2+0x2e0>)
 8019baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bae:	4639      	mov	r1, r7
 8019bb0:	dd36      	ble.n	8019c20 <__ieee754_rem_pio2+0xb0>
 8019bb2:	f7e6 fb69 	bl	8000288 <__aeabi_dsub>
 8019bb6:	45a8      	cmp	r8, r5
 8019bb8:	4606      	mov	r6, r0
 8019bba:	460f      	mov	r7, r1
 8019bbc:	d018      	beq.n	8019bf0 <__ieee754_rem_pio2+0x80>
 8019bbe:	a3a6      	add	r3, pc, #664	; (adr r3, 8019e58 <__ieee754_rem_pio2+0x2e8>)
 8019bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bc4:	f7e6 fb60 	bl	8000288 <__aeabi_dsub>
 8019bc8:	4602      	mov	r2, r0
 8019bca:	460b      	mov	r3, r1
 8019bcc:	e9c4 2300 	strd	r2, r3, [r4]
 8019bd0:	4630      	mov	r0, r6
 8019bd2:	4639      	mov	r1, r7
 8019bd4:	f7e6 fb58 	bl	8000288 <__aeabi_dsub>
 8019bd8:	a39f      	add	r3, pc, #636	; (adr r3, 8019e58 <__ieee754_rem_pio2+0x2e8>)
 8019bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bde:	f7e6 fb53 	bl	8000288 <__aeabi_dsub>
 8019be2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019be6:	2501      	movs	r5, #1
 8019be8:	4628      	mov	r0, r5
 8019bea:	b00d      	add	sp, #52	; 0x34
 8019bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bf0:	a39b      	add	r3, pc, #620	; (adr r3, 8019e60 <__ieee754_rem_pio2+0x2f0>)
 8019bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bf6:	f7e6 fb47 	bl	8000288 <__aeabi_dsub>
 8019bfa:	a39b      	add	r3, pc, #620	; (adr r3, 8019e68 <__ieee754_rem_pio2+0x2f8>)
 8019bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c00:	4606      	mov	r6, r0
 8019c02:	460f      	mov	r7, r1
 8019c04:	f7e6 fb40 	bl	8000288 <__aeabi_dsub>
 8019c08:	4602      	mov	r2, r0
 8019c0a:	460b      	mov	r3, r1
 8019c0c:	e9c4 2300 	strd	r2, r3, [r4]
 8019c10:	4630      	mov	r0, r6
 8019c12:	4639      	mov	r1, r7
 8019c14:	f7e6 fb38 	bl	8000288 <__aeabi_dsub>
 8019c18:	a393      	add	r3, pc, #588	; (adr r3, 8019e68 <__ieee754_rem_pio2+0x2f8>)
 8019c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c1e:	e7de      	b.n	8019bde <__ieee754_rem_pio2+0x6e>
 8019c20:	f7e6 fb34 	bl	800028c <__adddf3>
 8019c24:	45a8      	cmp	r8, r5
 8019c26:	4606      	mov	r6, r0
 8019c28:	460f      	mov	r7, r1
 8019c2a:	d016      	beq.n	8019c5a <__ieee754_rem_pio2+0xea>
 8019c2c:	a38a      	add	r3, pc, #552	; (adr r3, 8019e58 <__ieee754_rem_pio2+0x2e8>)
 8019c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c32:	f7e6 fb2b 	bl	800028c <__adddf3>
 8019c36:	4602      	mov	r2, r0
 8019c38:	460b      	mov	r3, r1
 8019c3a:	e9c4 2300 	strd	r2, r3, [r4]
 8019c3e:	4630      	mov	r0, r6
 8019c40:	4639      	mov	r1, r7
 8019c42:	f7e6 fb21 	bl	8000288 <__aeabi_dsub>
 8019c46:	a384      	add	r3, pc, #528	; (adr r3, 8019e58 <__ieee754_rem_pio2+0x2e8>)
 8019c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c4c:	f7e6 fb1e 	bl	800028c <__adddf3>
 8019c50:	f04f 35ff 	mov.w	r5, #4294967295
 8019c54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019c58:	e7c6      	b.n	8019be8 <__ieee754_rem_pio2+0x78>
 8019c5a:	a381      	add	r3, pc, #516	; (adr r3, 8019e60 <__ieee754_rem_pio2+0x2f0>)
 8019c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c60:	f7e6 fb14 	bl	800028c <__adddf3>
 8019c64:	a380      	add	r3, pc, #512	; (adr r3, 8019e68 <__ieee754_rem_pio2+0x2f8>)
 8019c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c6a:	4606      	mov	r6, r0
 8019c6c:	460f      	mov	r7, r1
 8019c6e:	f7e6 fb0d 	bl	800028c <__adddf3>
 8019c72:	4602      	mov	r2, r0
 8019c74:	460b      	mov	r3, r1
 8019c76:	e9c4 2300 	strd	r2, r3, [r4]
 8019c7a:	4630      	mov	r0, r6
 8019c7c:	4639      	mov	r1, r7
 8019c7e:	f7e6 fb03 	bl	8000288 <__aeabi_dsub>
 8019c82:	a379      	add	r3, pc, #484	; (adr r3, 8019e68 <__ieee754_rem_pio2+0x2f8>)
 8019c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c88:	e7e0      	b.n	8019c4c <__ieee754_rem_pio2+0xdc>
 8019c8a:	4b82      	ldr	r3, [pc, #520]	; (8019e94 <__ieee754_rem_pio2+0x324>)
 8019c8c:	4598      	cmp	r8, r3
 8019c8e:	f300 80d0 	bgt.w	8019e32 <__ieee754_rem_pio2+0x2c2>
 8019c92:	f001 f875 	bl	801ad80 <fabs>
 8019c96:	ec57 6b10 	vmov	r6, r7, d0
 8019c9a:	ee10 0a10 	vmov	r0, s0
 8019c9e:	a374      	add	r3, pc, #464	; (adr r3, 8019e70 <__ieee754_rem_pio2+0x300>)
 8019ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ca4:	4639      	mov	r1, r7
 8019ca6:	f7e6 fca7 	bl	80005f8 <__aeabi_dmul>
 8019caa:	2200      	movs	r2, #0
 8019cac:	4b7a      	ldr	r3, [pc, #488]	; (8019e98 <__ieee754_rem_pio2+0x328>)
 8019cae:	f7e6 faed 	bl	800028c <__adddf3>
 8019cb2:	f7e6 ff51 	bl	8000b58 <__aeabi_d2iz>
 8019cb6:	4605      	mov	r5, r0
 8019cb8:	f7e6 fc34 	bl	8000524 <__aeabi_i2d>
 8019cbc:	a364      	add	r3, pc, #400	; (adr r3, 8019e50 <__ieee754_rem_pio2+0x2e0>)
 8019cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019cc6:	f7e6 fc97 	bl	80005f8 <__aeabi_dmul>
 8019cca:	4602      	mov	r2, r0
 8019ccc:	460b      	mov	r3, r1
 8019cce:	4630      	mov	r0, r6
 8019cd0:	4639      	mov	r1, r7
 8019cd2:	f7e6 fad9 	bl	8000288 <__aeabi_dsub>
 8019cd6:	a360      	add	r3, pc, #384	; (adr r3, 8019e58 <__ieee754_rem_pio2+0x2e8>)
 8019cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cdc:	4682      	mov	sl, r0
 8019cde:	468b      	mov	fp, r1
 8019ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ce4:	f7e6 fc88 	bl	80005f8 <__aeabi_dmul>
 8019ce8:	2d1f      	cmp	r5, #31
 8019cea:	4606      	mov	r6, r0
 8019cec:	460f      	mov	r7, r1
 8019cee:	dc0c      	bgt.n	8019d0a <__ieee754_rem_pio2+0x19a>
 8019cf0:	1e6a      	subs	r2, r5, #1
 8019cf2:	4b6a      	ldr	r3, [pc, #424]	; (8019e9c <__ieee754_rem_pio2+0x32c>)
 8019cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019cf8:	4543      	cmp	r3, r8
 8019cfa:	d006      	beq.n	8019d0a <__ieee754_rem_pio2+0x19a>
 8019cfc:	4632      	mov	r2, r6
 8019cfe:	463b      	mov	r3, r7
 8019d00:	4650      	mov	r0, sl
 8019d02:	4659      	mov	r1, fp
 8019d04:	f7e6 fac0 	bl	8000288 <__aeabi_dsub>
 8019d08:	e00e      	b.n	8019d28 <__ieee754_rem_pio2+0x1b8>
 8019d0a:	4632      	mov	r2, r6
 8019d0c:	463b      	mov	r3, r7
 8019d0e:	4650      	mov	r0, sl
 8019d10:	4659      	mov	r1, fp
 8019d12:	f7e6 fab9 	bl	8000288 <__aeabi_dsub>
 8019d16:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019d1a:	9305      	str	r3, [sp, #20]
 8019d1c:	9a05      	ldr	r2, [sp, #20]
 8019d1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019d22:	1ad3      	subs	r3, r2, r3
 8019d24:	2b10      	cmp	r3, #16
 8019d26:	dc02      	bgt.n	8019d2e <__ieee754_rem_pio2+0x1be>
 8019d28:	e9c4 0100 	strd	r0, r1, [r4]
 8019d2c:	e039      	b.n	8019da2 <__ieee754_rem_pio2+0x232>
 8019d2e:	a34c      	add	r3, pc, #304	; (adr r3, 8019e60 <__ieee754_rem_pio2+0x2f0>)
 8019d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019d38:	f7e6 fc5e 	bl	80005f8 <__aeabi_dmul>
 8019d3c:	4606      	mov	r6, r0
 8019d3e:	460f      	mov	r7, r1
 8019d40:	4602      	mov	r2, r0
 8019d42:	460b      	mov	r3, r1
 8019d44:	4650      	mov	r0, sl
 8019d46:	4659      	mov	r1, fp
 8019d48:	f7e6 fa9e 	bl	8000288 <__aeabi_dsub>
 8019d4c:	4602      	mov	r2, r0
 8019d4e:	460b      	mov	r3, r1
 8019d50:	4680      	mov	r8, r0
 8019d52:	4689      	mov	r9, r1
 8019d54:	4650      	mov	r0, sl
 8019d56:	4659      	mov	r1, fp
 8019d58:	f7e6 fa96 	bl	8000288 <__aeabi_dsub>
 8019d5c:	4632      	mov	r2, r6
 8019d5e:	463b      	mov	r3, r7
 8019d60:	f7e6 fa92 	bl	8000288 <__aeabi_dsub>
 8019d64:	a340      	add	r3, pc, #256	; (adr r3, 8019e68 <__ieee754_rem_pio2+0x2f8>)
 8019d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d6a:	4606      	mov	r6, r0
 8019d6c:	460f      	mov	r7, r1
 8019d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019d72:	f7e6 fc41 	bl	80005f8 <__aeabi_dmul>
 8019d76:	4632      	mov	r2, r6
 8019d78:	463b      	mov	r3, r7
 8019d7a:	f7e6 fa85 	bl	8000288 <__aeabi_dsub>
 8019d7e:	4602      	mov	r2, r0
 8019d80:	460b      	mov	r3, r1
 8019d82:	4606      	mov	r6, r0
 8019d84:	460f      	mov	r7, r1
 8019d86:	4640      	mov	r0, r8
 8019d88:	4649      	mov	r1, r9
 8019d8a:	f7e6 fa7d 	bl	8000288 <__aeabi_dsub>
 8019d8e:	9a05      	ldr	r2, [sp, #20]
 8019d90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019d94:	1ad3      	subs	r3, r2, r3
 8019d96:	2b31      	cmp	r3, #49	; 0x31
 8019d98:	dc20      	bgt.n	8019ddc <__ieee754_rem_pio2+0x26c>
 8019d9a:	e9c4 0100 	strd	r0, r1, [r4]
 8019d9e:	46c2      	mov	sl, r8
 8019da0:	46cb      	mov	fp, r9
 8019da2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019da6:	4650      	mov	r0, sl
 8019da8:	4642      	mov	r2, r8
 8019daa:	464b      	mov	r3, r9
 8019dac:	4659      	mov	r1, fp
 8019dae:	f7e6 fa6b 	bl	8000288 <__aeabi_dsub>
 8019db2:	463b      	mov	r3, r7
 8019db4:	4632      	mov	r2, r6
 8019db6:	f7e6 fa67 	bl	8000288 <__aeabi_dsub>
 8019dba:	9b04      	ldr	r3, [sp, #16]
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019dc2:	f6bf af11 	bge.w	8019be8 <__ieee754_rem_pio2+0x78>
 8019dc6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019dca:	6063      	str	r3, [r4, #4]
 8019dcc:	f8c4 8000 	str.w	r8, [r4]
 8019dd0:	60a0      	str	r0, [r4, #8]
 8019dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019dd6:	60e3      	str	r3, [r4, #12]
 8019dd8:	426d      	negs	r5, r5
 8019dda:	e705      	b.n	8019be8 <__ieee754_rem_pio2+0x78>
 8019ddc:	a326      	add	r3, pc, #152	; (adr r3, 8019e78 <__ieee754_rem_pio2+0x308>)
 8019dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019de6:	f7e6 fc07 	bl	80005f8 <__aeabi_dmul>
 8019dea:	4606      	mov	r6, r0
 8019dec:	460f      	mov	r7, r1
 8019dee:	4602      	mov	r2, r0
 8019df0:	460b      	mov	r3, r1
 8019df2:	4640      	mov	r0, r8
 8019df4:	4649      	mov	r1, r9
 8019df6:	f7e6 fa47 	bl	8000288 <__aeabi_dsub>
 8019dfa:	4602      	mov	r2, r0
 8019dfc:	460b      	mov	r3, r1
 8019dfe:	4682      	mov	sl, r0
 8019e00:	468b      	mov	fp, r1
 8019e02:	4640      	mov	r0, r8
 8019e04:	4649      	mov	r1, r9
 8019e06:	f7e6 fa3f 	bl	8000288 <__aeabi_dsub>
 8019e0a:	4632      	mov	r2, r6
 8019e0c:	463b      	mov	r3, r7
 8019e0e:	f7e6 fa3b 	bl	8000288 <__aeabi_dsub>
 8019e12:	a31b      	add	r3, pc, #108	; (adr r3, 8019e80 <__ieee754_rem_pio2+0x310>)
 8019e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e18:	4606      	mov	r6, r0
 8019e1a:	460f      	mov	r7, r1
 8019e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019e20:	f7e6 fbea 	bl	80005f8 <__aeabi_dmul>
 8019e24:	4632      	mov	r2, r6
 8019e26:	463b      	mov	r3, r7
 8019e28:	f7e6 fa2e 	bl	8000288 <__aeabi_dsub>
 8019e2c:	4606      	mov	r6, r0
 8019e2e:	460f      	mov	r7, r1
 8019e30:	e764      	b.n	8019cfc <__ieee754_rem_pio2+0x18c>
 8019e32:	4b1b      	ldr	r3, [pc, #108]	; (8019ea0 <__ieee754_rem_pio2+0x330>)
 8019e34:	4598      	cmp	r8, r3
 8019e36:	dd35      	ble.n	8019ea4 <__ieee754_rem_pio2+0x334>
 8019e38:	ee10 2a10 	vmov	r2, s0
 8019e3c:	463b      	mov	r3, r7
 8019e3e:	4630      	mov	r0, r6
 8019e40:	4639      	mov	r1, r7
 8019e42:	f7e6 fa21 	bl	8000288 <__aeabi_dsub>
 8019e46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019e4a:	e9c4 0100 	strd	r0, r1, [r4]
 8019e4e:	e6a1      	b.n	8019b94 <__ieee754_rem_pio2+0x24>
 8019e50:	54400000 	.word	0x54400000
 8019e54:	3ff921fb 	.word	0x3ff921fb
 8019e58:	1a626331 	.word	0x1a626331
 8019e5c:	3dd0b461 	.word	0x3dd0b461
 8019e60:	1a600000 	.word	0x1a600000
 8019e64:	3dd0b461 	.word	0x3dd0b461
 8019e68:	2e037073 	.word	0x2e037073
 8019e6c:	3ba3198a 	.word	0x3ba3198a
 8019e70:	6dc9c883 	.word	0x6dc9c883
 8019e74:	3fe45f30 	.word	0x3fe45f30
 8019e78:	2e000000 	.word	0x2e000000
 8019e7c:	3ba3198a 	.word	0x3ba3198a
 8019e80:	252049c1 	.word	0x252049c1
 8019e84:	397b839a 	.word	0x397b839a
 8019e88:	3fe921fb 	.word	0x3fe921fb
 8019e8c:	4002d97b 	.word	0x4002d97b
 8019e90:	3ff921fb 	.word	0x3ff921fb
 8019e94:	413921fb 	.word	0x413921fb
 8019e98:	3fe00000 	.word	0x3fe00000
 8019e9c:	0801b53c 	.word	0x0801b53c
 8019ea0:	7fefffff 	.word	0x7fefffff
 8019ea4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8019ea8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8019eac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8019eb0:	4630      	mov	r0, r6
 8019eb2:	460f      	mov	r7, r1
 8019eb4:	f7e6 fe50 	bl	8000b58 <__aeabi_d2iz>
 8019eb8:	f7e6 fb34 	bl	8000524 <__aeabi_i2d>
 8019ebc:	4602      	mov	r2, r0
 8019ebe:	460b      	mov	r3, r1
 8019ec0:	4630      	mov	r0, r6
 8019ec2:	4639      	mov	r1, r7
 8019ec4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019ec8:	f7e6 f9de 	bl	8000288 <__aeabi_dsub>
 8019ecc:	2200      	movs	r2, #0
 8019ece:	4b1f      	ldr	r3, [pc, #124]	; (8019f4c <__ieee754_rem_pio2+0x3dc>)
 8019ed0:	f7e6 fb92 	bl	80005f8 <__aeabi_dmul>
 8019ed4:	460f      	mov	r7, r1
 8019ed6:	4606      	mov	r6, r0
 8019ed8:	f7e6 fe3e 	bl	8000b58 <__aeabi_d2iz>
 8019edc:	f7e6 fb22 	bl	8000524 <__aeabi_i2d>
 8019ee0:	4602      	mov	r2, r0
 8019ee2:	460b      	mov	r3, r1
 8019ee4:	4630      	mov	r0, r6
 8019ee6:	4639      	mov	r1, r7
 8019ee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019eec:	f7e6 f9cc 	bl	8000288 <__aeabi_dsub>
 8019ef0:	2200      	movs	r2, #0
 8019ef2:	4b16      	ldr	r3, [pc, #88]	; (8019f4c <__ieee754_rem_pio2+0x3dc>)
 8019ef4:	f7e6 fb80 	bl	80005f8 <__aeabi_dmul>
 8019ef8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019efc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8019f00:	f04f 0803 	mov.w	r8, #3
 8019f04:	2600      	movs	r6, #0
 8019f06:	2700      	movs	r7, #0
 8019f08:	4632      	mov	r2, r6
 8019f0a:	463b      	mov	r3, r7
 8019f0c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8019f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8019f14:	f7e6 fdd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8019f18:	b9b0      	cbnz	r0, 8019f48 <__ieee754_rem_pio2+0x3d8>
 8019f1a:	4b0d      	ldr	r3, [pc, #52]	; (8019f50 <__ieee754_rem_pio2+0x3e0>)
 8019f1c:	9301      	str	r3, [sp, #4]
 8019f1e:	2302      	movs	r3, #2
 8019f20:	9300      	str	r3, [sp, #0]
 8019f22:	462a      	mov	r2, r5
 8019f24:	4643      	mov	r3, r8
 8019f26:	4621      	mov	r1, r4
 8019f28:	a806      	add	r0, sp, #24
 8019f2a:	f000 f98d 	bl	801a248 <__kernel_rem_pio2>
 8019f2e:	9b04      	ldr	r3, [sp, #16]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	4605      	mov	r5, r0
 8019f34:	f6bf ae58 	bge.w	8019be8 <__ieee754_rem_pio2+0x78>
 8019f38:	6863      	ldr	r3, [r4, #4]
 8019f3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019f3e:	6063      	str	r3, [r4, #4]
 8019f40:	68e3      	ldr	r3, [r4, #12]
 8019f42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019f46:	e746      	b.n	8019dd6 <__ieee754_rem_pio2+0x266>
 8019f48:	46d0      	mov	r8, sl
 8019f4a:	e7dd      	b.n	8019f08 <__ieee754_rem_pio2+0x398>
 8019f4c:	41700000 	.word	0x41700000
 8019f50:	0801b5bc 	.word	0x0801b5bc

08019f54 <__ieee754_sqrt>:
 8019f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f58:	4955      	ldr	r1, [pc, #340]	; (801a0b0 <__ieee754_sqrt+0x15c>)
 8019f5a:	ec55 4b10 	vmov	r4, r5, d0
 8019f5e:	43a9      	bics	r1, r5
 8019f60:	462b      	mov	r3, r5
 8019f62:	462a      	mov	r2, r5
 8019f64:	d112      	bne.n	8019f8c <__ieee754_sqrt+0x38>
 8019f66:	ee10 2a10 	vmov	r2, s0
 8019f6a:	ee10 0a10 	vmov	r0, s0
 8019f6e:	4629      	mov	r1, r5
 8019f70:	f7e6 fb42 	bl	80005f8 <__aeabi_dmul>
 8019f74:	4602      	mov	r2, r0
 8019f76:	460b      	mov	r3, r1
 8019f78:	4620      	mov	r0, r4
 8019f7a:	4629      	mov	r1, r5
 8019f7c:	f7e6 f986 	bl	800028c <__adddf3>
 8019f80:	4604      	mov	r4, r0
 8019f82:	460d      	mov	r5, r1
 8019f84:	ec45 4b10 	vmov	d0, r4, r5
 8019f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f8c:	2d00      	cmp	r5, #0
 8019f8e:	ee10 0a10 	vmov	r0, s0
 8019f92:	4621      	mov	r1, r4
 8019f94:	dc0f      	bgt.n	8019fb6 <__ieee754_sqrt+0x62>
 8019f96:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019f9a:	4330      	orrs	r0, r6
 8019f9c:	d0f2      	beq.n	8019f84 <__ieee754_sqrt+0x30>
 8019f9e:	b155      	cbz	r5, 8019fb6 <__ieee754_sqrt+0x62>
 8019fa0:	ee10 2a10 	vmov	r2, s0
 8019fa4:	4620      	mov	r0, r4
 8019fa6:	4629      	mov	r1, r5
 8019fa8:	f7e6 f96e 	bl	8000288 <__aeabi_dsub>
 8019fac:	4602      	mov	r2, r0
 8019fae:	460b      	mov	r3, r1
 8019fb0:	f7e6 fc4c 	bl	800084c <__aeabi_ddiv>
 8019fb4:	e7e4      	b.n	8019f80 <__ieee754_sqrt+0x2c>
 8019fb6:	151b      	asrs	r3, r3, #20
 8019fb8:	d073      	beq.n	801a0a2 <__ieee754_sqrt+0x14e>
 8019fba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019fbe:	07dd      	lsls	r5, r3, #31
 8019fc0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019fc4:	bf48      	it	mi
 8019fc6:	0fc8      	lsrmi	r0, r1, #31
 8019fc8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8019fcc:	bf44      	itt	mi
 8019fce:	0049      	lslmi	r1, r1, #1
 8019fd0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8019fd4:	2500      	movs	r5, #0
 8019fd6:	1058      	asrs	r0, r3, #1
 8019fd8:	0fcb      	lsrs	r3, r1, #31
 8019fda:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8019fde:	0049      	lsls	r1, r1, #1
 8019fe0:	2316      	movs	r3, #22
 8019fe2:	462c      	mov	r4, r5
 8019fe4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8019fe8:	19a7      	adds	r7, r4, r6
 8019fea:	4297      	cmp	r7, r2
 8019fec:	bfde      	ittt	le
 8019fee:	19bc      	addle	r4, r7, r6
 8019ff0:	1bd2      	suble	r2, r2, r7
 8019ff2:	19ad      	addle	r5, r5, r6
 8019ff4:	0fcf      	lsrs	r7, r1, #31
 8019ff6:	3b01      	subs	r3, #1
 8019ff8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8019ffc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a000:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a004:	d1f0      	bne.n	8019fe8 <__ieee754_sqrt+0x94>
 801a006:	f04f 0c20 	mov.w	ip, #32
 801a00a:	469e      	mov	lr, r3
 801a00c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a010:	42a2      	cmp	r2, r4
 801a012:	eb06 070e 	add.w	r7, r6, lr
 801a016:	dc02      	bgt.n	801a01e <__ieee754_sqrt+0xca>
 801a018:	d112      	bne.n	801a040 <__ieee754_sqrt+0xec>
 801a01a:	428f      	cmp	r7, r1
 801a01c:	d810      	bhi.n	801a040 <__ieee754_sqrt+0xec>
 801a01e:	2f00      	cmp	r7, #0
 801a020:	eb07 0e06 	add.w	lr, r7, r6
 801a024:	da42      	bge.n	801a0ac <__ieee754_sqrt+0x158>
 801a026:	f1be 0f00 	cmp.w	lr, #0
 801a02a:	db3f      	blt.n	801a0ac <__ieee754_sqrt+0x158>
 801a02c:	f104 0801 	add.w	r8, r4, #1
 801a030:	1b12      	subs	r2, r2, r4
 801a032:	428f      	cmp	r7, r1
 801a034:	bf88      	it	hi
 801a036:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a03a:	1bc9      	subs	r1, r1, r7
 801a03c:	4433      	add	r3, r6
 801a03e:	4644      	mov	r4, r8
 801a040:	0052      	lsls	r2, r2, #1
 801a042:	f1bc 0c01 	subs.w	ip, ip, #1
 801a046:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a04a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a04e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a052:	d1dd      	bne.n	801a010 <__ieee754_sqrt+0xbc>
 801a054:	430a      	orrs	r2, r1
 801a056:	d006      	beq.n	801a066 <__ieee754_sqrt+0x112>
 801a058:	1c5c      	adds	r4, r3, #1
 801a05a:	bf13      	iteet	ne
 801a05c:	3301      	addne	r3, #1
 801a05e:	3501      	addeq	r5, #1
 801a060:	4663      	moveq	r3, ip
 801a062:	f023 0301 	bicne.w	r3, r3, #1
 801a066:	106a      	asrs	r2, r5, #1
 801a068:	085b      	lsrs	r3, r3, #1
 801a06a:	07e9      	lsls	r1, r5, #31
 801a06c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a070:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a074:	bf48      	it	mi
 801a076:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a07a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a07e:	461c      	mov	r4, r3
 801a080:	e780      	b.n	8019f84 <__ieee754_sqrt+0x30>
 801a082:	0aca      	lsrs	r2, r1, #11
 801a084:	3815      	subs	r0, #21
 801a086:	0549      	lsls	r1, r1, #21
 801a088:	2a00      	cmp	r2, #0
 801a08a:	d0fa      	beq.n	801a082 <__ieee754_sqrt+0x12e>
 801a08c:	02d6      	lsls	r6, r2, #11
 801a08e:	d50a      	bpl.n	801a0a6 <__ieee754_sqrt+0x152>
 801a090:	f1c3 0420 	rsb	r4, r3, #32
 801a094:	fa21 f404 	lsr.w	r4, r1, r4
 801a098:	1e5d      	subs	r5, r3, #1
 801a09a:	4099      	lsls	r1, r3
 801a09c:	4322      	orrs	r2, r4
 801a09e:	1b43      	subs	r3, r0, r5
 801a0a0:	e78b      	b.n	8019fba <__ieee754_sqrt+0x66>
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	e7f0      	b.n	801a088 <__ieee754_sqrt+0x134>
 801a0a6:	0052      	lsls	r2, r2, #1
 801a0a8:	3301      	adds	r3, #1
 801a0aa:	e7ef      	b.n	801a08c <__ieee754_sqrt+0x138>
 801a0ac:	46a0      	mov	r8, r4
 801a0ae:	e7bf      	b.n	801a030 <__ieee754_sqrt+0xdc>
 801a0b0:	7ff00000 	.word	0x7ff00000
 801a0b4:	00000000 	.word	0x00000000

0801a0b8 <__kernel_cos>:
 801a0b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0bc:	ec59 8b10 	vmov	r8, r9, d0
 801a0c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a0c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a0c8:	ed2d 8b02 	vpush	{d8}
 801a0cc:	eeb0 8a41 	vmov.f32	s16, s2
 801a0d0:	eef0 8a61 	vmov.f32	s17, s3
 801a0d4:	da07      	bge.n	801a0e6 <__kernel_cos+0x2e>
 801a0d6:	ee10 0a10 	vmov	r0, s0
 801a0da:	4649      	mov	r1, r9
 801a0dc:	f7e6 fd3c 	bl	8000b58 <__aeabi_d2iz>
 801a0e0:	2800      	cmp	r0, #0
 801a0e2:	f000 8089 	beq.w	801a1f8 <__kernel_cos+0x140>
 801a0e6:	4642      	mov	r2, r8
 801a0e8:	464b      	mov	r3, r9
 801a0ea:	4640      	mov	r0, r8
 801a0ec:	4649      	mov	r1, r9
 801a0ee:	f7e6 fa83 	bl	80005f8 <__aeabi_dmul>
 801a0f2:	2200      	movs	r2, #0
 801a0f4:	4b4e      	ldr	r3, [pc, #312]	; (801a230 <__kernel_cos+0x178>)
 801a0f6:	4604      	mov	r4, r0
 801a0f8:	460d      	mov	r5, r1
 801a0fa:	f7e6 fa7d 	bl	80005f8 <__aeabi_dmul>
 801a0fe:	a340      	add	r3, pc, #256	; (adr r3, 801a200 <__kernel_cos+0x148>)
 801a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a104:	4682      	mov	sl, r0
 801a106:	468b      	mov	fp, r1
 801a108:	4620      	mov	r0, r4
 801a10a:	4629      	mov	r1, r5
 801a10c:	f7e6 fa74 	bl	80005f8 <__aeabi_dmul>
 801a110:	a33d      	add	r3, pc, #244	; (adr r3, 801a208 <__kernel_cos+0x150>)
 801a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a116:	f7e6 f8b9 	bl	800028c <__adddf3>
 801a11a:	4622      	mov	r2, r4
 801a11c:	462b      	mov	r3, r5
 801a11e:	f7e6 fa6b 	bl	80005f8 <__aeabi_dmul>
 801a122:	a33b      	add	r3, pc, #236	; (adr r3, 801a210 <__kernel_cos+0x158>)
 801a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a128:	f7e6 f8ae 	bl	8000288 <__aeabi_dsub>
 801a12c:	4622      	mov	r2, r4
 801a12e:	462b      	mov	r3, r5
 801a130:	f7e6 fa62 	bl	80005f8 <__aeabi_dmul>
 801a134:	a338      	add	r3, pc, #224	; (adr r3, 801a218 <__kernel_cos+0x160>)
 801a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a13a:	f7e6 f8a7 	bl	800028c <__adddf3>
 801a13e:	4622      	mov	r2, r4
 801a140:	462b      	mov	r3, r5
 801a142:	f7e6 fa59 	bl	80005f8 <__aeabi_dmul>
 801a146:	a336      	add	r3, pc, #216	; (adr r3, 801a220 <__kernel_cos+0x168>)
 801a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a14c:	f7e6 f89c 	bl	8000288 <__aeabi_dsub>
 801a150:	4622      	mov	r2, r4
 801a152:	462b      	mov	r3, r5
 801a154:	f7e6 fa50 	bl	80005f8 <__aeabi_dmul>
 801a158:	a333      	add	r3, pc, #204	; (adr r3, 801a228 <__kernel_cos+0x170>)
 801a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a15e:	f7e6 f895 	bl	800028c <__adddf3>
 801a162:	4622      	mov	r2, r4
 801a164:	462b      	mov	r3, r5
 801a166:	f7e6 fa47 	bl	80005f8 <__aeabi_dmul>
 801a16a:	4622      	mov	r2, r4
 801a16c:	462b      	mov	r3, r5
 801a16e:	f7e6 fa43 	bl	80005f8 <__aeabi_dmul>
 801a172:	ec53 2b18 	vmov	r2, r3, d8
 801a176:	4604      	mov	r4, r0
 801a178:	460d      	mov	r5, r1
 801a17a:	4640      	mov	r0, r8
 801a17c:	4649      	mov	r1, r9
 801a17e:	f7e6 fa3b 	bl	80005f8 <__aeabi_dmul>
 801a182:	460b      	mov	r3, r1
 801a184:	4602      	mov	r2, r0
 801a186:	4629      	mov	r1, r5
 801a188:	4620      	mov	r0, r4
 801a18a:	f7e6 f87d 	bl	8000288 <__aeabi_dsub>
 801a18e:	4b29      	ldr	r3, [pc, #164]	; (801a234 <__kernel_cos+0x17c>)
 801a190:	429e      	cmp	r6, r3
 801a192:	4680      	mov	r8, r0
 801a194:	4689      	mov	r9, r1
 801a196:	dc11      	bgt.n	801a1bc <__kernel_cos+0x104>
 801a198:	4602      	mov	r2, r0
 801a19a:	460b      	mov	r3, r1
 801a19c:	4650      	mov	r0, sl
 801a19e:	4659      	mov	r1, fp
 801a1a0:	f7e6 f872 	bl	8000288 <__aeabi_dsub>
 801a1a4:	460b      	mov	r3, r1
 801a1a6:	4924      	ldr	r1, [pc, #144]	; (801a238 <__kernel_cos+0x180>)
 801a1a8:	4602      	mov	r2, r0
 801a1aa:	2000      	movs	r0, #0
 801a1ac:	f7e6 f86c 	bl	8000288 <__aeabi_dsub>
 801a1b0:	ecbd 8b02 	vpop	{d8}
 801a1b4:	ec41 0b10 	vmov	d0, r0, r1
 801a1b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1bc:	4b1f      	ldr	r3, [pc, #124]	; (801a23c <__kernel_cos+0x184>)
 801a1be:	491e      	ldr	r1, [pc, #120]	; (801a238 <__kernel_cos+0x180>)
 801a1c0:	429e      	cmp	r6, r3
 801a1c2:	bfcc      	ite	gt
 801a1c4:	4d1e      	ldrgt	r5, [pc, #120]	; (801a240 <__kernel_cos+0x188>)
 801a1c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a1ca:	2400      	movs	r4, #0
 801a1cc:	4622      	mov	r2, r4
 801a1ce:	462b      	mov	r3, r5
 801a1d0:	2000      	movs	r0, #0
 801a1d2:	f7e6 f859 	bl	8000288 <__aeabi_dsub>
 801a1d6:	4622      	mov	r2, r4
 801a1d8:	4606      	mov	r6, r0
 801a1da:	460f      	mov	r7, r1
 801a1dc:	462b      	mov	r3, r5
 801a1de:	4650      	mov	r0, sl
 801a1e0:	4659      	mov	r1, fp
 801a1e2:	f7e6 f851 	bl	8000288 <__aeabi_dsub>
 801a1e6:	4642      	mov	r2, r8
 801a1e8:	464b      	mov	r3, r9
 801a1ea:	f7e6 f84d 	bl	8000288 <__aeabi_dsub>
 801a1ee:	4602      	mov	r2, r0
 801a1f0:	460b      	mov	r3, r1
 801a1f2:	4630      	mov	r0, r6
 801a1f4:	4639      	mov	r1, r7
 801a1f6:	e7d9      	b.n	801a1ac <__kernel_cos+0xf4>
 801a1f8:	2000      	movs	r0, #0
 801a1fa:	490f      	ldr	r1, [pc, #60]	; (801a238 <__kernel_cos+0x180>)
 801a1fc:	e7d8      	b.n	801a1b0 <__kernel_cos+0xf8>
 801a1fe:	bf00      	nop
 801a200:	be8838d4 	.word	0xbe8838d4
 801a204:	bda8fae9 	.word	0xbda8fae9
 801a208:	bdb4b1c4 	.word	0xbdb4b1c4
 801a20c:	3e21ee9e 	.word	0x3e21ee9e
 801a210:	809c52ad 	.word	0x809c52ad
 801a214:	3e927e4f 	.word	0x3e927e4f
 801a218:	19cb1590 	.word	0x19cb1590
 801a21c:	3efa01a0 	.word	0x3efa01a0
 801a220:	16c15177 	.word	0x16c15177
 801a224:	3f56c16c 	.word	0x3f56c16c
 801a228:	5555554c 	.word	0x5555554c
 801a22c:	3fa55555 	.word	0x3fa55555
 801a230:	3fe00000 	.word	0x3fe00000
 801a234:	3fd33332 	.word	0x3fd33332
 801a238:	3ff00000 	.word	0x3ff00000
 801a23c:	3fe90000 	.word	0x3fe90000
 801a240:	3fd20000 	.word	0x3fd20000
 801a244:	00000000 	.word	0x00000000

0801a248 <__kernel_rem_pio2>:
 801a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a24c:	ed2d 8b02 	vpush	{d8}
 801a250:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a254:	1ed4      	subs	r4, r2, #3
 801a256:	9308      	str	r3, [sp, #32]
 801a258:	9101      	str	r1, [sp, #4]
 801a25a:	4bc5      	ldr	r3, [pc, #788]	; (801a570 <__kernel_rem_pio2+0x328>)
 801a25c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a25e:	9009      	str	r0, [sp, #36]	; 0x24
 801a260:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a264:	9304      	str	r3, [sp, #16]
 801a266:	9b08      	ldr	r3, [sp, #32]
 801a268:	3b01      	subs	r3, #1
 801a26a:	9307      	str	r3, [sp, #28]
 801a26c:	2318      	movs	r3, #24
 801a26e:	fb94 f4f3 	sdiv	r4, r4, r3
 801a272:	f06f 0317 	mvn.w	r3, #23
 801a276:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a27a:	fb04 3303 	mla	r3, r4, r3, r3
 801a27e:	eb03 0a02 	add.w	sl, r3, r2
 801a282:	9b04      	ldr	r3, [sp, #16]
 801a284:	9a07      	ldr	r2, [sp, #28]
 801a286:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a560 <__kernel_rem_pio2+0x318>
 801a28a:	eb03 0802 	add.w	r8, r3, r2
 801a28e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a290:	1aa7      	subs	r7, r4, r2
 801a292:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a296:	ae22      	add	r6, sp, #136	; 0x88
 801a298:	2500      	movs	r5, #0
 801a29a:	4545      	cmp	r5, r8
 801a29c:	dd13      	ble.n	801a2c6 <__kernel_rem_pio2+0x7e>
 801a29e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a560 <__kernel_rem_pio2+0x318>
 801a2a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a2a6:	2600      	movs	r6, #0
 801a2a8:	9b04      	ldr	r3, [sp, #16]
 801a2aa:	429e      	cmp	r6, r3
 801a2ac:	dc32      	bgt.n	801a314 <__kernel_rem_pio2+0xcc>
 801a2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2b0:	9302      	str	r3, [sp, #8]
 801a2b2:	9b08      	ldr	r3, [sp, #32]
 801a2b4:	199d      	adds	r5, r3, r6
 801a2b6:	ab22      	add	r3, sp, #136	; 0x88
 801a2b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a2bc:	9306      	str	r3, [sp, #24]
 801a2be:	ec59 8b18 	vmov	r8, r9, d8
 801a2c2:	2700      	movs	r7, #0
 801a2c4:	e01f      	b.n	801a306 <__kernel_rem_pio2+0xbe>
 801a2c6:	42ef      	cmn	r7, r5
 801a2c8:	d407      	bmi.n	801a2da <__kernel_rem_pio2+0x92>
 801a2ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a2ce:	f7e6 f929 	bl	8000524 <__aeabi_i2d>
 801a2d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a2d6:	3501      	adds	r5, #1
 801a2d8:	e7df      	b.n	801a29a <__kernel_rem_pio2+0x52>
 801a2da:	ec51 0b18 	vmov	r0, r1, d8
 801a2de:	e7f8      	b.n	801a2d2 <__kernel_rem_pio2+0x8a>
 801a2e0:	9906      	ldr	r1, [sp, #24]
 801a2e2:	9d02      	ldr	r5, [sp, #8]
 801a2e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a2e8:	9106      	str	r1, [sp, #24]
 801a2ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a2ee:	9502      	str	r5, [sp, #8]
 801a2f0:	f7e6 f982 	bl	80005f8 <__aeabi_dmul>
 801a2f4:	4602      	mov	r2, r0
 801a2f6:	460b      	mov	r3, r1
 801a2f8:	4640      	mov	r0, r8
 801a2fa:	4649      	mov	r1, r9
 801a2fc:	f7e5 ffc6 	bl	800028c <__adddf3>
 801a300:	3701      	adds	r7, #1
 801a302:	4680      	mov	r8, r0
 801a304:	4689      	mov	r9, r1
 801a306:	9b07      	ldr	r3, [sp, #28]
 801a308:	429f      	cmp	r7, r3
 801a30a:	dde9      	ble.n	801a2e0 <__kernel_rem_pio2+0x98>
 801a30c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a310:	3601      	adds	r6, #1
 801a312:	e7c9      	b.n	801a2a8 <__kernel_rem_pio2+0x60>
 801a314:	9b04      	ldr	r3, [sp, #16]
 801a316:	aa0e      	add	r2, sp, #56	; 0x38
 801a318:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a31c:	930c      	str	r3, [sp, #48]	; 0x30
 801a31e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a320:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a324:	9c04      	ldr	r4, [sp, #16]
 801a326:	930b      	str	r3, [sp, #44]	; 0x2c
 801a328:	ab9a      	add	r3, sp, #616	; 0x268
 801a32a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a32e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a332:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a336:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a33a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a33e:	ab9a      	add	r3, sp, #616	; 0x268
 801a340:	445b      	add	r3, fp
 801a342:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a346:	2500      	movs	r5, #0
 801a348:	1b63      	subs	r3, r4, r5
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	dc78      	bgt.n	801a440 <__kernel_rem_pio2+0x1f8>
 801a34e:	4650      	mov	r0, sl
 801a350:	ec49 8b10 	vmov	d0, r8, r9
 801a354:	f000 fda8 	bl	801aea8 <scalbn>
 801a358:	ec57 6b10 	vmov	r6, r7, d0
 801a35c:	2200      	movs	r2, #0
 801a35e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a362:	ee10 0a10 	vmov	r0, s0
 801a366:	4639      	mov	r1, r7
 801a368:	f7e6 f946 	bl	80005f8 <__aeabi_dmul>
 801a36c:	ec41 0b10 	vmov	d0, r0, r1
 801a370:	f000 fd12 	bl	801ad98 <floor>
 801a374:	2200      	movs	r2, #0
 801a376:	ec51 0b10 	vmov	r0, r1, d0
 801a37a:	4b7e      	ldr	r3, [pc, #504]	; (801a574 <__kernel_rem_pio2+0x32c>)
 801a37c:	f7e6 f93c 	bl	80005f8 <__aeabi_dmul>
 801a380:	4602      	mov	r2, r0
 801a382:	460b      	mov	r3, r1
 801a384:	4630      	mov	r0, r6
 801a386:	4639      	mov	r1, r7
 801a388:	f7e5 ff7e 	bl	8000288 <__aeabi_dsub>
 801a38c:	460f      	mov	r7, r1
 801a38e:	4606      	mov	r6, r0
 801a390:	f7e6 fbe2 	bl	8000b58 <__aeabi_d2iz>
 801a394:	9006      	str	r0, [sp, #24]
 801a396:	f7e6 f8c5 	bl	8000524 <__aeabi_i2d>
 801a39a:	4602      	mov	r2, r0
 801a39c:	460b      	mov	r3, r1
 801a39e:	4630      	mov	r0, r6
 801a3a0:	4639      	mov	r1, r7
 801a3a2:	f7e5 ff71 	bl	8000288 <__aeabi_dsub>
 801a3a6:	f1ba 0f00 	cmp.w	sl, #0
 801a3aa:	4606      	mov	r6, r0
 801a3ac:	460f      	mov	r7, r1
 801a3ae:	dd6c      	ble.n	801a48a <__kernel_rem_pio2+0x242>
 801a3b0:	1e62      	subs	r2, r4, #1
 801a3b2:	ab0e      	add	r3, sp, #56	; 0x38
 801a3b4:	f1ca 0118 	rsb	r1, sl, #24
 801a3b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a3bc:	9d06      	ldr	r5, [sp, #24]
 801a3be:	fa40 f301 	asr.w	r3, r0, r1
 801a3c2:	441d      	add	r5, r3
 801a3c4:	408b      	lsls	r3, r1
 801a3c6:	1ac0      	subs	r0, r0, r3
 801a3c8:	ab0e      	add	r3, sp, #56	; 0x38
 801a3ca:	9506      	str	r5, [sp, #24]
 801a3cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a3d0:	f1ca 0317 	rsb	r3, sl, #23
 801a3d4:	fa40 f303 	asr.w	r3, r0, r3
 801a3d8:	9302      	str	r3, [sp, #8]
 801a3da:	9b02      	ldr	r3, [sp, #8]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	dd62      	ble.n	801a4a6 <__kernel_rem_pio2+0x25e>
 801a3e0:	9b06      	ldr	r3, [sp, #24]
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	3301      	adds	r3, #1
 801a3e6:	9306      	str	r3, [sp, #24]
 801a3e8:	4615      	mov	r5, r2
 801a3ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a3ee:	4294      	cmp	r4, r2
 801a3f0:	f300 8095 	bgt.w	801a51e <__kernel_rem_pio2+0x2d6>
 801a3f4:	f1ba 0f00 	cmp.w	sl, #0
 801a3f8:	dd07      	ble.n	801a40a <__kernel_rem_pio2+0x1c2>
 801a3fa:	f1ba 0f01 	cmp.w	sl, #1
 801a3fe:	f000 80a2 	beq.w	801a546 <__kernel_rem_pio2+0x2fe>
 801a402:	f1ba 0f02 	cmp.w	sl, #2
 801a406:	f000 80c1 	beq.w	801a58c <__kernel_rem_pio2+0x344>
 801a40a:	9b02      	ldr	r3, [sp, #8]
 801a40c:	2b02      	cmp	r3, #2
 801a40e:	d14a      	bne.n	801a4a6 <__kernel_rem_pio2+0x25e>
 801a410:	4632      	mov	r2, r6
 801a412:	463b      	mov	r3, r7
 801a414:	2000      	movs	r0, #0
 801a416:	4958      	ldr	r1, [pc, #352]	; (801a578 <__kernel_rem_pio2+0x330>)
 801a418:	f7e5 ff36 	bl	8000288 <__aeabi_dsub>
 801a41c:	4606      	mov	r6, r0
 801a41e:	460f      	mov	r7, r1
 801a420:	2d00      	cmp	r5, #0
 801a422:	d040      	beq.n	801a4a6 <__kernel_rem_pio2+0x25e>
 801a424:	4650      	mov	r0, sl
 801a426:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a568 <__kernel_rem_pio2+0x320>
 801a42a:	f000 fd3d 	bl	801aea8 <scalbn>
 801a42e:	4630      	mov	r0, r6
 801a430:	4639      	mov	r1, r7
 801a432:	ec53 2b10 	vmov	r2, r3, d0
 801a436:	f7e5 ff27 	bl	8000288 <__aeabi_dsub>
 801a43a:	4606      	mov	r6, r0
 801a43c:	460f      	mov	r7, r1
 801a43e:	e032      	b.n	801a4a6 <__kernel_rem_pio2+0x25e>
 801a440:	2200      	movs	r2, #0
 801a442:	4b4e      	ldr	r3, [pc, #312]	; (801a57c <__kernel_rem_pio2+0x334>)
 801a444:	4640      	mov	r0, r8
 801a446:	4649      	mov	r1, r9
 801a448:	f7e6 f8d6 	bl	80005f8 <__aeabi_dmul>
 801a44c:	f7e6 fb84 	bl	8000b58 <__aeabi_d2iz>
 801a450:	f7e6 f868 	bl	8000524 <__aeabi_i2d>
 801a454:	2200      	movs	r2, #0
 801a456:	4b4a      	ldr	r3, [pc, #296]	; (801a580 <__kernel_rem_pio2+0x338>)
 801a458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a45c:	f7e6 f8cc 	bl	80005f8 <__aeabi_dmul>
 801a460:	4602      	mov	r2, r0
 801a462:	460b      	mov	r3, r1
 801a464:	4640      	mov	r0, r8
 801a466:	4649      	mov	r1, r9
 801a468:	f7e5 ff0e 	bl	8000288 <__aeabi_dsub>
 801a46c:	f7e6 fb74 	bl	8000b58 <__aeabi_d2iz>
 801a470:	ab0e      	add	r3, sp, #56	; 0x38
 801a472:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a476:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a47e:	f7e5 ff05 	bl	800028c <__adddf3>
 801a482:	3501      	adds	r5, #1
 801a484:	4680      	mov	r8, r0
 801a486:	4689      	mov	r9, r1
 801a488:	e75e      	b.n	801a348 <__kernel_rem_pio2+0x100>
 801a48a:	d105      	bne.n	801a498 <__kernel_rem_pio2+0x250>
 801a48c:	1e63      	subs	r3, r4, #1
 801a48e:	aa0e      	add	r2, sp, #56	; 0x38
 801a490:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a494:	15c3      	asrs	r3, r0, #23
 801a496:	e79f      	b.n	801a3d8 <__kernel_rem_pio2+0x190>
 801a498:	2200      	movs	r2, #0
 801a49a:	4b3a      	ldr	r3, [pc, #232]	; (801a584 <__kernel_rem_pio2+0x33c>)
 801a49c:	f7e6 fb32 	bl	8000b04 <__aeabi_dcmpge>
 801a4a0:	2800      	cmp	r0, #0
 801a4a2:	d139      	bne.n	801a518 <__kernel_rem_pio2+0x2d0>
 801a4a4:	9002      	str	r0, [sp, #8]
 801a4a6:	2200      	movs	r2, #0
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	4630      	mov	r0, r6
 801a4ac:	4639      	mov	r1, r7
 801a4ae:	f7e6 fb0b 	bl	8000ac8 <__aeabi_dcmpeq>
 801a4b2:	2800      	cmp	r0, #0
 801a4b4:	f000 80c7 	beq.w	801a646 <__kernel_rem_pio2+0x3fe>
 801a4b8:	1e65      	subs	r5, r4, #1
 801a4ba:	462b      	mov	r3, r5
 801a4bc:	2200      	movs	r2, #0
 801a4be:	9904      	ldr	r1, [sp, #16]
 801a4c0:	428b      	cmp	r3, r1
 801a4c2:	da6a      	bge.n	801a59a <__kernel_rem_pio2+0x352>
 801a4c4:	2a00      	cmp	r2, #0
 801a4c6:	f000 8088 	beq.w	801a5da <__kernel_rem_pio2+0x392>
 801a4ca:	ab0e      	add	r3, sp, #56	; 0x38
 801a4cc:	f1aa 0a18 	sub.w	sl, sl, #24
 801a4d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	f000 80b4 	beq.w	801a642 <__kernel_rem_pio2+0x3fa>
 801a4da:	4650      	mov	r0, sl
 801a4dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a568 <__kernel_rem_pio2+0x320>
 801a4e0:	f000 fce2 	bl	801aea8 <scalbn>
 801a4e4:	00ec      	lsls	r4, r5, #3
 801a4e6:	ab72      	add	r3, sp, #456	; 0x1c8
 801a4e8:	191e      	adds	r6, r3, r4
 801a4ea:	ec59 8b10 	vmov	r8, r9, d0
 801a4ee:	f106 0a08 	add.w	sl, r6, #8
 801a4f2:	462f      	mov	r7, r5
 801a4f4:	2f00      	cmp	r7, #0
 801a4f6:	f280 80df 	bge.w	801a6b8 <__kernel_rem_pio2+0x470>
 801a4fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a560 <__kernel_rem_pio2+0x318>
 801a4fe:	f04f 0a00 	mov.w	sl, #0
 801a502:	eba5 030a 	sub.w	r3, r5, sl
 801a506:	2b00      	cmp	r3, #0
 801a508:	f2c0 810a 	blt.w	801a720 <__kernel_rem_pio2+0x4d8>
 801a50c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a588 <__kernel_rem_pio2+0x340>
 801a510:	ec59 8b18 	vmov	r8, r9, d8
 801a514:	2700      	movs	r7, #0
 801a516:	e0f5      	b.n	801a704 <__kernel_rem_pio2+0x4bc>
 801a518:	2302      	movs	r3, #2
 801a51a:	9302      	str	r3, [sp, #8]
 801a51c:	e760      	b.n	801a3e0 <__kernel_rem_pio2+0x198>
 801a51e:	ab0e      	add	r3, sp, #56	; 0x38
 801a520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a524:	b94d      	cbnz	r5, 801a53a <__kernel_rem_pio2+0x2f2>
 801a526:	b12b      	cbz	r3, 801a534 <__kernel_rem_pio2+0x2ec>
 801a528:	a80e      	add	r0, sp, #56	; 0x38
 801a52a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a52e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a532:	2301      	movs	r3, #1
 801a534:	3201      	adds	r2, #1
 801a536:	461d      	mov	r5, r3
 801a538:	e759      	b.n	801a3ee <__kernel_rem_pio2+0x1a6>
 801a53a:	a80e      	add	r0, sp, #56	; 0x38
 801a53c:	1acb      	subs	r3, r1, r3
 801a53e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a542:	462b      	mov	r3, r5
 801a544:	e7f6      	b.n	801a534 <__kernel_rem_pio2+0x2ec>
 801a546:	1e62      	subs	r2, r4, #1
 801a548:	ab0e      	add	r3, sp, #56	; 0x38
 801a54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a54e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a552:	a90e      	add	r1, sp, #56	; 0x38
 801a554:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a558:	e757      	b.n	801a40a <__kernel_rem_pio2+0x1c2>
 801a55a:	bf00      	nop
 801a55c:	f3af 8000 	nop.w
	...
 801a56c:	3ff00000 	.word	0x3ff00000
 801a570:	0801b708 	.word	0x0801b708
 801a574:	40200000 	.word	0x40200000
 801a578:	3ff00000 	.word	0x3ff00000
 801a57c:	3e700000 	.word	0x3e700000
 801a580:	41700000 	.word	0x41700000
 801a584:	3fe00000 	.word	0x3fe00000
 801a588:	0801b6c8 	.word	0x0801b6c8
 801a58c:	1e62      	subs	r2, r4, #1
 801a58e:	ab0e      	add	r3, sp, #56	; 0x38
 801a590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a594:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a598:	e7db      	b.n	801a552 <__kernel_rem_pio2+0x30a>
 801a59a:	a90e      	add	r1, sp, #56	; 0x38
 801a59c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a5a0:	3b01      	subs	r3, #1
 801a5a2:	430a      	orrs	r2, r1
 801a5a4:	e78b      	b.n	801a4be <__kernel_rem_pio2+0x276>
 801a5a6:	3301      	adds	r3, #1
 801a5a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a5ac:	2900      	cmp	r1, #0
 801a5ae:	d0fa      	beq.n	801a5a6 <__kernel_rem_pio2+0x35e>
 801a5b0:	9a08      	ldr	r2, [sp, #32]
 801a5b2:	4422      	add	r2, r4
 801a5b4:	00d2      	lsls	r2, r2, #3
 801a5b6:	a922      	add	r1, sp, #136	; 0x88
 801a5b8:	18e3      	adds	r3, r4, r3
 801a5ba:	9206      	str	r2, [sp, #24]
 801a5bc:	440a      	add	r2, r1
 801a5be:	9302      	str	r3, [sp, #8]
 801a5c0:	f10b 0108 	add.w	r1, fp, #8
 801a5c4:	f102 0308 	add.w	r3, r2, #8
 801a5c8:	1c66      	adds	r6, r4, #1
 801a5ca:	910a      	str	r1, [sp, #40]	; 0x28
 801a5cc:	2500      	movs	r5, #0
 801a5ce:	930d      	str	r3, [sp, #52]	; 0x34
 801a5d0:	9b02      	ldr	r3, [sp, #8]
 801a5d2:	42b3      	cmp	r3, r6
 801a5d4:	da04      	bge.n	801a5e0 <__kernel_rem_pio2+0x398>
 801a5d6:	461c      	mov	r4, r3
 801a5d8:	e6a6      	b.n	801a328 <__kernel_rem_pio2+0xe0>
 801a5da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a5dc:	2301      	movs	r3, #1
 801a5de:	e7e3      	b.n	801a5a8 <__kernel_rem_pio2+0x360>
 801a5e0:	9b06      	ldr	r3, [sp, #24]
 801a5e2:	18ef      	adds	r7, r5, r3
 801a5e4:	ab22      	add	r3, sp, #136	; 0x88
 801a5e6:	441f      	add	r7, r3
 801a5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a5ee:	f7e5 ff99 	bl	8000524 <__aeabi_i2d>
 801a5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5f4:	461c      	mov	r4, r3
 801a5f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a5f8:	e9c7 0100 	strd	r0, r1, [r7]
 801a5fc:	eb03 0b05 	add.w	fp, r3, r5
 801a600:	2700      	movs	r7, #0
 801a602:	f04f 0800 	mov.w	r8, #0
 801a606:	f04f 0900 	mov.w	r9, #0
 801a60a:	9b07      	ldr	r3, [sp, #28]
 801a60c:	429f      	cmp	r7, r3
 801a60e:	dd08      	ble.n	801a622 <__kernel_rem_pio2+0x3da>
 801a610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a612:	aa72      	add	r2, sp, #456	; 0x1c8
 801a614:	18eb      	adds	r3, r5, r3
 801a616:	4413      	add	r3, r2
 801a618:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801a61c:	3601      	adds	r6, #1
 801a61e:	3508      	adds	r5, #8
 801a620:	e7d6      	b.n	801a5d0 <__kernel_rem_pio2+0x388>
 801a622:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a626:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a62a:	f7e5 ffe5 	bl	80005f8 <__aeabi_dmul>
 801a62e:	4602      	mov	r2, r0
 801a630:	460b      	mov	r3, r1
 801a632:	4640      	mov	r0, r8
 801a634:	4649      	mov	r1, r9
 801a636:	f7e5 fe29 	bl	800028c <__adddf3>
 801a63a:	3701      	adds	r7, #1
 801a63c:	4680      	mov	r8, r0
 801a63e:	4689      	mov	r9, r1
 801a640:	e7e3      	b.n	801a60a <__kernel_rem_pio2+0x3c2>
 801a642:	3d01      	subs	r5, #1
 801a644:	e741      	b.n	801a4ca <__kernel_rem_pio2+0x282>
 801a646:	f1ca 0000 	rsb	r0, sl, #0
 801a64a:	ec47 6b10 	vmov	d0, r6, r7
 801a64e:	f000 fc2b 	bl	801aea8 <scalbn>
 801a652:	ec57 6b10 	vmov	r6, r7, d0
 801a656:	2200      	movs	r2, #0
 801a658:	4b99      	ldr	r3, [pc, #612]	; (801a8c0 <__kernel_rem_pio2+0x678>)
 801a65a:	ee10 0a10 	vmov	r0, s0
 801a65e:	4639      	mov	r1, r7
 801a660:	f7e6 fa50 	bl	8000b04 <__aeabi_dcmpge>
 801a664:	b1f8      	cbz	r0, 801a6a6 <__kernel_rem_pio2+0x45e>
 801a666:	2200      	movs	r2, #0
 801a668:	4b96      	ldr	r3, [pc, #600]	; (801a8c4 <__kernel_rem_pio2+0x67c>)
 801a66a:	4630      	mov	r0, r6
 801a66c:	4639      	mov	r1, r7
 801a66e:	f7e5 ffc3 	bl	80005f8 <__aeabi_dmul>
 801a672:	f7e6 fa71 	bl	8000b58 <__aeabi_d2iz>
 801a676:	4680      	mov	r8, r0
 801a678:	f7e5 ff54 	bl	8000524 <__aeabi_i2d>
 801a67c:	2200      	movs	r2, #0
 801a67e:	4b90      	ldr	r3, [pc, #576]	; (801a8c0 <__kernel_rem_pio2+0x678>)
 801a680:	f7e5 ffba 	bl	80005f8 <__aeabi_dmul>
 801a684:	460b      	mov	r3, r1
 801a686:	4602      	mov	r2, r0
 801a688:	4639      	mov	r1, r7
 801a68a:	4630      	mov	r0, r6
 801a68c:	f7e5 fdfc 	bl	8000288 <__aeabi_dsub>
 801a690:	f7e6 fa62 	bl	8000b58 <__aeabi_d2iz>
 801a694:	1c65      	adds	r5, r4, #1
 801a696:	ab0e      	add	r3, sp, #56	; 0x38
 801a698:	f10a 0a18 	add.w	sl, sl, #24
 801a69c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a6a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a6a4:	e719      	b.n	801a4da <__kernel_rem_pio2+0x292>
 801a6a6:	4630      	mov	r0, r6
 801a6a8:	4639      	mov	r1, r7
 801a6aa:	f7e6 fa55 	bl	8000b58 <__aeabi_d2iz>
 801a6ae:	ab0e      	add	r3, sp, #56	; 0x38
 801a6b0:	4625      	mov	r5, r4
 801a6b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a6b6:	e710      	b.n	801a4da <__kernel_rem_pio2+0x292>
 801a6b8:	ab0e      	add	r3, sp, #56	; 0x38
 801a6ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a6be:	f7e5 ff31 	bl	8000524 <__aeabi_i2d>
 801a6c2:	4642      	mov	r2, r8
 801a6c4:	464b      	mov	r3, r9
 801a6c6:	f7e5 ff97 	bl	80005f8 <__aeabi_dmul>
 801a6ca:	2200      	movs	r2, #0
 801a6cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a6d0:	4b7c      	ldr	r3, [pc, #496]	; (801a8c4 <__kernel_rem_pio2+0x67c>)
 801a6d2:	4640      	mov	r0, r8
 801a6d4:	4649      	mov	r1, r9
 801a6d6:	f7e5 ff8f 	bl	80005f8 <__aeabi_dmul>
 801a6da:	3f01      	subs	r7, #1
 801a6dc:	4680      	mov	r8, r0
 801a6de:	4689      	mov	r9, r1
 801a6e0:	e708      	b.n	801a4f4 <__kernel_rem_pio2+0x2ac>
 801a6e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801a6ee:	f7e5 ff83 	bl	80005f8 <__aeabi_dmul>
 801a6f2:	4602      	mov	r2, r0
 801a6f4:	460b      	mov	r3, r1
 801a6f6:	4640      	mov	r0, r8
 801a6f8:	4649      	mov	r1, r9
 801a6fa:	f7e5 fdc7 	bl	800028c <__adddf3>
 801a6fe:	3701      	adds	r7, #1
 801a700:	4680      	mov	r8, r0
 801a702:	4689      	mov	r9, r1
 801a704:	9b04      	ldr	r3, [sp, #16]
 801a706:	429f      	cmp	r7, r3
 801a708:	dc01      	bgt.n	801a70e <__kernel_rem_pio2+0x4c6>
 801a70a:	45ba      	cmp	sl, r7
 801a70c:	dae9      	bge.n	801a6e2 <__kernel_rem_pio2+0x49a>
 801a70e:	ab4a      	add	r3, sp, #296	; 0x128
 801a710:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a714:	e9c3 8900 	strd	r8, r9, [r3]
 801a718:	f10a 0a01 	add.w	sl, sl, #1
 801a71c:	3e08      	subs	r6, #8
 801a71e:	e6f0      	b.n	801a502 <__kernel_rem_pio2+0x2ba>
 801a720:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a722:	2b03      	cmp	r3, #3
 801a724:	d85b      	bhi.n	801a7de <__kernel_rem_pio2+0x596>
 801a726:	e8df f003 	tbb	[pc, r3]
 801a72a:	264a      	.short	0x264a
 801a72c:	0226      	.short	0x0226
 801a72e:	ab9a      	add	r3, sp, #616	; 0x268
 801a730:	441c      	add	r4, r3
 801a732:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a736:	46a2      	mov	sl, r4
 801a738:	46ab      	mov	fp, r5
 801a73a:	f1bb 0f00 	cmp.w	fp, #0
 801a73e:	dc6c      	bgt.n	801a81a <__kernel_rem_pio2+0x5d2>
 801a740:	46a2      	mov	sl, r4
 801a742:	46ab      	mov	fp, r5
 801a744:	f1bb 0f01 	cmp.w	fp, #1
 801a748:	f300 8086 	bgt.w	801a858 <__kernel_rem_pio2+0x610>
 801a74c:	2000      	movs	r0, #0
 801a74e:	2100      	movs	r1, #0
 801a750:	2d01      	cmp	r5, #1
 801a752:	f300 80a0 	bgt.w	801a896 <__kernel_rem_pio2+0x64e>
 801a756:	9b02      	ldr	r3, [sp, #8]
 801a758:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a75c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801a760:	2b00      	cmp	r3, #0
 801a762:	f040 809e 	bne.w	801a8a2 <__kernel_rem_pio2+0x65a>
 801a766:	9b01      	ldr	r3, [sp, #4]
 801a768:	e9c3 7800 	strd	r7, r8, [r3]
 801a76c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a770:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a774:	e033      	b.n	801a7de <__kernel_rem_pio2+0x596>
 801a776:	3408      	adds	r4, #8
 801a778:	ab4a      	add	r3, sp, #296	; 0x128
 801a77a:	441c      	add	r4, r3
 801a77c:	462e      	mov	r6, r5
 801a77e:	2000      	movs	r0, #0
 801a780:	2100      	movs	r1, #0
 801a782:	2e00      	cmp	r6, #0
 801a784:	da3a      	bge.n	801a7fc <__kernel_rem_pio2+0x5b4>
 801a786:	9b02      	ldr	r3, [sp, #8]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d03d      	beq.n	801a808 <__kernel_rem_pio2+0x5c0>
 801a78c:	4602      	mov	r2, r0
 801a78e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a792:	9c01      	ldr	r4, [sp, #4]
 801a794:	e9c4 2300 	strd	r2, r3, [r4]
 801a798:	4602      	mov	r2, r0
 801a79a:	460b      	mov	r3, r1
 801a79c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801a7a0:	f7e5 fd72 	bl	8000288 <__aeabi_dsub>
 801a7a4:	ae4c      	add	r6, sp, #304	; 0x130
 801a7a6:	2401      	movs	r4, #1
 801a7a8:	42a5      	cmp	r5, r4
 801a7aa:	da30      	bge.n	801a80e <__kernel_rem_pio2+0x5c6>
 801a7ac:	9b02      	ldr	r3, [sp, #8]
 801a7ae:	b113      	cbz	r3, 801a7b6 <__kernel_rem_pio2+0x56e>
 801a7b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a7b4:	4619      	mov	r1, r3
 801a7b6:	9b01      	ldr	r3, [sp, #4]
 801a7b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a7bc:	e00f      	b.n	801a7de <__kernel_rem_pio2+0x596>
 801a7be:	ab9a      	add	r3, sp, #616	; 0x268
 801a7c0:	441c      	add	r4, r3
 801a7c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a7c6:	2000      	movs	r0, #0
 801a7c8:	2100      	movs	r1, #0
 801a7ca:	2d00      	cmp	r5, #0
 801a7cc:	da10      	bge.n	801a7f0 <__kernel_rem_pio2+0x5a8>
 801a7ce:	9b02      	ldr	r3, [sp, #8]
 801a7d0:	b113      	cbz	r3, 801a7d8 <__kernel_rem_pio2+0x590>
 801a7d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a7d6:	4619      	mov	r1, r3
 801a7d8:	9b01      	ldr	r3, [sp, #4]
 801a7da:	e9c3 0100 	strd	r0, r1, [r3]
 801a7de:	9b06      	ldr	r3, [sp, #24]
 801a7e0:	f003 0007 	and.w	r0, r3, #7
 801a7e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801a7e8:	ecbd 8b02 	vpop	{d8}
 801a7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a7f4:	f7e5 fd4a 	bl	800028c <__adddf3>
 801a7f8:	3d01      	subs	r5, #1
 801a7fa:	e7e6      	b.n	801a7ca <__kernel_rem_pio2+0x582>
 801a7fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a800:	f7e5 fd44 	bl	800028c <__adddf3>
 801a804:	3e01      	subs	r6, #1
 801a806:	e7bc      	b.n	801a782 <__kernel_rem_pio2+0x53a>
 801a808:	4602      	mov	r2, r0
 801a80a:	460b      	mov	r3, r1
 801a80c:	e7c1      	b.n	801a792 <__kernel_rem_pio2+0x54a>
 801a80e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a812:	f7e5 fd3b 	bl	800028c <__adddf3>
 801a816:	3401      	adds	r4, #1
 801a818:	e7c6      	b.n	801a7a8 <__kernel_rem_pio2+0x560>
 801a81a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801a81e:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a822:	4640      	mov	r0, r8
 801a824:	ec53 2b17 	vmov	r2, r3, d7
 801a828:	4649      	mov	r1, r9
 801a82a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a82e:	f7e5 fd2d 	bl	800028c <__adddf3>
 801a832:	4602      	mov	r2, r0
 801a834:	460b      	mov	r3, r1
 801a836:	4606      	mov	r6, r0
 801a838:	460f      	mov	r7, r1
 801a83a:	4640      	mov	r0, r8
 801a83c:	4649      	mov	r1, r9
 801a83e:	f7e5 fd23 	bl	8000288 <__aeabi_dsub>
 801a842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a846:	f7e5 fd21 	bl	800028c <__adddf3>
 801a84a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a84e:	e9ca 0100 	strd	r0, r1, [sl]
 801a852:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801a856:	e770      	b.n	801a73a <__kernel_rem_pio2+0x4f2>
 801a858:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801a85c:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a860:	4630      	mov	r0, r6
 801a862:	ec53 2b17 	vmov	r2, r3, d7
 801a866:	4639      	mov	r1, r7
 801a868:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a86c:	f7e5 fd0e 	bl	800028c <__adddf3>
 801a870:	4602      	mov	r2, r0
 801a872:	460b      	mov	r3, r1
 801a874:	4680      	mov	r8, r0
 801a876:	4689      	mov	r9, r1
 801a878:	4630      	mov	r0, r6
 801a87a:	4639      	mov	r1, r7
 801a87c:	f7e5 fd04 	bl	8000288 <__aeabi_dsub>
 801a880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a884:	f7e5 fd02 	bl	800028c <__adddf3>
 801a888:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a88c:	e9ca 0100 	strd	r0, r1, [sl]
 801a890:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801a894:	e756      	b.n	801a744 <__kernel_rem_pio2+0x4fc>
 801a896:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a89a:	f7e5 fcf7 	bl	800028c <__adddf3>
 801a89e:	3d01      	subs	r5, #1
 801a8a0:	e756      	b.n	801a750 <__kernel_rem_pio2+0x508>
 801a8a2:	9b01      	ldr	r3, [sp, #4]
 801a8a4:	9a01      	ldr	r2, [sp, #4]
 801a8a6:	601f      	str	r7, [r3, #0]
 801a8a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801a8ac:	605c      	str	r4, [r3, #4]
 801a8ae:	609d      	str	r5, [r3, #8]
 801a8b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a8b4:	60d3      	str	r3, [r2, #12]
 801a8b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a8ba:	6110      	str	r0, [r2, #16]
 801a8bc:	6153      	str	r3, [r2, #20]
 801a8be:	e78e      	b.n	801a7de <__kernel_rem_pio2+0x596>
 801a8c0:	41700000 	.word	0x41700000
 801a8c4:	3e700000 	.word	0x3e700000

0801a8c8 <__kernel_sin>:
 801a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8cc:	ec55 4b10 	vmov	r4, r5, d0
 801a8d0:	b085      	sub	sp, #20
 801a8d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a8d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a8da:	ed8d 1b00 	vstr	d1, [sp]
 801a8de:	9002      	str	r0, [sp, #8]
 801a8e0:	da06      	bge.n	801a8f0 <__kernel_sin+0x28>
 801a8e2:	ee10 0a10 	vmov	r0, s0
 801a8e6:	4629      	mov	r1, r5
 801a8e8:	f7e6 f936 	bl	8000b58 <__aeabi_d2iz>
 801a8ec:	2800      	cmp	r0, #0
 801a8ee:	d051      	beq.n	801a994 <__kernel_sin+0xcc>
 801a8f0:	4622      	mov	r2, r4
 801a8f2:	462b      	mov	r3, r5
 801a8f4:	4620      	mov	r0, r4
 801a8f6:	4629      	mov	r1, r5
 801a8f8:	f7e5 fe7e 	bl	80005f8 <__aeabi_dmul>
 801a8fc:	4682      	mov	sl, r0
 801a8fe:	468b      	mov	fp, r1
 801a900:	4602      	mov	r2, r0
 801a902:	460b      	mov	r3, r1
 801a904:	4620      	mov	r0, r4
 801a906:	4629      	mov	r1, r5
 801a908:	f7e5 fe76 	bl	80005f8 <__aeabi_dmul>
 801a90c:	a341      	add	r3, pc, #260	; (adr r3, 801aa14 <__kernel_sin+0x14c>)
 801a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a912:	4680      	mov	r8, r0
 801a914:	4689      	mov	r9, r1
 801a916:	4650      	mov	r0, sl
 801a918:	4659      	mov	r1, fp
 801a91a:	f7e5 fe6d 	bl	80005f8 <__aeabi_dmul>
 801a91e:	a33f      	add	r3, pc, #252	; (adr r3, 801aa1c <__kernel_sin+0x154>)
 801a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a924:	f7e5 fcb0 	bl	8000288 <__aeabi_dsub>
 801a928:	4652      	mov	r2, sl
 801a92a:	465b      	mov	r3, fp
 801a92c:	f7e5 fe64 	bl	80005f8 <__aeabi_dmul>
 801a930:	a33c      	add	r3, pc, #240	; (adr r3, 801aa24 <__kernel_sin+0x15c>)
 801a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a936:	f7e5 fca9 	bl	800028c <__adddf3>
 801a93a:	4652      	mov	r2, sl
 801a93c:	465b      	mov	r3, fp
 801a93e:	f7e5 fe5b 	bl	80005f8 <__aeabi_dmul>
 801a942:	a33a      	add	r3, pc, #232	; (adr r3, 801aa2c <__kernel_sin+0x164>)
 801a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a948:	f7e5 fc9e 	bl	8000288 <__aeabi_dsub>
 801a94c:	4652      	mov	r2, sl
 801a94e:	465b      	mov	r3, fp
 801a950:	f7e5 fe52 	bl	80005f8 <__aeabi_dmul>
 801a954:	a337      	add	r3, pc, #220	; (adr r3, 801aa34 <__kernel_sin+0x16c>)
 801a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a95a:	f7e5 fc97 	bl	800028c <__adddf3>
 801a95e:	9b02      	ldr	r3, [sp, #8]
 801a960:	4606      	mov	r6, r0
 801a962:	460f      	mov	r7, r1
 801a964:	b9db      	cbnz	r3, 801a99e <__kernel_sin+0xd6>
 801a966:	4602      	mov	r2, r0
 801a968:	460b      	mov	r3, r1
 801a96a:	4650      	mov	r0, sl
 801a96c:	4659      	mov	r1, fp
 801a96e:	f7e5 fe43 	bl	80005f8 <__aeabi_dmul>
 801a972:	a325      	add	r3, pc, #148	; (adr r3, 801aa08 <__kernel_sin+0x140>)
 801a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a978:	f7e5 fc86 	bl	8000288 <__aeabi_dsub>
 801a97c:	4642      	mov	r2, r8
 801a97e:	464b      	mov	r3, r9
 801a980:	f7e5 fe3a 	bl	80005f8 <__aeabi_dmul>
 801a984:	4602      	mov	r2, r0
 801a986:	460b      	mov	r3, r1
 801a988:	4620      	mov	r0, r4
 801a98a:	4629      	mov	r1, r5
 801a98c:	f7e5 fc7e 	bl	800028c <__adddf3>
 801a990:	4604      	mov	r4, r0
 801a992:	460d      	mov	r5, r1
 801a994:	ec45 4b10 	vmov	d0, r4, r5
 801a998:	b005      	add	sp, #20
 801a99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a99e:	2200      	movs	r2, #0
 801a9a0:	4b1b      	ldr	r3, [pc, #108]	; (801aa10 <__kernel_sin+0x148>)
 801a9a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a9a6:	f7e5 fe27 	bl	80005f8 <__aeabi_dmul>
 801a9aa:	4632      	mov	r2, r6
 801a9ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a9b0:	463b      	mov	r3, r7
 801a9b2:	4640      	mov	r0, r8
 801a9b4:	4649      	mov	r1, r9
 801a9b6:	f7e5 fe1f 	bl	80005f8 <__aeabi_dmul>
 801a9ba:	4602      	mov	r2, r0
 801a9bc:	460b      	mov	r3, r1
 801a9be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a9c2:	f7e5 fc61 	bl	8000288 <__aeabi_dsub>
 801a9c6:	4652      	mov	r2, sl
 801a9c8:	465b      	mov	r3, fp
 801a9ca:	f7e5 fe15 	bl	80005f8 <__aeabi_dmul>
 801a9ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a9d2:	f7e5 fc59 	bl	8000288 <__aeabi_dsub>
 801a9d6:	a30c      	add	r3, pc, #48	; (adr r3, 801aa08 <__kernel_sin+0x140>)
 801a9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9dc:	4606      	mov	r6, r0
 801a9de:	460f      	mov	r7, r1
 801a9e0:	4640      	mov	r0, r8
 801a9e2:	4649      	mov	r1, r9
 801a9e4:	f7e5 fe08 	bl	80005f8 <__aeabi_dmul>
 801a9e8:	4602      	mov	r2, r0
 801a9ea:	460b      	mov	r3, r1
 801a9ec:	4630      	mov	r0, r6
 801a9ee:	4639      	mov	r1, r7
 801a9f0:	f7e5 fc4c 	bl	800028c <__adddf3>
 801a9f4:	4602      	mov	r2, r0
 801a9f6:	460b      	mov	r3, r1
 801a9f8:	4620      	mov	r0, r4
 801a9fa:	4629      	mov	r1, r5
 801a9fc:	f7e5 fc44 	bl	8000288 <__aeabi_dsub>
 801aa00:	e7c6      	b.n	801a990 <__kernel_sin+0xc8>
 801aa02:	bf00      	nop
 801aa04:	f3af 8000 	nop.w
 801aa08:	55555549 	.word	0x55555549
 801aa0c:	3fc55555 	.word	0x3fc55555
 801aa10:	3fe00000 	.word	0x3fe00000
 801aa14:	5acfd57c 	.word	0x5acfd57c
 801aa18:	3de5d93a 	.word	0x3de5d93a
 801aa1c:	8a2b9ceb 	.word	0x8a2b9ceb
 801aa20:	3e5ae5e6 	.word	0x3e5ae5e6
 801aa24:	57b1fe7d 	.word	0x57b1fe7d
 801aa28:	3ec71de3 	.word	0x3ec71de3
 801aa2c:	19c161d5 	.word	0x19c161d5
 801aa30:	3f2a01a0 	.word	0x3f2a01a0
 801aa34:	1110f8a6 	.word	0x1110f8a6
 801aa38:	3f811111 	.word	0x3f811111
 801aa3c:	00000000 	.word	0x00000000

0801aa40 <atan>:
 801aa40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa44:	ec55 4b10 	vmov	r4, r5, d0
 801aa48:	4bc3      	ldr	r3, [pc, #780]	; (801ad58 <atan+0x318>)
 801aa4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801aa4e:	429e      	cmp	r6, r3
 801aa50:	46ab      	mov	fp, r5
 801aa52:	dd18      	ble.n	801aa86 <atan+0x46>
 801aa54:	4bc1      	ldr	r3, [pc, #772]	; (801ad5c <atan+0x31c>)
 801aa56:	429e      	cmp	r6, r3
 801aa58:	dc01      	bgt.n	801aa5e <atan+0x1e>
 801aa5a:	d109      	bne.n	801aa70 <atan+0x30>
 801aa5c:	b144      	cbz	r4, 801aa70 <atan+0x30>
 801aa5e:	4622      	mov	r2, r4
 801aa60:	462b      	mov	r3, r5
 801aa62:	4620      	mov	r0, r4
 801aa64:	4629      	mov	r1, r5
 801aa66:	f7e5 fc11 	bl	800028c <__adddf3>
 801aa6a:	4604      	mov	r4, r0
 801aa6c:	460d      	mov	r5, r1
 801aa6e:	e006      	b.n	801aa7e <atan+0x3e>
 801aa70:	f1bb 0f00 	cmp.w	fp, #0
 801aa74:	f340 8131 	ble.w	801acda <atan+0x29a>
 801aa78:	a59b      	add	r5, pc, #620	; (adr r5, 801ace8 <atan+0x2a8>)
 801aa7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801aa7e:	ec45 4b10 	vmov	d0, r4, r5
 801aa82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa86:	4bb6      	ldr	r3, [pc, #728]	; (801ad60 <atan+0x320>)
 801aa88:	429e      	cmp	r6, r3
 801aa8a:	dc14      	bgt.n	801aab6 <atan+0x76>
 801aa8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801aa90:	429e      	cmp	r6, r3
 801aa92:	dc0d      	bgt.n	801aab0 <atan+0x70>
 801aa94:	a396      	add	r3, pc, #600	; (adr r3, 801acf0 <atan+0x2b0>)
 801aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa9a:	ee10 0a10 	vmov	r0, s0
 801aa9e:	4629      	mov	r1, r5
 801aaa0:	f7e5 fbf4 	bl	800028c <__adddf3>
 801aaa4:	2200      	movs	r2, #0
 801aaa6:	4baf      	ldr	r3, [pc, #700]	; (801ad64 <atan+0x324>)
 801aaa8:	f7e6 f836 	bl	8000b18 <__aeabi_dcmpgt>
 801aaac:	2800      	cmp	r0, #0
 801aaae:	d1e6      	bne.n	801aa7e <atan+0x3e>
 801aab0:	f04f 3aff 	mov.w	sl, #4294967295
 801aab4:	e02b      	b.n	801ab0e <atan+0xce>
 801aab6:	f000 f963 	bl	801ad80 <fabs>
 801aaba:	4bab      	ldr	r3, [pc, #684]	; (801ad68 <atan+0x328>)
 801aabc:	429e      	cmp	r6, r3
 801aabe:	ec55 4b10 	vmov	r4, r5, d0
 801aac2:	f300 80bf 	bgt.w	801ac44 <atan+0x204>
 801aac6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801aaca:	429e      	cmp	r6, r3
 801aacc:	f300 80a0 	bgt.w	801ac10 <atan+0x1d0>
 801aad0:	ee10 2a10 	vmov	r2, s0
 801aad4:	ee10 0a10 	vmov	r0, s0
 801aad8:	462b      	mov	r3, r5
 801aada:	4629      	mov	r1, r5
 801aadc:	f7e5 fbd6 	bl	800028c <__adddf3>
 801aae0:	2200      	movs	r2, #0
 801aae2:	4ba0      	ldr	r3, [pc, #640]	; (801ad64 <atan+0x324>)
 801aae4:	f7e5 fbd0 	bl	8000288 <__aeabi_dsub>
 801aae8:	2200      	movs	r2, #0
 801aaea:	4606      	mov	r6, r0
 801aaec:	460f      	mov	r7, r1
 801aaee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801aaf2:	4620      	mov	r0, r4
 801aaf4:	4629      	mov	r1, r5
 801aaf6:	f7e5 fbc9 	bl	800028c <__adddf3>
 801aafa:	4602      	mov	r2, r0
 801aafc:	460b      	mov	r3, r1
 801aafe:	4630      	mov	r0, r6
 801ab00:	4639      	mov	r1, r7
 801ab02:	f7e5 fea3 	bl	800084c <__aeabi_ddiv>
 801ab06:	f04f 0a00 	mov.w	sl, #0
 801ab0a:	4604      	mov	r4, r0
 801ab0c:	460d      	mov	r5, r1
 801ab0e:	4622      	mov	r2, r4
 801ab10:	462b      	mov	r3, r5
 801ab12:	4620      	mov	r0, r4
 801ab14:	4629      	mov	r1, r5
 801ab16:	f7e5 fd6f 	bl	80005f8 <__aeabi_dmul>
 801ab1a:	4602      	mov	r2, r0
 801ab1c:	460b      	mov	r3, r1
 801ab1e:	4680      	mov	r8, r0
 801ab20:	4689      	mov	r9, r1
 801ab22:	f7e5 fd69 	bl	80005f8 <__aeabi_dmul>
 801ab26:	a374      	add	r3, pc, #464	; (adr r3, 801acf8 <atan+0x2b8>)
 801ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab2c:	4606      	mov	r6, r0
 801ab2e:	460f      	mov	r7, r1
 801ab30:	f7e5 fd62 	bl	80005f8 <__aeabi_dmul>
 801ab34:	a372      	add	r3, pc, #456	; (adr r3, 801ad00 <atan+0x2c0>)
 801ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab3a:	f7e5 fba7 	bl	800028c <__adddf3>
 801ab3e:	4632      	mov	r2, r6
 801ab40:	463b      	mov	r3, r7
 801ab42:	f7e5 fd59 	bl	80005f8 <__aeabi_dmul>
 801ab46:	a370      	add	r3, pc, #448	; (adr r3, 801ad08 <atan+0x2c8>)
 801ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab4c:	f7e5 fb9e 	bl	800028c <__adddf3>
 801ab50:	4632      	mov	r2, r6
 801ab52:	463b      	mov	r3, r7
 801ab54:	f7e5 fd50 	bl	80005f8 <__aeabi_dmul>
 801ab58:	a36d      	add	r3, pc, #436	; (adr r3, 801ad10 <atan+0x2d0>)
 801ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab5e:	f7e5 fb95 	bl	800028c <__adddf3>
 801ab62:	4632      	mov	r2, r6
 801ab64:	463b      	mov	r3, r7
 801ab66:	f7e5 fd47 	bl	80005f8 <__aeabi_dmul>
 801ab6a:	a36b      	add	r3, pc, #428	; (adr r3, 801ad18 <atan+0x2d8>)
 801ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab70:	f7e5 fb8c 	bl	800028c <__adddf3>
 801ab74:	4632      	mov	r2, r6
 801ab76:	463b      	mov	r3, r7
 801ab78:	f7e5 fd3e 	bl	80005f8 <__aeabi_dmul>
 801ab7c:	a368      	add	r3, pc, #416	; (adr r3, 801ad20 <atan+0x2e0>)
 801ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab82:	f7e5 fb83 	bl	800028c <__adddf3>
 801ab86:	4642      	mov	r2, r8
 801ab88:	464b      	mov	r3, r9
 801ab8a:	f7e5 fd35 	bl	80005f8 <__aeabi_dmul>
 801ab8e:	a366      	add	r3, pc, #408	; (adr r3, 801ad28 <atan+0x2e8>)
 801ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab94:	4680      	mov	r8, r0
 801ab96:	4689      	mov	r9, r1
 801ab98:	4630      	mov	r0, r6
 801ab9a:	4639      	mov	r1, r7
 801ab9c:	f7e5 fd2c 	bl	80005f8 <__aeabi_dmul>
 801aba0:	a363      	add	r3, pc, #396	; (adr r3, 801ad30 <atan+0x2f0>)
 801aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba6:	f7e5 fb6f 	bl	8000288 <__aeabi_dsub>
 801abaa:	4632      	mov	r2, r6
 801abac:	463b      	mov	r3, r7
 801abae:	f7e5 fd23 	bl	80005f8 <__aeabi_dmul>
 801abb2:	a361      	add	r3, pc, #388	; (adr r3, 801ad38 <atan+0x2f8>)
 801abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abb8:	f7e5 fb66 	bl	8000288 <__aeabi_dsub>
 801abbc:	4632      	mov	r2, r6
 801abbe:	463b      	mov	r3, r7
 801abc0:	f7e5 fd1a 	bl	80005f8 <__aeabi_dmul>
 801abc4:	a35e      	add	r3, pc, #376	; (adr r3, 801ad40 <atan+0x300>)
 801abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abca:	f7e5 fb5d 	bl	8000288 <__aeabi_dsub>
 801abce:	4632      	mov	r2, r6
 801abd0:	463b      	mov	r3, r7
 801abd2:	f7e5 fd11 	bl	80005f8 <__aeabi_dmul>
 801abd6:	a35c      	add	r3, pc, #368	; (adr r3, 801ad48 <atan+0x308>)
 801abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abdc:	f7e5 fb54 	bl	8000288 <__aeabi_dsub>
 801abe0:	4632      	mov	r2, r6
 801abe2:	463b      	mov	r3, r7
 801abe4:	f7e5 fd08 	bl	80005f8 <__aeabi_dmul>
 801abe8:	4602      	mov	r2, r0
 801abea:	460b      	mov	r3, r1
 801abec:	4640      	mov	r0, r8
 801abee:	4649      	mov	r1, r9
 801abf0:	f7e5 fb4c 	bl	800028c <__adddf3>
 801abf4:	4622      	mov	r2, r4
 801abf6:	462b      	mov	r3, r5
 801abf8:	f7e5 fcfe 	bl	80005f8 <__aeabi_dmul>
 801abfc:	f1ba 3fff 	cmp.w	sl, #4294967295
 801ac00:	4602      	mov	r2, r0
 801ac02:	460b      	mov	r3, r1
 801ac04:	d14b      	bne.n	801ac9e <atan+0x25e>
 801ac06:	4620      	mov	r0, r4
 801ac08:	4629      	mov	r1, r5
 801ac0a:	f7e5 fb3d 	bl	8000288 <__aeabi_dsub>
 801ac0e:	e72c      	b.n	801aa6a <atan+0x2a>
 801ac10:	ee10 0a10 	vmov	r0, s0
 801ac14:	2200      	movs	r2, #0
 801ac16:	4b53      	ldr	r3, [pc, #332]	; (801ad64 <atan+0x324>)
 801ac18:	4629      	mov	r1, r5
 801ac1a:	f7e5 fb35 	bl	8000288 <__aeabi_dsub>
 801ac1e:	2200      	movs	r2, #0
 801ac20:	4606      	mov	r6, r0
 801ac22:	460f      	mov	r7, r1
 801ac24:	4b4f      	ldr	r3, [pc, #316]	; (801ad64 <atan+0x324>)
 801ac26:	4620      	mov	r0, r4
 801ac28:	4629      	mov	r1, r5
 801ac2a:	f7e5 fb2f 	bl	800028c <__adddf3>
 801ac2e:	4602      	mov	r2, r0
 801ac30:	460b      	mov	r3, r1
 801ac32:	4630      	mov	r0, r6
 801ac34:	4639      	mov	r1, r7
 801ac36:	f7e5 fe09 	bl	800084c <__aeabi_ddiv>
 801ac3a:	f04f 0a01 	mov.w	sl, #1
 801ac3e:	4604      	mov	r4, r0
 801ac40:	460d      	mov	r5, r1
 801ac42:	e764      	b.n	801ab0e <atan+0xce>
 801ac44:	4b49      	ldr	r3, [pc, #292]	; (801ad6c <atan+0x32c>)
 801ac46:	429e      	cmp	r6, r3
 801ac48:	dc1d      	bgt.n	801ac86 <atan+0x246>
 801ac4a:	ee10 0a10 	vmov	r0, s0
 801ac4e:	2200      	movs	r2, #0
 801ac50:	4b47      	ldr	r3, [pc, #284]	; (801ad70 <atan+0x330>)
 801ac52:	4629      	mov	r1, r5
 801ac54:	f7e5 fb18 	bl	8000288 <__aeabi_dsub>
 801ac58:	2200      	movs	r2, #0
 801ac5a:	4606      	mov	r6, r0
 801ac5c:	460f      	mov	r7, r1
 801ac5e:	4b44      	ldr	r3, [pc, #272]	; (801ad70 <atan+0x330>)
 801ac60:	4620      	mov	r0, r4
 801ac62:	4629      	mov	r1, r5
 801ac64:	f7e5 fcc8 	bl	80005f8 <__aeabi_dmul>
 801ac68:	2200      	movs	r2, #0
 801ac6a:	4b3e      	ldr	r3, [pc, #248]	; (801ad64 <atan+0x324>)
 801ac6c:	f7e5 fb0e 	bl	800028c <__adddf3>
 801ac70:	4602      	mov	r2, r0
 801ac72:	460b      	mov	r3, r1
 801ac74:	4630      	mov	r0, r6
 801ac76:	4639      	mov	r1, r7
 801ac78:	f7e5 fde8 	bl	800084c <__aeabi_ddiv>
 801ac7c:	f04f 0a02 	mov.w	sl, #2
 801ac80:	4604      	mov	r4, r0
 801ac82:	460d      	mov	r5, r1
 801ac84:	e743      	b.n	801ab0e <atan+0xce>
 801ac86:	462b      	mov	r3, r5
 801ac88:	ee10 2a10 	vmov	r2, s0
 801ac8c:	2000      	movs	r0, #0
 801ac8e:	4939      	ldr	r1, [pc, #228]	; (801ad74 <atan+0x334>)
 801ac90:	f7e5 fddc 	bl	800084c <__aeabi_ddiv>
 801ac94:	f04f 0a03 	mov.w	sl, #3
 801ac98:	4604      	mov	r4, r0
 801ac9a:	460d      	mov	r5, r1
 801ac9c:	e737      	b.n	801ab0e <atan+0xce>
 801ac9e:	4b36      	ldr	r3, [pc, #216]	; (801ad78 <atan+0x338>)
 801aca0:	4e36      	ldr	r6, [pc, #216]	; (801ad7c <atan+0x33c>)
 801aca2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801aca6:	4456      	add	r6, sl
 801aca8:	449a      	add	sl, r3
 801acaa:	e9da 2300 	ldrd	r2, r3, [sl]
 801acae:	f7e5 faeb 	bl	8000288 <__aeabi_dsub>
 801acb2:	4622      	mov	r2, r4
 801acb4:	462b      	mov	r3, r5
 801acb6:	f7e5 fae7 	bl	8000288 <__aeabi_dsub>
 801acba:	4602      	mov	r2, r0
 801acbc:	460b      	mov	r3, r1
 801acbe:	e9d6 0100 	ldrd	r0, r1, [r6]
 801acc2:	f7e5 fae1 	bl	8000288 <__aeabi_dsub>
 801acc6:	f1bb 0f00 	cmp.w	fp, #0
 801acca:	4604      	mov	r4, r0
 801accc:	460d      	mov	r5, r1
 801acce:	f6bf aed6 	bge.w	801aa7e <atan+0x3e>
 801acd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801acd6:	461d      	mov	r5, r3
 801acd8:	e6d1      	b.n	801aa7e <atan+0x3e>
 801acda:	a51d      	add	r5, pc, #116	; (adr r5, 801ad50 <atan+0x310>)
 801acdc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ace0:	e6cd      	b.n	801aa7e <atan+0x3e>
 801ace2:	bf00      	nop
 801ace4:	f3af 8000 	nop.w
 801ace8:	54442d18 	.word	0x54442d18
 801acec:	3ff921fb 	.word	0x3ff921fb
 801acf0:	8800759c 	.word	0x8800759c
 801acf4:	7e37e43c 	.word	0x7e37e43c
 801acf8:	e322da11 	.word	0xe322da11
 801acfc:	3f90ad3a 	.word	0x3f90ad3a
 801ad00:	24760deb 	.word	0x24760deb
 801ad04:	3fa97b4b 	.word	0x3fa97b4b
 801ad08:	a0d03d51 	.word	0xa0d03d51
 801ad0c:	3fb10d66 	.word	0x3fb10d66
 801ad10:	c54c206e 	.word	0xc54c206e
 801ad14:	3fb745cd 	.word	0x3fb745cd
 801ad18:	920083ff 	.word	0x920083ff
 801ad1c:	3fc24924 	.word	0x3fc24924
 801ad20:	5555550d 	.word	0x5555550d
 801ad24:	3fd55555 	.word	0x3fd55555
 801ad28:	2c6a6c2f 	.word	0x2c6a6c2f
 801ad2c:	bfa2b444 	.word	0xbfa2b444
 801ad30:	52defd9a 	.word	0x52defd9a
 801ad34:	3fadde2d 	.word	0x3fadde2d
 801ad38:	af749a6d 	.word	0xaf749a6d
 801ad3c:	3fb3b0f2 	.word	0x3fb3b0f2
 801ad40:	fe231671 	.word	0xfe231671
 801ad44:	3fbc71c6 	.word	0x3fbc71c6
 801ad48:	9998ebc4 	.word	0x9998ebc4
 801ad4c:	3fc99999 	.word	0x3fc99999
 801ad50:	54442d18 	.word	0x54442d18
 801ad54:	bff921fb 	.word	0xbff921fb
 801ad58:	440fffff 	.word	0x440fffff
 801ad5c:	7ff00000 	.word	0x7ff00000
 801ad60:	3fdbffff 	.word	0x3fdbffff
 801ad64:	3ff00000 	.word	0x3ff00000
 801ad68:	3ff2ffff 	.word	0x3ff2ffff
 801ad6c:	40037fff 	.word	0x40037fff
 801ad70:	3ff80000 	.word	0x3ff80000
 801ad74:	bff00000 	.word	0xbff00000
 801ad78:	0801b738 	.word	0x0801b738
 801ad7c:	0801b718 	.word	0x0801b718

0801ad80 <fabs>:
 801ad80:	ec51 0b10 	vmov	r0, r1, d0
 801ad84:	ee10 2a10 	vmov	r2, s0
 801ad88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ad8c:	ec43 2b10 	vmov	d0, r2, r3
 801ad90:	4770      	bx	lr
 801ad92:	0000      	movs	r0, r0
 801ad94:	0000      	movs	r0, r0
	...

0801ad98 <floor>:
 801ad98:	ec51 0b10 	vmov	r0, r1, d0
 801ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ada0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ada4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801ada8:	2e13      	cmp	r6, #19
 801adaa:	460c      	mov	r4, r1
 801adac:	ee10 5a10 	vmov	r5, s0
 801adb0:	4680      	mov	r8, r0
 801adb2:	dc34      	bgt.n	801ae1e <floor+0x86>
 801adb4:	2e00      	cmp	r6, #0
 801adb6:	da16      	bge.n	801ade6 <floor+0x4e>
 801adb8:	a335      	add	r3, pc, #212	; (adr r3, 801ae90 <floor+0xf8>)
 801adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adbe:	f7e5 fa65 	bl	800028c <__adddf3>
 801adc2:	2200      	movs	r2, #0
 801adc4:	2300      	movs	r3, #0
 801adc6:	f7e5 fea7 	bl	8000b18 <__aeabi_dcmpgt>
 801adca:	b148      	cbz	r0, 801ade0 <floor+0x48>
 801adcc:	2c00      	cmp	r4, #0
 801adce:	da59      	bge.n	801ae84 <floor+0xec>
 801add0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801add4:	4a30      	ldr	r2, [pc, #192]	; (801ae98 <floor+0x100>)
 801add6:	432b      	orrs	r3, r5
 801add8:	2500      	movs	r5, #0
 801adda:	42ab      	cmp	r3, r5
 801addc:	bf18      	it	ne
 801adde:	4614      	movne	r4, r2
 801ade0:	4621      	mov	r1, r4
 801ade2:	4628      	mov	r0, r5
 801ade4:	e025      	b.n	801ae32 <floor+0x9a>
 801ade6:	4f2d      	ldr	r7, [pc, #180]	; (801ae9c <floor+0x104>)
 801ade8:	4137      	asrs	r7, r6
 801adea:	ea01 0307 	and.w	r3, r1, r7
 801adee:	4303      	orrs	r3, r0
 801adf0:	d01f      	beq.n	801ae32 <floor+0x9a>
 801adf2:	a327      	add	r3, pc, #156	; (adr r3, 801ae90 <floor+0xf8>)
 801adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adf8:	f7e5 fa48 	bl	800028c <__adddf3>
 801adfc:	2200      	movs	r2, #0
 801adfe:	2300      	movs	r3, #0
 801ae00:	f7e5 fe8a 	bl	8000b18 <__aeabi_dcmpgt>
 801ae04:	2800      	cmp	r0, #0
 801ae06:	d0eb      	beq.n	801ade0 <floor+0x48>
 801ae08:	2c00      	cmp	r4, #0
 801ae0a:	bfbe      	ittt	lt
 801ae0c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ae10:	fa43 f606 	asrlt.w	r6, r3, r6
 801ae14:	19a4      	addlt	r4, r4, r6
 801ae16:	ea24 0407 	bic.w	r4, r4, r7
 801ae1a:	2500      	movs	r5, #0
 801ae1c:	e7e0      	b.n	801ade0 <floor+0x48>
 801ae1e:	2e33      	cmp	r6, #51	; 0x33
 801ae20:	dd0b      	ble.n	801ae3a <floor+0xa2>
 801ae22:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ae26:	d104      	bne.n	801ae32 <floor+0x9a>
 801ae28:	ee10 2a10 	vmov	r2, s0
 801ae2c:	460b      	mov	r3, r1
 801ae2e:	f7e5 fa2d 	bl	800028c <__adddf3>
 801ae32:	ec41 0b10 	vmov	d0, r0, r1
 801ae36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae3a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ae3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ae42:	fa23 f707 	lsr.w	r7, r3, r7
 801ae46:	4207      	tst	r7, r0
 801ae48:	d0f3      	beq.n	801ae32 <floor+0x9a>
 801ae4a:	a311      	add	r3, pc, #68	; (adr r3, 801ae90 <floor+0xf8>)
 801ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae50:	f7e5 fa1c 	bl	800028c <__adddf3>
 801ae54:	2200      	movs	r2, #0
 801ae56:	2300      	movs	r3, #0
 801ae58:	f7e5 fe5e 	bl	8000b18 <__aeabi_dcmpgt>
 801ae5c:	2800      	cmp	r0, #0
 801ae5e:	d0bf      	beq.n	801ade0 <floor+0x48>
 801ae60:	2c00      	cmp	r4, #0
 801ae62:	da02      	bge.n	801ae6a <floor+0xd2>
 801ae64:	2e14      	cmp	r6, #20
 801ae66:	d103      	bne.n	801ae70 <floor+0xd8>
 801ae68:	3401      	adds	r4, #1
 801ae6a:	ea25 0507 	bic.w	r5, r5, r7
 801ae6e:	e7b7      	b.n	801ade0 <floor+0x48>
 801ae70:	2301      	movs	r3, #1
 801ae72:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ae76:	fa03 f606 	lsl.w	r6, r3, r6
 801ae7a:	4435      	add	r5, r6
 801ae7c:	4545      	cmp	r5, r8
 801ae7e:	bf38      	it	cc
 801ae80:	18e4      	addcc	r4, r4, r3
 801ae82:	e7f2      	b.n	801ae6a <floor+0xd2>
 801ae84:	2500      	movs	r5, #0
 801ae86:	462c      	mov	r4, r5
 801ae88:	e7aa      	b.n	801ade0 <floor+0x48>
 801ae8a:	bf00      	nop
 801ae8c:	f3af 8000 	nop.w
 801ae90:	8800759c 	.word	0x8800759c
 801ae94:	7e37e43c 	.word	0x7e37e43c
 801ae98:	bff00000 	.word	0xbff00000
 801ae9c:	000fffff 	.word	0x000fffff

0801aea0 <matherr>:
 801aea0:	2000      	movs	r0, #0
 801aea2:	4770      	bx	lr
 801aea4:	0000      	movs	r0, r0
	...

0801aea8 <scalbn>:
 801aea8:	b570      	push	{r4, r5, r6, lr}
 801aeaa:	ec55 4b10 	vmov	r4, r5, d0
 801aeae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801aeb2:	4606      	mov	r6, r0
 801aeb4:	462b      	mov	r3, r5
 801aeb6:	b9aa      	cbnz	r2, 801aee4 <scalbn+0x3c>
 801aeb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801aebc:	4323      	orrs	r3, r4
 801aebe:	d03b      	beq.n	801af38 <scalbn+0x90>
 801aec0:	4b31      	ldr	r3, [pc, #196]	; (801af88 <scalbn+0xe0>)
 801aec2:	4629      	mov	r1, r5
 801aec4:	2200      	movs	r2, #0
 801aec6:	ee10 0a10 	vmov	r0, s0
 801aeca:	f7e5 fb95 	bl	80005f8 <__aeabi_dmul>
 801aece:	4b2f      	ldr	r3, [pc, #188]	; (801af8c <scalbn+0xe4>)
 801aed0:	429e      	cmp	r6, r3
 801aed2:	4604      	mov	r4, r0
 801aed4:	460d      	mov	r5, r1
 801aed6:	da12      	bge.n	801aefe <scalbn+0x56>
 801aed8:	a327      	add	r3, pc, #156	; (adr r3, 801af78 <scalbn+0xd0>)
 801aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aede:	f7e5 fb8b 	bl	80005f8 <__aeabi_dmul>
 801aee2:	e009      	b.n	801aef8 <scalbn+0x50>
 801aee4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801aee8:	428a      	cmp	r2, r1
 801aeea:	d10c      	bne.n	801af06 <scalbn+0x5e>
 801aeec:	ee10 2a10 	vmov	r2, s0
 801aef0:	4620      	mov	r0, r4
 801aef2:	4629      	mov	r1, r5
 801aef4:	f7e5 f9ca 	bl	800028c <__adddf3>
 801aef8:	4604      	mov	r4, r0
 801aefa:	460d      	mov	r5, r1
 801aefc:	e01c      	b.n	801af38 <scalbn+0x90>
 801aefe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801af02:	460b      	mov	r3, r1
 801af04:	3a36      	subs	r2, #54	; 0x36
 801af06:	4432      	add	r2, r6
 801af08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801af0c:	428a      	cmp	r2, r1
 801af0e:	dd0b      	ble.n	801af28 <scalbn+0x80>
 801af10:	ec45 4b11 	vmov	d1, r4, r5
 801af14:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801af80 <scalbn+0xd8>
 801af18:	f000 f83c 	bl	801af94 <copysign>
 801af1c:	a318      	add	r3, pc, #96	; (adr r3, 801af80 <scalbn+0xd8>)
 801af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af22:	ec51 0b10 	vmov	r0, r1, d0
 801af26:	e7da      	b.n	801aede <scalbn+0x36>
 801af28:	2a00      	cmp	r2, #0
 801af2a:	dd08      	ble.n	801af3e <scalbn+0x96>
 801af2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801af30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801af34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801af38:	ec45 4b10 	vmov	d0, r4, r5
 801af3c:	bd70      	pop	{r4, r5, r6, pc}
 801af3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801af42:	da0d      	bge.n	801af60 <scalbn+0xb8>
 801af44:	f24c 3350 	movw	r3, #50000	; 0xc350
 801af48:	429e      	cmp	r6, r3
 801af4a:	ec45 4b11 	vmov	d1, r4, r5
 801af4e:	dce1      	bgt.n	801af14 <scalbn+0x6c>
 801af50:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801af78 <scalbn+0xd0>
 801af54:	f000 f81e 	bl	801af94 <copysign>
 801af58:	a307      	add	r3, pc, #28	; (adr r3, 801af78 <scalbn+0xd0>)
 801af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af5e:	e7e0      	b.n	801af22 <scalbn+0x7a>
 801af60:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801af64:	3236      	adds	r2, #54	; 0x36
 801af66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801af6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801af6e:	4620      	mov	r0, r4
 801af70:	4629      	mov	r1, r5
 801af72:	2200      	movs	r2, #0
 801af74:	4b06      	ldr	r3, [pc, #24]	; (801af90 <scalbn+0xe8>)
 801af76:	e7b2      	b.n	801aede <scalbn+0x36>
 801af78:	c2f8f359 	.word	0xc2f8f359
 801af7c:	01a56e1f 	.word	0x01a56e1f
 801af80:	8800759c 	.word	0x8800759c
 801af84:	7e37e43c 	.word	0x7e37e43c
 801af88:	43500000 	.word	0x43500000
 801af8c:	ffff3cb0 	.word	0xffff3cb0
 801af90:	3c900000 	.word	0x3c900000

0801af94 <copysign>:
 801af94:	ec51 0b10 	vmov	r0, r1, d0
 801af98:	ee11 0a90 	vmov	r0, s3
 801af9c:	ee10 2a10 	vmov	r2, s0
 801afa0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801afa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801afa8:	ea41 0300 	orr.w	r3, r1, r0
 801afac:	ec43 2b10 	vmov	d0, r2, r3
 801afb0:	4770      	bx	lr
	...

0801afb4 <_init>:
 801afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afb6:	bf00      	nop
 801afb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801afba:	bc08      	pop	{r3}
 801afbc:	469e      	mov	lr, r3
 801afbe:	4770      	bx	lr

0801afc0 <_fini>:
 801afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afc2:	bf00      	nop
 801afc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801afc6:	bc08      	pop	{r3}
 801afc8:	469e      	mov	lr, r3
 801afca:	4770      	bx	lr
